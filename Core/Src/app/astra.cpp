#include <vector>
#include "astra.h"
#include "../astra/demo/logo.h"
#include "tetris.h"

std::vector<uint8_t> pic_0 = {
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,
  0x00,0x80,0xFF,0x01,0x00,0xC0,0xF9,0x03,0x00,0xC0,0xF9,0x03,0x00,0xC0,0xFF,0x03,
  0x00,0xC0,0xFF,0x03,0x00,0xC0,0xFF,0x03,0x10,0xC0,0xFF,0x03,0x30,0xE0,0x1F,0x00,
  0x70,0xF0,0xFF,0x03,0x70,0xFC,0xFF,0x01,0xF0,0xFF,0x07,0x00,0xF0,0xFF,0x3F,0x00,
  0xF0,0xFF,0x3F,0x00,0xE0,0xFF,0x37,0x00,0xE0,0xFF,0x33,0x00,0xC0,0xFF,0x03,0x00,
  0x80,0xFF,0x01,0x00,0x00,0xCE,0x00,0x00,0x00,0xCE,0x00,0x00,0x00,0xCE,0x01,0x00,
  0x00,0xCE,0x01,0x00,0x00,0xCE,0x03,0x00,0x00,0x9E,0x07,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};

std::vector<uint8_t> pic_1 = {
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0xF0,0x81,0x03,
  0x00,0x7E,0x43,0x00,0x80,0xFF,0xE3,0x00,0xC0,0xFF,0xF3,0x01,0xE0,0x7F,0xF0,0x01,
  0xF0,0xE3,0xF3,0x01,0xF8,0x00,0xE0,0x00,0x78,0x00,0x00,0x00,0x7C,0x00,0x00,0x00,
  0xFC,0x00,0x00,0x00,0xFC,0xFF,0x0F,0x00,0xF8,0xFF,0xFF,0x00,0xC0,0xFF,0xFF,0x01,
  0x00,0xFE,0xFF,0x03,0x00,0x00,0xE0,0x07,0x00,0x00,0xC0,0x07,0x00,0x00,0xC0,0x07,
  0x00,0x00,0xC0,0x07,0x00,0x00,0xC0,0x07,0x1C,0x00,0xF0,0x03,0x7C,0x00,0xFE,0x03,
  0xF8,0xFF,0xFF,0x00,0xF0,0xFF,0xFF,0x00,0x80,0xFF,0x3F,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};

std::vector<uint8_t> pic_2 = {
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0xFF,0xFF,0x07,0x08,0x00,0x00,0x04,
  0xE8,0xF7,0xFB,0x05,0xE8,0xF7,0xFB,0x05,0xE8,0xF7,0xFB,0x05,0xE8,0xF7,0xFB,0x05,
  0xE8,0xF7,0xFB,0x05,0xE8,0xF7,0xFB,0x05,0x08,0x00,0x00,0x04,0xFC,0xF7,0xFB,0x07,
  0x04,0xF4,0x0B,0x00,0xF4,0xF5,0x0B,0x00,0xF4,0xF5,0x0B,0x00,0xF4,0xF5,0x0B,0x00,
  0xF4,0xF5,0x0B,0x00,0xF4,0x05,0x08,0x00,0xF4,0xFD,0xFF,0x03,0x04,0x00,0x00,0x02,
  0xF4,0xFB,0xFD,0x02,0xF4,0xFB,0xFD,0x02,0xF4,0xFB,0xFD,0x02,0xF4,0xFB,0xFD,0x02,
  0xF4,0xFB,0xFD,0x02,0xF4,0xFB,0xFD,0x02,0x04,0x00,0x00,0x02,0xFC,0xFF,0xFF,0x03,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};

std::vector<uint8_t> pic_3 = {
  0xFF,0xFF,0xFF,0x3F,0xFF,0xFF,0xFF,0x3F,0xFF,0xFF,0xFF,0x3F,0xFF,0xFF,0xFF,0x3F,
  0xFF,0x1F,0xFE,0x3F,0xFF,0x1F,0xFE,0x3F,0xFF,0x0C,0xCC,0x3F,0x7F,0x00,0x80,0x3F,
  0x3F,0x00,0x00,0x3F,0x3F,0xE0,0x01,0x3F,0x7F,0xF8,0x87,0x3F,0x7F,0xFC,0x8F,0x3F,
  0x3F,0xFC,0x0F,0x3F,0x0F,0x3E,0x1F,0x3C,0x0F,0x1E,0x1E,0x3C,0x0F,0x1E,0x1E,0x3C,
  0x0F,0x3E,0x1F,0x3C,0x3F,0xFC,0x0F,0x3F,0x7F,0xFC,0x8F,0x3F,0x7F,0xF8,0x87,0x3F,
  0x3F,0xE0,0x01,0x3F,0x3F,0x00,0x00,0x3F,0x7F,0x00,0x80,0x3F,0xFF,0x0C,0xCC,0x3F,
  0xFF,0x1F,0xFE,0x3F,0xFF,0x1F,0xFE,0x3F,0xFF,0xFF,0xFF,0x3F,0xFF,0xFF,0xFF,0x3F,
  0xFF,0xFF,0xFF,0x3F,0xFF,0xFF,0xFF,0x3F
};

/*
std::vector<uint8_t> pic_0 = {
    0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xF1, 0x3F,
    0xFF, 0xFF, 0xC3, 0x3F, 0xFF, 0xFF, 0x87, 0x3F, 0xFF, 0xFF, 0x07, 0x3F, 0xFF, 0xFF, 0x0F, 0x3E,
    0xFF, 0xFF, 0x0F, 0x3E, 0xFF, 0xFF, 0x0F, 0x3C, 0xFF, 0xFF, 0x0F, 0x3C, 0xFF, 0xFF, 0x0F, 0x38,
    0xFF, 0xFF, 0x0F, 0x38, 0xFF, 0xFF, 0x0F, 0x38, 0xFF, 0xFF, 0x07, 0x38, 0xFF, 0xFF, 0x07, 0x38,
    0xFF, 0xFF, 0x03, 0x38, 0xF7, 0xFF, 0x01, 0x38, 0xE7, 0xFF, 0x00, 0x3C, 0x87, 0x3F, 0x00, 0x3C,
    0x0F, 0x00, 0x00, 0x3E, 0x0F, 0x00, 0x00, 0x3E, 0x1F, 0x00, 0x00, 0x3F, 0x3F, 0x00, 0x80, 0x3F,
    0x7F, 0x00, 0xC0, 0x3F, 0xFF, 0x01, 0xF0, 0x3F, 0xFF, 0x07, 0xFC, 0x3F, 0xFF, 0xFF, 0xFF, 0x3F,
    0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0x3F
};

std::vector<uint8_t> pic_1 = {
    0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xF9, 0xE7, 0x3F,
    0xFF, 0xF9, 0xE7, 0x3F, 0xFF, 0xF9, 0xE7, 0x3F, 0xFF, 0xF0, 0xE7, 0x3F, 0x7F, 0xE0, 0xE7, 0x3F,
    0x7F, 0xE0, 0xC3, 0x3F, 0x7F, 0xE0, 0xC3, 0x3F, 0x7F, 0xE0, 0xC3, 0x3F, 0x7F, 0xE0, 0xE7, 0x3F,
    0xFF, 0xF0, 0xE7, 0x3F, 0xFF, 0xF9, 0xE7, 0x3F, 0xFF, 0xF9, 0xE7, 0x3F, 0xFF, 0xF9, 0xE7, 0x3F,
    0xFF, 0xF9, 0xE7, 0x3F, 0xFF, 0xF9, 0xC3, 0x3F, 0xFF, 0xF9, 0x81, 0x3F, 0xFF, 0xF0, 0x81, 0x3F,
    0xFF, 0xF0, 0x81, 0x3F, 0xFF, 0xF0, 0x81, 0x3F, 0xFF, 0xF9, 0x81, 0x3F, 0xFF, 0xF9, 0xC3, 0x3F,
    0xFF, 0xF9, 0xE7, 0x3F, 0xFF, 0xF9, 0xE7, 0x3F, 0xFF, 0xF9, 0xE7, 0x3F, 0xFF, 0xFF, 0xFF, 0x3F,
    0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0x3F
};

std::vector<uint8_t> pic_2 = {
    0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0x3F, 0xEF, 0xFF, 0xFF, 0x3F, 0xC7, 0xFF, 0xFF, 0x3F,
    0xC7, 0xF3, 0xFF, 0x3F, 0x83, 0xC0, 0xFF, 0x3F, 0xEF, 0xCC, 0xFF, 0x3F, 0x6F, 0x9E, 0xFF, 0x3F,
    0x6F, 0x9E, 0xFF, 0x3F, 0x2F, 0x3F, 0xFF, 0x3F, 0x2F, 0x3F, 0xFF, 0x3F, 0x8F, 0x7F, 0xFE, 0x3F,
    0x8F, 0x7F, 0xFE, 0x39, 0x8F, 0x7F, 0xFE, 0x39, 0xCF, 0xFF, 0xFC, 0x3C, 0xCF, 0xFF, 0xFC, 0x3C,
    0xEF, 0xFF, 0xFC, 0x3C, 0xEF, 0xFF, 0x79, 0x3E, 0xEF, 0xFF, 0x79, 0x3E, 0xEF, 0xFF, 0x33, 0x3F,
    0xEF, 0xFF, 0x33, 0x3F, 0xEF, 0xFF, 0x87, 0x3F, 0xEF, 0xFF, 0xCF, 0x3F, 0xEF, 0xFF, 0x7F, 0x3E,
    0xEF, 0xFF, 0x7F, 0x38, 0x0F, 0x00, 0x00, 0x30, 0xFF, 0xFF, 0x7F, 0x38, 0xFF, 0xFF, 0x7F, 0x3E,
    0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0x3F
};

std::vector<uint8_t> pic_3 = {
    0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0x3F,
    0xFF, 0x1F, 0xFE, 0x3F, 0xFF, 0x1F, 0xFE, 0x3F, 0xFF, 0x0C, 0xCC, 0x3F, 0x7F, 0x00, 0x80, 0x3F,
    0x3F, 0x00, 0x00, 0x3F, 0x3F, 0xE0, 0x01, 0x3F, 0x7F, 0xF8, 0x87, 0x3F, 0x7F, 0xFC, 0x8F, 0x3F,
    0x3F, 0xFC, 0x0F, 0x3F, 0x0F, 0x3E, 0x1F, 0x3C, 0x0F, 0x1E, 0x1E, 0x3C, 0x0F, 0x1E, 0x1E, 0x3C,
    0x0F, 0x3E, 0x1F, 0x3C, 0x3F, 0xFC, 0x0F, 0x3F, 0x7F, 0xFC, 0x8F, 0x3F, 0x7F, 0xF8, 0x87, 0x3F,
    0x3F, 0xE0, 0x01, 0x3F, 0x3F, 0x00, 0x00, 0x3F, 0x7F, 0x00, 0x80, 0x3F, 0xFF, 0x0C, 0xCC, 0x3F,
    0xFF, 0x1F, 0xFE, 0x3F, 0xFF, 0x1F, 0xFE, 0x3F, 0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0x3F,
    0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0x3F
};*/

auto *astraLauncher = new astra::Launcher();
auto *rootPage = new astra::Tile("root");

bool test = false;
unsigned char testIndex = 0;
unsigned char testSlider = 60;

auto *secondPage = new astra::List("关于", pic_3);

void astraCoreInit(void) {
  HAL::inject(new MixinHAL);

  HAL::delay(350);
  astra::drawLogo(200);

  rootPage->addItem(new astra::List("Dino Run", pic_0));
  rootPage->addItem(new astra::List("Snake", pic_1));
  rootPage->addItem(new astra::List("Tetris", pic_2));
  rootPage->addItem(secondPage);

  secondPage->addItem(new astra::List("项目：With AstraUI"));
  secondPage->addItem(new astra::Tile("Supported Games:"));
  secondPage->addItem(new astra::Tile("Chrome Dino Run"), new astra::CheckBox(test));
  secondPage->addItem(new astra::List("Snake"), new astra::PopUp(1, "测试", {"测试"}, testIndex));
  secondPage->addItem(new astra::List("Tetris"), new astra::Slider("测试", 0, 100, 50, testSlider));
  secondPage->addItem(new astra::List("auto-fill item"));
  secondPage->addItem(new astra::List("pseudo-text"));
  secondPage->addItem(new astra::List("padding"));

  astraLauncher->init(rootPage);
}

void astraCoreUpdate(void) {
  astraLauncher->update();
  HAL::keyScan();

  if (*HAL::getKeyFlag() == key::KEY_PRESSED) {
    *HAL::getKeyFlag() = key::KEY_NOT_PRESSED;
    for (unsigned char i = 0; i < key::KEY_NUM; i++) {
      if (HAL::getKeyMap()[i] == key::CLICK) {
	if (i == 0) { astraLauncher->getSelector()->goPreview(); }//selector去到上一个项目
	else if (i == 1) { astraLauncher->getSelector()->goNext(); }//selector去到下一个项目
	else if (i == 2) {
	  if (astraLauncher->open()) {
	    if (astraLauncher->currentMenu->getNextMenu()->title == "Tetris")
	      astraLauncher->notice("Score: "+std::to_string(main4Tetris()), 600);
	  }
	}//打开当前项目
      } else if (HAL::getKeyMap()[i] == key::PRESS) {
      if (i == 0) { astraLauncher->close(); }//退出当前项目
      }
    }
    std::fill(HAL::getKeyMap(), HAL::getKeyMap() + key::KEY_NUM, key::INVALID);
    *HAL::getKeyFlag() = key::KEY_NOT_PRESSED;
  }
}

void astraCoreDestroy(void) {
  HAL::destroy();
  delete astraLauncher;
}
