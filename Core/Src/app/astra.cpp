#include <vector>
#include "astra.h"
#include "../astra/demo/logo.h"
#include "tetris.h"

std::vector<uint8_t> dino_icon = {
  0xF0, 0xFF, 0xFF, 0xC3, 0xFC, 0xFF, 0xFF, 0xCF, 0xFE, 0xFF, 0xFF, 0xDF, 0xFE, 0xFF, 0x00, 0xDF,
  0xFF, 0x7F, 0x00, 0xFE, 0xFF, 0x3F, 0x02, 0xFE, 0xFF, 0x3F, 0x00, 0xFE, 0xFF, 0x3F, 0x00, 0xFE,
  0xFF, 0x3F, 0x00, 0xFE, 0xFF, 0x3F, 0x00, 0xFE, 0xFF, 0x3F, 0xF0, 0xFF, 0xFF, 0x3F, 0x80, 0xFF,
  0xFF, 0x3F, 0xF8, 0xFF, 0xEF, 0x1F, 0xF8, 0xFF, 0xEF, 0x0F, 0xE0, 0xFF, 0xCF, 0x03, 0xE8, 0xFF,
  0x8F, 0x01, 0xF8, 0xFF, 0x0F, 0x00, 0xF8, 0xFF, 0x0F, 0x00, 0xF8, 0xFF, 0x1F, 0x00, 0xFC, 0xFF,
  0x3F, 0x00, 0xFE, 0xFF, 0x7F, 0x00, 0xFF, 0xFF, 0x7F, 0x00, 0xFF, 0xFF, 0xFF, 0x23, 0xFF, 0xFF,
  0xFF, 0x73, 0xFF, 0xFF, 0xFF, 0x7B, 0xFF, 0xFF, 0xFE, 0x73, 0xFE, 0xDF, 0xFE, 0xFF, 0xFF, 0xDF,
  0xFC, 0xFF, 0xFF, 0xCF, 0xF0, 0xFF, 0xFF, 0xC3
};

std::vector<uint8_t> snake_icon = {
  0xF0, 0xFF, 0xFF, 0xC3, 0xFC, 0xFF, 0xFF, 0xCF, 0xFE, 0xFF, 0xFF, 0xDF, 0xFE, 0xFF, 0xFF, 0xDF,
  0xFF, 0x8F, 0xF8, 0xFF, 0xFF, 0x67, 0xF3, 0xFF, 0xFF, 0xF3, 0xE7, 0xFF, 0xFF, 0x9B, 0xF3, 0xFF,
  0xFF, 0x3B, 0xE3, 0xFF, 0xFF, 0x9B, 0x9E, 0xFF, 0xFF, 0xF3, 0x7F, 0xFF, 0xFF, 0xF3, 0x3F, 0xFF,
  0xFF, 0x67, 0x9E, 0xFF, 0xFF, 0xCF, 0xC0, 0xFF, 0xFF, 0xCF, 0xE1, 0xFD, 0xFF, 0x83, 0xED, 0xFC,
  0x7F, 0x8C, 0xF7, 0xFA, 0x3F, 0xC7, 0x47, 0xFB, 0x3F, 0xFF, 0x37, 0xFB, 0x0F, 0xFE, 0x73, 0xFA,
  0x67, 0x00, 0xF8, 0xF8, 0xE7, 0x03, 0xFC, 0xFC, 0xE7, 0xFF, 0xFF, 0xFC, 0x8F, 0xFF, 0x3F, 0xFE,
  0x1F, 0xFE, 0x0F, 0xFF, 0x7F, 0x00, 0xC0, 0xFF, 0xFE, 0x03, 0xF8, 0xDF, 0xFE, 0xFF, 0xFF, 0xDF,
  0xFC, 0xFF, 0xFF, 0xCF, 0xF0, 0xFF, 0xFF, 0xC3
};

std::vector<uint8_t> tetris_icon = {
  0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0xC0,
  0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0xC0, 0xF8, 0xFF, 0xFF, 0xC7,
  0xFC, 0xFF, 0xFF, 0xCF, 0x0C, 0x0C, 0x1C, 0xCE, 0x0C, 0x0C, 0x2C, 0xCD, 0x0C, 0x0C, 0xCC, 0xCC,
  0x0C, 0x0C, 0xCC, 0xCC, 0x0C, 0x0C, 0x2C, 0xCD, 0x0C, 0x0C, 0x1C, 0xCE, 0xFC, 0xFF, 0xFF, 0xCF,
  0xF8, 0xFF, 0xFF, 0xC7, 0x00, 0x0C, 0x0C, 0xC0, 0x00, 0x0C, 0x0C, 0xC0, 0x00, 0x0C, 0x0C, 0xC0,
  0x00, 0x0C, 0x0C, 0xC0, 0x00, 0x0C, 0x0C, 0xC0, 0x00, 0x0C, 0x0C, 0xC0, 0x00, 0xFC, 0x0F, 0xC0,
  0x00, 0xF8, 0x07, 0xC0, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0xC0,
  0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0xC0
};

std::vector<uint8_t> gear_icon = {
  0xF0, 0xFF, 0xFF, 0xC3, 0xFC, 0xFF, 0xFF, 0xCF, 0xFE, 0xFF, 0xFF, 0xDF, 0xFE, 0xFF, 0xFF, 0x3F,
  0xFF, 0x1F, 0xFE, 0x3F, 0xFF, 0x1F, 0xFE, 0x3F, 0xFF, 0x0C, 0xCC, 0x3F, 0x7F, 0x00, 0x80, 0x3F,
  0x3F, 0x00, 0x00, 0x3F, 0x3F, 0xE0, 0x01, 0x3F, 0x7F, 0xF8, 0x87, 0x3F, 0x7F, 0xFC, 0x8F, 0x3F,
  0x3F, 0xFC, 0x0F, 0x3F, 0x0F, 0x3E, 0x1F, 0x3C, 0x0F, 0x1E, 0x1E, 0x3C, 0x0F, 0x1E, 0x1E, 0x3C,
  0x0F, 0x3E, 0x1F, 0x3C, 0x3F, 0xFC, 0x0F, 0x3F, 0x7F, 0xFC, 0x8F, 0x3F, 0x7F, 0xF8, 0x87, 0x3F,
  0x3F, 0xE0, 0x01, 0x3F, 0x3F, 0x00, 0x00, 0x3F, 0x7F, 0x00, 0x80, 0x3F, 0xFF, 0x0C, 0xCC, 0x3F,
  0xFF, 0x1F, 0xFE, 0x3F, 0xFF, 0x1F, 0xFE, 0x3F, 0xFF, 0xFF, 0xFF, 0xDF, 0xFE, 0xFF, 0xFF, 0xDF,
  0xFC, 0xFF, 0xFF, 0xCF, 0xF0, 0xFF, 0xFF, 0xC3
};

auto *astraLauncher = new astra::Launcher();
auto *rootPage = new astra::Tile("root");

bool test = false;
unsigned char testIndex = 0;
unsigned char testSlider = 60;

auto *secondPage = new astra::List("关于", gear_icon);

void astraCoreInit(void) {
  HAL::inject(new MixinHAL);

  HAL::delay(350);
  astra::drawLogo(200);

  rootPage->addItem(new astra::List("Dino Run", dino_icon));
  rootPage->addItem(new astra::List("Snake", snake_icon));
  rootPage->addItem(new astra::List("Tetris", tetris_icon));
  rootPage->addItem(secondPage);

  secondPage->addItem(new astra::List("项目：With AstraUI"));
  secondPage->addItem(new astra::Tile("Supported Games:"));
  secondPage->addItem(new astra::Tile("Chrome Dino Run"), new astra::CheckBox(test));
  secondPage->addItem(new astra::List("Snake"), new astra::PopUp(1, "测试", {"测试"}, testIndex));
  secondPage->addItem(new astra::List("Tetris"), new astra::Slider("测试", 0, 100, 50, testSlider));
  secondPage->addItem(new astra::List("auto-fill item"));
  secondPage->addItem(new astra::List("pseudo-text"));
  secondPage->addItem(new astra::List("padding"));

  astraLauncher->init(rootPage);
}

void astraCoreUpdate(void) {
  astraLauncher->update();
  HAL::keyScan();

  if (*HAL::getKeyFlag() == key::KEY_PRESSED) {
    *HAL::getKeyFlag() = key::KEY_NOT_PRESSED;
    for (unsigned char i = 0; i < key::KEY_NUM; i++) {
      if (HAL::getKeyMap()[i] == key::CLICK) {
        if (i == 0) { astraLauncher->getSelector()->goPreview(); }//selector去到上一个项目
        else if (i == 1) { astraLauncher->getSelector()->goNext(); }//selector去到下一个项目
        else if (i == 2) {
          if (astraLauncher->open()) {
            if (astraLauncher->currentMenu->getNextMenu()->title == "Tetris")
              astraLauncher->notice("Score: "+std::to_string(main4Tetris()), 600);
          }
        }//打开当前项目
      } else if (HAL::getKeyMap()[i] == key::PRESS) {
      if (i == 0) { astraLauncher->close(); }//退出当前项目
      }
    }
    std::fill(HAL::getKeyMap(), HAL::getKeyMap() + key::KEY_NUM, key::INVALID);
    *HAL::getKeyFlag() = key::KEY_NOT_PRESSED;
  }
}

void astraCoreDestroy(void) {
  HAL::destroy();
  delete astraLauncher;
}
