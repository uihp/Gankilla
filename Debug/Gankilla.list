
Gankilla.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abb0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e20  0800acc0  0800acc0  0000bcc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cae0  0800cae0  0000e070  2**0
                  CONTENTS
  4 .ARM          00000008  0800cae0  0800cae0  0000dae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cae8  0800cae8  0000e070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800cae8  0800cae8  0000dae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800caf0  0800caf0  0000daf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800caf8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000868  20000070  0800cb68  0000e070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200008d8  0800cb68  0000e8d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000abf2f  00000000  00000000  0000e099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000d2e7  00000000  00000000  000b9fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0001b5af  00000000  00000000  000c72af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e48  00000000  00000000  000e2860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00003276  00000000  00000000  000e46a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000217ff  00000000  00000000  000e791e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000389c7  00000000  00000000  0010911d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf04d  00000000  00000000  00141ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00200b31  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007ee0  00000000  00000000  00200b74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  00208a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	0800aca8 	.word	0x0800aca8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	0800aca8 	.word	0x0800aca8

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_dmul>:
 8000174:	b570      	push	{r4, r5, r6, lr}
 8000176:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800017a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800017e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000182:	bf1d      	ittte	ne
 8000184:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000188:	ea94 0f0c 	teqne	r4, ip
 800018c:	ea95 0f0c 	teqne	r5, ip
 8000190:	f000 f8de 	bleq	8000350 <__aeabi_dmul+0x1dc>
 8000194:	442c      	add	r4, r5
 8000196:	ea81 0603 	eor.w	r6, r1, r3
 800019a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800019e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001a6:	bf18      	it	ne
 80001a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80001ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80001b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80001b4:	d038      	beq.n	8000228 <__aeabi_dmul+0xb4>
 80001b6:	fba0 ce02 	umull	ip, lr, r0, r2
 80001ba:	f04f 0500 	mov.w	r5, #0
 80001be:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001c2:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001c6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001ca:	f04f 0600 	mov.w	r6, #0
 80001ce:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001d2:	f09c 0f00 	teq	ip, #0
 80001d6:	bf18      	it	ne
 80001d8:	f04e 0e01 	orrne.w	lr, lr, #1
 80001dc:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001e0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001e4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001e8:	d204      	bcs.n	80001f4 <__aeabi_dmul+0x80>
 80001ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ee:	416d      	adcs	r5, r5
 80001f0:	eb46 0606 	adc.w	r6, r6, r6
 80001f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000200:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000204:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000208:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800020c:	bf88      	it	hi
 800020e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000212:	d81e      	bhi.n	8000252 <__aeabi_dmul+0xde>
 8000214:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000218:	bf08      	it	eq
 800021a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800021e:	f150 0000 	adcs.w	r0, r0, #0
 8000222:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000226:	bd70      	pop	{r4, r5, r6, pc}
 8000228:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800022c:	ea46 0101 	orr.w	r1, r6, r1
 8000230:	ea40 0002 	orr.w	r0, r0, r2
 8000234:	ea81 0103 	eor.w	r1, r1, r3
 8000238:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800023c:	bfc2      	ittt	gt
 800023e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000242:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000246:	bd70      	popgt	{r4, r5, r6, pc}
 8000248:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800024c:	f04f 0e00 	mov.w	lr, #0
 8000250:	3c01      	subs	r4, #1
 8000252:	f300 80ab 	bgt.w	80003ac <__aeabi_dmul+0x238>
 8000256:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800025a:	bfde      	ittt	le
 800025c:	2000      	movle	r0, #0
 800025e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000262:	bd70      	pople	{r4, r5, r6, pc}
 8000264:	f1c4 0400 	rsb	r4, r4, #0
 8000268:	3c20      	subs	r4, #32
 800026a:	da35      	bge.n	80002d8 <__aeabi_dmul+0x164>
 800026c:	340c      	adds	r4, #12
 800026e:	dc1b      	bgt.n	80002a8 <__aeabi_dmul+0x134>
 8000270:	f104 0414 	add.w	r4, r4, #20
 8000274:	f1c4 0520 	rsb	r5, r4, #32
 8000278:	fa00 f305 	lsl.w	r3, r0, r5
 800027c:	fa20 f004 	lsr.w	r0, r0, r4
 8000280:	fa01 f205 	lsl.w	r2, r1, r5
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800028c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000290:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000294:	fa21 f604 	lsr.w	r6, r1, r4
 8000298:	eb42 0106 	adc.w	r1, r2, r6
 800029c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002a0:	bf08      	it	eq
 80002a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002a6:	bd70      	pop	{r4, r5, r6, pc}
 80002a8:	f1c4 040c 	rsb	r4, r4, #12
 80002ac:	f1c4 0520 	rsb	r5, r4, #32
 80002b0:	fa00 f304 	lsl.w	r3, r0, r4
 80002b4:	fa20 f005 	lsr.w	r0, r0, r5
 80002b8:	fa01 f204 	lsl.w	r2, r1, r4
 80002bc:	ea40 0002 	orr.w	r0, r0, r2
 80002c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002c8:	f141 0100 	adc.w	r1, r1, #0
 80002cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002d0:	bf08      	it	eq
 80002d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002d6:	bd70      	pop	{r4, r5, r6, pc}
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f205 	lsl.w	r2, r0, r5
 80002e0:	ea4e 0e02 	orr.w	lr, lr, r2
 80002e4:	fa20 f304 	lsr.w	r3, r0, r4
 80002e8:	fa01 f205 	lsl.w	r2, r1, r5
 80002ec:	ea43 0302 	orr.w	r3, r3, r2
 80002f0:	fa21 f004 	lsr.w	r0, r1, r4
 80002f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002f8:	fa21 f204 	lsr.w	r2, r1, r4
 80002fc:	ea20 0002 	bic.w	r0, r0, r2
 8000300:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000304:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000308:	bf08      	it	eq
 800030a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030e:	bd70      	pop	{r4, r5, r6, pc}
 8000310:	f094 0f00 	teq	r4, #0
 8000314:	d10f      	bne.n	8000336 <__aeabi_dmul+0x1c2>
 8000316:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800031a:	0040      	lsls	r0, r0, #1
 800031c:	eb41 0101 	adc.w	r1, r1, r1
 8000320:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000324:	bf08      	it	eq
 8000326:	3c01      	subeq	r4, #1
 8000328:	d0f7      	beq.n	800031a <__aeabi_dmul+0x1a6>
 800032a:	ea41 0106 	orr.w	r1, r1, r6
 800032e:	f095 0f00 	teq	r5, #0
 8000332:	bf18      	it	ne
 8000334:	4770      	bxne	lr
 8000336:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800033a:	0052      	lsls	r2, r2, #1
 800033c:	eb43 0303 	adc.w	r3, r3, r3
 8000340:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000344:	bf08      	it	eq
 8000346:	3d01      	subeq	r5, #1
 8000348:	d0f7      	beq.n	800033a <__aeabi_dmul+0x1c6>
 800034a:	ea43 0306 	orr.w	r3, r3, r6
 800034e:	4770      	bx	lr
 8000350:	ea94 0f0c 	teq	r4, ip
 8000354:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000358:	bf18      	it	ne
 800035a:	ea95 0f0c 	teqne	r5, ip
 800035e:	d00c      	beq.n	800037a <__aeabi_dmul+0x206>
 8000360:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000364:	bf18      	it	ne
 8000366:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800036a:	d1d1      	bne.n	8000310 <__aeabi_dmul+0x19c>
 800036c:	ea81 0103 	eor.w	r1, r1, r3
 8000370:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000374:	f04f 0000 	mov.w	r0, #0
 8000378:	bd70      	pop	{r4, r5, r6, pc}
 800037a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800037e:	bf06      	itte	eq
 8000380:	4610      	moveq	r0, r2
 8000382:	4619      	moveq	r1, r3
 8000384:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000388:	d019      	beq.n	80003be <__aeabi_dmul+0x24a>
 800038a:	ea94 0f0c 	teq	r4, ip
 800038e:	d102      	bne.n	8000396 <__aeabi_dmul+0x222>
 8000390:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000394:	d113      	bne.n	80003be <__aeabi_dmul+0x24a>
 8000396:	ea95 0f0c 	teq	r5, ip
 800039a:	d105      	bne.n	80003a8 <__aeabi_dmul+0x234>
 800039c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003a0:	bf1c      	itt	ne
 80003a2:	4610      	movne	r0, r2
 80003a4:	4619      	movne	r1, r3
 80003a6:	d10a      	bne.n	80003be <__aeabi_dmul+0x24a>
 80003a8:	ea81 0103 	eor.w	r1, r1, r3
 80003ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003b0:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003b4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b8:	f04f 0000 	mov.w	r0, #0
 80003bc:	bd70      	pop	{r4, r5, r6, pc}
 80003be:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003c2:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003c6:	bd70      	pop	{r4, r5, r6, pc}

080003c8 <__aeabi_drsub>:
 80003c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003cc:	e002      	b.n	80003d4 <__adddf3>
 80003ce:	bf00      	nop

080003d0 <__aeabi_dsub>:
 80003d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003d4 <__adddf3>:
 80003d4:	b530      	push	{r4, r5, lr}
 80003d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	bf1f      	itttt	ne
 80003ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003fa:	f000 80e2 	beq.w	80005c2 <__adddf3+0x1ee>
 80003fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000402:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000406:	bfb8      	it	lt
 8000408:	426d      	neglt	r5, r5
 800040a:	dd0c      	ble.n	8000426 <__adddf3+0x52>
 800040c:	442c      	add	r4, r5
 800040e:	ea80 0202 	eor.w	r2, r0, r2
 8000412:	ea81 0303 	eor.w	r3, r1, r3
 8000416:	ea82 0000 	eor.w	r0, r2, r0
 800041a:	ea83 0101 	eor.w	r1, r3, r1
 800041e:	ea80 0202 	eor.w	r2, r0, r2
 8000422:	ea81 0303 	eor.w	r3, r1, r3
 8000426:	2d36      	cmp	r5, #54	@ 0x36
 8000428:	bf88      	it	hi
 800042a:	bd30      	pophi	{r4, r5, pc}
 800042c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000430:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000434:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000438:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x70>
 800043e:	4240      	negs	r0, r0
 8000440:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000444:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000448:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800044c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000450:	d002      	beq.n	8000458 <__adddf3+0x84>
 8000452:	4252      	negs	r2, r2
 8000454:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000458:	ea94 0f05 	teq	r4, r5
 800045c:	f000 80a7 	beq.w	80005ae <__adddf3+0x1da>
 8000460:	f1a4 0401 	sub.w	r4, r4, #1
 8000464:	f1d5 0e20 	rsbs	lr, r5, #32
 8000468:	db0d      	blt.n	8000486 <__adddf3+0xb2>
 800046a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800046e:	fa22 f205 	lsr.w	r2, r2, r5
 8000472:	1880      	adds	r0, r0, r2
 8000474:	f141 0100 	adc.w	r1, r1, #0
 8000478:	fa03 f20e 	lsl.w	r2, r3, lr
 800047c:	1880      	adds	r0, r0, r2
 800047e:	fa43 f305 	asr.w	r3, r3, r5
 8000482:	4159      	adcs	r1, r3
 8000484:	e00e      	b.n	80004a4 <__adddf3+0xd0>
 8000486:	f1a5 0520 	sub.w	r5, r5, #32
 800048a:	f10e 0e20 	add.w	lr, lr, #32
 800048e:	2a01      	cmp	r2, #1
 8000490:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000494:	bf28      	it	cs
 8000496:	f04c 0c02 	orrcs.w	ip, ip, #2
 800049a:	fa43 f305 	asr.w	r3, r3, r5
 800049e:	18c0      	adds	r0, r0, r3
 80004a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a8:	d507      	bpl.n	80004ba <__adddf3+0xe6>
 80004aa:	f04f 0e00 	mov.w	lr, #0
 80004ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80004b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80004ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004be:	d31b      	bcc.n	80004f8 <__adddf3+0x124>
 80004c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004c4:	d30c      	bcc.n	80004e0 <__adddf3+0x10c>
 80004c6:	0849      	lsrs	r1, r1, #1
 80004c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80004cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004d0:	f104 0401 	add.w	r4, r4, #1
 80004d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004dc:	f080 809a 	bcs.w	8000614 <__adddf3+0x240>
 80004e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004e4:	bf08      	it	eq
 80004e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004ea:	f150 0000 	adcs.w	r0, r0, #0
 80004ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004f2:	ea41 0105 	orr.w	r1, r1, r5
 80004f6:	bd30      	pop	{r4, r5, pc}
 80004f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004fc:	4140      	adcs	r0, r0
 80004fe:	eb41 0101 	adc.w	r1, r1, r1
 8000502:	3c01      	subs	r4, #1
 8000504:	bf28      	it	cs
 8000506:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800050a:	d2e9      	bcs.n	80004e0 <__adddf3+0x10c>
 800050c:	f091 0f00 	teq	r1, #0
 8000510:	bf04      	itt	eq
 8000512:	4601      	moveq	r1, r0
 8000514:	2000      	moveq	r0, #0
 8000516:	fab1 f381 	clz	r3, r1
 800051a:	bf08      	it	eq
 800051c:	3320      	addeq	r3, #32
 800051e:	f1a3 030b 	sub.w	r3, r3, #11
 8000522:	f1b3 0220 	subs.w	r2, r3, #32
 8000526:	da0c      	bge.n	8000542 <__adddf3+0x16e>
 8000528:	320c      	adds	r2, #12
 800052a:	dd08      	ble.n	800053e <__adddf3+0x16a>
 800052c:	f102 0c14 	add.w	ip, r2, #20
 8000530:	f1c2 020c 	rsb	r2, r2, #12
 8000534:	fa01 f00c 	lsl.w	r0, r1, ip
 8000538:	fa21 f102 	lsr.w	r1, r1, r2
 800053c:	e00c      	b.n	8000558 <__adddf3+0x184>
 800053e:	f102 0214 	add.w	r2, r2, #20
 8000542:	bfd8      	it	le
 8000544:	f1c2 0c20 	rsble	ip, r2, #32
 8000548:	fa01 f102 	lsl.w	r1, r1, r2
 800054c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000550:	bfdc      	itt	le
 8000552:	ea41 010c 	orrle.w	r1, r1, ip
 8000556:	4090      	lslle	r0, r2
 8000558:	1ae4      	subs	r4, r4, r3
 800055a:	bfa2      	ittt	ge
 800055c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000560:	4329      	orrge	r1, r5
 8000562:	bd30      	popge	{r4, r5, pc}
 8000564:	ea6f 0404 	mvn.w	r4, r4
 8000568:	3c1f      	subs	r4, #31
 800056a:	da1c      	bge.n	80005a6 <__adddf3+0x1d2>
 800056c:	340c      	adds	r4, #12
 800056e:	dc0e      	bgt.n	800058e <__adddf3+0x1ba>
 8000570:	f104 0414 	add.w	r4, r4, #20
 8000574:	f1c4 0220 	rsb	r2, r4, #32
 8000578:	fa20 f004 	lsr.w	r0, r0, r4
 800057c:	fa01 f302 	lsl.w	r3, r1, r2
 8000580:	ea40 0003 	orr.w	r0, r0, r3
 8000584:	fa21 f304 	lsr.w	r3, r1, r4
 8000588:	ea45 0103 	orr.w	r1, r5, r3
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	f1c4 040c 	rsb	r4, r4, #12
 8000592:	f1c4 0220 	rsb	r2, r4, #32
 8000596:	fa20 f002 	lsr.w	r0, r0, r2
 800059a:	fa01 f304 	lsl.w	r3, r1, r4
 800059e:	ea40 0003 	orr.w	r0, r0, r3
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	fa21 f004 	lsr.w	r0, r1, r4
 80005aa:	4629      	mov	r1, r5
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	f094 0f00 	teq	r4, #0
 80005b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005b6:	bf06      	itte	eq
 80005b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005bc:	3401      	addeq	r4, #1
 80005be:	3d01      	subne	r5, #1
 80005c0:	e74e      	b.n	8000460 <__adddf3+0x8c>
 80005c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005c6:	bf18      	it	ne
 80005c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005cc:	d029      	beq.n	8000622 <__adddf3+0x24e>
 80005ce:	ea94 0f05 	teq	r4, r5
 80005d2:	bf08      	it	eq
 80005d4:	ea90 0f02 	teqeq	r0, r2
 80005d8:	d005      	beq.n	80005e6 <__adddf3+0x212>
 80005da:	ea54 0c00 	orrs.w	ip, r4, r0
 80005de:	bf04      	itt	eq
 80005e0:	4619      	moveq	r1, r3
 80005e2:	4610      	moveq	r0, r2
 80005e4:	bd30      	pop	{r4, r5, pc}
 80005e6:	ea91 0f03 	teq	r1, r3
 80005ea:	bf1e      	ittt	ne
 80005ec:	2100      	movne	r1, #0
 80005ee:	2000      	movne	r0, #0
 80005f0:	bd30      	popne	{r4, r5, pc}
 80005f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005f6:	d105      	bne.n	8000604 <__adddf3+0x230>
 80005f8:	0040      	lsls	r0, r0, #1
 80005fa:	4149      	adcs	r1, r1
 80005fc:	bf28      	it	cs
 80005fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000608:	bf3c      	itt	cc
 800060a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800060e:	bd30      	popcc	{r4, r5, pc}
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000614:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000618:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800061c:	f04f 0000 	mov.w	r0, #0
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000626:	bf1a      	itte	ne
 8000628:	4619      	movne	r1, r3
 800062a:	4610      	movne	r0, r2
 800062c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000630:	bf1c      	itt	ne
 8000632:	460b      	movne	r3, r1
 8000634:	4602      	movne	r2, r0
 8000636:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800063a:	bf06      	itte	eq
 800063c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000640:	ea91 0f03 	teqeq	r1, r3
 8000644:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	bf00      	nop

0800064c <__aeabi_ui2d>:
 800064c:	f090 0f00 	teq	r0, #0
 8000650:	bf04      	itt	eq
 8000652:	2100      	moveq	r1, #0
 8000654:	4770      	bxeq	lr
 8000656:	b530      	push	{r4, r5, lr}
 8000658:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800065c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000660:	f04f 0500 	mov.w	r5, #0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e750      	b.n	800050c <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_i2d>:
 800066c:	f090 0f00 	teq	r0, #0
 8000670:	bf04      	itt	eq
 8000672:	2100      	moveq	r1, #0
 8000674:	4770      	bxeq	lr
 8000676:	b530      	push	{r4, r5, lr}
 8000678:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800067c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000680:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000684:	bf48      	it	mi
 8000686:	4240      	negmi	r0, r0
 8000688:	f04f 0100 	mov.w	r1, #0
 800068c:	e73e      	b.n	800050c <__adddf3+0x138>
 800068e:	bf00      	nop

08000690 <__aeabi_f2d>:
 8000690:	0042      	lsls	r2, r0, #1
 8000692:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000696:	ea4f 0131 	mov.w	r1, r1, rrx
 800069a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800069e:	bf1f      	itttt	ne
 80006a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006ac:	4770      	bxne	lr
 80006ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006b2:	bf08      	it	eq
 80006b4:	4770      	bxeq	lr
 80006b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006ba:	bf04      	itt	eq
 80006bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006c0:	4770      	bxeq	lr
 80006c2:	b530      	push	{r4, r5, lr}
 80006c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	e71c      	b.n	800050c <__adddf3+0x138>
 80006d2:	bf00      	nop

080006d4 <__aeabi_ul2d>:
 80006d4:	ea50 0201 	orrs.w	r2, r0, r1
 80006d8:	bf08      	it	eq
 80006da:	4770      	bxeq	lr
 80006dc:	b530      	push	{r4, r5, lr}
 80006de:	f04f 0500 	mov.w	r5, #0
 80006e2:	e00a      	b.n	80006fa <__aeabi_l2d+0x16>

080006e4 <__aeabi_l2d>:
 80006e4:	ea50 0201 	orrs.w	r2, r0, r1
 80006e8:	bf08      	it	eq
 80006ea:	4770      	bxeq	lr
 80006ec:	b530      	push	{r4, r5, lr}
 80006ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006f2:	d502      	bpl.n	80006fa <__aeabi_l2d+0x16>
 80006f4:	4240      	negs	r0, r0
 80006f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000702:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000706:	f43f aed8 	beq.w	80004ba <__adddf3+0xe6>
 800070a:	f04f 0203 	mov.w	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800071a:	bf18      	it	ne
 800071c:	3203      	addne	r2, #3
 800071e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000722:	f1c2 0320 	rsb	r3, r2, #32
 8000726:	fa00 fc03 	lsl.w	ip, r0, r3
 800072a:	fa20 f002 	lsr.w	r0, r0, r2
 800072e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000732:	ea40 000e 	orr.w	r0, r0, lr
 8000736:	fa21 f102 	lsr.w	r1, r1, r2
 800073a:	4414      	add	r4, r2
 800073c:	e6bd      	b.n	80004ba <__adddf3+0xe6>
 800073e:	bf00      	nop

08000740 <__gedf2>:
 8000740:	f04f 3cff 	mov.w	ip, #4294967295
 8000744:	e006      	b.n	8000754 <__cmpdf2+0x4>
 8000746:	bf00      	nop

08000748 <__ledf2>:
 8000748:	f04f 0c01 	mov.w	ip, #1
 800074c:	e002      	b.n	8000754 <__cmpdf2+0x4>
 800074e:	bf00      	nop

08000750 <__cmpdf2>:
 8000750:	f04f 0c01 	mov.w	ip, #1
 8000754:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000758:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800075c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000760:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000764:	bf18      	it	ne
 8000766:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800076a:	d01b      	beq.n	80007a4 <__cmpdf2+0x54>
 800076c:	b001      	add	sp, #4
 800076e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000772:	bf0c      	ite	eq
 8000774:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000778:	ea91 0f03 	teqne	r1, r3
 800077c:	bf02      	ittt	eq
 800077e:	ea90 0f02 	teqeq	r0, r2
 8000782:	2000      	moveq	r0, #0
 8000784:	4770      	bxeq	lr
 8000786:	f110 0f00 	cmn.w	r0, #0
 800078a:	ea91 0f03 	teq	r1, r3
 800078e:	bf58      	it	pl
 8000790:	4299      	cmppl	r1, r3
 8000792:	bf08      	it	eq
 8000794:	4290      	cmpeq	r0, r2
 8000796:	bf2c      	ite	cs
 8000798:	17d8      	asrcs	r0, r3, #31
 800079a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800079e:	f040 0001 	orr.w	r0, r0, #1
 80007a2:	4770      	bx	lr
 80007a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007ac:	d102      	bne.n	80007b4 <__cmpdf2+0x64>
 80007ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80007b2:	d107      	bne.n	80007c4 <__cmpdf2+0x74>
 80007b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007bc:	d1d6      	bne.n	800076c <__cmpdf2+0x1c>
 80007be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007c2:	d0d3      	beq.n	800076c <__cmpdf2+0x1c>
 80007c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop

080007cc <__aeabi_cdrcmple>:
 80007cc:	4684      	mov	ip, r0
 80007ce:	4610      	mov	r0, r2
 80007d0:	4662      	mov	r2, ip
 80007d2:	468c      	mov	ip, r1
 80007d4:	4619      	mov	r1, r3
 80007d6:	4663      	mov	r3, ip
 80007d8:	e000      	b.n	80007dc <__aeabi_cdcmpeq>
 80007da:	bf00      	nop

080007dc <__aeabi_cdcmpeq>:
 80007dc:	b501      	push	{r0, lr}
 80007de:	f7ff ffb7 	bl	8000750 <__cmpdf2>
 80007e2:	2800      	cmp	r0, #0
 80007e4:	bf48      	it	mi
 80007e6:	f110 0f00 	cmnmi.w	r0, #0
 80007ea:	bd01      	pop	{r0, pc}

080007ec <__aeabi_dcmpeq>:
 80007ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007f0:	f7ff fff4 	bl	80007dc <__aeabi_cdcmpeq>
 80007f4:	bf0c      	ite	eq
 80007f6:	2001      	moveq	r0, #1
 80007f8:	2000      	movne	r0, #0
 80007fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80007fe:	bf00      	nop

08000800 <__aeabi_dcmplt>:
 8000800:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000804:	f7ff ffea 	bl	80007dc <__aeabi_cdcmpeq>
 8000808:	bf34      	ite	cc
 800080a:	2001      	movcc	r0, #1
 800080c:	2000      	movcs	r0, #0
 800080e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000812:	bf00      	nop

08000814 <__aeabi_dcmple>:
 8000814:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000818:	f7ff ffe0 	bl	80007dc <__aeabi_cdcmpeq>
 800081c:	bf94      	ite	ls
 800081e:	2001      	movls	r0, #1
 8000820:	2000      	movhi	r0, #0
 8000822:	f85d fb08 	ldr.w	pc, [sp], #8
 8000826:	bf00      	nop

08000828 <__aeabi_dcmpge>:
 8000828:	f84d ed08 	str.w	lr, [sp, #-8]!
 800082c:	f7ff ffce 	bl	80007cc <__aeabi_cdrcmple>
 8000830:	bf94      	ite	ls
 8000832:	2001      	movls	r0, #1
 8000834:	2000      	movhi	r0, #0
 8000836:	f85d fb08 	ldr.w	pc, [sp], #8
 800083a:	bf00      	nop

0800083c <__aeabi_dcmpgt>:
 800083c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000840:	f7ff ffc4 	bl	80007cc <__aeabi_cdrcmple>
 8000844:	bf34      	ite	cc
 8000846:	2001      	movcc	r0, #1
 8000848:	2000      	movcs	r0, #0
 800084a:	f85d fb08 	ldr.w	pc, [sp], #8
 800084e:	bf00      	nop

08000850 <__aeabi_d2uiz>:
 8000850:	004a      	lsls	r2, r1, #1
 8000852:	d211      	bcs.n	8000878 <__aeabi_d2uiz+0x28>
 8000854:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000858:	d211      	bcs.n	800087e <__aeabi_d2uiz+0x2e>
 800085a:	d50d      	bpl.n	8000878 <__aeabi_d2uiz+0x28>
 800085c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000860:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000864:	d40e      	bmi.n	8000884 <__aeabi_d2uiz+0x34>
 8000866:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800086a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800086e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000872:	fa23 f002 	lsr.w	r0, r3, r2
 8000876:	4770      	bx	lr
 8000878:	f04f 0000 	mov.w	r0, #0
 800087c:	4770      	bx	lr
 800087e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000882:	d102      	bne.n	800088a <__aeabi_d2uiz+0x3a>
 8000884:	f04f 30ff 	mov.w	r0, #4294967295
 8000888:	4770      	bx	lr
 800088a:	f04f 0000 	mov.w	r0, #0
 800088e:	4770      	bx	lr

08000890 <__aeabi_d2f>:
 8000890:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000894:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000898:	bf24      	itt	cs
 800089a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800089e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008a2:	d90d      	bls.n	80008c0 <__aeabi_d2f+0x30>
 80008a4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80008a8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008ac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008b0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80008b4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008b8:	bf08      	it	eq
 80008ba:	f020 0001 	biceq.w	r0, r0, #1
 80008be:	4770      	bx	lr
 80008c0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80008c4:	d121      	bne.n	800090a <__aeabi_d2f+0x7a>
 80008c6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80008ca:	bfbc      	itt	lt
 80008cc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80008d0:	4770      	bxlt	lr
 80008d2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008d6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008da:	f1c2 0218 	rsb	r2, r2, #24
 80008de:	f1c2 0c20 	rsb	ip, r2, #32
 80008e2:	fa10 f30c 	lsls.w	r3, r0, ip
 80008e6:	fa20 f002 	lsr.w	r0, r0, r2
 80008ea:	bf18      	it	ne
 80008ec:	f040 0001 	orrne.w	r0, r0, #1
 80008f0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008f4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008f8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008fc:	ea40 000c 	orr.w	r0, r0, ip
 8000900:	fa23 f302 	lsr.w	r3, r3, r2
 8000904:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000908:	e7cc      	b.n	80008a4 <__aeabi_d2f+0x14>
 800090a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800090e:	d107      	bne.n	8000920 <__aeabi_d2f+0x90>
 8000910:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000914:	bf1e      	ittt	ne
 8000916:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800091a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800091e:	4770      	bxne	lr
 8000920:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000924:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000928:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop

08000930 <__aeabi_frsub>:
 8000930:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000934:	e002      	b.n	800093c <__addsf3>
 8000936:	bf00      	nop

08000938 <__aeabi_fsub>:
 8000938:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800093c <__addsf3>:
 800093c:	0042      	lsls	r2, r0, #1
 800093e:	bf1f      	itttt	ne
 8000940:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000944:	ea92 0f03 	teqne	r2, r3
 8000948:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800094c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000950:	d06a      	beq.n	8000a28 <__addsf3+0xec>
 8000952:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000956:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800095a:	bfc1      	itttt	gt
 800095c:	18d2      	addgt	r2, r2, r3
 800095e:	4041      	eorgt	r1, r0
 8000960:	4048      	eorgt	r0, r1
 8000962:	4041      	eorgt	r1, r0
 8000964:	bfb8      	it	lt
 8000966:	425b      	neglt	r3, r3
 8000968:	2b19      	cmp	r3, #25
 800096a:	bf88      	it	hi
 800096c:	4770      	bxhi	lr
 800096e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000972:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000976:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800097a:	bf18      	it	ne
 800097c:	4240      	negne	r0, r0
 800097e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000982:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000986:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800098a:	bf18      	it	ne
 800098c:	4249      	negne	r1, r1
 800098e:	ea92 0f03 	teq	r2, r3
 8000992:	d03f      	beq.n	8000a14 <__addsf3+0xd8>
 8000994:	f1a2 0201 	sub.w	r2, r2, #1
 8000998:	fa41 fc03 	asr.w	ip, r1, r3
 800099c:	eb10 000c 	adds.w	r0, r0, ip
 80009a0:	f1c3 0320 	rsb	r3, r3, #32
 80009a4:	fa01 f103 	lsl.w	r1, r1, r3
 80009a8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80009ac:	d502      	bpl.n	80009b4 <__addsf3+0x78>
 80009ae:	4249      	negs	r1, r1
 80009b0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009b4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80009b8:	d313      	bcc.n	80009e2 <__addsf3+0xa6>
 80009ba:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80009be:	d306      	bcc.n	80009ce <__addsf3+0x92>
 80009c0:	0840      	lsrs	r0, r0, #1
 80009c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80009c6:	f102 0201 	add.w	r2, r2, #1
 80009ca:	2afe      	cmp	r2, #254	@ 0xfe
 80009cc:	d251      	bcs.n	8000a72 <__addsf3+0x136>
 80009ce:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80009d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009d6:	bf08      	it	eq
 80009d8:	f020 0001 	biceq.w	r0, r0, #1
 80009dc:	ea40 0003 	orr.w	r0, r0, r3
 80009e0:	4770      	bx	lr
 80009e2:	0049      	lsls	r1, r1, #1
 80009e4:	eb40 0000 	adc.w	r0, r0, r0
 80009e8:	3a01      	subs	r2, #1
 80009ea:	bf28      	it	cs
 80009ec:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80009f0:	d2ed      	bcs.n	80009ce <__addsf3+0x92>
 80009f2:	fab0 fc80 	clz	ip, r0
 80009f6:	f1ac 0c08 	sub.w	ip, ip, #8
 80009fa:	ebb2 020c 	subs.w	r2, r2, ip
 80009fe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a02:	bfaa      	itet	ge
 8000a04:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a08:	4252      	neglt	r2, r2
 8000a0a:	4318      	orrge	r0, r3
 8000a0c:	bfbc      	itt	lt
 8000a0e:	40d0      	lsrlt	r0, r2
 8000a10:	4318      	orrlt	r0, r3
 8000a12:	4770      	bx	lr
 8000a14:	f092 0f00 	teq	r2, #0
 8000a18:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a1c:	bf06      	itte	eq
 8000a1e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a22:	3201      	addeq	r2, #1
 8000a24:	3b01      	subne	r3, #1
 8000a26:	e7b5      	b.n	8000994 <__addsf3+0x58>
 8000a28:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a2c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a36:	d021      	beq.n	8000a7c <__addsf3+0x140>
 8000a38:	ea92 0f03 	teq	r2, r3
 8000a3c:	d004      	beq.n	8000a48 <__addsf3+0x10c>
 8000a3e:	f092 0f00 	teq	r2, #0
 8000a42:	bf08      	it	eq
 8000a44:	4608      	moveq	r0, r1
 8000a46:	4770      	bx	lr
 8000a48:	ea90 0f01 	teq	r0, r1
 8000a4c:	bf1c      	itt	ne
 8000a4e:	2000      	movne	r0, #0
 8000a50:	4770      	bxne	lr
 8000a52:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000a56:	d104      	bne.n	8000a62 <__addsf3+0x126>
 8000a58:	0040      	lsls	r0, r0, #1
 8000a5a:	bf28      	it	cs
 8000a5c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000a60:	4770      	bx	lr
 8000a62:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000a66:	bf3c      	itt	cc
 8000a68:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000a6c:	4770      	bxcc	lr
 8000a6e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a72:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000a76:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a7a:	4770      	bx	lr
 8000a7c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a80:	bf16      	itet	ne
 8000a82:	4608      	movne	r0, r1
 8000a84:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a88:	4601      	movne	r1, r0
 8000a8a:	0242      	lsls	r2, r0, #9
 8000a8c:	bf06      	itte	eq
 8000a8e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a92:	ea90 0f01 	teqeq	r0, r1
 8000a96:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_ui2f>:
 8000a9c:	f04f 0300 	mov.w	r3, #0
 8000aa0:	e004      	b.n	8000aac <__aeabi_i2f+0x8>
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_i2f>:
 8000aa4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000aa8:	bf48      	it	mi
 8000aaa:	4240      	negmi	r0, r0
 8000aac:	ea5f 0c00 	movs.w	ip, r0
 8000ab0:	bf08      	it	eq
 8000ab2:	4770      	bxeq	lr
 8000ab4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ab8:	4601      	mov	r1, r0
 8000aba:	f04f 0000 	mov.w	r0, #0
 8000abe:	e01c      	b.n	8000afa <__aeabi_l2f+0x2a>

08000ac0 <__aeabi_ul2f>:
 8000ac0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ac4:	bf08      	it	eq
 8000ac6:	4770      	bxeq	lr
 8000ac8:	f04f 0300 	mov.w	r3, #0
 8000acc:	e00a      	b.n	8000ae4 <__aeabi_l2f+0x14>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_l2f>:
 8000ad0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad4:	bf08      	it	eq
 8000ad6:	4770      	bxeq	lr
 8000ad8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000adc:	d502      	bpl.n	8000ae4 <__aeabi_l2f+0x14>
 8000ade:	4240      	negs	r0, r0
 8000ae0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ae4:	ea5f 0c01 	movs.w	ip, r1
 8000ae8:	bf02      	ittt	eq
 8000aea:	4684      	moveq	ip, r0
 8000aec:	4601      	moveq	r1, r0
 8000aee:	2000      	moveq	r0, #0
 8000af0:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000af4:	bf08      	it	eq
 8000af6:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000afa:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000afe:	fabc f28c 	clz	r2, ip
 8000b02:	3a08      	subs	r2, #8
 8000b04:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b08:	db10      	blt.n	8000b2c <__aeabi_l2f+0x5c>
 8000b0a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b0e:	4463      	add	r3, ip
 8000b10:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b14:	f1c2 0220 	rsb	r2, r2, #32
 8000b18:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b1c:	fa20 f202 	lsr.w	r2, r0, r2
 8000b20:	eb43 0002 	adc.w	r0, r3, r2
 8000b24:	bf08      	it	eq
 8000b26:	f020 0001 	biceq.w	r0, r0, #1
 8000b2a:	4770      	bx	lr
 8000b2c:	f102 0220 	add.w	r2, r2, #32
 8000b30:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b34:	f1c2 0220 	rsb	r2, r2, #32
 8000b38:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b3c:	fa21 f202 	lsr.w	r2, r1, r2
 8000b40:	eb43 0002 	adc.w	r0, r3, r2
 8000b44:	bf08      	it	eq
 8000b46:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b4a:	4770      	bx	lr

08000b4c <__aeabi_fmul>:
 8000b4c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000b50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b54:	bf1e      	ittt	ne
 8000b56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b5a:	ea92 0f0c 	teqne	r2, ip
 8000b5e:	ea93 0f0c 	teqne	r3, ip
 8000b62:	d06f      	beq.n	8000c44 <__aeabi_fmul+0xf8>
 8000b64:	441a      	add	r2, r3
 8000b66:	ea80 0c01 	eor.w	ip, r0, r1
 8000b6a:	0240      	lsls	r0, r0, #9
 8000b6c:	bf18      	it	ne
 8000b6e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b72:	d01e      	beq.n	8000bb2 <__aeabi_fmul+0x66>
 8000b74:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000b78:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b7c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b80:	fba0 3101 	umull	r3, r1, r0, r1
 8000b84:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000b88:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000b8c:	bf3e      	ittt	cc
 8000b8e:	0049      	lslcc	r1, r1, #1
 8000b90:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b94:	005b      	lslcc	r3, r3, #1
 8000b96:	ea40 0001 	orr.w	r0, r0, r1
 8000b9a:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000b9e:	2afd      	cmp	r2, #253	@ 0xfd
 8000ba0:	d81d      	bhi.n	8000bde <__aeabi_fmul+0x92>
 8000ba2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000ba6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000baa:	bf08      	it	eq
 8000bac:	f020 0001 	biceq.w	r0, r0, #1
 8000bb0:	4770      	bx	lr
 8000bb2:	f090 0f00 	teq	r0, #0
 8000bb6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000bba:	bf08      	it	eq
 8000bbc:	0249      	lsleq	r1, r1, #9
 8000bbe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bc2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bc6:	3a7f      	subs	r2, #127	@ 0x7f
 8000bc8:	bfc2      	ittt	gt
 8000bca:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000bce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bd2:	4770      	bxgt	lr
 8000bd4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd8:	f04f 0300 	mov.w	r3, #0
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	dc5d      	bgt.n	8000c9c <__aeabi_fmul+0x150>
 8000be0:	f112 0f19 	cmn.w	r2, #25
 8000be4:	bfdc      	itt	le
 8000be6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000bea:	4770      	bxle	lr
 8000bec:	f1c2 0200 	rsb	r2, r2, #0
 8000bf0:	0041      	lsls	r1, r0, #1
 8000bf2:	fa21 f102 	lsr.w	r1, r1, r2
 8000bf6:	f1c2 0220 	rsb	r2, r2, #32
 8000bfa:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bfe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c02:	f140 0000 	adc.w	r0, r0, #0
 8000c06:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c0a:	bf08      	it	eq
 8000c0c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c10:	4770      	bx	lr
 8000c12:	f092 0f00 	teq	r2, #0
 8000c16:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c1a:	bf02      	ittt	eq
 8000c1c:	0040      	lsleq	r0, r0, #1
 8000c1e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c22:	3a01      	subeq	r2, #1
 8000c24:	d0f9      	beq.n	8000c1a <__aeabi_fmul+0xce>
 8000c26:	ea40 000c 	orr.w	r0, r0, ip
 8000c2a:	f093 0f00 	teq	r3, #0
 8000c2e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c32:	bf02      	ittt	eq
 8000c34:	0049      	lsleq	r1, r1, #1
 8000c36:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c3a:	3b01      	subeq	r3, #1
 8000c3c:	d0f9      	beq.n	8000c32 <__aeabi_fmul+0xe6>
 8000c3e:	ea41 010c 	orr.w	r1, r1, ip
 8000c42:	e78f      	b.n	8000b64 <__aeabi_fmul+0x18>
 8000c44:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c48:	ea92 0f0c 	teq	r2, ip
 8000c4c:	bf18      	it	ne
 8000c4e:	ea93 0f0c 	teqne	r3, ip
 8000c52:	d00a      	beq.n	8000c6a <__aeabi_fmul+0x11e>
 8000c54:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000c58:	bf18      	it	ne
 8000c5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000c5e:	d1d8      	bne.n	8000c12 <__aeabi_fmul+0xc6>
 8000c60:	ea80 0001 	eor.w	r0, r0, r1
 8000c64:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000c68:	4770      	bx	lr
 8000c6a:	f090 0f00 	teq	r0, #0
 8000c6e:	bf17      	itett	ne
 8000c70:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000c74:	4608      	moveq	r0, r1
 8000c76:	f091 0f00 	teqne	r1, #0
 8000c7a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000c7e:	d014      	beq.n	8000caa <__aeabi_fmul+0x15e>
 8000c80:	ea92 0f0c 	teq	r2, ip
 8000c84:	d101      	bne.n	8000c8a <__aeabi_fmul+0x13e>
 8000c86:	0242      	lsls	r2, r0, #9
 8000c88:	d10f      	bne.n	8000caa <__aeabi_fmul+0x15e>
 8000c8a:	ea93 0f0c 	teq	r3, ip
 8000c8e:	d103      	bne.n	8000c98 <__aeabi_fmul+0x14c>
 8000c90:	024b      	lsls	r3, r1, #9
 8000c92:	bf18      	it	ne
 8000c94:	4608      	movne	r0, r1
 8000c96:	d108      	bne.n	8000caa <__aeabi_fmul+0x15e>
 8000c98:	ea80 0001 	eor.w	r0, r0, r1
 8000c9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ca0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca8:	4770      	bx	lr
 8000caa:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cae:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000cb2:	4770      	bx	lr

08000cb4 <__aeabi_fdiv>:
 8000cb4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cb8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cc2:	ea92 0f0c 	teqne	r2, ip
 8000cc6:	ea93 0f0c 	teqne	r3, ip
 8000cca:	d069      	beq.n	8000da0 <__aeabi_fdiv+0xec>
 8000ccc:	eba2 0203 	sub.w	r2, r2, r3
 8000cd0:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd4:	0249      	lsls	r1, r1, #9
 8000cd6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cda:	d037      	beq.n	8000d4c <__aeabi_fdiv+0x98>
 8000cdc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ce0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ce4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ce8:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000cec:	428b      	cmp	r3, r1
 8000cee:	bf38      	it	cc
 8000cf0:	005b      	lslcc	r3, r3, #1
 8000cf2:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000cf6:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	bf24      	itt	cs
 8000cfe:	1a5b      	subcs	r3, r3, r1
 8000d00:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d04:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d08:	bf24      	itt	cs
 8000d0a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d0e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d12:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d16:	bf24      	itt	cs
 8000d18:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d20:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d24:	bf24      	itt	cs
 8000d26:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d2a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d2e:	011b      	lsls	r3, r3, #4
 8000d30:	bf18      	it	ne
 8000d32:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d36:	d1e0      	bne.n	8000cfa <__aeabi_fdiv+0x46>
 8000d38:	2afd      	cmp	r2, #253	@ 0xfd
 8000d3a:	f63f af50 	bhi.w	8000bde <__aeabi_fmul+0x92>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d50:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d54:	327f      	adds	r2, #127	@ 0x7f
 8000d56:	bfc2      	ittt	gt
 8000d58:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d5c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d60:	4770      	bxgt	lr
 8000d62:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d66:	f04f 0300 	mov.w	r3, #0
 8000d6a:	3a01      	subs	r2, #1
 8000d6c:	e737      	b.n	8000bde <__aeabi_fmul+0x92>
 8000d6e:	f092 0f00 	teq	r2, #0
 8000d72:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d76:	bf02      	ittt	eq
 8000d78:	0040      	lsleq	r0, r0, #1
 8000d7a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7e:	3a01      	subeq	r2, #1
 8000d80:	d0f9      	beq.n	8000d76 <__aeabi_fdiv+0xc2>
 8000d82:	ea40 000c 	orr.w	r0, r0, ip
 8000d86:	f093 0f00 	teq	r3, #0
 8000d8a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8e:	bf02      	ittt	eq
 8000d90:	0049      	lsleq	r1, r1, #1
 8000d92:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d96:	3b01      	subeq	r3, #1
 8000d98:	d0f9      	beq.n	8000d8e <__aeabi_fdiv+0xda>
 8000d9a:	ea41 010c 	orr.w	r1, r1, ip
 8000d9e:	e795      	b.n	8000ccc <__aeabi_fdiv+0x18>
 8000da0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da4:	ea92 0f0c 	teq	r2, ip
 8000da8:	d108      	bne.n	8000dbc <__aeabi_fdiv+0x108>
 8000daa:	0242      	lsls	r2, r0, #9
 8000dac:	f47f af7d 	bne.w	8000caa <__aeabi_fmul+0x15e>
 8000db0:	ea93 0f0c 	teq	r3, ip
 8000db4:	f47f af70 	bne.w	8000c98 <__aeabi_fmul+0x14c>
 8000db8:	4608      	mov	r0, r1
 8000dba:	e776      	b.n	8000caa <__aeabi_fmul+0x15e>
 8000dbc:	ea93 0f0c 	teq	r3, ip
 8000dc0:	d104      	bne.n	8000dcc <__aeabi_fdiv+0x118>
 8000dc2:	024b      	lsls	r3, r1, #9
 8000dc4:	f43f af4c 	beq.w	8000c60 <__aeabi_fmul+0x114>
 8000dc8:	4608      	mov	r0, r1
 8000dca:	e76e      	b.n	8000caa <__aeabi_fmul+0x15e>
 8000dcc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000dd0:	bf18      	it	ne
 8000dd2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000dd6:	d1ca      	bne.n	8000d6e <__aeabi_fdiv+0xba>
 8000dd8:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000ddc:	f47f af5c 	bne.w	8000c98 <__aeabi_fmul+0x14c>
 8000de0:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000de4:	f47f af3c 	bne.w	8000c60 <__aeabi_fmul+0x114>
 8000de8:	e75f      	b.n	8000caa <__aeabi_fmul+0x15e>
 8000dea:	bf00      	nop

08000dec <__gesf2>:
 8000dec:	f04f 3cff 	mov.w	ip, #4294967295
 8000df0:	e006      	b.n	8000e00 <__cmpsf2+0x4>
 8000df2:	bf00      	nop

08000df4 <__lesf2>:
 8000df4:	f04f 0c01 	mov.w	ip, #1
 8000df8:	e002      	b.n	8000e00 <__cmpsf2+0x4>
 8000dfa:	bf00      	nop

08000dfc <__cmpsf2>:
 8000dfc:	f04f 0c01 	mov.w	ip, #1
 8000e00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e04:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e08:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e0c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e10:	bf18      	it	ne
 8000e12:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e16:	d011      	beq.n	8000e3c <__cmpsf2+0x40>
 8000e18:	b001      	add	sp, #4
 8000e1a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e1e:	bf18      	it	ne
 8000e20:	ea90 0f01 	teqne	r0, r1
 8000e24:	bf58      	it	pl
 8000e26:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e2a:	bf88      	it	hi
 8000e2c:	17c8      	asrhi	r0, r1, #31
 8000e2e:	bf38      	it	cc
 8000e30:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e34:	bf18      	it	ne
 8000e36:	f040 0001 	orrne.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e40:	d102      	bne.n	8000e48 <__cmpsf2+0x4c>
 8000e42:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e46:	d105      	bne.n	8000e54 <__cmpsf2+0x58>
 8000e48:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e4c:	d1e4      	bne.n	8000e18 <__cmpsf2+0x1c>
 8000e4e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e52:	d0e1      	beq.n	8000e18 <__cmpsf2+0x1c>
 8000e54:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <__aeabi_cfrcmple>:
 8000e5c:	4684      	mov	ip, r0
 8000e5e:	4608      	mov	r0, r1
 8000e60:	4661      	mov	r1, ip
 8000e62:	e7ff      	b.n	8000e64 <__aeabi_cfcmpeq>

08000e64 <__aeabi_cfcmpeq>:
 8000e64:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e66:	f7ff ffc9 	bl	8000dfc <__cmpsf2>
 8000e6a:	2800      	cmp	r0, #0
 8000e6c:	bf48      	it	mi
 8000e6e:	f110 0f00 	cmnmi.w	r0, #0
 8000e72:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e74 <__aeabi_fcmpeq>:
 8000e74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e78:	f7ff fff4 	bl	8000e64 <__aeabi_cfcmpeq>
 8000e7c:	bf0c      	ite	eq
 8000e7e:	2001      	moveq	r0, #1
 8000e80:	2000      	movne	r0, #0
 8000e82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e86:	bf00      	nop

08000e88 <__aeabi_fcmplt>:
 8000e88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e8c:	f7ff ffea 	bl	8000e64 <__aeabi_cfcmpeq>
 8000e90:	bf34      	ite	cc
 8000e92:	2001      	movcc	r0, #1
 8000e94:	2000      	movcs	r0, #0
 8000e96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e9a:	bf00      	nop

08000e9c <__aeabi_fcmple>:
 8000e9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ea0:	f7ff ffe0 	bl	8000e64 <__aeabi_cfcmpeq>
 8000ea4:	bf94      	ite	ls
 8000ea6:	2001      	movls	r0, #1
 8000ea8:	2000      	movhi	r0, #0
 8000eaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eae:	bf00      	nop

08000eb0 <__aeabi_fcmpge>:
 8000eb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eb4:	f7ff ffd2 	bl	8000e5c <__aeabi_cfrcmple>
 8000eb8:	bf94      	ite	ls
 8000eba:	2001      	movls	r0, #1
 8000ebc:	2000      	movhi	r0, #0
 8000ebe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_fcmpgt>:
 8000ec4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ec8:	f7ff ffc8 	bl	8000e5c <__aeabi_cfrcmple>
 8000ecc:	bf34      	ite	cc
 8000ece:	2001      	movcc	r0, #1
 8000ed0:	2000      	movcs	r0, #0
 8000ed2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ed6:	bf00      	nop

08000ed8 <__aeabi_f2iz>:
 8000ed8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000edc:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000ee0:	d30f      	bcc.n	8000f02 <__aeabi_f2iz+0x2a>
 8000ee2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000ee6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000eea:	d90d      	bls.n	8000f08 <__aeabi_f2iz+0x30>
 8000eec:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ef0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ef4:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000ef8:	fa23 f002 	lsr.w	r0, r3, r2
 8000efc:	bf18      	it	ne
 8000efe:	4240      	negne	r0, r0
 8000f00:	4770      	bx	lr
 8000f02:	f04f 0000 	mov.w	r0, #0
 8000f06:	4770      	bx	lr
 8000f08:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f0c:	d101      	bne.n	8000f12 <__aeabi_f2iz+0x3a>
 8000f0e:	0242      	lsls	r2, r0, #9
 8000f10:	d105      	bne.n	8000f1e <__aeabi_f2iz+0x46>
 8000f12:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000f16:	bf08      	it	eq
 8000f18:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000f1c:	4770      	bx	lr
 8000f1e:	f04f 0000 	mov.w	r0, #0
 8000f22:	4770      	bx	lr

08000f24 <__aeabi_f2uiz>:
 8000f24:	0042      	lsls	r2, r0, #1
 8000f26:	d20e      	bcs.n	8000f46 <__aeabi_f2uiz+0x22>
 8000f28:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f2c:	d30b      	bcc.n	8000f46 <__aeabi_f2uiz+0x22>
 8000f2e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f32:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f36:	d409      	bmi.n	8000f4c <__aeabi_f2uiz+0x28>
 8000f38:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f3c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f40:	fa23 f002 	lsr.w	r0, r3, r2
 8000f44:	4770      	bx	lr
 8000f46:	f04f 0000 	mov.w	r0, #0
 8000f4a:	4770      	bx	lr
 8000f4c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f50:	d101      	bne.n	8000f56 <__aeabi_f2uiz+0x32>
 8000f52:	0242      	lsls	r2, r0, #9
 8000f54:	d102      	bne.n	8000f5c <__aeabi_f2uiz+0x38>
 8000f56:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5a:	4770      	bx	lr
 8000f5c:	f04f 0000 	mov.w	r0, #0
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>:
      _GLIBCXX20_CONSTEXPR
      pointer
      _M_local_data()
      {
#if __cplusplus >= 201103L
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 8000f64:	f100 0308 	add.w	r3, r0, #8
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3076. basic_string CTAD ambiguity
      template<typename = _RequireAllocator<_Alloc>>
#endif
      _GLIBCXX20_CONSTEXPR
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 8000f68:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000f6a:	4604      	mov	r4, r0
      : _M_dataplus(_M_local_data(), __a)
      {
	// NB: Not required, but considered best practice.
	if (__s == 0)
 8000f6c:	460d      	mov	r5, r1
	: allocator_type(__a), _M_p(__dat) { }
 8000f6e:	6003      	str	r3, [r0, #0]
	if (__s == 0)
 8000f70:	b911      	cbnz	r1, 8000f78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0+0x14>
	  std::__throw_logic_error(__N("basic_string: "
 8000f72:	480f      	ldr	r0, [pc, #60]	@ (8000fb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0+0x4c>)
 8000f74:	f008 fa4f 	bl	8009416 <_ZSt19__throw_logic_errorPKc>
      {
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
 8000f78:	4608      	mov	r0, r1
 8000f7a:	f7ff f8f3 	bl	8000164 <strlen>
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

	if (__dnew > size_type(_S_local_capacity))
 8000f7e:	280f      	cmp	r0, #15
				       "construction from null is not valid"));
	const _CharT* __end = __s + traits_type::length(__s);
 8000f80:	eb05 0600 	add.w	r6, r5, r0
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8000f84:	9001      	str	r0, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
 8000f86:	d907      	bls.n	8000f98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0+0x34>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 8000f88:	2200      	movs	r2, #0
 8000f8a:	4620      	mov	r0, r4
 8000f8c:	a901      	add	r1, sp, #4
 8000f8e:	f008 fa5b 	bl	8009448 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
 8000f92:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
 8000f94:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
 8000f96:	60a3      	str	r3, [r4, #8]
	  ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }

	  basic_string* _M_guarded;
	} __guard(this);

	this->_S_copy_chars(_M_data(), __beg, __end);
 8000f98:	4632      	mov	r2, r6
 8000f9a:	4629      	mov	r1, r5
 8000f9c:	6820      	ldr	r0, [r4, #0]
 8000f9e:	f008 faeb 	bl	8009578 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	__c1 = __c2;
 8000fa2:	2100      	movs	r1, #0

	__guard._M_guarded = 0;

	_M_set_length(__dnew);
 8000fa4:	9b01      	ldr	r3, [sp, #4]
 8000fa6:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
 8000fa8:	6063      	str	r3, [r4, #4]
 8000faa:	54d1      	strb	r1, [r2, r3]
	_M_construct(__s, __end, forward_iterator_tag());
      }
 8000fac:	b002      	add	sp, #8
 8000fae:	bd70      	pop	{r4, r5, r6, pc}
 8000fb0:	0800aea0 	.word	0x0800aea0

08000fb4 <_ZNSt7__cxx119to_stringEi>:
  inline string
  to_string(int __val)
#if _GLIBCXX_USE_CXX11_ABI && (__CHAR_BIT__ * __SIZEOF_INT__) <= 32
  noexcept // any 32-bit value fits in the SSO buffer
#endif
  {
 8000fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    const bool __neg = __val < 0;
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
 8000fb6:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 8000fba:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
    const bool __neg = __val < 0;
 8000fbe:	0fcf      	lsrs	r7, r1, #31
  {
 8000fc0:	4606      	mov	r6, r0
 8000fc2:	4623      	mov	r3, r4
    __to_chars_len(_Tp __value, int __base = 10) noexcept
    {
      static_assert(is_integral<_Tp>::value, "implementation bug");
      static_assert(is_unsigned<_Tp>::value, "implementation bug");

      unsigned __n = 1;
 8000fc4:	2501      	movs	r5, #1
      for (;;)
	{
	  if (__value < (unsigned)__base) return __n;
	  if (__value < __b2) return __n + 1;
	  if (__value < __b3) return __n + 2;
	  if (__value < __b4) return __n + 3;
 8000fc6:	f242 710f 	movw	r1, #9999	@ 0x270f
	  __value /= __b4;
 8000fca:	f242 7210 	movw	r2, #10000	@ 0x2710
	  if (__value < (unsigned)__base) return __n;
 8000fce:	2b09      	cmp	r3, #9
 8000fd0:	d902      	bls.n	8000fd8 <_ZNSt7__cxx119to_stringEi+0x24>
	  if (__value < __b2) return __n + 1;
 8000fd2:	2b63      	cmp	r3, #99	@ 0x63
 8000fd4:	d81e      	bhi.n	8001014 <_ZNSt7__cxx119to_stringEi+0x60>
 8000fd6:	3501      	adds	r5, #1
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 8000fd8:	f106 0308 	add.w	r3, r6, #8
      { _M_construct(__n, __c); }
 8000fdc:	1979      	adds	r1, r7, r5
 8000fde:	222d      	movs	r2, #45	@ 0x2d
 8000fe0:	4630      	mov	r0, r6
	: allocator_type(__a), _M_p(__dat) { }
 8000fe2:	6033      	str	r3, [r6, #0]
      { _M_construct(__n, __c); }
 8000fe4:	f008 faa9 	bl	800953a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>
	"6061626364656667686970717273747576777879"
	"8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
      while (__val >= 100)
	{
	  auto const __num = (__val % 100) * 2;
 8000fe8:	2264      	movs	r2, #100	@ 0x64
	return _M_data()[__pos];
 8000fea:	6833      	ldr	r3, [r6, #0]
	  __val /= 100;
	  __first[__pos] = __digits[__num + 1];
 8000fec:	4818      	ldr	r0, [pc, #96]	@ (8001050 <_ZNSt7__cxx119to_stringEi+0x9c>)
 8000fee:	19d9      	adds	r1, r3, r7
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
 8000ff0:	440d      	add	r5, r1
      while (__val >= 100)
 8000ff2:	2c63      	cmp	r4, #99	@ 0x63
 8000ff4:	d81b      	bhi.n	800102e <_ZNSt7__cxx119to_stringEi+0x7a>
	  __first[__pos - 1] = __digits[__num];
	  __pos -= 2;
	}
      if (__val >= 10)
 8000ff6:	2c09      	cmp	r4, #9
	{
	  auto const __num = __val * 2;
	  __first[1] = __digits[__num + 1];
 8000ff8:	bf89      	itett	hi
 8000ffa:	4a15      	ldrhi	r2, [pc, #84]	@ (8001050 <_ZNSt7__cxx119to_stringEi+0x9c>)
	  __first[0] = __digits[__num];
	}
      else
	__first[0] = '0' + __val;
 8000ffc:	3430      	addls	r4, #48	@ 0x30
	  __first[1] = __digits[__num + 1];
 8000ffe:	eb02 0044 	addhi.w	r0, r2, r4, lsl #1
 8001002:	7840      	ldrbhi	r0, [r0, #1]
	  __first[0] = __digits[__num];
 8001004:	bf8a      	itet	hi
 8001006:	f812 4014 	ldrbhi.w	r4, [r2, r4, lsl #1]
	__first[0] = '0' + __val;
 800100a:	b2e4      	uxtbls	r4, r4
	  __first[1] = __digits[__num + 1];
 800100c:	7048      	strbhi	r0, [r1, #1]
	  __first[0] = __digits[__num];
 800100e:	55dc      	strb	r4, [r3, r7]
    const auto __len = __detail::__to_chars_len(__uval);
    string __str(__neg + __len, '-');
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
    return __str;
  }
 8001010:	4630      	mov	r0, r6
 8001012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  if (__value < __b3) return __n + 2;
 8001014:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001018:	d201      	bcs.n	800101e <_ZNSt7__cxx119to_stringEi+0x6a>
 800101a:	3502      	adds	r5, #2
 800101c:	e7dc      	b.n	8000fd8 <_ZNSt7__cxx119to_stringEi+0x24>
	  if (__value < __b4) return __n + 3;
 800101e:	428b      	cmp	r3, r1
 8001020:	d801      	bhi.n	8001026 <_ZNSt7__cxx119to_stringEi+0x72>
 8001022:	3503      	adds	r5, #3
 8001024:	e7d8      	b.n	8000fd8 <_ZNSt7__cxx119to_stringEi+0x24>
	  __value /= __b4;
 8001026:	fbb3 f3f2 	udiv	r3, r3, r2
	  __n += 4;
 800102a:	3504      	adds	r5, #4
	  if (__value < (unsigned)__base) return __n;
 800102c:	e7cf      	b.n	8000fce <_ZNSt7__cxx119to_stringEi+0x1a>
	  auto const __num = (__val % 100) * 2;
 800102e:	fbb4 fef2 	udiv	lr, r4, r2
 8001032:	fb02 4c1e 	mls	ip, r2, lr, r4
	  __val /= 100;
 8001036:	4674      	mov	r4, lr
	  __first[__pos] = __digits[__num + 1];
 8001038:	eb00 0e4c 	add.w	lr, r0, ip, lsl #1
 800103c:	f89e e001 	ldrb.w	lr, [lr, #1]
	  __first[__pos - 1] = __digits[__num];
 8001040:	f810 c01c 	ldrb.w	ip, [r0, ip, lsl #1]
	  __first[__pos] = __digits[__num + 1];
 8001044:	f805 ec01 	strb.w	lr, [r5, #-1]
	  __first[__pos - 1] = __digits[__num];
 8001048:	f805 cd02 	strb.w	ip, [r5, #-2]!
 800104c:	e7d1      	b.n	8000ff2 <_ZNSt7__cxx119to_stringEi+0x3e>
 800104e:	bf00      	nop
 8001050:	0800af85 	.word	0x0800af85

08001054 <astraCoreInit>:
unsigned char testIndex = 0;
unsigned char testSlider = 60;

auto *secondPage = new astra::List("关于", pic_3);

void astraCoreInit(void) {
 8001054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL::inject(new MixinHAL);
 8001058:	20a8      	movs	r0, #168	@ 0xa8
void astraCoreInit(void) {
 800105a:	b09b      	sub	sp, #108	@ 0x6c
  HAL::inject(new MixinHAL);
 800105c:	f007 ff02 	bl	8008e64 <_Znwj>
namespace led {

}

namespace sys {
struct config {
 8001060:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
/**
 * @brief hardware abstraction layer.
 * @note provide a set of interfaces to access hardware.
 * @note provide some default implementation.
 */
class HAL {
 8001064:	2600      	movs	r6, #0
 8001066:	4604      	mov	r4, r0
struct config {
 8001068:	8083      	strh	r3, [r0, #4]
 800106a:	4bc5      	ldr	r3, [pc, #788]	@ (8001380 <astraCoreInit+0x32c>)
private:
  void _ssd1306_init();
  void _u8g2_init();

public:
  MixinHAL() = default;
 800106c:	2294      	movs	r2, #148	@ 0x94
 800106e:	6083      	str	r3, [r0, #8]
 8001070:	4bc4      	ldr	r3, [pc, #784]	@ (8001384 <astraCoreInit+0x330>)
 8001072:	4631      	mov	r1, r6
class HAL {
 8001074:	60c6      	str	r6, [r0, #12]
 8001076:	7406      	strb	r6, [r0, #16]
 8001078:	f840 3b14 	str.w	r3, [r0], #20
 800107c:	f008 ff75 	bl	8009f6a <memset>
 8001080:	4620      	mov	r0, r4
 8001082:	f004 f82b 	bl	80050dc <_ZN3HAL6injectEPS_>

  /**
   * @brief system timers.
   */
public:
  static void delay(unsigned long _mill) { get()->_delay(_mill); }
 8001086:	f004 f823 	bl	80050d0 <_ZN3HAL3getEv>
 800108a:	6803      	ldr	r3, [r0, #0]
 800108c:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8001090:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001092:	4798      	blx	r3

  HAL::delay(350);
  astra::drawLogo(200);

  rootPage->addItem(new astra::List("Dino Run", pic_0));
 8001094:	4fbc      	ldr	r7, [pc, #752]	@ (8001388 <astraCoreInit+0x334>)
  astra::drawLogo(200);
 8001096:	20c8      	movs	r0, #200	@ 0xc8
 8001098:	f000 feda 	bl	8001e50 <_ZN5astra8drawLogoEt>
  rootPage->addItem(new astra::List("Dino Run", pic_0));
 800109c:	f44f 70b2 	mov.w	r0, #356	@ 0x164
 80010a0:	683d      	ldr	r5, [r7, #0]
 80010a2:	f007 fedf 	bl	8008e64 <_Znwj>
 80010a6:	4604      	mov	r4, r0
 80010a8:	49b8      	ldr	r1, [pc, #736]	@ (800138c <astraCoreInit+0x338>)
 80010aa:	a814      	add	r0, sp, #80	@ 0x50
 80010ac:	f7ff ff5a 	bl	8000f64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 80010b0:	4ab7      	ldr	r2, [pc, #732]	@ (8001390 <astraCoreInit+0x33c>)
 80010b2:	4620      	mov	r0, r4
 80010b4:	a914      	add	r1, sp, #80	@ 0x50
 80010b6:	f002 fb29 	bl	800370c <_ZN5astra4ListC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIhSaIhEE>
 80010ba:	4621      	mov	r1, r4
 80010bc:	4628      	mov	r0, r5
 80010be:	f002 fa55 	bl	800356c <_ZN5astra4Menu7addItemEPS0_>
      { _M_dispose(); }
 80010c2:	a814      	add	r0, sp, #80	@ 0x50
 80010c4:	f008 f9e2 	bl	800948c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
  rootPage->addItem(new astra::List("Snake", pic_1));
 80010c8:	f44f 70b2 	mov.w	r0, #356	@ 0x164
 80010cc:	683d      	ldr	r5, [r7, #0]
 80010ce:	f007 fec9 	bl	8008e64 <_Znwj>
 80010d2:	4604      	mov	r4, r0
 80010d4:	49af      	ldr	r1, [pc, #700]	@ (8001394 <astraCoreInit+0x340>)
 80010d6:	a814      	add	r0, sp, #80	@ 0x50
 80010d8:	f7ff ff44 	bl	8000f64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 80010dc:	4aae      	ldr	r2, [pc, #696]	@ (8001398 <astraCoreInit+0x344>)
 80010de:	4620      	mov	r0, r4
 80010e0:	a914      	add	r1, sp, #80	@ 0x50
 80010e2:	f002 fb13 	bl	800370c <_ZN5astra4ListC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIhSaIhEE>
 80010e6:	4621      	mov	r1, r4
 80010e8:	4628      	mov	r0, r5
 80010ea:	f002 fa3f 	bl	800356c <_ZN5astra4Menu7addItemEPS0_>
 80010ee:	a814      	add	r0, sp, #80	@ 0x50
 80010f0:	f008 f9cc 	bl	800948c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
  rootPage->addItem(new astra::List("Tetris", pic_2));
 80010f4:	f44f 70b2 	mov.w	r0, #356	@ 0x164
 80010f8:	683d      	ldr	r5, [r7, #0]
 80010fa:	f007 feb3 	bl	8008e64 <_Znwj>
 80010fe:	4604      	mov	r4, r0
 8001100:	49a6      	ldr	r1, [pc, #664]	@ (800139c <astraCoreInit+0x348>)
 8001102:	a814      	add	r0, sp, #80	@ 0x50
 8001104:	f7ff ff2e 	bl	8000f64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 8001108:	4aa5      	ldr	r2, [pc, #660]	@ (80013a0 <astraCoreInit+0x34c>)
 800110a:	4620      	mov	r0, r4
 800110c:	a914      	add	r1, sp, #80	@ 0x50
 800110e:	f002 fafd 	bl	800370c <_ZN5astra4ListC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIhSaIhEE>
 8001112:	4621      	mov	r1, r4
 8001114:	4628      	mov	r0, r5
  rootPage->addItem(secondPage);
 8001116:	4da3      	ldr	r5, [pc, #652]	@ (80013a4 <astraCoreInit+0x350>)
  rootPage->addItem(new astra::List("Tetris", pic_2));
 8001118:	f002 fa28 	bl	800356c <_ZN5astra4Menu7addItemEPS0_>
 800111c:	a814      	add	r0, sp, #80	@ 0x50
 800111e:	f008 f9b5 	bl	800948c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
  rootPage->addItem(secondPage);
 8001122:	6829      	ldr	r1, [r5, #0]
 8001124:	6838      	ldr	r0, [r7, #0]
 8001126:	f002 fa21 	bl	800356c <_ZN5astra4Menu7addItemEPS0_>

  secondPage->addItem(new astra::List("项目：With AstraUI"));
 800112a:	f44f 70b2 	mov.w	r0, #356	@ 0x164
 800112e:	f8d5 8000 	ldr.w	r8, [r5]
 8001132:	f007 fe97 	bl	8008e64 <_Znwj>
 8001136:	4604      	mov	r4, r0
 8001138:	499b      	ldr	r1, [pc, #620]	@ (80013a8 <astraCoreInit+0x354>)
 800113a:	a814      	add	r0, sp, #80	@ 0x50
 800113c:	f7ff ff12 	bl	8000f64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 8001140:	4620      	mov	r0, r4
 8001142:	a914      	add	r1, sp, #80	@ 0x50
 8001144:	f002 fbfa 	bl	800393c <_ZN5astra4ListC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001148:	4621      	mov	r1, r4
 800114a:	4640      	mov	r0, r8
 800114c:	f002 fa0e 	bl	800356c <_ZN5astra4Menu7addItemEPS0_>
 8001150:	a814      	add	r0, sp, #80	@ 0x50
 8001152:	f008 f99b 	bl	800948c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
  secondPage->addItem(new astra::Tile("Supported Games:"));
 8001156:	f44f 70b4 	mov.w	r0, #360	@ 0x168
 800115a:	f8d5 8000 	ldr.w	r8, [r5]
 800115e:	f007 fe81 	bl	8008e64 <_Znwj>
 8001162:	4604      	mov	r4, r0
 8001164:	4991      	ldr	r1, [pc, #580]	@ (80013ac <astraCoreInit+0x358>)
 8001166:	a814      	add	r0, sp, #80	@ 0x50
 8001168:	f7ff fefc 	bl	8000f64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 800116c:	4620      	mov	r0, r4
 800116e:	a914      	add	r1, sp, #80	@ 0x50
 8001170:	f002 fc40 	bl	80039f4 <_ZN5astra4TileC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001174:	4621      	mov	r1, r4
 8001176:	4640      	mov	r0, r8
 8001178:	f002 f9f8 	bl	800356c <_ZN5astra4Menu7addItemEPS0_>
 800117c:	a814      	add	r0, sp, #80	@ 0x50
 800117e:	f008 f985 	bl	800948c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
  secondPage->addItem(new astra::Tile("Chrome Dino Run"), new astra::CheckBox(test));
 8001182:	f44f 70b4 	mov.w	r0, #360	@ 0x168
 8001186:	f8d5 9000 	ldr.w	r9, [r5]
 800118a:	f007 fe6b 	bl	8008e64 <_Znwj>
 800118e:	4604      	mov	r4, r0
 8001190:	4987      	ldr	r1, [pc, #540]	@ (80013b0 <astraCoreInit+0x35c>)
 8001192:	a814      	add	r0, sp, #80	@ 0x50
 8001194:	f7ff fee6 	bl	8000f64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 8001198:	a914      	add	r1, sp, #80	@ 0x50
 800119a:	4620      	mov	r0, r4
 800119c:	f002 fc2a 	bl	80039f4 <_ZN5astra4TileC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80011a0:	20e0      	movs	r0, #224	@ 0xe0
 80011a2:	f007 fe5f 	bl	8008e64 <_Znwj>
 80011a6:	4680      	mov	r8, r0
 80011a8:	4982      	ldr	r1, [pc, #520]	@ (80013b4 <astraCoreInit+0x360>)
 80011aa:	f003 f9f1 	bl	8004590 <_ZN5astra8CheckBoxC1ERb>
 80011ae:	4642      	mov	r2, r8
 80011b0:	4621      	mov	r1, r4
 80011b2:	4648      	mov	r0, r9
 80011b4:	f002 fa4c 	bl	8003650 <_ZN5astra4Menu7addItemEPS0_PNS_6WidgetE>
 80011b8:	a814      	add	r0, sp, #80	@ 0x50
 80011ba:	f008 f967 	bl	800948c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
  secondPage->addItem(new astra::List("Snake"), new astra::PopUp(1, "测试", {"测试"}, testIndex));
 80011be:	682b      	ldr	r3, [r5, #0]
 80011c0:	f44f 70b2 	mov.w	r0, #356	@ 0x164
 80011c4:	9302      	str	r3, [sp, #8]
 80011c6:	f007 fe4d 	bl	8008e64 <_Znwj>
 80011ca:	4680      	mov	r8, r0
 80011cc:	4971      	ldr	r1, [pc, #452]	@ (8001394 <astraCoreInit+0x340>)
 80011ce:	a808      	add	r0, sp, #32
 80011d0:	f7ff fec8 	bl	8000f64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 80011d4:	a908      	add	r1, sp, #32
 80011d6:	4640      	mov	r0, r8
 80011d8:	f002 fbb0 	bl	800393c <_ZN5astra4ListC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80011dc:	f44f 708c 	mov.w	r0, #280	@ 0x118
 80011e0:	f007 fe40 	bl	8008e64 <_Znwj>
 80011e4:	4974      	ldr	r1, [pc, #464]	@ (80013b8 <astraCoreInit+0x364>)
 80011e6:	4681      	mov	r9, r0
 80011e8:	a80e      	add	r0, sp, #56	@ 0x38
 80011ea:	f7ff febb 	bl	8000f64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 80011ee:	4972      	ldr	r1, [pc, #456]	@ (80013b8 <astraCoreInit+0x364>)
 80011f0:	a814      	add	r0, sp, #80	@ 0x50
 80011f2:	f7ff feb7 	bl	8000f64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
							   __al));
	  }
#endif
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80011f6:	2018      	movs	r0, #24
	pointer _M_finish;
	pointer _M_end_of_storage;

	_GLIBCXX20_CONSTEXPR
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
	: _M_start(), _M_finish(), _M_end_of_storage()
 80011f8:	e9cd 6605 	strd	r6, r6, [sp, #20]
 80011fc:	9607      	str	r6, [sp, #28]
 80011fe:	f007 fe31 	bl	8008e64 <_Znwj>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 8001202:	f100 0308 	add.w	r3, r0, #8
			    std::forward_iterator_tag)
	{
	  const size_type __n = std::distance(__first, __last);
	  this->_M_impl._M_start
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8001206:	f100 0a18 	add.w	sl, r0, #24
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 800120a:	6003      	str	r3, [r0, #0]
      { return _M_string_length; }
 800120c:	e9dd 3214 	ldrd	r3, r2, [sp, #80]	@ 0x50
	if (__dnew > size_type(_S_local_capacity))
 8001210:	2a0f      	cmp	r2, #15
 8001212:	4604      	mov	r4, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8001214:	9005      	str	r0, [sp, #20]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8001216:	f8cd a01c 	str.w	sl, [sp, #28]
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
 800121a:	eb03 0b02 	add.w	fp, r3, r2
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 800121e:	9204      	str	r2, [sp, #16]
	if (__dnew > size_type(_S_local_capacity))
 8001220:	d908      	bls.n	8001234 <astraCoreInit+0x1e0>
	    _M_data(_M_create(__dnew, size_type(0)));
 8001222:	4632      	mov	r2, r6
 8001224:	a904      	add	r1, sp, #16
 8001226:	9303      	str	r3, [sp, #12]
 8001228:	f008 f90e 	bl	8009448 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
 800122c:	9a04      	ldr	r2, [sp, #16]
 800122e:	9b03      	ldr	r3, [sp, #12]
      { _M_dataplus._M_p = __p; }
 8001230:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
 8001232:	60a2      	str	r2, [r4, #8]
	this->_S_copy_chars(_M_data(), __beg, __end);
 8001234:	4619      	mov	r1, r3
 8001236:	6820      	ldr	r0, [r4, #0]
 8001238:	465a      	mov	r2, fp
 800123a:	f008 f998 	bl	800956e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 800123e:	2100      	movs	r1, #0
 8001240:	6822      	ldr	r2, [r4, #0]
	_M_set_length(__dnew);
 8001242:	9b04      	ldr	r3, [sp, #16]
 8001244:	4648      	mov	r0, r9
      { _M_string_length = __length; }
 8001246:	6063      	str	r3, [r4, #4]
 8001248:	54d1      	strb	r1, [r2, r3]
 800124a:	4b5c      	ldr	r3, [pc, #368]	@ (80013bc <astraCoreInit+0x368>)
 800124c:	2101      	movs	r1, #1
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	aa0e      	add	r2, sp, #56	@ 0x38
 8001252:	ab05      	add	r3, sp, #20
	  this->_M_impl._M_finish =
 8001254:	f8cd a018 	str.w	sl, [sp, #24]
 8001258:	f003 f9ae 	bl	80045b8 <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh>
 800125c:	464a      	mov	r2, r9
 800125e:	4641      	mov	r1, r8
 8001260:	9802      	ldr	r0, [sp, #8]
 8001262:	f002 f9f5 	bl	8003650 <_ZN5astra4Menu7addItemEPS0_PNS_6WidgetE>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001266:	e9dd 4605 	ldrd	r4, r6, [sp, #20]
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
 800126a:	42a6      	cmp	r6, r4
 800126c:	f040 8083 	bne.w	8001376 <astraCoreInit+0x322>
	_M_deallocate(_M_impl._M_start,
 8001270:	9805      	ldr	r0, [sp, #20]
	if (__p)
 8001272:	b118      	cbz	r0, 800127c <astraCoreInit+0x228>
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8001274:	9907      	ldr	r1, [sp, #28]
 8001276:	1a09      	subs	r1, r1, r0
 8001278:	f007 fd8e 	bl	8008d98 <_ZdlPvj>
      { _M_dispose(); }
 800127c:	a814      	add	r0, sp, #80	@ 0x50
 800127e:	f008 f905 	bl	800948c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8001282:	a80e      	add	r0, sp, #56	@ 0x38
 8001284:	f008 f902 	bl	800948c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8001288:	a808      	add	r0, sp, #32
 800128a:	f008 f8ff 	bl	800948c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
  secondPage->addItem(new astra::List("Tetris"), new astra::Slider("测试", 0, 100, 50, testSlider));
 800128e:	f44f 70b2 	mov.w	r0, #356	@ 0x164
 8001292:	f8d5 8000 	ldr.w	r8, [r5]
 8001296:	f007 fde5 	bl	8008e64 <_Znwj>
 800129a:	4604      	mov	r4, r0
 800129c:	493f      	ldr	r1, [pc, #252]	@ (800139c <astraCoreInit+0x348>)
 800129e:	a80e      	add	r0, sp, #56	@ 0x38
 80012a0:	f7ff fe60 	bl	8000f64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 80012a4:	a90e      	add	r1, sp, #56	@ 0x38
 80012a6:	4620      	mov	r0, r4
 80012a8:	f002 fb48 	bl	800393c <_ZN5astra4ListC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80012ac:	f44f 708c 	mov.w	r0, #280	@ 0x118
 80012b0:	f007 fdd8 	bl	8008e64 <_Znwj>
 80012b4:	4940      	ldr	r1, [pc, #256]	@ (80013b8 <astraCoreInit+0x364>)
 80012b6:	4606      	mov	r6, r0
 80012b8:	a814      	add	r0, sp, #80	@ 0x50
 80012ba:	f7ff fe53 	bl	8000f64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 80012be:	4b40      	ldr	r3, [pc, #256]	@ (80013c0 <astraCoreInit+0x36c>)
 80012c0:	a914      	add	r1, sp, #80	@ 0x50
 80012c2:	9301      	str	r3, [sp, #4]
 80012c4:	2332      	movs	r3, #50	@ 0x32
 80012c6:	2200      	movs	r2, #0
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	4630      	mov	r0, r6
 80012cc:	2364      	movs	r3, #100	@ 0x64
 80012ce:	f003 fa33 	bl	8004738 <_ZN5astra6SliderC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhhRh>
 80012d2:	4632      	mov	r2, r6
 80012d4:	4621      	mov	r1, r4
 80012d6:	4640      	mov	r0, r8
 80012d8:	f002 f9ba 	bl	8003650 <_ZN5astra4Menu7addItemEPS0_PNS_6WidgetE>
 80012dc:	a814      	add	r0, sp, #80	@ 0x50
 80012de:	f008 f8d5 	bl	800948c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80012e2:	a80e      	add	r0, sp, #56	@ 0x38
 80012e4:	f008 f8d2 	bl	800948c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
  secondPage->addItem(new astra::List("auto-fill item"));
 80012e8:	f44f 70b2 	mov.w	r0, #356	@ 0x164
 80012ec:	682e      	ldr	r6, [r5, #0]
 80012ee:	f007 fdb9 	bl	8008e64 <_Znwj>
 80012f2:	4604      	mov	r4, r0
 80012f4:	4933      	ldr	r1, [pc, #204]	@ (80013c4 <astraCoreInit+0x370>)
 80012f6:	a814      	add	r0, sp, #80	@ 0x50
 80012f8:	f7ff fe34 	bl	8000f64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 80012fc:	a914      	add	r1, sp, #80	@ 0x50
 80012fe:	4620      	mov	r0, r4
 8001300:	f002 fb1c 	bl	800393c <_ZN5astra4ListC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001304:	4621      	mov	r1, r4
 8001306:	4630      	mov	r0, r6
 8001308:	f002 f930 	bl	800356c <_ZN5astra4Menu7addItemEPS0_>
 800130c:	a814      	add	r0, sp, #80	@ 0x50
 800130e:	f008 f8bd 	bl	800948c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
  secondPage->addItem(new astra::List("pseudo-text"));
 8001312:	f44f 70b2 	mov.w	r0, #356	@ 0x164
 8001316:	682e      	ldr	r6, [r5, #0]
 8001318:	f007 fda4 	bl	8008e64 <_Znwj>
 800131c:	4604      	mov	r4, r0
 800131e:	492a      	ldr	r1, [pc, #168]	@ (80013c8 <astraCoreInit+0x374>)
 8001320:	a814      	add	r0, sp, #80	@ 0x50
 8001322:	f7ff fe1f 	bl	8000f64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 8001326:	a914      	add	r1, sp, #80	@ 0x50
 8001328:	4620      	mov	r0, r4
 800132a:	f002 fb07 	bl	800393c <_ZN5astra4ListC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800132e:	4621      	mov	r1, r4
 8001330:	4630      	mov	r0, r6
 8001332:	f002 f91b 	bl	800356c <_ZN5astra4Menu7addItemEPS0_>
 8001336:	a814      	add	r0, sp, #80	@ 0x50
 8001338:	f008 f8a8 	bl	800948c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
  secondPage->addItem(new astra::List("padding"));
 800133c:	f44f 70b2 	mov.w	r0, #356	@ 0x164
 8001340:	682d      	ldr	r5, [r5, #0]
 8001342:	f007 fd8f 	bl	8008e64 <_Znwj>
 8001346:	4604      	mov	r4, r0
 8001348:	4920      	ldr	r1, [pc, #128]	@ (80013cc <astraCoreInit+0x378>)
 800134a:	a814      	add	r0, sp, #80	@ 0x50
 800134c:	f7ff fe0a 	bl	8000f64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 8001350:	a914      	add	r1, sp, #80	@ 0x50
 8001352:	4620      	mov	r0, r4
 8001354:	f002 faf2 	bl	800393c <_ZN5astra4ListC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001358:	4621      	mov	r1, r4
 800135a:	4628      	mov	r0, r5
 800135c:	f002 f906 	bl	800356c <_ZN5astra4Menu7addItemEPS0_>
 8001360:	a814      	add	r0, sp, #80	@ 0x50
 8001362:	f008 f893 	bl	800948c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>

  astraLauncher->init(rootPage);
 8001366:	4b1a      	ldr	r3, [pc, #104]	@ (80013d0 <astraCoreInit+0x37c>)
 8001368:	6839      	ldr	r1, [r7, #0]
 800136a:	6818      	ldr	r0, [r3, #0]
}
 800136c:	b01b      	add	sp, #108	@ 0x6c
 800136e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  astraLauncher->init(rootPage);
 8001372:	f003 bbe7 	b.w	8004b44 <_ZN5astra8Launcher4initEPNS_4MenuE>
 8001376:	4620      	mov	r0, r4
 8001378:	f008 f888 	bl	800948c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800137c:	3418      	adds	r4, #24
 800137e:	e774      	b.n	800126a <astraCoreInit+0x216>
 8001380:	437f0000 	.word	0x437f0000
 8001384:	0800b3e4 	.word	0x0800b3e4
 8001388:	20000094 	.word	0x20000094
 800138c:	0800af0d 	.word	0x0800af0d
 8001390:	200000c0 	.word	0x200000c0
 8001394:	0800aed2 	.word	0x0800aed2
 8001398:	200000b4 	.word	0x200000b4
 800139c:	0800aed8 	.word	0x0800aed8
 80013a0:	200000a8 	.word	0x200000a8
 80013a4:	2000008c 	.word	0x2000008c
 80013a8:	0800aedf 	.word	0x0800aedf
 80013ac:	0800aef5 	.word	0x0800aef5
 80013b0:	0800af06 	.word	0x0800af06
 80013b4:	20000091 	.word	0x20000091
 80013b8:	0800af16 	.word	0x0800af16
 80013bc:	20000090 	.word	0x20000090
 80013c0:	20000000 	.word	0x20000000
 80013c4:	0800af1d 	.word	0x0800af1d
 80013c8:	0800af2c 	.word	0x0800af2c
 80013cc:	0800af38 	.word	0x0800af38
 80013d0:	20000098 	.word	0x20000098

080013d4 <astraCoreUpdate>:

void astraCoreUpdate(void) {
 80013d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  astraLauncher->update();
 80013d8:	4d48      	ldr	r5, [pc, #288]	@ (80014fc <astraCoreUpdate+0x128>)
void astraCoreUpdate(void) {
 80013da:	b08c      	sub	sp, #48	@ 0x30
  astraLauncher->update();
 80013dc:	6828      	ldr	r0, [r5, #0]
 80013de:	f003 fb7d 	bl	8004adc <_ZN5astra8Launcher6updateEv>
  static key::KEY_ACTION *getKeyMap() { return get()->key; }

  static key::KEY_TYPE *getKeyFlag() { return &get()->keyFlag; }

public:
  static void keyScan() { get()->_keyScan(); }
 80013e2:	f003 fe75 	bl	80050d0 <_ZN3HAL3getEv>
 80013e6:	6803      	ldr	r3, [r0, #0]
 80013e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013ec:	4798      	blx	r3
  static key::KEY_TYPE *getKeyFlag() { return &get()->keyFlag; }
 80013ee:	f003 fe6f 	bl	80050d0 <_ZN3HAL3getEv>
  HAL::keyScan();

  if (*HAL::getKeyFlag() == key::KEY_PRESSED) {
 80013f2:	7c03      	ldrb	r3, [r0, #16]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d13d      	bne.n	8001474 <astraCoreUpdate+0xa0>
 80013f8:	f003 fe6a 	bl	80050d0 <_ZN3HAL3getEv>
    *HAL::getKeyFlag() = key::KEY_NOT_PRESSED;
 80013fc:	2400      	movs	r4, #0
 80013fe:	7404      	strb	r4, [r0, #16]
  static key::KEY_ACTION *getKeyMap() { return get()->key; }
 8001400:	f003 fe66 	bl	80050d0 <_ZN3HAL3getEv>
    for (unsigned char i = 0; i < key::KEY_NUM; i++) {
      if (HAL::getKeyMap()[i] == key::CLICK) {
 8001404:	4420      	add	r0, r4
 8001406:	7b03      	ldrb	r3, [r0, #12]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d16b      	bne.n	80014e4 <astraCoreUpdate+0x110>
	if (i == 0) { astraLauncher->getSelector()->goPreview(); }//selector去到上一个项目
 800140c:	b92c      	cbnz	r4, 800141a <astraCoreUpdate+0x46>
      void init(Menu* _rootPage);
      bool open();
      void close();
      void update();
      Camera* getCamera() { return camera; }
      Selector* getSelector() { return selector; }
 800140e:	682b      	ldr	r3, [r5, #0]
 8001410:	6818      	ldr	r0, [r3, #0]
 8001412:	f002 fbdd 	bl	8003bd0 <_ZN5astra8Selector9goPreviewEv>
    for (unsigned char i = 0; i < key::KEY_NUM; i++) {
 8001416:	2401      	movs	r4, #1
 8001418:	e7f2      	b.n	8001400 <astraCoreUpdate+0x2c>
	else if (i == 1) { astraLauncher->getSelector()->goNext(); }//selector去到下一个项目
 800141a:	2c01      	cmp	r4, #1
 800141c:	d105      	bne.n	800142a <astraCoreUpdate+0x56>
 800141e:	682b      	ldr	r3, [r5, #0]
    for (unsigned char i = 0; i < key::KEY_NUM; i++) {
 8001420:	2402      	movs	r4, #2
	else if (i == 1) { astraLauncher->getSelector()->goNext(); }//selector去到下一个项目
 8001422:	6818      	ldr	r0, [r3, #0]
 8001424:	f002 fbb6 	bl	8003b94 <_ZN5astra8Selector6goNextEv>
    for (unsigned char i = 0; i < key::KEY_NUM; i++) {
 8001428:	e7ea      	b.n	8001400 <astraCoreUpdate+0x2c>
	else if (i == 2) {
 800142a:	2c02      	cmp	r4, #2
 800142c:	d112      	bne.n	8001454 <astraCoreUpdate+0x80>
	  if (astraLauncher->open()) {
 800142e:	6828      	ldr	r0, [r5, #0]
 8001430:	f003 fca0 	bl	8004d74 <_ZN5astra8Launcher4openEv>
 8001434:	b148      	cbz	r0, 800144a <astraCoreUpdate+0x76>
	    if (astraLauncher->currentMenu->getNextMenu()->title == "Tetris")
 8001436:	682b      	ldr	r3, [r5, #0]
 8001438:	6898      	ldr	r0, [r3, #8]
 800143a:	f001 ff53 	bl	80032e4 <_ZNK5astra4Menu11getNextMenuEv>
    { return __lhs.compare(__rhs) == 0; }
 800143e:	4930      	ldr	r1, [pc, #192]	@ (8001500 <astraCoreUpdate+0x12c>)
 8001440:	30f8      	adds	r0, #248	@ 0xf8
 8001442:	f008 f9a9 	bl	8009798 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 8001446:	4604      	mov	r4, r0
 8001448:	b1b8      	cbz	r0, 800147a <astraCoreUpdate+0xa6>
    for (unsigned char i = 0; i < key::KEY_NUM; i++) {
 800144a:	2403      	movs	r4, #3
 800144c:	e7d8      	b.n	8001400 <astraCoreUpdate+0x2c>
 800144e:	3401      	adds	r4, #1
 8001450:	2c04      	cmp	r4, #4
 8001452:	d1d5      	bne.n	8001400 <astraCoreUpdate+0x2c>
 8001454:	f003 fe3c 	bl	80050d0 <_ZN3HAL3getEv>
 8001458:	4604      	mov	r4, r0
 800145a:	f003 fe39 	bl	80050d0 <_ZN3HAL3getEv>
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
	      const _Tp& __value)
    {
      for (; __first != __last; ++__first)
	*__first = __value;
 800145e:	1d02      	adds	r2, r0, #4
 8001460:	2100      	movs	r1, #0
 8001462:	1b12      	subs	r2, r2, r4
 8001464:	f104 000c 	add.w	r0, r4, #12
 8001468:	f008 fd7f 	bl	8009f6a <memset>
  static key::KEY_TYPE *getKeyFlag() { return &get()->keyFlag; }
 800146c:	f003 fe30 	bl	80050d0 <_ZN3HAL3getEv>
      } else if (HAL::getKeyMap()[i] == key::PRESS) {
      if (i == 0) { astraLauncher->close(); }//退出当前项目
      }
    }
    std::fill(HAL::getKeyMap(), HAL::getKeyMap() + key::KEY_NUM, key::INVALID);
    *HAL::getKeyFlag() = key::KEY_NOT_PRESSED;
 8001470:	2300      	movs	r3, #0
 8001472:	7403      	strb	r3, [r0, #16]
  }
}
 8001474:	b00c      	add	sp, #48	@ 0x30
 8001476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	      astraLauncher->notice("Score: "+std::to_string(main4Tetris()), 600);
 800147a:	682f      	ldr	r7, [r5, #0]
 800147c:	f000 fb10 	bl	8001aa0 <main4Tetris>
 8001480:	4601      	mov	r1, r0
 8001482:	4668      	mov	r0, sp
 8001484:	f7ff fd96 	bl	8000fb4 <_ZNSt7__cxx119to_stringEi>
    { return std::move(__rhs.insert(0, __lhs)); }
 8001488:	4621      	mov	r1, r4
 800148a:	4a1e      	ldr	r2, [pc, #120]	@ (8001504 <astraCoreUpdate+0x130>)
 800148c:	4668      	mov	r0, sp
 800148e:	f008 f973 	bl	8009778 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 8001492:	f10d 0820 	add.w	r8, sp, #32
    { return std::move(__rhs.insert(0, __lhs)); }
 8001496:	4604      	mov	r4, r0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 8001498:	f8cd 8018 	str.w	r8, [sp, #24]
	if (__str._M_is_local())
 800149c:	f007 ffce 	bl	800943c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 80014a0:	f104 0608 	add.w	r6, r4, #8
 80014a4:	b1c8      	cbz	r0, 80014da <astraCoreUpdate+0x106>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
 80014a6:	6862      	ldr	r2, [r4, #4]
      }

      static _GLIBCXX20_CONSTEXPR char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
	if (__n == 0)
 80014a8:	3201      	adds	r2, #1
 80014aa:	d003      	beq.n	80014b4 <astraCoreUpdate+0xe0>
	  return __s1;
#if __cplusplus >= 202002L
	if (std::__is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
#endif
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
 80014ac:	4631      	mov	r1, r6
 80014ae:	4640      	mov	r0, r8
 80014b0:	f008 fe33 	bl	800a11a <memcpy>
      { _M_string_length = __length; }
 80014b4:	6863      	ldr	r3, [r4, #4]
 80014b6:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80014ba:	9307      	str	r3, [sp, #28]
 80014bc:	2300      	movs	r3, #0
 80014be:	4638      	mov	r0, r7
 80014c0:	6063      	str	r3, [r4, #4]
	__c1 = __c2;
 80014c2:	7223      	strb	r3, [r4, #8]
 80014c4:	a906      	add	r1, sp, #24
      { _M_dataplus._M_p = __p; }
 80014c6:	6026      	str	r6, [r4, #0]
 80014c8:	f003 f9b2 	bl	8004830 <_ZN5astra8Launcher6noticeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
      { _M_dispose(); }
 80014cc:	a806      	add	r0, sp, #24
 80014ce:	f007 ffdd 	bl	800948c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80014d2:	4668      	mov	r0, sp
 80014d4:	f007 ffda 	bl	800948c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
    for (unsigned char i = 0; i < key::KEY_NUM; i++) {
 80014d8:	e7b7      	b.n	800144a <astraCoreUpdate+0x76>
      { _M_dataplus._M_p = __p; }
 80014da:	6823      	ldr	r3, [r4, #0]
 80014dc:	9306      	str	r3, [sp, #24]
      { _M_allocated_capacity = __capacity; }
 80014de:	68a3      	ldr	r3, [r4, #8]
 80014e0:	9308      	str	r3, [sp, #32]
 80014e2:	e7e7      	b.n	80014b4 <astraCoreUpdate+0xe0>
  static key::KEY_ACTION *getKeyMap() { return get()->key; }
 80014e4:	f003 fdf4 	bl	80050d0 <_ZN3HAL3getEv>
      } else if (HAL::getKeyMap()[i] == key::PRESS) {
 80014e8:	4420      	add	r0, r4
 80014ea:	7b03      	ldrb	r3, [r0, #12]
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d1ae      	bne.n	800144e <astraCoreUpdate+0x7a>
      if (i == 0) { astraLauncher->close(); }//退出当前项目
 80014f0:	2c00      	cmp	r4, #0
 80014f2:	d1ac      	bne.n	800144e <astraCoreUpdate+0x7a>
 80014f4:	6828      	ldr	r0, [r5, #0]
 80014f6:	f003 fc8b 	bl	8004e10 <_ZN5astra8Launcher5closeEv>
    for (unsigned char i = 0; i < key::KEY_NUM; i++) {
 80014fa:	e78c      	b.n	8001416 <astraCoreUpdate+0x42>
 80014fc:	20000098 	.word	0x20000098
 8001500:	0800aed8 	.word	0x0800aed8
 8001504:	0800af40 	.word	0x0800af40

08001508 <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001508:	b510      	push	{r4, lr}
 800150a:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 800150c:	6800      	ldr	r0, [r0, #0]
	if (__p)
 800150e:	b118      	cbz	r0, 8001518 <_ZNSt12_Vector_baseIhSaIhEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001510:	68a1      	ldr	r1, [r4, #8]
 8001512:	1a09      	subs	r1, r1, r0
 8001514:	f007 fc40 	bl	8008d98 <_ZdlPvj>
      }
 8001518:	4620      	mov	r0, r4
 800151a:	bd10      	pop	{r4, pc}

0800151c <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>:
      vector(initializer_list<value_type> __l,
 800151c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800151e:	ab02      	add	r3, sp, #8
 8001520:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001524:	2300      	movs	r3, #0

      // Called by constructors to check initial size.
      static _GLIBCXX20_CONSTEXPR size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8001526:	429a      	cmp	r2, r3
      vector(initializer_list<value_type> __l,
 8001528:	4604      	mov	r4, r0
 800152a:	460f      	mov	r7, r1
      constexpr initializer_list() noexcept
      : _M_array(0), _M_len(0) { }

      // Number of elements.
      constexpr size_type
      size() const noexcept { return _M_len; }
 800152c:	4615      	mov	r5, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 800152e:	e9c0 3300 	strd	r3, r3, [r0]
 8001532:	6083      	str	r3, [r0, #8]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8001534:	da02      	bge.n	800153c <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_+0x20>
	  __throw_length_error(
 8001536:	4809      	ldr	r0, [pc, #36]	@ (800155c <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_+0x40>)
 8001538:	f007 ff70 	bl	800941c <_ZSt20__throw_length_errorPKc>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800153c:	4610      	mov	r0, r2
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800153e:	d001      	beq.n	8001544 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_+0x28>
 8001540:	f007 fc90 	bl	8008e64 <_Znwj>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8001544:	1946      	adds	r6, r0, r5
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8001546:	6020      	str	r0, [r4, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8001548:	60a6      	str	r6, [r4, #8]
	  if (_Num)
 800154a:	b11d      	cbz	r5, 8001554 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_+0x38>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800154c:	462a      	mov	r2, r5
 800154e:	4639      	mov	r1, r7
 8001550:	f008 fde3 	bl	800a11a <memcpy>
      }
 8001554:	4620      	mov	r0, r4
	  this->_M_impl._M_finish =
 8001556:	6066      	str	r6, [r4, #4]
      }
 8001558:	b003      	add	sp, #12
 800155a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800155c:	0800af48 	.word	0x0800af48

08001560 <_Z41__static_initialization_and_destruction_0ii.constprop.0>:

void astraCoreDestroy(void) {
  HAL::destroy();
  delete astraLauncher;
}
 8001560:	b570      	push	{r4, r5, r6, lr}
 8001562:	2801      	cmp	r0, #1
 8001564:	b0a8      	sub	sp, #160	@ 0xa0
 8001566:	d00d      	beq.n	8001584 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x24>
      }
 8001568:	483c      	ldr	r0, [pc, #240]	@ (800165c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xfc>)
 800156a:	f7ff ffcd 	bl	8001508 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 800156e:	483c      	ldr	r0, [pc, #240]	@ (8001660 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x100>)
 8001570:	f7ff ffca 	bl	8001508 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8001574:	483b      	ldr	r0, [pc, #236]	@ (8001664 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x104>)
 8001576:	f7ff ffc7 	bl	8001508 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 800157a:	483b      	ldr	r0, [pc, #236]	@ (8001668 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x108>)
 800157c:	f7ff ffc4 	bl	8001508 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8001580:	b028      	add	sp, #160	@ 0xa0
 8001582:	bd70      	pop	{r4, r5, r6, pc}
std::vector<uint8_t> pic_0 = {
 8001584:	2478      	movs	r4, #120	@ 0x78
 8001586:	4939      	ldr	r1, [pc, #228]	@ (800166c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10c>)
 8001588:	4622      	mov	r2, r4
 800158a:	a80a      	add	r0, sp, #40	@ 0x28
 800158c:	f008 fdc5 	bl	800a11a <memcpy>
 8001590:	ab0a      	add	r3, sp, #40	@ 0x28
 8001592:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8001596:	ad06      	add	r5, sp, #24
 8001598:	462b      	mov	r3, r5
 800159a:	4622      	mov	r2, r4
 800159c:	9908      	ldr	r1, [sp, #32]
 800159e:	4832      	ldr	r0, [pc, #200]	@ (8001668 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x108>)
 80015a0:	f7ff ffbc 	bl	800151c <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
std::vector<uint8_t> pic_1 = {
 80015a4:	4622      	mov	r2, r4
 80015a6:	4932      	ldr	r1, [pc, #200]	@ (8001670 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x110>)
 80015a8:	a80a      	add	r0, sp, #40	@ 0x28
 80015aa:	f008 fdb6 	bl	800a11a <memcpy>
 80015ae:	ab0a      	add	r3, sp, #40	@ 0x28
 80015b0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80015b4:	ae04      	add	r6, sp, #16
 80015b6:	4633      	mov	r3, r6
 80015b8:	e895 0006 	ldmia.w	r5, {r1, r2}
 80015bc:	4829      	ldr	r0, [pc, #164]	@ (8001664 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x104>)
 80015be:	f7ff ffad 	bl	800151c <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
std::vector<uint8_t> pic_2 = {
 80015c2:	4622      	mov	r2, r4
 80015c4:	492b      	ldr	r1, [pc, #172]	@ (8001674 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x114>)
 80015c6:	a80a      	add	r0, sp, #40	@ 0x28
 80015c8:	f008 fda7 	bl	800a11a <memcpy>
 80015cc:	ab0a      	add	r3, sp, #40	@ 0x28
 80015ce:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80015d2:	ad02      	add	r5, sp, #8
 80015d4:	462b      	mov	r3, r5
 80015d6:	e896 0006 	ldmia.w	r6, {r1, r2}
 80015da:	4821      	ldr	r0, [pc, #132]	@ (8001660 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x100>)
 80015dc:	f7ff ff9e 	bl	800151c <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
std::vector<uint8_t> pic_3 = {
 80015e0:	4622      	mov	r2, r4
 80015e2:	4925      	ldr	r1, [pc, #148]	@ (8001678 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x118>)
 80015e4:	a80a      	add	r0, sp, #40	@ 0x28
 80015e6:	f008 fd98 	bl	800a11a <memcpy>
 80015ea:	ab0a      	add	r3, sp, #40	@ 0x28
 80015ec:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80015f0:	481a      	ldr	r0, [pc, #104]	@ (800165c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xfc>)
 80015f2:	ab01      	add	r3, sp, #4
 80015f4:	e895 0006 	ldmia.w	r5, {r1, r2}
 80015f8:	f7ff ff90 	bl	800151c <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
auto *astraLauncher = new astra::Launcher();
 80015fc:	2010      	movs	r0, #16
 80015fe:	f007 fc31 	bl	8008e64 <_Znwj>
 8001602:	4604      	mov	r4, r0
 8001604:	2210      	movs	r2, #16
 8001606:	2100      	movs	r1, #0
 8001608:	f008 fcaf 	bl	8009f6a <memset>
 800160c:	4b1b      	ldr	r3, [pc, #108]	@ (800167c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x11c>)
auto *rootPage = new astra::Tile("root");
 800160e:	f44f 70b4 	mov.w	r0, #360	@ 0x168
auto *astraLauncher = new astra::Launcher();
 8001612:	601c      	str	r4, [r3, #0]
auto *rootPage = new astra::Tile("root");
 8001614:	f007 fc26 	bl	8008e64 <_Znwj>
 8001618:	4604      	mov	r4, r0
 800161a:	4919      	ldr	r1, [pc, #100]	@ (8001680 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x120>)
 800161c:	a80a      	add	r0, sp, #40	@ 0x28
 800161e:	f7ff fca1 	bl	8000f64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 8001622:	a90a      	add	r1, sp, #40	@ 0x28
 8001624:	4620      	mov	r0, r4
 8001626:	f002 f9e5 	bl	80039f4 <_ZN5astra4TileC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800162a:	4b16      	ldr	r3, [pc, #88]	@ (8001684 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x124>)
      { _M_dispose(); }
 800162c:	a80a      	add	r0, sp, #40	@ 0x28
 800162e:	601c      	str	r4, [r3, #0]
 8001630:	f007 ff2c 	bl	800948c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
auto *secondPage = new astra::List("关于", pic_3);
 8001634:	f44f 70b2 	mov.w	r0, #356	@ 0x164
 8001638:	f007 fc14 	bl	8008e64 <_Znwj>
 800163c:	4604      	mov	r4, r0
 800163e:	4912      	ldr	r1, [pc, #72]	@ (8001688 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x128>)
 8001640:	a80a      	add	r0, sp, #40	@ 0x28
 8001642:	f7ff fc8f 	bl	8000f64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 8001646:	4620      	mov	r0, r4
 8001648:	4a04      	ldr	r2, [pc, #16]	@ (800165c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xfc>)
 800164a:	a90a      	add	r1, sp, #40	@ 0x28
 800164c:	f002 f85e 	bl	800370c <_ZN5astra4ListC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIhSaIhEE>
 8001650:	4b0e      	ldr	r3, [pc, #56]	@ (800168c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x12c>)
 8001652:	a80a      	add	r0, sp, #40	@ 0x28
 8001654:	601c      	str	r4, [r3, #0]
 8001656:	f007 ff19 	bl	800948c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
}
 800165a:	e791      	b.n	8001580 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x20>
 800165c:	2000009c 	.word	0x2000009c
 8001660:	200000a8 	.word	0x200000a8
 8001664:	200000b4 	.word	0x200000b4
 8001668:	200000c0 	.word	0x200000c0
 800166c:	0800acc0 	.word	0x0800acc0
 8001670:	0800ad38 	.word	0x0800ad38
 8001674:	0800adb0 	.word	0x0800adb0
 8001678:	0800ae28 	.word	0x0800ae28
 800167c:	20000098 	.word	0x20000098
 8001680:	0800af79 	.word	0x0800af79
 8001684:	20000094 	.word	0x20000094
 8001688:	0800af7e 	.word	0x0800af7e
 800168c:	2000008c 	.word	0x2000008c

08001690 <_GLOBAL__sub_I_pic_0>:
 8001690:	2001      	movs	r0, #1
 8001692:	f7ff bf65 	b.w	8001560 <_Z41__static_initialization_and_destruction_0ii.constprop.0>

08001696 <_GLOBAL__sub_D_pic_0>:
 8001696:	2000      	movs	r0, #0
 8001698:	f7ff bf62 	b.w	8001560 <_Z41__static_initialization_and_destruction_0ii.constprop.0>

0800169c <_Z4newbv>:
};
uint8_t block[BLOCK_HEIGHT];
int8_t dropdis, movedis, blktype, blkdire;

bool newb()
{
 800169c:	b538      	push	{r3, r4, r5, lr}
  int8_t i;
  blktype = rand() % BLOCK_KINDNUM; // Random
 800169e:	f008 faf7 	bl	8009c90 <rand>
 80016a2:	2306      	movs	r3, #6
 80016a4:	fb90 f2f3 	sdiv	r2, r0, r3
 80016a8:	fb02 0013 	mls	r0, r2, r3, r0
 80016ac:	4b0f      	ldr	r3, [pc, #60]	@ (80016ec <_Z4newbv+0x50>)
  dropdis = 0;
 80016ae:	4a10      	ldr	r2, [pc, #64]	@ (80016f0 <_Z4newbv+0x54>)
  blktype = rand() % BLOCK_KINDNUM; // Random
 80016b0:	7018      	strb	r0, [r3, #0]
  dropdis = 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	7013      	strb	r3, [r2, #0]
  movedis = 0;
 80016b6:	4a0f      	ldr	r2, [pc, #60]	@ (80016f4 <_Z4newbv+0x58>)
 80016b8:	490f      	ldr	r1, [pc, #60]	@ (80016f8 <_Z4newbv+0x5c>)
 80016ba:	7013      	strb	r3, [r2, #0]
  blkdire = 0;
 80016bc:	4a0f      	ldr	r2, [pc, #60]	@ (80016fc <_Z4newbv+0x60>)
 80016be:	7013      	strb	r3, [r2, #0]
  for (i = 0; i < BLOCK_HEIGHT; i++)
 80016c0:	4a0f      	ldr	r2, [pc, #60]	@ (8001700 <_Z4newbv+0x64>)
 80016c2:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 80016c6:	480f      	ldr	r0, [pc, #60]	@ (8001704 <_Z4newbv+0x68>)
  {
    block[i] = blocks[blktype][blkdire][i];
 80016c8:	f812 4b01 	ldrb.w	r4, [r2], #1
    if (screen[i] & block[i]) // Occupied
 80016cc:	f910 5b01 	ldrsb.w	r5, [r0], #1
    block[i] = blocks[blktype][blkdire][i];
 80016d0:	f801 4b01 	strb.w	r4, [r1], #1
    if (screen[i] & block[i]) // Occupied
 80016d4:	4225      	tst	r5, r4
 80016d6:	d106      	bne.n	80016e6 <_Z4newbv+0x4a>
  for (i = 0; i < BLOCK_HEIGHT; i++)
 80016d8:	3301      	adds	r3, #1
 80016da:	b2dc      	uxtb	r4, r3
 80016dc:	2c04      	cmp	r4, #4
 80016de:	b25b      	sxtb	r3, r3
 80016e0:	d1f2      	bne.n	80016c8 <_Z4newbv+0x2c>
      return 0;
  }
  return 1;
 80016e2:	2001      	movs	r0, #1
}
 80016e4:	bd38      	pop	{r3, r4, r5, pc}
      return 0;
 80016e6:	2000      	movs	r0, #0
 80016e8:	e7fc      	b.n	80016e4 <_Z4newbv+0x48>
 80016ea:	bf00      	nop
 80016ec:	200000d8 	.word	0x200000d8
 80016f0:	200000da 	.word	0x200000da
 80016f4:	200000d9 	.word	0x200000d9
 80016f8:	200000db 	.word	0x200000db
 80016fc:	200000d7 	.word	0x200000d7
 8001700:	0800b04e 	.word	0x0800b04e
 8001704:	200000df 	.word	0x200000df

08001708 <_Z4dropv>:

bool drop()
{
 8001708:	b5f0      	push	{r4, r5, r6, r7, lr}
  int8_t i;
  for (i = 0; i < BLOCK_HEIGHT; i++)
    if ((dropdis + i + 1 >= HEIGHT && block[i]) || screen[dropdis + i + 1] & block[i]) // Bottomed || Touched
 800170a:	490c      	ldr	r1, [pc, #48]	@ (800173c <_Z4dropv+0x34>)
 800170c:	480c      	ldr	r0, [pc, #48]	@ (8001740 <_Z4dropv+0x38>)
 800170e:	f991 3000 	ldrsb.w	r3, [r1]
 8001712:	4e0c      	ldr	r6, [pc, #48]	@ (8001744 <_Z4dropv+0x3c>)
 8001714:	461a      	mov	r2, r3
 8001716:	1d1d      	adds	r5, r3, #4
 8001718:	2a0e      	cmp	r2, #14
 800171a:	f810 4b01 	ldrb.w	r4, [r0], #1
 800171e:	dd02      	ble.n	8001726 <_Z4dropv+0x1e>
 8001720:	b124      	cbz	r4, 800172c <_Z4dropv+0x24>
      return 0;
 8001722:	2000      	movs	r0, #0
 8001724:	e008      	b.n	8001738 <_Z4dropv+0x30>
    if ((dropdis + i + 1 >= HEIGHT && block[i]) || screen[dropdis + i + 1] & block[i]) // Bottomed || Touched
 8001726:	56b7      	ldrsb	r7, [r6, r2]
 8001728:	4227      	tst	r7, r4
 800172a:	d1fa      	bne.n	8001722 <_Z4dropv+0x1a>
  for (i = 0; i < BLOCK_HEIGHT; i++)
 800172c:	3201      	adds	r2, #1
 800172e:	4295      	cmp	r5, r2
 8001730:	d1f2      	bne.n	8001718 <_Z4dropv+0x10>
  dropdis++;
  return 1;
 8001732:	2001      	movs	r0, #1
  dropdis++;
 8001734:	3301      	adds	r3, #1
 8001736:	700b      	strb	r3, [r1, #0]
}
 8001738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800173a:	bf00      	nop
 800173c:	200000da 	.word	0x200000da
 8001740:	200000db 	.word	0x200000db
 8001744:	200000e0 	.word	0x200000e0

08001748 <_Z3fixv>:

void fix()
{
 8001748:	b510      	push	{r4, lr}
  int8_t i;
  for (i = 0; i < BLOCK_HEIGHT; i++)
    screen[dropdis + i] |= block[i];
 800174a:	4b0a      	ldr	r3, [pc, #40]	@ (8001774 <_Z3fixv+0x2c>)
 800174c:	480a      	ldr	r0, [pc, #40]	@ (8001778 <_Z3fixv+0x30>)
 800174e:	f993 2000 	ldrsb.w	r2, [r3]
 8001752:	4b0a      	ldr	r3, [pc, #40]	@ (800177c <_Z3fixv+0x34>)
 8001754:	441a      	add	r2, r3
  for (i = 0; i < BLOCK_HEIGHT; i++)
 8001756:	2300      	movs	r3, #0
    screen[dropdis + i] |= block[i];
 8001758:	f992 1000 	ldrsb.w	r1, [r2]
 800175c:	f810 4b01 	ldrb.w	r4, [r0], #1
 8001760:	3301      	adds	r3, #1
 8001762:	4321      	orrs	r1, r4
 8001764:	f802 1b01 	strb.w	r1, [r2], #1
  for (i = 0; i < BLOCK_HEIGHT; i++)
 8001768:	b2d9      	uxtb	r1, r3
 800176a:	2904      	cmp	r1, #4
 800176c:	b25b      	sxtb	r3, r3
 800176e:	d1f3      	bne.n	8001758 <_Z3fixv+0x10>
}
 8001770:	bd10      	pop	{r4, pc}
 8001772:	bf00      	nop
 8001774:	200000da 	.word	0x200000da
 8001778:	200000db 	.word	0x200000db
 800177c:	200000df 	.word	0x200000df

08001780 <_Z3delv>:

void del()
{
 8001780:	2300      	movs	r3, #0
 8001782:	480e      	ldr	r0, [pc, #56]	@ (80017bc <_Z3delv+0x3c>)
 8001784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001786:	461a      	mov	r2, r3
 8001788:	4606      	mov	r6, r0
 800178a:	4d0d      	ldr	r5, [pc, #52]	@ (80017c0 <_Z3delv+0x40>)
 800178c:	6829      	ldr	r1, [r5, #0]
  int8_t i, j;
  for (i = 0; i < HEIGHT; i++)
    if (screen[i] == -1)
 800178e:	f910 4b01 	ldrsb.w	r4, [r0], #1
 8001792:	3401      	adds	r4, #1
 8001794:	d10c      	bne.n	80017b0 <_Z3delv+0x30>
 8001796:	461a      	mov	r2, r3
    {
      for (j = i; j >= 0; j--)
        screen[j] = j ? screen[j - 1] : 0;
 8001798:	b254      	sxtb	r4, r2
 800179a:	1e57      	subs	r7, r2, #1
 800179c:	b10c      	cbz	r4, 80017a2 <_Z3delv+0x22>
 800179e:	b27c      	sxtb	r4, r7
 80017a0:	5734      	ldrsb	r4, [r6, r4]
 80017a2:	54b4      	strb	r4, [r6, r2]
      for (j = i; j >= 0; j--)
 80017a4:	b27c      	sxtb	r4, r7
 80017a6:	3401      	adds	r4, #1
 80017a8:	463a      	mov	r2, r7
 80017aa:	d1f5      	bne.n	8001798 <_Z3delv+0x18>
      score++;
 80017ac:	2201      	movs	r2, #1
 80017ae:	3101      	adds	r1, #1
  for (i = 0; i < HEIGHT; i++)
 80017b0:	3301      	adds	r3, #1
 80017b2:	2b10      	cmp	r3, #16
 80017b4:	d1eb      	bne.n	800178e <_Z3delv+0xe>
 80017b6:	b102      	cbz	r2, 80017ba <_Z3delv+0x3a>
 80017b8:	6029      	str	r1, [r5, #0]
    }
}
 80017ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017bc:	200000df 	.word	0x200000df
 80017c0:	200000f0 	.word	0x200000f0

080017c4 <_Z4moveb>:

void move(bool dire)
{
 80017c4:	b570      	push	{r4, r5, r6, lr}
  int8_t i;
  for (i = 0; i < BLOCK_HEIGHT; ++i)
    if (
        (block[i] & 0x80 && !dire) ||
        (block[i] & 0x01 && dire) ||
        screen[dropdis + i] & (dire ? block[i] >> 1 : block[i] << 1)) // Blocked
 80017c6:	4b19      	ldr	r3, [pc, #100]	@ (800182c <_Z4moveb+0x68>)
 80017c8:	4919      	ldr	r1, [pc, #100]	@ (8001830 <_Z4moveb+0x6c>)
 80017ca:	f993 4000 	ldrsb.w	r4, [r3]
 80017ce:	4b19      	ldr	r3, [pc, #100]	@ (8001834 <_Z4moveb+0x70>)
 80017d0:	460d      	mov	r5, r1
 80017d2:	441c      	add	r4, r3
 80017d4:	2304      	movs	r3, #4
        (block[i] & 0x80 && !dire) ||
 80017d6:	f815 2b01 	ldrb.w	r2, [r5], #1
    if (
 80017da:	0616      	lsls	r6, r2, #24
 80017dc:	d500      	bpl.n	80017e0 <_Z4moveb+0x1c>
        (block[i] & 0x80 && !dire) ||
 80017de:	b1f8      	cbz	r0, 8001820 <_Z4moveb+0x5c>
 80017e0:	07d6      	lsls	r6, r2, #31
 80017e2:	d500      	bpl.n	80017e6 <_Z4moveb+0x22>
        (block[i] & 0x01 && dire) ||
 80017e4:	b9e0      	cbnz	r0, 8001820 <_Z4moveb+0x5c>
        screen[dropdis + i] & (dire ? block[i] >> 1 : block[i] << 1)) // Blocked
 80017e6:	f914 6b01 	ldrsb.w	r6, [r4], #1
 80017ea:	b1d0      	cbz	r0, 8001822 <_Z4moveb+0x5e>
 80017ec:	0852      	lsrs	r2, r2, #1
        (block[i] & 0x01 && dire) ||
 80017ee:	4216      	tst	r6, r2
 80017f0:	d116      	bne.n	8001820 <_Z4moveb+0x5c>
  for (i = 0; i < BLOCK_HEIGHT; ++i)
 80017f2:	3b01      	subs	r3, #1
 80017f4:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 80017f8:	d1ed      	bne.n	80017d6 <_Z4moveb+0x12>
      return;
  for (i = 0; i < BLOCK_HEIGHT; ++i)
    if (dire)
      block[i] >>= 1;
 80017fa:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (dire)
 80017fe:	b190      	cbz	r0, 8001826 <_Z4moveb+0x62>
      block[i] >>= 1;
 8001800:	0852      	lsrs	r2, r2, #1
 8001802:	3301      	adds	r3, #1
 8001804:	f801 2c01 	strb.w	r2, [r1, #-1]
  for (i = 0; i < BLOCK_HEIGHT; ++i)
 8001808:	b2da      	uxtb	r2, r3
 800180a:	2a04      	cmp	r2, #4
 800180c:	b25b      	sxtb	r3, r3
 800180e:	d1f4      	bne.n	80017fa <_Z4moveb+0x36>
    else
      block[i] <<= 1;
  movedis += dire ? 1 : -1;
 8001810:	2800      	cmp	r0, #0
 8001812:	bf0c      	ite	eq
 8001814:	23ff      	moveq	r3, #255	@ 0xff
 8001816:	2301      	movne	r3, #1
 8001818:	4a07      	ldr	r2, [pc, #28]	@ (8001838 <_Z4moveb+0x74>)
 800181a:	7811      	ldrb	r1, [r2, #0]
 800181c:	440b      	add	r3, r1
 800181e:	7013      	strb	r3, [r2, #0]
}
 8001820:	bd70      	pop	{r4, r5, r6, pc}
        screen[dropdis + i] & (dire ? block[i] >> 1 : block[i] << 1)) // Blocked
 8001822:	0052      	lsls	r2, r2, #1
 8001824:	e7e3      	b.n	80017ee <_Z4moveb+0x2a>
      block[i] <<= 1;
 8001826:	0052      	lsls	r2, r2, #1
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	e7ea      	b.n	8001802 <_Z4moveb+0x3e>
 800182c:	200000da 	.word	0x200000da
 8001830:	200000db 	.word	0x200000db
 8001834:	200000df 	.word	0x200000df
 8001838:	200000d9 	.word	0x200000d9

0800183c <_Z6changev>:

#define OBKL blocks[blktype][blkdire][i]
#define MBKL (movedis > 0 ? OBKL >> movedis : OBKL << -movedis)
void change()
{
 800183c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int8_t i;
  blkdire++;
 8001840:	4e30      	ldr	r6, [pc, #192]	@ (8001904 <_Z6changev+0xc8>)
 8001842:	4c31      	ldr	r4, [pc, #196]	@ (8001908 <_Z6changev+0xcc>)
 8001844:	7833      	ldrb	r3, [r6, #0]
 8001846:	3301      	adds	r3, #1
 8001848:	fa5f fe83 	uxtb.w	lr, r3
  blkdire %= 4;
 800184c:	b25b      	sxtb	r3, r3
 800184e:	425a      	negs	r2, r3
 8001850:	f002 0203 	and.w	r2, r2, #3
 8001854:	f003 0303 	and.w	r3, r3, #3
 8001858:	bf58      	it	pl
 800185a:	4253      	negpl	r3, r2
  for (i = 0; i < BLOCK_HEIGHT; i++)
  {
    if (dropdis + i >= HEIGHT && OBKL) // Bottomed
      return;
    movedis--;
 800185c:	4a2b      	ldr	r2, [pc, #172]	@ (800190c <_Z6changev+0xd0>)
  blkdire %= 4;
 800185e:	7033      	strb	r3, [r6, #0]
    movedis--;
 8001860:	f992 1000 	ldrsb.w	r1, [r2]
    if (dropdis + i >= HEIGHT && OBKL) // Bottomed
 8001864:	4a2a      	ldr	r2, [pc, #168]	@ (8001910 <_Z6changev+0xd4>)
    movedis--;
 8001866:	1e4d      	subs	r5, r1, #1
 8001868:	f992 2000 	ldrsb.w	r2, [r2]
 800186c:	fa5f f885 	uxtb.w	r8, r5
 8001870:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8001874:	eb04 0482 	add.w	r4, r4, r2, lsl #2
      movedis++;
      blkdire = blkdire ? blkdire - 1 : 3;
      return;
    }
    movedis++;
    if (screen[dropdis + i] & MBKL) // Blocked
 8001878:	4627      	mov	r7, r4
    if (dropdis + i >= HEIGHT && OBKL) // Bottomed
 800187a:	4a26      	ldr	r2, [pc, #152]	@ (8001914 <_Z6changev+0xd8>)
    movedis--;
 800187c:	b26d      	sxtb	r5, r5
 800187e:	f992 0000 	ldrsb.w	r0, [r2]
    if (MBKL & 0x01) // Overflow
 8001882:	f1c5 0900 	rsb	r9, r5, #0
    if (screen[dropdis + i] & MBKL) // Blocked
 8001886:	f1c1 0a00 	rsb	sl, r1, #0
 800188a:	f100 0b04 	add.w	fp, r0, #4
    if (dropdis + i >= HEIGHT && OBKL) // Bottomed
 800188e:	280f      	cmp	r0, #15
 8001890:	f817 2b01 	ldrb.w	r2, [r7], #1
 8001894:	dd00      	ble.n	8001898 <_Z6changev+0x5c>
 8001896:	b992      	cbnz	r2, 80018be <_Z6changev+0x82>
    if (MBKL & 0x01) // Overflow
 8001898:	2d00      	cmp	r5, #0
 800189a:	bfcc      	ite	gt
 800189c:	fa42 fc08 	asrgt.w	ip, r2, r8
 80018a0:	fa02 fc09 	lslle.w	ip, r2, r9
 80018a4:	f00c 0c01 	and.w	ip, ip, #1
 80018a8:	f1bc 0f00 	cmp.w	ip, #0
 80018ac:	d009      	beq.n	80018c2 <_Z6changev+0x86>
      blkdire = blkdire ? blkdire - 1 : 3;
 80018ae:	f01e 0f03 	tst.w	lr, #3
 80018b2:	bf0e      	itee	eq
 80018b4:	2303      	moveq	r3, #3
 80018b6:	f103 33ff 	addne.w	r3, r3, #4294967295
 80018ba:	b25b      	sxtbne	r3, r3
 80018bc:	7033      	strb	r3, [r6, #0]
      return;
  }
  for (i = 0; i < BLOCK_HEIGHT; i++)
    block[i] = MBKL;
}
 80018be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (screen[dropdis + i] & MBKL) // Blocked
 80018c2:	f8df c054 	ldr.w	ip, [pc, #84]	@ 8001918 <_Z6changev+0xdc>
 80018c6:	2900      	cmp	r1, #0
 80018c8:	f91c c000 	ldrsb.w	ip, [ip, r0]
 80018cc:	bfcc      	ite	gt
 80018ce:	410a      	asrgt	r2, r1
 80018d0:	fa02 f20a 	lslle.w	r2, r2, sl
 80018d4:	ea1c 0202 	ands.w	r2, ip, r2
 80018d8:	d1f1      	bne.n	80018be <_Z6changev+0x82>
  for (i = 0; i < BLOCK_HEIGHT; i++)
 80018da:	3001      	adds	r0, #1
 80018dc:	4558      	cmp	r0, fp
 80018de:	d1d6      	bne.n	800188e <_Z6changev+0x52>
 80018e0:	480e      	ldr	r0, [pc, #56]	@ (800191c <_Z6changev+0xe0>)
    block[i] = MBKL;
 80018e2:	424d      	negs	r5, r1
 80018e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80018e8:	2900      	cmp	r1, #0
 80018ea:	bfcc      	ite	gt
 80018ec:	410b      	asrgt	r3, r1
 80018ee:	40ab      	lslle	r3, r5
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	3201      	adds	r2, #1
 80018f4:	f800 3b01 	strb.w	r3, [r0], #1
  for (i = 0; i < BLOCK_HEIGHT; i++)
 80018f8:	b2d3      	uxtb	r3, r2
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	b252      	sxtb	r2, r2
 80018fe:	d1f1      	bne.n	80018e4 <_Z6changev+0xa8>
 8001900:	e7dd      	b.n	80018be <_Z6changev+0x82>
 8001902:	bf00      	nop
 8001904:	200000d7 	.word	0x200000d7
 8001908:	0800b04e 	.word	0x0800b04e
 800190c:	200000d9 	.word	0x200000d9
 8001910:	200000d8 	.word	0x200000d8
 8001914:	200000da 	.word	0x200000da
 8001918:	200000df 	.word	0x200000df
 800191c:	200000db 	.word	0x200000db

08001920 <_Z15TRoutine4Tetrisv>:

void TRoutine4Tetris()
{
  static int Count4Update = 0, Count4Btn = 0;
  Count4Update++;
  Count4Btn++;
 8001920:	483d      	ldr	r0, [pc, #244]	@ (8001a18 <_Z15TRoutine4Tetrisv+0xf8>)
{
 8001922:	b538      	push	{r3, r4, r5, lr}
  Count4Update++;
 8001924:	493d      	ldr	r1, [pc, #244]	@ (8001a1c <_Z15TRoutine4Tetrisv+0xfc>)
  Count4Btn++;
 8001926:	6803      	ldr	r3, [r0, #0]
  if (!paused && Count4Update >= 150 - quickly*50)
 8001928:	4d3d      	ldr	r5, [pc, #244]	@ (8001a20 <_Z15TRoutine4Tetrisv+0x100>)
  Count4Update++;
 800192a:	680a      	ldr	r2, [r1, #0]
  Count4Btn++;
 800192c:	3301      	adds	r3, #1
 800192e:	6003      	str	r3, [r0, #0]
  if (!paused && Count4Update >= 150 - quickly*50)
 8001930:	7828      	ldrb	r0, [r5, #0]
  Count4Update++;
 8001932:	3201      	adds	r2, #1
 8001934:	600a      	str	r2, [r1, #0]
  if (!paused && Count4Update >= 150 - quickly*50)
 8001936:	b988      	cbnz	r0, 800195c <_Z15TRoutine4Tetrisv+0x3c>
 8001938:	f06f 0431 	mvn.w	r4, #49	@ 0x31
 800193c:	4b39      	ldr	r3, [pc, #228]	@ (8001a24 <_Z15TRoutine4Tetrisv+0x104>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	4363      	muls	r3, r4
 8001942:	3395      	adds	r3, #149	@ 0x95
 8001944:	429a      	cmp	r2, r3
 8001946:	dd09      	ble.n	800195c <_Z15TRoutine4Tetrisv+0x3c>
  {
    Count4Update = 0;
    if (falling)
 8001948:	4c37      	ldr	r4, [pc, #220]	@ (8001a28 <_Z15TRoutine4Tetrisv+0x108>)
    Count4Update = 0;
 800194a:	6008      	str	r0, [r1, #0]
    if (falling)
 800194c:	7823      	ldrb	r3, [r4, #0]
 800194e:	b303      	cbz	r3, 8001992 <_Z15TRoutine4Tetrisv+0x72>
    {
      falling = drop();
 8001950:	f7ff feda 	bl	8001708 <_Z4dropv>
 8001954:	7020      	strb	r0, [r4, #0]
      if (!falling)
 8001956:	b908      	cbnz	r0, 800195c <_Z15TRoutine4Tetrisv+0x3c>
        fix();
 8001958:	f7ff fef6 	bl	8001748 <_Z3fixv>
  static key::KEY_ACTION *getKeyMap() { return get()->key; }

  static key::KEY_TYPE *getKeyFlag() { return &get()->keyFlag; }

public:
  static void keyScan() { get()->_keyScan(); }
 800195c:	f003 fbb8 	bl	80050d0 <_ZN3HAL3getEv>
 8001960:	6803      	ldr	r3, [r0, #0]
 8001962:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001966:	4798      	blx	r3
  static key::KEY_TYPE *getKeyFlag() { return &get()->keyFlag; }
 8001968:	f003 fbb2 	bl	80050d0 <_ZN3HAL3getEv>
      falling = newb();
      playing = falling;
    }
  }
  HAL::keyScan();
  if (*HAL::getKeyFlag() == key::KEY_PRESSED) {
 800196c:	7c03      	ldrb	r3, [r0, #16]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d131      	bne.n	80019d6 <_Z15TRoutine4Tetrisv+0xb6>
 8001972:	f003 fbad 	bl	80050d0 <_ZN3HAL3getEv>
    *HAL::getKeyFlag() = key::KEY_NOT_PRESSED;
 8001976:	2400      	movs	r4, #0
 8001978:	7404      	strb	r4, [r0, #16]
  static key::KEY_ACTION *getKeyMap() { return get()->key; }
 800197a:	f003 fba9 	bl	80050d0 <_ZN3HAL3getEv>
    for (unsigned char i = 0; i < key::KEY_NUM; i++) {
    if (HAL::getKeyMap()[i] == key::CLICK) {
 800197e:	4420      	add	r0, r4
 8001980:	7b00      	ldrb	r0, [r0, #12]
 8001982:	2801      	cmp	r0, #1
 8001984:	d132      	bne.n	80019ec <_Z15TRoutine4Tetrisv+0xcc>
      if (i == 2) move(1);
 8001986:	2c02      	cmp	r4, #2
 8001988:	d10b      	bne.n	80019a2 <_Z15TRoutine4Tetrisv+0x82>
 800198a:	f7ff ff1b 	bl	80017c4 <_Z4moveb>
    for (unsigned char i = 0; i < key::KEY_NUM; i++) {
 800198e:	2403      	movs	r4, #3
 8001990:	e7f3      	b.n	800197a <_Z15TRoutine4Tetrisv+0x5a>
      del();
 8001992:	f7ff fef5 	bl	8001780 <_Z3delv>
      falling = newb();
 8001996:	f7ff fe81 	bl	800169c <_Z4newbv>
      playing = falling;
 800199a:	4b24      	ldr	r3, [pc, #144]	@ (8001a2c <_Z15TRoutine4Tetrisv+0x10c>)
      falling = newb();
 800199c:	7020      	strb	r0, [r4, #0]
      playing = falling;
 800199e:	7018      	strb	r0, [r3, #0]
 80019a0:	e7dc      	b.n	800195c <_Z15TRoutine4Tetrisv+0x3c>
      else if (i == 0) move(0);
 80019a2:	b924      	cbnz	r4, 80019ae <_Z15TRoutine4Tetrisv+0x8e>
 80019a4:	4620      	mov	r0, r4
 80019a6:	f7ff ff0d 	bl	80017c4 <_Z4moveb>
    for (unsigned char i = 0; i < key::KEY_NUM; i++) {
 80019aa:	2401      	movs	r4, #1
 80019ac:	e7e5      	b.n	800197a <_Z15TRoutine4Tetrisv+0x5a>
      else if (i == 3) change();
 80019ae:	2c03      	cmp	r4, #3
 80019b0:	d112      	bne.n	80019d8 <_Z15TRoutine4Tetrisv+0xb8>
 80019b2:	f7ff ff43 	bl	800183c <_Z6changev>
 80019b6:	f003 fb8b 	bl	80050d0 <_ZN3HAL3getEv>
 80019ba:	4604      	mov	r4, r0
 80019bc:	f003 fb88 	bl	80050d0 <_ZN3HAL3getEv>
	*__first = __value;
 80019c0:	1d02      	adds	r2, r0, #4
 80019c2:	2100      	movs	r1, #0
 80019c4:	1b12      	subs	r2, r2, r4
 80019c6:	f104 000c 	add.w	r0, r4, #12
 80019ca:	f008 face 	bl	8009f6a <memset>
  static key::KEY_TYPE *getKeyFlag() { return &get()->keyFlag; }
 80019ce:	f003 fb7f 	bl	80050d0 <_ZN3HAL3getEv>
      if (i == 1) quickly = !quickly;
      else if (i == 0) paused = !paused;
    }
    }
    std::fill(HAL::getKeyMap(), HAL::getKeyMap() + key::KEY_NUM, key::INVALID);
    *HAL::getKeyFlag() = key::KEY_NOT_PRESSED;
 80019d2:	2300      	movs	r3, #0
 80019d4:	7403      	strb	r3, [r0, #16]
  }
}
 80019d6:	bd38      	pop	{r3, r4, r5, pc}
      else if (i == 1) while (drop()) {};
 80019d8:	f7ff fe96 	bl	8001708 <_Z4dropv>
 80019dc:	2800      	cmp	r0, #0
 80019de:	d1fb      	bne.n	80019d8 <_Z15TRoutine4Tetrisv+0xb8>
    for (unsigned char i = 0; i < key::KEY_NUM; i++) {
 80019e0:	2402      	movs	r4, #2
 80019e2:	e7ca      	b.n	800197a <_Z15TRoutine4Tetrisv+0x5a>
 80019e4:	3401      	adds	r4, #1
 80019e6:	2c04      	cmp	r4, #4
 80019e8:	d1c7      	bne.n	800197a <_Z15TRoutine4Tetrisv+0x5a>
 80019ea:	e7e4      	b.n	80019b6 <_Z15TRoutine4Tetrisv+0x96>
  static key::KEY_ACTION *getKeyMap() { return get()->key; }
 80019ec:	f003 fb70 	bl	80050d0 <_ZN3HAL3getEv>
    } else if (HAL::getKeyMap()[i] == key::PRESS) {
 80019f0:	4420      	add	r0, r4
 80019f2:	7b03      	ldrb	r3, [r0, #12]
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d1f5      	bne.n	80019e4 <_Z15TRoutine4Tetrisv+0xc4>
      if (i == 1) quickly = !quickly;
 80019f8:	2c01      	cmp	r4, #1
 80019fa:	d105      	bne.n	8001a08 <_Z15TRoutine4Tetrisv+0xe8>
 80019fc:	4a09      	ldr	r2, [pc, #36]	@ (8001a24 <_Z15TRoutine4Tetrisv+0x104>)
 80019fe:	7813      	ldrb	r3, [r2, #0]
 8001a00:	f083 0301 	eor.w	r3, r3, #1
 8001a04:	7013      	strb	r3, [r2, #0]
    for (unsigned char i = 0; i < key::KEY_NUM; i++) {
 8001a06:	e7eb      	b.n	80019e0 <_Z15TRoutine4Tetrisv+0xc0>
      else if (i == 0) paused = !paused;
 8001a08:	2c00      	cmp	r4, #0
 8001a0a:	d1eb      	bne.n	80019e4 <_Z15TRoutine4Tetrisv+0xc4>
 8001a0c:	782b      	ldrb	r3, [r5, #0]
 8001a0e:	f083 0301 	eor.w	r3, r3, #1
 8001a12:	702b      	strb	r3, [r5, #0]
    for (unsigned char i = 0; i < key::KEY_NUM; i++) {
 8001a14:	e7c9      	b.n	80019aa <_Z15TRoutine4Tetrisv+0x8a>
 8001a16:	bf00      	nop
 8001a18:	200000cc 	.word	0x200000cc
 8001a1c:	200000d0 	.word	0x200000d0
 8001a20:	200000d4 	.word	0x200000d4
 8001a24:	200000d5 	.word	0x200000d5
 8001a28:	200000d6 	.word	0x200000d6
 8001a2c:	20000001 	.word	0x20000001

08001a30 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  if (htim == &htim2)
 8001a30:	4b02      	ldr	r3, [pc, #8]	@ (8001a3c <HAL_TIM_PeriodElapsedCallback+0xc>)
 8001a32:	4283      	cmp	r3, r0
 8001a34:	d101      	bne.n	8001a3a <HAL_TIM_PeriodElapsedCallback+0xa>
  {
    TRoutine4Tetris();
 8001a36:	f7ff bf73 	b.w	8001920 <_Z15TRoutine4Tetrisv>
  }
}
 8001a3a:	4770      	bx	lr
 8001a3c:	200005dc 	.word	0x200005dc

08001a40 <_Z9showFieldPh>:

void showField(unsigned char *dat)
{
 8001a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a44:	2501      	movs	r5, #1
  uint8_t i, j;
  for (i = 0; i < HEIGHT; i++)
  {
    char row = *(dat + i);
    for (j = 0; j < 8; j++)
      if (row & 0x80 >> j)
 8001a46:	f04f 0980 	mov.w	r9, #128	@ 0x80
  static void drawBox(float _x, float _y, float _w, float _h) { get()->_drawBox(_x, _y, _w, _h); }
 8001a4a:	f8df 8050 	ldr.w	r8, [pc, #80]	@ 8001a9c <_Z9showFieldPh+0x5c>
{
 8001a4e:	b085      	sub	sp, #20
 8001a50:	1e46      	subs	r6, r0, #1
    char row = *(dat + i);
 8001a52:	2400      	movs	r4, #0
 8001a54:	f816 af01 	ldrb.w	sl, [r6, #1]!
      if (row & 0x80 >> j)
 8001a58:	fa49 f304 	asr.w	r3, r9, r4
 8001a5c:	ea13 0f0a 	tst.w	r3, sl
 8001a60:	d013      	beq.n	8001a8a <_Z9showFieldPh+0x4a>
	HAL::drawBox(i*8+1, j*8-1, 7, 7);
 8001a62:	4628      	mov	r0, r5
 8001a64:	f7ff f81e 	bl	8000aa4 <__aeabi_i2f>
 8001a68:	4607      	mov	r7, r0
 8001a6a:	00e0      	lsls	r0, r4, #3
 8001a6c:	3801      	subs	r0, #1
 8001a6e:	f7ff f819 	bl	8000aa4 <__aeabi_i2f>
 8001a72:	9003      	str	r0, [sp, #12]
 8001a74:	f003 fb2c 	bl	80050d0 <_ZN3HAL3getEv>
 8001a78:	6803      	ldr	r3, [r0, #0]
 8001a7a:	f8cd 8000 	str.w	r8, [sp]
 8001a7e:	f8d3 b054 	ldr.w	fp, [r3, #84]	@ 0x54
 8001a82:	4639      	mov	r1, r7
 8001a84:	4643      	mov	r3, r8
 8001a86:	9a03      	ldr	r2, [sp, #12]
 8001a88:	47d8      	blx	fp
    for (j = 0; j < 8; j++)
 8001a8a:	3401      	adds	r4, #1
 8001a8c:	2c08      	cmp	r4, #8
 8001a8e:	d1e3      	bne.n	8001a58 <_Z9showFieldPh+0x18>
  for (i = 0; i < HEIGHT; i++)
 8001a90:	3508      	adds	r5, #8
 8001a92:	2d81      	cmp	r5, #129	@ 0x81
 8001a94:	d1dd      	bne.n	8001a52 <_Z9showFieldPh+0x12>
  }
}
 8001a96:	b005      	add	sp, #20
 8001a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a9c:	40e00000 	.word	0x40e00000

08001aa0 <main4Tetris>:

int main4Tetris()
{
  uint8_t i, blockLine;
  uint8_t flush[HEIGHT];
  score = 0;
 8001aa0:	2300      	movs	r3, #0
{
 8001aa2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  score = 0;
 8001aa6:	4d28      	ldr	r5, [pc, #160]	@ (8001b48 <main4Tetris+0xa8>)
{
 8001aa8:	b085      	sub	sp, #20
  score = 0;
 8001aaa:	602b      	str	r3, [r5, #0]
  static unsigned long getRandomSeed() { return get()->_getRandomSeed(); }
 8001aac:	f003 fb10 	bl	80050d0 <_ZN3HAL3getEv>
 8001ab0:	6803      	ldr	r3, [r0, #0]
  srand(HAL::getRandomSeed());
  HAL_TIM_Base_Start_IT(&htim2);
  while (playing)
 8001ab2:	4e26      	ldr	r6, [pc, #152]	@ (8001b4c <main4Tetris+0xac>)
 8001ab4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ab6:	4798      	blx	r3
  srand(HAL::getRandomSeed());
 8001ab8:	f008 f8bc 	bl	8009c34 <srand>
  HAL_TIM_Base_Start_IT(&htim2);
 8001abc:	4824      	ldr	r0, [pc, #144]	@ (8001b50 <main4Tetris+0xb0>)
 8001abe:	f006 fedd 	bl	800887c <HAL_TIM_Base_Start_IT>
  {
    for (i = 0; i < HEIGHT; i++)
    {
      blockLine = (dropdis + BLOCK_HEIGHT > i && i >= dropdis ? block[i - dropdis] : 0);
 8001ac2:	f8df 8090 	ldr.w	r8, [pc, #144]	@ 8001b54 <main4Tetris+0xb4>
  while (playing)
 8001ac6:	7834      	ldrb	r4, [r6, #0]
 8001ac8:	b99c      	cbnz	r4, 8001af2 <main4Tetris+0x52>
    }
    HAL::canvasClear();
    showField(flush);
    HAL::canvasUpdate();
  }
  HAL_TIM_Base_Stop_IT(&htim2);
 8001aca:	4821      	ldr	r0, [pc, #132]	@ (8001b50 <main4Tetris+0xb0>)
 8001acc:	f006 ff00 	bl	80088d0 <HAL_TIM_Base_Stop_IT>
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
	      const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
	*__first = __tmp;
 8001ad0:	2210      	movs	r2, #16
 8001ad2:	4621      	mov	r1, r4
 8001ad4:	4820      	ldr	r0, [pc, #128]	@ (8001b58 <main4Tetris+0xb8>)
 8001ad6:	f008 fa48 	bl	8009f6a <memset>
  std::fill(screen, screen+HEIGHT, 0);
  playing = 1;
 8001ada:	2301      	movs	r3, #1
 8001adc:	7033      	strb	r3, [r6, #0]
  falling = 0;
 8001ade:	4b1f      	ldr	r3, [pc, #124]	@ (8001b5c <main4Tetris+0xbc>)
  quickly = 0;
  paused = 0;
  return score;
}
 8001ae0:	6828      	ldr	r0, [r5, #0]
  falling = 0;
 8001ae2:	701c      	strb	r4, [r3, #0]
  quickly = 0;
 8001ae4:	4b1e      	ldr	r3, [pc, #120]	@ (8001b60 <main4Tetris+0xc0>)
 8001ae6:	701c      	strb	r4, [r3, #0]
  paused = 0;
 8001ae8:	4b1e      	ldr	r3, [pc, #120]	@ (8001b64 <main4Tetris+0xc4>)
 8001aea:	701c      	strb	r4, [r3, #0]
}
 8001aec:	b005      	add	sp, #20
 8001aee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001af2:	4669      	mov	r1, sp
      blockLine = (dropdis + BLOCK_HEIGHT > i && i >= dropdis ? block[i - dropdis] : 0);
 8001af4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b68 <main4Tetris+0xc8>)
 8001af6:	460c      	mov	r4, r1
 8001af8:	f993 0000 	ldrsb.w	r0, [r3]
 8001afc:	2300      	movs	r3, #0
 8001afe:	4f16      	ldr	r7, [pc, #88]	@ (8001b58 <main4Tetris+0xb8>)
 8001b00:	f100 0e03 	add.w	lr, r0, #3
 8001b04:	eba8 0900 	sub.w	r9, r8, r0
 8001b08:	459e      	cmp	lr, r3
 8001b0a:	db1a      	blt.n	8001b42 <main4Tetris+0xa2>
 8001b0c:	4298      	cmp	r0, r3
 8001b0e:	dc18      	bgt.n	8001b42 <main4Tetris+0xa2>
 8001b10:	f819 2003 	ldrb.w	r2, [r9, r3]
      flush[i] = screen[i] | blockLine;
 8001b14:	f917 cb01 	ldrsb.w	ip, [r7], #1
    for (i = 0; i < HEIGHT; i++)
 8001b18:	3301      	adds	r3, #1
      flush[i] = screen[i] | blockLine;
 8001b1a:	ea42 020c 	orr.w	r2, r2, ip
    for (i = 0; i < HEIGHT; i++)
 8001b1e:	2b10      	cmp	r3, #16
      flush[i] = screen[i] | blockLine;
 8001b20:	f801 2b01 	strb.w	r2, [r1], #1
    for (i = 0; i < HEIGHT; i++)
 8001b24:	d1f0      	bne.n	8001b08 <main4Tetris+0x68>
  static void canvasClear() { get()->_canvasClear(); }
 8001b26:	f003 fad3 	bl	80050d0 <_ZN3HAL3getEv>
 8001b2a:	6803      	ldr	r3, [r0, #0]
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	4798      	blx	r3
    showField(flush);
 8001b30:	4620      	mov	r0, r4
 8001b32:	f7ff ff85 	bl	8001a40 <_Z9showFieldPh>
  static void canvasUpdate() { get()->_canvasUpdate(); }
 8001b36:	f003 facb 	bl	80050d0 <_ZN3HAL3getEv>
 8001b3a:	6803      	ldr	r3, [r0, #0]
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	4798      	blx	r3
 8001b40:	e7c1      	b.n	8001ac6 <main4Tetris+0x26>
      blockLine = (dropdis + BLOCK_HEIGHT > i && i >= dropdis ? block[i - dropdis] : 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	e7e6      	b.n	8001b14 <main4Tetris+0x74>
 8001b46:	bf00      	nop
 8001b48:	200000f0 	.word	0x200000f0
 8001b4c:	20000001 	.word	0x20000001
 8001b50:	200005dc 	.word	0x200005dc
 8001b54:	200000db 	.word	0x200000db
 8001b58:	200000df 	.word	0x200000df
 8001b5c:	200000d6 	.word	0x200000d6
 8001b60:	200000d5 	.word	0x200000d5
 8001b64:	200000d4 	.word	0x200000d4
 8001b68:	200000da 	.word	0x200000da

08001b6c <__tcf_4>:
 8001b6c:	4801      	ldr	r0, [pc, #4]	@ (8001b74 <__tcf_4+0x8>)
 8001b6e:	f007 bc8d 	b.w	800948c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8001b72:	bf00      	nop
 8001b74:	2000012c 	.word	0x2000012c

08001b78 <__tcf_3>:
 8001b78:	4801      	ldr	r0, [pc, #4]	@ (8001b80 <__tcf_3+0x8>)
 8001b7a:	f007 bc87 	b.w	800948c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8001b7e:	bf00      	nop
 8001b80:	20000148 	.word	0x20000148

08001b84 <_ZZN5astra8drawLogoEtENKUlRfffE_clES0_ff.constprop.0>:
 *       * Astra UI *
 *  *       *     *     *
 *     *  *     *           *
 */
void drawLogo(uint16_t _time) {
  auto animation = [] (float &_pos, float _posTrg, float _speed) -> void {
 8001b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (_pos != _posTrg) {
 8001b86:	6806      	ldr	r6, [r0, #0]
  auto animation = [] (float &_pos, float _posTrg, float _speed) -> void {
 8001b88:	4604      	mov	r4, r0
    if (_pos != _posTrg) {
 8001b8a:	4630      	mov	r0, r6
  auto animation = [] (float &_pos, float _posTrg, float _speed) -> void {
 8001b8c:	460d      	mov	r5, r1
 8001b8e:	4617      	mov	r7, r2
    if (_pos != _posTrg) {
 8001b90:	f7ff f970 	bl	8000e74 <__aeabi_fcmpeq>
 8001b94:	b950      	cbnz	r0, 8001bac <_ZZN5astra8drawLogoEtENKUlRfffE_clES0_ff.constprop.0+0x28>
      if (std::fabs(_pos - _posTrg) < 0.15f) _pos = _posTrg;
 8001b96:	4629      	mov	r1, r5
 8001b98:	4630      	mov	r0, r6
 8001b9a:	f7fe fecd 	bl	8000938 <__aeabi_fsub>
 8001b9e:	490d      	ldr	r1, [pc, #52]	@ (8001bd4 <_ZZN5astra8drawLogoEtENKUlRfffE_clES0_ff.constprop.0+0x50>)
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8001ba0:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001ba4:	f7ff f970 	bl	8000e88 <__aeabi_fcmplt>
 8001ba8:	b108      	cbz	r0, 8001bae <_ZZN5astra8drawLogoEtENKUlRfffE_clES0_ff.constprop.0+0x2a>
 8001baa:	6025      	str	r5, [r4, #0]
      else _pos += (_posTrg - _pos) / ((100 - _speed) / 1.0f);
    }
  };
 8001bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else _pos += (_posTrg - _pos) / ((100 - _speed) / 1.0f);
 8001bae:	4631      	mov	r1, r6
 8001bb0:	4628      	mov	r0, r5
 8001bb2:	f7fe fec1 	bl	8000938 <__aeabi_fsub>
 8001bb6:	4639      	mov	r1, r7
 8001bb8:	4605      	mov	r5, r0
 8001bba:	4807      	ldr	r0, [pc, #28]	@ (8001bd8 <_ZZN5astra8drawLogoEtENKUlRfffE_clES0_ff.constprop.0+0x54>)
 8001bbc:	f7fe febc 	bl	8000938 <__aeabi_fsub>
 8001bc0:	4601      	mov	r1, r0
 8001bc2:	4628      	mov	r0, r5
 8001bc4:	f7ff f876 	bl	8000cb4 <__aeabi_fdiv>
 8001bc8:	4631      	mov	r1, r6
 8001bca:	f7fe feb7 	bl	800093c <__addsf3>
 8001bce:	6020      	str	r0, [r4, #0]
  };
 8001bd0:	e7ec      	b.n	8001bac <_ZZN5astra8drawLogoEtENKUlRfffE_clES0_ff.constprop.0+0x28>
 8001bd2:	bf00      	nop
 8001bd4:	3e19999a 	.word	0x3e19999a
 8001bd8:	42c80000 	.word	0x42c80000

08001bdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.0>:
      basic_string<_CharT, _Traits, _Alloc>::
 8001bdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 8001bde:	1a53      	subs	r3, r2, r1
	if (__dnew > size_type(_S_local_capacity))
 8001be0:	2b0f      	cmp	r3, #15
      basic_string<_CharT, _Traits, _Alloc>::
 8001be2:	4604      	mov	r4, r0
 8001be4:	460d      	mov	r5, r1
 8001be6:	4616      	mov	r6, r2
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8001be8:	9301      	str	r3, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
 8001bea:	d906      	bls.n	8001bfa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.0+0x1e>
	    _M_data(_M_create(__dnew, size_type(0)));
 8001bec:	2200      	movs	r2, #0
 8001bee:	a901      	add	r1, sp, #4
 8001bf0:	f007 fc2a 	bl	8009448 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
 8001bf4:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
 8001bf6:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
 8001bf8:	60a3      	str	r3, [r4, #8]
	this->_S_copy_chars(_M_data(), __beg, __end);
 8001bfa:	4632      	mov	r2, r6
 8001bfc:	4629      	mov	r1, r5
 8001bfe:	6820      	ldr	r0, [r4, #0]
 8001c00:	f007 fcba 	bl	8009578 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8001c04:	2100      	movs	r1, #0
	_M_set_length(__dnew);
 8001c06:	9b01      	ldr	r3, [sp, #4]
 8001c08:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
 8001c0a:	6063      	str	r3, [r4, #4]
 8001c0c:	54d1      	strb	r1, [r2, r3]
      }
 8001c0e:	b002      	add	sp, #8
 8001c10:	bd70      	pop	{r4, r5, r6, pc}

08001c12 <_ZN3HAL7setFontEPKh>:

  static void canvasClear() { get()->_canvasClear(); }

  virtual void _canvasClear() {}

  static void setFont(const unsigned char *_font) { get()->_setFont(_font); }
 8001c12:	b510      	push	{r4, lr}
 8001c14:	4604      	mov	r4, r0
 8001c16:	f003 fa5b 	bl	80050d0 <_ZN3HAL3getEv>
 8001c1a:	6803      	ldr	r3, [r0, #0]
 8001c1c:	4621      	mov	r1, r4
 8001c1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c24:	4718      	bx	r3

08001c26 <_ZN3HAL12getFontWidthERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

  virtual void _setFont(const unsigned char *_font) {}

  static unsigned char getFontWidth(std::string &_text) { return get()->_getFontWidth(_text); }
 8001c26:	b510      	push	{r4, lr}
 8001c28:	4604      	mov	r4, r0
 8001c2a:	f003 fa51 	bl	80050d0 <_ZN3HAL3getEv>
 8001c2e:	6803      	ldr	r3, [r0, #0]
 8001c30:	4621      	mov	r1, r4
 8001c32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c38:	4718      	bx	r3

08001c3a <_ZN3HAL11setDrawTypeEh>:

  static unsigned char getFontHeight() { return get()->_getFontHeight(); }

  virtual unsigned char _getFontHeight() { return 0; }

  static void setDrawType(unsigned char _type) { get()->_setDrawType(_type); }
 8001c3a:	b510      	push	{r4, lr}
 8001c3c:	4604      	mov	r4, r0
 8001c3e:	f003 fa47 	bl	80050d0 <_ZN3HAL3getEv>
 8001c42:	6803      	ldr	r3, [r0, #0]
 8001c44:	4621      	mov	r1, r4
 8001c46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4c:	4718      	bx	r3

08001c4e <_ZN3HAL11drawEnglishEffRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
  static void drawPixel(float _x, float _y) { get()->_drawPixel(_x, _y); }

  virtual void _drawPixel(float _x, float _y) {}

  //notice: _x和_y是字体左下角的坐标 _x and _y is the coordinate the lower left corner of the font
  static void drawEnglish(float _x, float _y, const std::string &_text) { get()->_drawEnglish(_x, _y, _text); }
 8001c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c52:	460d      	mov	r5, r1
 8001c54:	4616      	mov	r6, r2
 8001c56:	4604      	mov	r4, r0
 8001c58:	f003 fa3a 	bl	80050d0 <_ZN3HAL3getEv>
 8001c5c:	6803      	ldr	r3, [r0, #0]
 8001c5e:	462a      	mov	r2, r5
 8001c60:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
 8001c62:	4621      	mov	r1, r4
 8001c64:	4633      	mov	r3, r6
 8001c66:	46bc      	mov	ip, r7
 8001c68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001c6c:	4760      	bx	ip

08001c6e <_ZN3HAL9drawVLineEfff>:

  static void drawHDottedLine(float _x, float _y, float _l) { get()->_drawHDottedLine(_x, _y, _l); }

  virtual void _drawHDottedLine(float _x, float _y, float _l) {}

  static void drawVLine(float _x, float _y, float _h) { get()->_drawVLine(_x, _y, _h); }
 8001c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c72:	460d      	mov	r5, r1
 8001c74:	4616      	mov	r6, r2
 8001c76:	4604      	mov	r4, r0
 8001c78:	f003 fa2a 	bl	80050d0 <_ZN3HAL3getEv>
 8001c7c:	6803      	ldr	r3, [r0, #0]
 8001c7e:	462a      	mov	r2, r5
 8001c80:	6c9f      	ldr	r7, [r3, #72]	@ 0x48
 8001c82:	4621      	mov	r1, r4
 8001c84:	4633      	mov	r3, r6
 8001c86:	46bc      	mov	ip, r7
 8001c88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001c8c:	4760      	bx	ip

08001c8e <_ZN3HAL9drawHLineEfff>:

  virtual void _drawVLine(float _x, float _y, float _h) {}

  static void drawHLine(float _x, float _y, float _l) { get()->_drawHLine(_x, _y, _l); }
 8001c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c92:	460d      	mov	r5, r1
 8001c94:	4616      	mov	r6, r2
 8001c96:	4604      	mov	r4, r0
 8001c98:	f003 fa1a 	bl	80050d0 <_ZN3HAL3getEv>
 8001c9c:	6803      	ldr	r3, [r0, #0]
 8001c9e:	462a      	mov	r2, r5
 8001ca0:	6cdf      	ldr	r7, [r3, #76]	@ 0x4c
 8001ca2:	4621      	mov	r1, r4
 8001ca4:	4633      	mov	r3, r6
 8001ca6:	46bc      	mov	ip, r7
 8001ca8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001cac:	4760      	bx	ip

08001cae <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001cae:	b510      	push	{r4, lr}
 8001cb0:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8001cb2:	6800      	ldr	r0, [r0, #0]
	if (__p)
 8001cb4:	b118      	cbz	r0, 8001cbe <_ZNSt12_Vector_baseIfSaIfEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001cb6:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8001cb8:	1a09      	subs	r1, r1, r0
 8001cba:	f007 f86d 	bl	8008d98 <_ZdlPvj>
      }
 8001cbe:	4620      	mov	r0, r4
 8001cc0:	bd10      	pop	{r4, pc}
	...

08001cc4 <__tcf_2>:
  while(onRender) {
    time++;

    static std::vector<float> yStars;
    static std::vector<float> yStarsTrg;
    static std::vector<float> xStars;
 8001cc4:	b508      	push	{r3, lr}
      }
 8001cc6:	4802      	ldr	r0, [pc, #8]	@ (8001cd0 <__tcf_2+0xc>)
 8001cc8:	f7ff fff1 	bl	8001cae <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8001ccc:	bd08      	pop	{r3, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000164 	.word	0x20000164

08001cd4 <__tcf_1>:
    static std::vector<float> yStarsTrg;
 8001cd4:	b508      	push	{r3, lr}
 8001cd6:	4802      	ldr	r0, [pc, #8]	@ (8001ce0 <__tcf_1+0xc>)
 8001cd8:	f7ff ffe9 	bl	8001cae <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8001cdc:	bd08      	pop	{r3, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000174 	.word	0x20000174

08001ce4 <__tcf_0>:
    static std::vector<float> yStars;
 8001ce4:	b508      	push	{r3, lr}
 8001ce6:	4802      	ldr	r0, [pc, #8]	@ (8001cf0 <__tcf_0+0xc>)
 8001ce8:	f7ff ffe1 	bl	8001cae <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8001cec:	bd08      	pop	{r3, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000184 	.word	0x20000184

08001cf4 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 8001cf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001cf8:	e9d0 8a00 	ldrd	r8, sl, [r0]
	if (max_size() - size() < __n)
 8001cfc:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8001d00:	4693      	mov	fp, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001d02:	ebaa 0208 	sub.w	r2, sl, r8
	if (max_size() - size() < __n)
 8001d06:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
 8001d0a:	4607      	mov	r7, r0
 8001d0c:	4689      	mov	r9, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001d0e:	ea4f 04a2 	mov.w	r4, r2, asr #2
	if (max_size() - size() < __n)
 8001d12:	d102      	bne.n	8001d1a <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8001d14:	481e      	ldr	r0, [pc, #120]	@ (8001d90 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x9c>)
 8001d16:	f007 fb81 	bl	800941c <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 8001d1a:	45c2      	cmp	sl, r8
 8001d1c:	bf14      	ite	ne
 8001d1e:	4622      	movne	r2, r4
 8001d20:	2201      	moveq	r2, #1
 8001d22:	18a4      	adds	r4, r4, r2
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8001d24:	eba1 0508 	sub.w	r5, r1, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8001d28:	d22e      	bcs.n	8001d88 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x94>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001d2a:	b37c      	cbz	r4, 8001d8c <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x98>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8001d2c:	429c      	cmp	r4, r3
 8001d2e:	bf28      	it	cs
 8001d30:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8001d32:	00a0      	lsls	r0, r4, #2
 8001d34:	f007 f896 	bl	8008e64 <_Znwj>
 8001d38:	4606      	mov	r6, r0
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8001d3a:	f8db 3000 	ldr.w	r3, [fp]
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result,
		   [[__maybe_unused__]] allocator<_Up>& __alloc) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
 8001d3e:	2d00      	cmp	r5, #0
 8001d40:	5173      	str	r3, [r6, r5]
 8001d42:	dd04      	ble.n	8001d4e <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x5a>
	      __gnu_cxx::__normal_iterator<_Tp*, void> __out(__result);
	      __out = std::__relocate_a_1(__first, __last, __out, __alloc);
	      return __out.base();
	    }
#endif
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8001d44:	462a      	mov	r2, r5
 8001d46:	4641      	mov	r1, r8
 8001d48:	4630      	mov	r0, r6
 8001d4a:	f008 f8f4 	bl	8009f36 <memmove>
      ptrdiff_t __count = __last - __first;
 8001d4e:	ebaa 0a09 	sub.w	sl, sl, r9
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
 8001d52:	3504      	adds	r5, #4
      if (__count > 0)
 8001d54:	f1ba 0f00 	cmp.w	sl, #0
 8001d58:	4435      	add	r5, r6
 8001d5a:	dd04      	ble.n	8001d66 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x72>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8001d5c:	4652      	mov	r2, sl
 8001d5e:	4649      	mov	r1, r9
 8001d60:	4628      	mov	r0, r5
 8001d62:	f008 f9da 	bl	800a11a <memcpy>
	}
      return __result + __count;
 8001d66:	4455      	add	r5, sl
	if (__p)
 8001d68:	f1b8 0f00 	cmp.w	r8, #0
 8001d6c:	d005      	beq.n	8001d7a <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x86>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
 8001d6e:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8001d70:	4640      	mov	r0, r8
 8001d72:	eba1 0108 	sub.w	r1, r1, r8
 8001d76:	f007 f80f 	bl	8008d98 <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
 8001d7a:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8001d7e:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8001d82:	60be      	str	r6, [r7, #8]
    }
 8001d84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8001d88:	461c      	mov	r4, r3
 8001d8a:	e7d2      	b.n	8001d32 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001d8c:	4626      	mov	r6, r4
 8001d8e:	e7d4      	b.n	8001d3a <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x46>
 8001d90:	0800b0ae 	.word	0x0800b0ae

08001d94 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_>:
      vector<_Tp, _Alloc>::
 8001d94:	460a      	mov	r2, r1
 8001d96:	b510      	push	{r4, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8001d98:	e9d0 1401 	ldrd	r1, r4, [r0, #4]
 8001d9c:	42a1      	cmp	r1, r4
 8001d9e:	d004      	beq.n	8001daa <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_+0x16>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8001da0:	6812      	ldr	r2, [r2, #0]
 8001da2:	f841 2b04 	str.w	r2, [r1], #4
	    ++this->_M_impl._M_finish;
 8001da6:	6041      	str	r1, [r0, #4]
      }
 8001da8:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8001daa:	f7ff ffa3 	bl	8001cf4 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>
      }
 8001dae:	e7fb      	b.n	8001da8 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_+0x14>

08001db0 <_ZSt6fill_nIPfjfET_S1_T0_RKT1_>:
	       std::random_access_iterator_tag)
    {
#if __cplusplus >= 201103L
      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
#endif
      if (__n <= 0)
 8001db0:	b121      	cbz	r1, 8001dbc <_ZSt6fill_nIPfjfET_S1_T0_RKT1_+0xc>
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
 8001db2:	6813      	ldr	r3, [r2, #0]
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
 8001db4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
      for (; __first != __last; ++__first)
 8001db8:	4281      	cmp	r1, r0
 8001dba:	d100      	bne.n	8001dbe <_ZSt6fill_nIPfjfET_S1_T0_RKT1_+0xe>
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, const _Tp&>)

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
			       std::__iterator_category(__first));
    }
 8001dbc:	4770      	bx	lr
	*__first = __tmp;
 8001dbe:	f840 3b04 	str.w	r3, [r0], #4
      for (; __first != __last; ++__first)
 8001dc2:	e7f9      	b.n	8001db8 <_ZSt6fill_nIPfjfET_S1_T0_RKT1_+0x8>

08001dc4 <_ZNSt6vectorIfSaIfEE14_M_fill_assignEjRKf>:
    vector<_Tp, _Alloc>::
 8001dc4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001dc8:	4604      	mov	r4, r0
			 - this->_M_impl._M_start); }
 8001dca:	6800      	ldr	r0, [r0, #0]
 8001dcc:	68a3      	ldr	r3, [r4, #8]
 8001dce:	460d      	mov	r5, r1
 8001dd0:	1a1b      	subs	r3, r3, r0
      if (__n > capacity())
 8001dd2:	ebb1 0fa3 	cmp.w	r1, r3, asr #2
    vector<_Tp, _Alloc>::
 8001dd6:	4616      	mov	r6, r2
      if (__n > capacity())
 8001dd8:	d91e      	bls.n	8001e18 <_ZNSt6vectorIfSaIfEE14_M_fill_assignEjRKf+0x54>
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8001dda:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8001dde:	d302      	bcc.n	8001de6 <_ZNSt6vectorIfSaIfEE14_M_fill_assignEjRKf+0x22>
	  __throw_length_error(
 8001de0:	481a      	ldr	r0, [pc, #104]	@ (8001e4c <_ZNSt6vectorIfSaIfEE14_M_fill_assignEjRKf+0x88>)
 8001de2:	f007 fb1b 	bl	800941c <_ZSt20__throw_length_errorPKc>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8001de6:	008f      	lsls	r7, r1, #2
 8001de8:	4638      	mov	r0, r7
 8001dea:	f007 f83b 	bl	8008e64 <_Znwj>
        { return std::fill_n(__first, __n, __x); }
 8001dee:	4632      	mov	r2, r6
 8001df0:	4629      	mov	r1, r5
 8001df2:	4680      	mov	r8, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8001df4:	4407      	add	r7, r0
 8001df6:	f7ff ffdb 	bl	8001db0 <_ZSt6fill_nIPfjfET_S1_T0_RKT1_>
	  _M_start = __x._M_start;
 8001dfa:	6823      	ldr	r3, [r4, #0]
 8001dfc:	9301      	str	r3, [sp, #4]
	  _M_finish = __x._M_finish;
 8001dfe:	6863      	ldr	r3, [r4, #4]
 8001e00:	e9c4 8000 	strd	r8, r0, [r4]
 8001e04:	9302      	str	r3, [sp, #8]
	  _M_end_of_storage = __x._M_end_of_storage;
 8001e06:	68a3      	ldr	r3, [r4, #8]
      }
 8001e08:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 8001e0a:	60a7      	str	r7, [r4, #8]
 8001e0c:	9303      	str	r3, [sp, #12]
      }
 8001e0e:	f7ff ff4e 	bl	8001cae <_ZNSt12_Vector_baseIfSaIfEED1Ev>
    }
 8001e12:	b004      	add	sp, #16
 8001e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001e18:	6867      	ldr	r7, [r4, #4]
 8001e1a:	1a3b      	subs	r3, r7, r0
      else if (__n > size())
 8001e1c:	ebb1 0fa3 	cmp.w	r1, r3, asr #2
 8001e20:	ea4f 0ca3 	mov.w	ip, r3, asr #2
 8001e24:	d90d      	bls.n	8001e42 <_ZNSt6vectorIfSaIfEE14_M_fill_assignEjRKf+0x7e>
    __fill_a1(::__gnu_cxx::__normal_iterator<_Ite, _Cont> __first,
 8001e26:	6813      	ldr	r3, [r2, #0]
      for (; __first != __last; ++__first)
 8001e28:	4287      	cmp	r7, r0
 8001e2a:	d107      	bne.n	8001e3c <_ZNSt6vectorIfSaIfEE14_M_fill_assignEjRKf+0x78>
 8001e2c:	4632      	mov	r2, r6
 8001e2e:	4638      	mov	r0, r7
 8001e30:	eba5 010c 	sub.w	r1, r5, ip
 8001e34:	f7ff ffbc 	bl	8001db0 <_ZSt6fill_nIPfjfET_S1_T0_RKT1_>
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
 8001e38:	6060      	str	r0, [r4, #4]
    }
 8001e3a:	e7ea      	b.n	8001e12 <_ZNSt6vectorIfSaIfEE14_M_fill_assignEjRKf+0x4e>
	*__first = __tmp;
 8001e3c:	f840 3b04 	str.w	r3, [r0], #4
      for (; __first != __last; ++__first)
 8001e40:	e7f2      	b.n	8001e28 <_ZNSt6vectorIfSaIfEE14_M_fill_assignEjRKf+0x64>
        _M_erase_at_end(std::fill_n(this->_M_impl._M_start, __n, __val));
 8001e42:	f7ff ffb5 	bl	8001db0 <_ZSt6fill_nIPfjfET_S1_T0_RKT1_>
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8001e46:	42b8      	cmp	r0, r7
 8001e48:	d1f6      	bne.n	8001e38 <_ZNSt6vectorIfSaIfEE14_M_fill_assignEjRKf+0x74>
 8001e4a:	e7e2      	b.n	8001e12 <_ZNSt6vectorIfSaIfEE14_M_fill_assignEjRKf+0x4e>
 8001e4c:	0800af48 	.word	0x0800af48

08001e50 <_ZN5astra8drawLogoEt>:
void drawLogo(uint16_t _time) {
 8001e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e54:	b087      	sub	sp, #28
 8001e56:	9002      	str	r0, [sp, #8]
  while(onRender) {
 8001e58:	4b02      	ldr	r3, [pc, #8]	@ (8001e64 <_ZN5astra8drawLogoEt+0x14>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	b923      	cbnz	r3, 8001e68 <_ZN5astra8drawLogoEt+0x18>

    HAL::canvasUpdate();

    if (time >= _time && yBackGround == 0 - HAL::getSystemConfig().screenHeight - 1) onRender = false;
  }
}
 8001e5e:	b007      	add	sp, #28
 8001e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e64:	20000002 	.word	0x20000002
    time++;
 8001e68:	4ab1      	ldr	r2, [pc, #708]	@ (8002130 <_ZN5astra8drawLogoEt+0x2e0>)
    static std::vector<float> yStars;
 8001e6a:	4cb2      	ldr	r4, [pc, #712]	@ (8002134 <_ZN5astra8drawLogoEt+0x2e4>)
    time++;
 8001e6c:	8813      	ldrh	r3, [r2, #0]
 8001e6e:	4db2      	ldr	r5, [pc, #712]	@ (8002138 <_ZN5astra8drawLogoEt+0x2e8>)
 8001e70:	3301      	adds	r3, #1
 8001e72:	8013      	strh	r3, [r2, #0]
    static std::vector<float> yStars;
 8001e74:	6826      	ldr	r6, [r4, #0]
 8001e76:	f3bf 8f5b 	dmb	ish
 8001e7a:	f016 0601 	ands.w	r6, r6, #1
 8001e7e:	d10c      	bne.n	8001e9a <_ZN5astra8drawLogoEt+0x4a>
 8001e80:	4620      	mov	r0, r4
 8001e82:	f006 ffe0 	bl	8008e46 <__cxa_guard_acquire>
 8001e86:	b140      	cbz	r0, 8001e9a <_ZN5astra8drawLogoEt+0x4a>
 8001e88:	48ac      	ldr	r0, [pc, #688]	@ (800213c <_ZN5astra8drawLogoEt+0x2ec>)
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001e8a:	e9c5 6600 	strd	r6, r6, [r5]
 8001e8e:	60ae      	str	r6, [r5, #8]
 8001e90:	f007 fe0b 	bl	8009aaa <atexit>
 8001e94:	4620      	mov	r0, r4
 8001e96:	f006 ffe2 	bl	8008e5e <__cxa_guard_release>
    static std::vector<float> yStarsTrg;
 8001e9a:	4ca9      	ldr	r4, [pc, #676]	@ (8002140 <_ZN5astra8drawLogoEt+0x2f0>)
 8001e9c:	f8df 82a4 	ldr.w	r8, [pc, #676]	@ 8002144 <_ZN5astra8drawLogoEt+0x2f4>
 8001ea0:	6826      	ldr	r6, [r4, #0]
 8001ea2:	f3bf 8f5b 	dmb	ish
 8001ea6:	f016 0601 	ands.w	r6, r6, #1
 8001eaa:	d10d      	bne.n	8001ec8 <_ZN5astra8drawLogoEt+0x78>
 8001eac:	4620      	mov	r0, r4
 8001eae:	f006 ffca 	bl	8008e46 <__cxa_guard_acquire>
 8001eb2:	b148      	cbz	r0, 8001ec8 <_ZN5astra8drawLogoEt+0x78>
 8001eb4:	48a4      	ldr	r0, [pc, #656]	@ (8002148 <_ZN5astra8drawLogoEt+0x2f8>)
 8001eb6:	e9c8 6600 	strd	r6, r6, [r8]
 8001eba:	f8c8 6008 	str.w	r6, [r8, #8]
 8001ebe:	f007 fdf4 	bl	8009aaa <atexit>
 8001ec2:	4620      	mov	r0, r4
 8001ec4:	f006 ffcb 	bl	8008e5e <__cxa_guard_release>
    static std::vector<float> xStars;
 8001ec8:	4ca0      	ldr	r4, [pc, #640]	@ (800214c <_ZN5astra8drawLogoEt+0x2fc>)
 8001eca:	4ea1      	ldr	r6, [pc, #644]	@ (8002150 <_ZN5astra8drawLogoEt+0x300>)
 8001ecc:	6827      	ldr	r7, [r4, #0]
 8001ece:	f3bf 8f5b 	dmb	ish
 8001ed2:	f017 0701 	ands.w	r7, r7, #1
 8001ed6:	d10c      	bne.n	8001ef2 <_ZN5astra8drawLogoEt+0xa2>
 8001ed8:	4620      	mov	r0, r4
 8001eda:	f006 ffb4 	bl	8008e46 <__cxa_guard_acquire>
 8001ede:	b140      	cbz	r0, 8001ef2 <_ZN5astra8drawLogoEt+0xa2>
 8001ee0:	489c      	ldr	r0, [pc, #624]	@ (8002154 <_ZN5astra8drawLogoEt+0x304>)
 8001ee2:	e9c6 7700 	strd	r7, r7, [r6]
 8001ee6:	60b7      	str	r7, [r6, #8]
 8001ee8:	f007 fddf 	bl	8009aaa <atexit>
 8001eec:	4620      	mov	r0, r4
 8001eee:	f006 ffb6 	bl	8008e5e <__cxa_guard_release>
    static std::string text = "astra UI";
 8001ef2:	4c99      	ldr	r4, [pc, #612]	@ (8002158 <_ZN5astra8drawLogoEt+0x308>)
 8001ef4:	6823      	ldr	r3, [r4, #0]
 8001ef6:	f3bf 8f5b 	dmb	ish
 8001efa:	07da      	lsls	r2, r3, #31
 8001efc:	d412      	bmi.n	8001f24 <_ZN5astra8drawLogoEt+0xd4>
 8001efe:	4620      	mov	r0, r4
 8001f00:	f006 ffa1 	bl	8008e46 <__cxa_guard_acquire>
 8001f04:	b170      	cbz	r0, 8001f24 <_ZN5astra8drawLogoEt+0xd4>
	: allocator_type(__a), _M_p(__dat) { }
 8001f06:	4895      	ldr	r0, [pc, #596]	@ (800215c <_ZN5astra8drawLogoEt+0x30c>)
	_M_construct(__s, __end, forward_iterator_tag());
 8001f08:	4a95      	ldr	r2, [pc, #596]	@ (8002160 <_ZN5astra8drawLogoEt+0x310>)
	: allocator_type(__a), _M_p(__dat) { }
 8001f0a:	f100 0308 	add.w	r3, r0, #8
	_M_construct(__s, __end, forward_iterator_tag());
 8001f0e:	f1a2 0108 	sub.w	r1, r2, #8
	: allocator_type(__a), _M_p(__dat) { }
 8001f12:	6003      	str	r3, [r0, #0]
	_M_construct(__s, __end, forward_iterator_tag());
 8001f14:	f7ff fe62 	bl	8001bdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.0>
 8001f18:	4892      	ldr	r0, [pc, #584]	@ (8002164 <_ZN5astra8drawLogoEt+0x314>)
 8001f1a:	f007 fdc6 	bl	8009aaa <atexit>
 8001f1e:	4620      	mov	r0, r4
 8001f20:	f006 ff9d 	bl	8008e5e <__cxa_guard_release>
    static std::string copyRight = "powered by";
 8001f24:	4c90      	ldr	r4, [pc, #576]	@ (8002168 <_ZN5astra8drawLogoEt+0x318>)
 8001f26:	6823      	ldr	r3, [r4, #0]
 8001f28:	f3bf 8f5b 	dmb	ish
 8001f2c:	07db      	lsls	r3, r3, #31
 8001f2e:	d412      	bmi.n	8001f56 <_ZN5astra8drawLogoEt+0x106>
 8001f30:	4620      	mov	r0, r4
 8001f32:	f006 ff88 	bl	8008e46 <__cxa_guard_acquire>
 8001f36:	b170      	cbz	r0, 8001f56 <_ZN5astra8drawLogoEt+0x106>
	: allocator_type(__a), _M_p(__dat) { }
 8001f38:	488c      	ldr	r0, [pc, #560]	@ (800216c <_ZN5astra8drawLogoEt+0x31c>)
	_M_construct(__s, __end, forward_iterator_tag());
 8001f3a:	4a8d      	ldr	r2, [pc, #564]	@ (8002170 <_ZN5astra8drawLogoEt+0x320>)
	: allocator_type(__a), _M_p(__dat) { }
 8001f3c:	f100 0308 	add.w	r3, r0, #8
	_M_construct(__s, __end, forward_iterator_tag());
 8001f40:	f1a2 010a 	sub.w	r1, r2, #10
	: allocator_type(__a), _M_p(__dat) { }
 8001f44:	6003      	str	r3, [r0, #0]
	_M_construct(__s, __end, forward_iterator_tag());
 8001f46:	f7ff fe49 	bl	8001bdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.0>
 8001f4a:	488a      	ldr	r0, [pc, #552]	@ (8002174 <_ZN5astra8drawLogoEt+0x324>)
 8001f4c:	f007 fdad 	bl	8009aaa <atexit>
 8001f50:	4620      	mov	r0, r4
 8001f52:	f006 ff84 	bl	8008e5e <__cxa_guard_release>
    static float xTitle = (HAL::getSystemConfig().screenWeight - HAL::getFontWidth(text)) / 2;
 8001f56:	4c88      	ldr	r4, [pc, #544]	@ (8002178 <_ZN5astra8drawLogoEt+0x328>)
    HAL::setFont(getUIConfig().logoTitleFont);
 8001f58:	4888      	ldr	r0, [pc, #544]	@ (800217c <_ZN5astra8drawLogoEt+0x32c>)
 8001f5a:	f7ff fe5a 	bl	8001c12 <_ZN3HAL7setFontEPKh>
    static float xTitle = (HAL::getSystemConfig().screenWeight - HAL::getFontWidth(text)) / 2;
 8001f5e:	6823      	ldr	r3, [r4, #0]
 8001f60:	f3bf 8f5b 	dmb	ish
 8001f64:	07df      	lsls	r7, r3, #31
 8001f66:	d414      	bmi.n	8001f92 <_ZN5astra8drawLogoEt+0x142>
 8001f68:	4620      	mov	r0, r4
 8001f6a:	f006 ff6c 	bl	8008e46 <__cxa_guard_acquire>
 8001f6e:	b180      	cbz	r0, 8001f92 <_ZN5astra8drawLogoEt+0x142>

  /**
   * @brief system config.
   */
public:
  static sys::config &getSystemConfig() { return get()->config; }
 8001f70:	f003 f8ae 	bl	80050d0 <_ZN3HAL3getEv>
 8001f74:	7907      	ldrb	r7, [r0, #4]
 8001f76:	4879      	ldr	r0, [pc, #484]	@ (800215c <_ZN5astra8drawLogoEt+0x30c>)
 8001f78:	f7ff fe55 	bl	8001c26 <_ZN3HAL12getFontWidthERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001f7c:	1a38      	subs	r0, r7, r0
 8001f7e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8001f82:	1040      	asrs	r0, r0, #1
 8001f84:	f7fe fd8e 	bl	8000aa4 <__aeabi_i2f>
 8001f88:	4b7d      	ldr	r3, [pc, #500]	@ (8002180 <_ZN5astra8drawLogoEt+0x330>)
 8001f8a:	6018      	str	r0, [r3, #0]
 8001f8c:	4620      	mov	r0, r4
 8001f8e:	f006 ff66 	bl	8008e5e <__cxa_guard_release>
    static float xCopyRight = (HAL::getSystemConfig().screenWeight - HAL::getFontWidth(copyRight)) / 2;
 8001f92:	4c7c      	ldr	r4, [pc, #496]	@ (8002184 <_ZN5astra8drawLogoEt+0x334>)
    HAL::setFont(getUIConfig().logoCopyRightFont);
 8001f94:	487c      	ldr	r0, [pc, #496]	@ (8002188 <_ZN5astra8drawLogoEt+0x338>)
 8001f96:	f7ff fe3c 	bl	8001c12 <_ZN3HAL7setFontEPKh>
    static float xCopyRight = (HAL::getSystemConfig().screenWeight - HAL::getFontWidth(copyRight)) / 2;
 8001f9a:	6823      	ldr	r3, [r4, #0]
 8001f9c:	f3bf 8f5b 	dmb	ish
 8001fa0:	07d8      	lsls	r0, r3, #31
 8001fa2:	d414      	bmi.n	8001fce <_ZN5astra8drawLogoEt+0x17e>
 8001fa4:	4620      	mov	r0, r4
 8001fa6:	f006 ff4e 	bl	8008e46 <__cxa_guard_acquire>
 8001faa:	b180      	cbz	r0, 8001fce <_ZN5astra8drawLogoEt+0x17e>
 8001fac:	f003 f890 	bl	80050d0 <_ZN3HAL3getEv>
 8001fb0:	7907      	ldrb	r7, [r0, #4]
 8001fb2:	486e      	ldr	r0, [pc, #440]	@ (800216c <_ZN5astra8drawLogoEt+0x31c>)
 8001fb4:	f7ff fe37 	bl	8001c26 <_ZN3HAL12getFontWidthERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001fb8:	1a38      	subs	r0, r7, r0
 8001fba:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8001fbe:	1040      	asrs	r0, r0, #1
 8001fc0:	f7fe fd70 	bl	8000aa4 <__aeabi_i2f>
 8001fc4:	4b71      	ldr	r3, [pc, #452]	@ (800218c <_ZN5astra8drawLogoEt+0x33c>)
 8001fc6:	6018      	str	r0, [r3, #0]
 8001fc8:	4620      	mov	r0, r4
 8001fca:	f006 ff48 	bl	8008e5e <__cxa_guard_release>
    static float yTitle = 0 - getUIConfig().logoTextHeight - 1;
 8001fce:	4c70      	ldr	r4, [pc, #448]	@ (8002190 <_ZN5astra8drawLogoEt+0x340>)
    HAL::setFont(getUIConfig().mainFont);
 8001fd0:	486d      	ldr	r0, [pc, #436]	@ (8002188 <_ZN5astra8drawLogoEt+0x338>)
 8001fd2:	f7ff fe1e 	bl	8001c12 <_ZN3HAL7setFontEPKh>
    static float yTitle = 0 - getUIConfig().logoTextHeight - 1;
 8001fd6:	6823      	ldr	r3, [r4, #0]
 8001fd8:	f3bf 8f5b 	dmb	ish
 8001fdc:	07d9      	lsls	r1, r3, #31
 8001fde:	d409      	bmi.n	8001ff4 <_ZN5astra8drawLogoEt+0x1a4>
 8001fe0:	4620      	mov	r0, r4
 8001fe2:	f006 ff30 	bl	8008e46 <__cxa_guard_acquire>
 8001fe6:	b128      	cbz	r0, 8001ff4 <_ZN5astra8drawLogoEt+0x1a4>
 8001fe8:	4b6a      	ldr	r3, [pc, #424]	@ (8002194 <_ZN5astra8drawLogoEt+0x344>)
 8001fea:	4a6b      	ldr	r2, [pc, #428]	@ (8002198 <_ZN5astra8drawLogoEt+0x348>)
 8001fec:	4620      	mov	r0, r4
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	f006 ff35 	bl	8008e5e <__cxa_guard_release>
    static float yCopyRight = 0 - getUIConfig().logoCopyRightHeight - 1;
 8001ff4:	4c69      	ldr	r4, [pc, #420]	@ (800219c <_ZN5astra8drawLogoEt+0x34c>)
 8001ff6:	6823      	ldr	r3, [r4, #0]
 8001ff8:	f3bf 8f5b 	dmb	ish
 8001ffc:	07da      	lsls	r2, r3, #31
 8001ffe:	d409      	bmi.n	8002014 <_ZN5astra8drawLogoEt+0x1c4>
 8002000:	4620      	mov	r0, r4
 8002002:	f006 ff20 	bl	8008e46 <__cxa_guard_acquire>
 8002006:	b128      	cbz	r0, 8002014 <_ZN5astra8drawLogoEt+0x1c4>
 8002008:	4b65      	ldr	r3, [pc, #404]	@ (80021a0 <_ZN5astra8drawLogoEt+0x350>)
 800200a:	4a66      	ldr	r2, [pc, #408]	@ (80021a4 <_ZN5astra8drawLogoEt+0x354>)
 800200c:	4620      	mov	r0, r4
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	f006 ff25 	bl	8008e5e <__cxa_guard_release>
    static float yBackGround = 0 - HAL::getSystemConfig().screenHeight - 1;
 8002014:	4c64      	ldr	r4, [pc, #400]	@ (80021a8 <_ZN5astra8drawLogoEt+0x358>)
 8002016:	6823      	ldr	r3, [r4, #0]
 8002018:	f3bf 8f5b 	dmb	ish
 800201c:	07db      	lsls	r3, r3, #31
 800201e:	d40e      	bmi.n	800203e <_ZN5astra8drawLogoEt+0x1ee>
 8002020:	4620      	mov	r0, r4
 8002022:	f006 ff10 	bl	8008e46 <__cxa_guard_acquire>
 8002026:	b150      	cbz	r0, 800203e <_ZN5astra8drawLogoEt+0x1ee>
 8002028:	f003 f852 	bl	80050d0 <_ZN3HAL3getEv>
 800202c:	7940      	ldrb	r0, [r0, #5]
 800202e:	43c0      	mvns	r0, r0
 8002030:	f7fe fd38 	bl	8000aa4 <__aeabi_i2f>
 8002034:	4b5d      	ldr	r3, [pc, #372]	@ (80021ac <_ZN5astra8drawLogoEt+0x35c>)
 8002036:	6018      	str	r0, [r3, #0]
 8002038:	4620      	mov	r0, r4
 800203a:	f006 ff10 	bl	8008e5e <__cxa_guard_release>
    if (time < _time) {
 800203e:	4b3c      	ldr	r3, [pc, #240]	@ (8002130 <_ZN5astra8drawLogoEt+0x2e0>)
 8002040:	9a02      	ldr	r2, [sp, #8]
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	4f5a      	ldr	r7, [pc, #360]	@ (80021b0 <_ZN5astra8drawLogoEt+0x360>)
 8002046:	4293      	cmp	r3, r2
 8002048:	f080 819c 	bcs.w	8002384 <_ZN5astra8drawLogoEt+0x534>
      yBackGroundTrg = 0;
 800204c:	2300      	movs	r3, #0
      if (!isInit) {
 800204e:	4a59      	ldr	r2, [pc, #356]	@ (80021b4 <_ZN5astra8drawLogoEt+0x364>)
      yBackGroundTrg = 0;
 8002050:	603b      	str	r3, [r7, #0]
      if (!isInit) {
 8002052:	7813      	ldrb	r3, [r2, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	f040 80b7 	bne.w	80021c8 <_ZN5astra8drawLogoEt+0x378>
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800205a:	e9d5 3100 	ldrd	r3, r1, [r5]
 800205e:	428b      	cmp	r3, r1
	    this->_M_impl._M_finish = __pos;
 8002060:	bf18      	it	ne
 8002062:	606b      	strne	r3, [r5, #4]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8002064:	e9d8 3100 	ldrd	r3, r1, [r8]
 8002068:	428b      	cmp	r3, r1
	    this->_M_impl._M_finish = __pos;
 800206a:	bf18      	it	ne
 800206c:	f8c8 3004 	strne.w	r3, [r8, #4]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8002070:	e9d6 3100 	ldrd	r3, r1, [r6]
 8002074:	428b      	cmp	r3, r1
	    this->_M_impl._M_finish = __pos;
 8002076:	bf18      	it	ne
 8002078:	6073      	strne	r3, [r6, #4]
          yStarsTrg.push_back(1 + rand() % (uint16_t)(HAL::getSystemConfig().screenHeight - 2 * getUIConfig().logoStarLength - 2 + 1));
 800207a:	f04f 4b81 	mov.w	fp, #1082130432	@ 0x40800000
void drawLogo(uint16_t _time) {
 800207e:	2310      	movs	r3, #16
          yStarsTrg.push_back(1 + rand() % (uint16_t)(HAL::getSystemConfig().screenHeight - 2 * getUIConfig().logoStarLength - 2 + 1));
 8002080:	f04f 4a80 	mov.w	sl, #1073741824	@ 0x40000000
 8002084:	f04f 597e 	mov.w	r9, #1065353216	@ 0x3f800000
 8002088:	9303      	str	r3, [sp, #12]
  static unsigned long getRandomSeed() { return get()->_getRandomSeed(); }
 800208a:	f003 f821 	bl	80050d0 <_ZN3HAL3getEv>
 800208e:	6801      	ldr	r1, [r0, #0]
 8002090:	6f49      	ldr	r1, [r1, #116]	@ 0x74
 8002092:	4788      	blx	r1
          srand(HAL::getRandomSeed() * 7);
 8002094:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8002098:	f007 fdcc 	bl	8009c34 <srand>
          yStars.push_back(0 - getUIConfig().logoStarLength - 1);
 800209c:	4b46      	ldr	r3, [pc, #280]	@ (80021b8 <_ZN5astra8drawLogoEt+0x368>)
      { emplace_back(std::move(__x)); }
 800209e:	a905      	add	r1, sp, #20
 80020a0:	4825      	ldr	r0, [pc, #148]	@ (8002138 <_ZN5astra8drawLogoEt+0x2e8>)
 80020a2:	9305      	str	r3, [sp, #20]
 80020a4:	f7ff fe76 	bl	8001d94 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_>
          yStarsTrg.push_back(1 + rand() % (uint16_t)(HAL::getSystemConfig().screenHeight - 2 * getUIConfig().logoStarLength - 2 + 1));
 80020a8:	f007 fdf2 	bl	8009c90 <rand>
 80020ac:	4604      	mov	r4, r0
  static sys::config &getSystemConfig() { return get()->config; }
 80020ae:	f003 f80f 	bl	80050d0 <_ZN3HAL3getEv>
 80020b2:	7940      	ldrb	r0, [r0, #5]
 80020b4:	f7fe fcf6 	bl	8000aa4 <__aeabi_i2f>
 80020b8:	4659      	mov	r1, fp
 80020ba:	f7fe fc3d 	bl	8000938 <__aeabi_fsub>
 80020be:	4651      	mov	r1, sl
 80020c0:	f7fe fc3a 	bl	8000938 <__aeabi_fsub>
 80020c4:	4649      	mov	r1, r9
 80020c6:	f7fe fc39 	bl	800093c <__addsf3>
 80020ca:	f7fe ff2b 	bl	8000f24 <__aeabi_f2uiz>
 80020ce:	b280      	uxth	r0, r0
 80020d0:	fb94 f1f0 	sdiv	r1, r4, r0
 80020d4:	fb00 4011 	mls	r0, r0, r1, r4
 80020d8:	3001      	adds	r0, #1
 80020da:	f7fe fce3 	bl	8000aa4 <__aeabi_i2f>
 80020de:	a905      	add	r1, sp, #20
 80020e0:	9005      	str	r0, [sp, #20]
 80020e2:	4818      	ldr	r0, [pc, #96]	@ (8002144 <_ZN5astra8drawLogoEt+0x2f4>)
 80020e4:	f7ff fe56 	bl	8001d94 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_>
          xStars.push_back(1 + rand() % (uint16_t)(HAL::getSystemConfig().screenWeight - 2 * getUIConfig().logoStarLength - 2 + 1));
 80020e8:	f007 fdd2 	bl	8009c90 <rand>
 80020ec:	4604      	mov	r4, r0
 80020ee:	f002 ffef 	bl	80050d0 <_ZN3HAL3getEv>
 80020f2:	7900      	ldrb	r0, [r0, #4]
 80020f4:	f7fe fcd6 	bl	8000aa4 <__aeabi_i2f>
 80020f8:	4659      	mov	r1, fp
 80020fa:	f7fe fc1d 	bl	8000938 <__aeabi_fsub>
 80020fe:	4651      	mov	r1, sl
 8002100:	f7fe fc1a 	bl	8000938 <__aeabi_fsub>
 8002104:	4649      	mov	r1, r9
 8002106:	f7fe fc19 	bl	800093c <__addsf3>
 800210a:	f7fe ff0b 	bl	8000f24 <__aeabi_f2uiz>
 800210e:	b280      	uxth	r0, r0
 8002110:	fb94 f1f0 	sdiv	r1, r4, r0
 8002114:	fb00 4011 	mls	r0, r0, r1, r4
 8002118:	3001      	adds	r0, #1
 800211a:	f7fe fcc3 	bl	8000aa4 <__aeabi_i2f>
 800211e:	a905      	add	r1, sp, #20
 8002120:	9005      	str	r0, [sp, #20]
 8002122:	480b      	ldr	r0, [pc, #44]	@ (8002150 <_ZN5astra8drawLogoEt+0x300>)
 8002124:	f7ff fe36 	bl	8001d94 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_>
        for (unsigned char i = 0; i < getUIConfig().logoStarNum; i++) {
 8002128:	9b03      	ldr	r3, [sp, #12]
 800212a:	4a22      	ldr	r2, [pc, #136]	@ (80021b4 <_ZN5astra8drawLogoEt+0x364>)
 800212c:	3b01      	subs	r3, #1
 800212e:	e045      	b.n	80021bc <_ZN5astra8drawLogoEt+0x36c>
 8002130:	20000190 	.word	0x20000190
 8002134:	20000180 	.word	0x20000180
 8002138:	20000184 	.word	0x20000184
 800213c:	08001ce5 	.word	0x08001ce5
 8002140:	20000170 	.word	0x20000170
 8002144:	20000174 	.word	0x20000174
 8002148:	08001cd5 	.word	0x08001cd5
 800214c:	20000160 	.word	0x20000160
 8002150:	20000164 	.word	0x20000164
 8002154:	08001cc5 	.word	0x08001cc5
 8002158:	20000144 	.word	0x20000144
 800215c:	20000148 	.word	0x20000148
 8002160:	0800b0d0 	.word	0x0800b0d0
 8002164:	08001b79 	.word	0x08001b79
 8002168:	20000128 	.word	0x20000128
 800216c:	2000012c 	.word	0x2000012c
 8002170:	0800b0db 	.word	0x0800b0db
 8002174:	08001b6d 	.word	0x08001b6d
 8002178:	20000120 	.word	0x20000120
 800217c:	0800b484 	.word	0x0800b484
 8002180:	20000124 	.word	0x20000124
 8002184:	20000118 	.word	0x20000118
 8002188:	0800bcd7 	.word	0x0800bcd7
 800218c:	2000011c 	.word	0x2000011c
 8002190:	20000110 	.word	0x20000110
 8002194:	20000114 	.word	0x20000114
 8002198:	c1700000 	.word	0xc1700000
 800219c:	20000108 	.word	0x20000108
 80021a0:	2000010c 	.word	0x2000010c
 80021a4:	c1100000 	.word	0xc1100000
 80021a8:	200000f8 	.word	0x200000f8
 80021ac:	200000fc 	.word	0x200000fc
 80021b0:	200000f4 	.word	0x200000f4
 80021b4:	20000192 	.word	0x20000192
 80021b8:	c0400000 	.word	0xc0400000
 80021bc:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 80021c0:	f47f af62 	bne.w	8002088 <_ZN5astra8drawLogoEt+0x238>
        isInit = true;
 80021c4:	2301      	movs	r3, #1
 80021c6:	7013      	strb	r3, [r2, #0]
 80021c8:	f002 ff82 	bl	80050d0 <_ZN3HAL3getEv>
      yTitleTrg = HAL::getSystemConfig().screenHeight / 2 - getUIConfig().logoTextHeight / 2;  //居中
 80021cc:	7940      	ldrb	r0, [r0, #5]
 80021ce:	0840      	lsrs	r0, r0, #1
 80021d0:	f7fe fc68 	bl	8000aa4 <__aeabi_i2f>
 80021d4:	4974      	ldr	r1, [pc, #464]	@ (80023a8 <_ZN5astra8drawLogoEt+0x558>)
 80021d6:	f7fe fbaf 	bl	8000938 <__aeabi_fsub>
      yCopyRightTrg = yTitleTrg - getUIConfig().logoCopyRightHeight - 4;
 80021da:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
      yTitleTrg = HAL::getSystemConfig().screenHeight / 2 - getUIConfig().logoTextHeight / 2;  //居中
 80021de:	4604      	mov	r4, r0
      yCopyRightTrg = yTitleTrg - getUIConfig().logoCopyRightHeight - 4;
 80021e0:	f7fe fbaa 	bl	8000938 <__aeabi_fsub>
 80021e4:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80021e8:	f7fe fba6 	bl	8000938 <__aeabi_fsub>
      yTitleTrg = HAL::getSystemConfig().screenHeight / 2 - getUIConfig().logoTextHeight / 2;  //居中
 80021ec:	4b6f      	ldr	r3, [pc, #444]	@ (80023ac <_ZN5astra8drawLogoEt+0x55c>)
    HAL::drawBox(xBackGround, yBackGround, HAL::getSystemConfig().screenWeight, HAL::getSystemConfig().screenHeight);
 80021ee:	f8df 91c0 	ldr.w	r9, [pc, #448]	@ 80023b0 <_ZN5astra8drawLogoEt+0x560>
      yTitleTrg = HAL::getSystemConfig().screenHeight / 2 - getUIConfig().logoTextHeight / 2;  //居中
 80021f2:	601c      	str	r4, [r3, #0]
      yCopyRightTrg = yTitleTrg - getUIConfig().logoCopyRightHeight - 4;
 80021f4:	4b6f      	ldr	r3, [pc, #444]	@ (80023b4 <_ZN5astra8drawLogoEt+0x564>)
 80021f6:	6018      	str	r0, [r3, #0]
  static void canvasClear() { get()->_canvasClear(); }
 80021f8:	f002 ff6a 	bl	80050d0 <_ZN3HAL3getEv>
 80021fc:	6803      	ldr	r3, [r0, #0]
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	4798      	blx	r3
    HAL::setDrawType(0);
 8002202:	2000      	movs	r0, #0
 8002204:	f7ff fd19 	bl	8001c3a <_ZN3HAL11setDrawTypeEh>
    HAL::drawBox(xBackGround, yBackGround, HAL::getSystemConfig().screenWeight, HAL::getSystemConfig().screenHeight);
 8002208:	f8d9 b000 	ldr.w	fp, [r9]
  static sys::config &getSystemConfig() { return get()->config; }
 800220c:	f002 ff60 	bl	80050d0 <_ZN3HAL3getEv>
 8002210:	7900      	ldrb	r0, [r0, #4]
 8002212:	f7fe fc43 	bl	8000a9c <__aeabi_ui2f>
 8002216:	4682      	mov	sl, r0
 8002218:	f002 ff5a 	bl	80050d0 <_ZN3HAL3getEv>
 800221c:	7940      	ldrb	r0, [r0, #5]
 800221e:	f7fe fc3d 	bl	8000a9c <__aeabi_ui2f>
 8002222:	4604      	mov	r4, r0
  static void drawBox(float _x, float _y, float _w, float _h) { get()->_drawBox(_x, _y, _w, _h); }
 8002224:	f002 ff54 	bl	80050d0 <_ZN3HAL3getEv>
 8002228:	6803      	ldr	r3, [r0, #0]
 800222a:	9400      	str	r4, [sp, #0]
 800222c:	465a      	mov	r2, fp
 800222e:	6d5c      	ldr	r4, [r3, #84]	@ 0x54
 8002230:	2100      	movs	r1, #0
 8002232:	4653      	mov	r3, sl
 8002234:	47a0      	blx	r4
    animation(yBackGround, yBackGroundTrg, getUIConfig().logoAnimationSpeed);
 8002236:	4a60      	ldr	r2, [pc, #384]	@ (80023b8 <_ZN5astra8drawLogoEt+0x568>)
 8002238:	6839      	ldr	r1, [r7, #0]
 800223a:	4648      	mov	r0, r9
 800223c:	f7ff fca2 	bl	8001b84 <_ZZN5astra8drawLogoEtENKUlRfffE_clES0_ff.constprop.0>
    HAL::setDrawType(1);
 8002240:	2001      	movs	r0, #1
 8002242:	f7ff fcfa 	bl	8001c3a <_ZN3HAL11setDrawTypeEh>
  static sys::config &getSystemConfig() { return get()->config; }
 8002246:	f002 ff43 	bl	80050d0 <_ZN3HAL3getEv>
    HAL::drawHLine(0, yBackGround + HAL::getSystemConfig().screenHeight, HAL::getSystemConfig().screenWeight);
 800224a:	7940      	ldrb	r0, [r0, #5]
 800224c:	f7fe fc2a 	bl	8000aa4 <__aeabi_i2f>
 8002250:	f8d9 1000 	ldr.w	r1, [r9]
 8002254:	f7fe fb72 	bl	800093c <__addsf3>
 8002258:	4604      	mov	r4, r0
 800225a:	f002 ff39 	bl	80050d0 <_ZN3HAL3getEv>
 800225e:	7900      	ldrb	r0, [r0, #4]
 8002260:	f7fe fc1c 	bl	8000a9c <__aeabi_ui2f>
 8002264:	4621      	mov	r1, r4
 8002266:	4602      	mov	r2, r0
 8002268:	2000      	movs	r0, #0
 800226a:	f7ff fd10 	bl	8001c8e <_ZN3HAL9drawHLineEfff>
 800226e:	2400      	movs	r4, #0
      HAL::drawHLine(xStars[i] - getUIConfig().logoStarLength - 1, yStars[i], getUIConfig().logoStarLength);
 8002270:	f04f 4780 	mov.w	r7, #1073741824	@ 0x40000000
 8002274:	f04f 5a7e 	mov.w	sl, #1065353216	@ 0x3f800000
      animation(yStars[i], yStarsTrg[i], getUIConfig().logoAnimationSpeed);
 8002278:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 80023b8 <_ZN5astra8drawLogoEt+0x568>
      HAL::drawHLine(xStars[i] - getUIConfig().logoStarLength - 1, yStars[i], getUIConfig().logoStarLength);
 800227c:	6832      	ldr	r2, [r6, #0]
 800227e:	682b      	ldr	r3, [r5, #0]
 8002280:	5910      	ldr	r0, [r2, r4]
 8002282:	4639      	mov	r1, r7
 8002284:	9303      	str	r3, [sp, #12]
 8002286:	f7fe fb57 	bl	8000938 <__aeabi_fsub>
 800228a:	4651      	mov	r1, sl
 800228c:	f7fe fb54 	bl	8000938 <__aeabi_fsub>
 8002290:	9b03      	ldr	r3, [sp, #12]
 8002292:	463a      	mov	r2, r7
 8002294:	5919      	ldr	r1, [r3, r4]
 8002296:	f7ff fcfa 	bl	8001c8e <_ZN3HAL9drawHLineEfff>
      HAL::drawHLine(xStars[i] + 2, yStars[i], getUIConfig().logoStarLength);
 800229a:	6832      	ldr	r2, [r6, #0]
 800229c:	682b      	ldr	r3, [r5, #0]
 800229e:	5910      	ldr	r0, [r2, r4]
 80022a0:	4639      	mov	r1, r7
 80022a2:	9303      	str	r3, [sp, #12]
 80022a4:	f7fe fb4a 	bl	800093c <__addsf3>
 80022a8:	9b03      	ldr	r3, [sp, #12]
 80022aa:	463a      	mov	r2, r7
 80022ac:	5919      	ldr	r1, [r3, r4]
 80022ae:	f7ff fcee 	bl	8001c8e <_ZN3HAL9drawHLineEfff>
      HAL::drawVLine(xStars[i], yStars[i] - getUIConfig().logoStarLength - 1, getUIConfig().logoStarLength);
 80022b2:	682b      	ldr	r3, [r5, #0]
 80022b4:	4639      	mov	r1, r7
 80022b6:	5918      	ldr	r0, [r3, r4]
 80022b8:	f7fe fb3e 	bl	8000938 <__aeabi_fsub>
 80022bc:	4651      	mov	r1, sl
 80022be:	f7fe fb3b 	bl	8000938 <__aeabi_fsub>
 80022c2:	6833      	ldr	r3, [r6, #0]
 80022c4:	4601      	mov	r1, r0
 80022c6:	463a      	mov	r2, r7
 80022c8:	5918      	ldr	r0, [r3, r4]
 80022ca:	f7ff fcd0 	bl	8001c6e <_ZN3HAL9drawVLineEfff>
      HAL::drawVLine(xStars[i], yStars[i] + 2, getUIConfig().logoStarLength);
 80022ce:	682b      	ldr	r3, [r5, #0]
 80022d0:	4639      	mov	r1, r7
 80022d2:	5918      	ldr	r0, [r3, r4]
 80022d4:	f7fe fb32 	bl	800093c <__addsf3>
 80022d8:	6833      	ldr	r3, [r6, #0]
 80022da:	4601      	mov	r1, r0
 80022dc:	463a      	mov	r2, r7
 80022de:	5918      	ldr	r0, [r3, r4]
 80022e0:	f7ff fcc5 	bl	8001c6e <_ZN3HAL9drawVLineEfff>
      animation(yStars[i], yStarsTrg[i], getUIConfig().logoAnimationSpeed);
 80022e4:	f8d8 3000 	ldr.w	r3, [r8]
	return *(this->_M_impl._M_start + __n);
 80022e8:	6828      	ldr	r0, [r5, #0]
 80022ea:	5919      	ldr	r1, [r3, r4]
 80022ec:	4420      	add	r0, r4
 80022ee:	465a      	mov	r2, fp
    for (unsigned char i = 0; i < getUIConfig().logoStarNum; i++) {
 80022f0:	3404      	adds	r4, #4
      animation(yStars[i], yStarsTrg[i], getUIConfig().logoAnimationSpeed);
 80022f2:	f7ff fc47 	bl	8001b84 <_ZZN5astra8drawLogoEtENKUlRfffE_clES0_ff.constprop.0>
    for (unsigned char i = 0; i < getUIConfig().logoStarNum; i++) {
 80022f6:	2c40      	cmp	r4, #64	@ 0x40
 80022f8:	d1c0      	bne.n	800227c <_ZN5astra8drawLogoEt+0x42c>
    HAL::drawEnglish(xTitle, yTitle + getUIConfig().logoTextHeight, text);
 80022fa:	4d30      	ldr	r5, [pc, #192]	@ (80023bc <_ZN5astra8drawLogoEt+0x56c>)
    HAL::setFont(getUIConfig().logoTitleFont);
 80022fc:	4830      	ldr	r0, [pc, #192]	@ (80023c0 <_ZN5astra8drawLogoEt+0x570>)
 80022fe:	f7ff fc88 	bl	8001c12 <_ZN3HAL7setFontEPKh>
    HAL::drawEnglish(xTitle, yTitle + getUIConfig().logoTextHeight, text);
 8002302:	4930      	ldr	r1, [pc, #192]	@ (80023c4 <_ZN5astra8drawLogoEt+0x574>)
 8002304:	6828      	ldr	r0, [r5, #0]
 8002306:	f7fe fb19 	bl	800093c <__addsf3>
 800230a:	4b2f      	ldr	r3, [pc, #188]	@ (80023c8 <_ZN5astra8drawLogoEt+0x578>)
 800230c:	4601      	mov	r1, r0
 800230e:	4a2f      	ldr	r2, [pc, #188]	@ (80023cc <_ZN5astra8drawLogoEt+0x57c>)
 8002310:	6818      	ldr	r0, [r3, #0]
    HAL::drawEnglish(xCopyRight, yCopyRight + getUIConfig().logoCopyRightHeight, copyRight);
 8002312:	4c2f      	ldr	r4, [pc, #188]	@ (80023d0 <_ZN5astra8drawLogoEt+0x580>)
    HAL::drawEnglish(xTitle, yTitle + getUIConfig().logoTextHeight, text);
 8002314:	f7ff fc9b 	bl	8001c4e <_ZN3HAL11drawEnglishEffRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
    HAL::setFont(getUIConfig().logoCopyRightFont);
 8002318:	482e      	ldr	r0, [pc, #184]	@ (80023d4 <_ZN5astra8drawLogoEt+0x584>)
 800231a:	f7ff fc7a 	bl	8001c12 <_ZN3HAL7setFontEPKh>
    HAL::drawEnglish(xCopyRight, yCopyRight + getUIConfig().logoCopyRightHeight, copyRight);
 800231e:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8002322:	6820      	ldr	r0, [r4, #0]
 8002324:	f7fe fb0a 	bl	800093c <__addsf3>
 8002328:	4b2b      	ldr	r3, [pc, #172]	@ (80023d8 <_ZN5astra8drawLogoEt+0x588>)
 800232a:	4601      	mov	r1, r0
 800232c:	4a2b      	ldr	r2, [pc, #172]	@ (80023dc <_ZN5astra8drawLogoEt+0x58c>)
 800232e:	6818      	ldr	r0, [r3, #0]
 8002330:	f7ff fc8d 	bl	8001c4e <_ZN3HAL11drawEnglishEffRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
    animation(yTitle, yTitleTrg, getUIConfig().logoAnimationSpeed);
 8002334:	4b1d      	ldr	r3, [pc, #116]	@ (80023ac <_ZN5astra8drawLogoEt+0x55c>)
 8002336:	4628      	mov	r0, r5
 8002338:	6819      	ldr	r1, [r3, #0]
 800233a:	4a1f      	ldr	r2, [pc, #124]	@ (80023b8 <_ZN5astra8drawLogoEt+0x568>)
 800233c:	f7ff fc22 	bl	8001b84 <_ZZN5astra8drawLogoEtENKUlRfffE_clES0_ff.constprop.0>
    animation(yCopyRight, yCopyRightTrg, getUIConfig().logoAnimationSpeed);
 8002340:	4b1c      	ldr	r3, [pc, #112]	@ (80023b4 <_ZN5astra8drawLogoEt+0x564>)
 8002342:	4a1d      	ldr	r2, [pc, #116]	@ (80023b8 <_ZN5astra8drawLogoEt+0x568>)
 8002344:	6819      	ldr	r1, [r3, #0]
 8002346:	4620      	mov	r0, r4
 8002348:	f7ff fc1c 	bl	8001b84 <_ZZN5astra8drawLogoEtENKUlRfffE_clES0_ff.constprop.0>
  static void canvasUpdate() { get()->_canvasUpdate(); }
 800234c:	f002 fec0 	bl	80050d0 <_ZN3HAL3getEv>
 8002350:	6803      	ldr	r3, [r0, #0]
 8002352:	69db      	ldr	r3, [r3, #28]
 8002354:	4798      	blx	r3
    if (time >= _time && yBackGround == 0 - HAL::getSystemConfig().screenHeight - 1) onRender = false;
 8002356:	4b22      	ldr	r3, [pc, #136]	@ (80023e0 <_ZN5astra8drawLogoEt+0x590>)
 8002358:	9a02      	ldr	r2, [sp, #8]
 800235a:	881b      	ldrh	r3, [r3, #0]
 800235c:	4293      	cmp	r3, r2
 800235e:	f4ff ad7b 	bcc.w	8001e58 <_ZN5astra8drawLogoEt+0x8>
  static sys::config &getSystemConfig() { return get()->config; }
 8002362:	f002 feb5 	bl	80050d0 <_ZN3HAL3getEv>
 8002366:	7940      	ldrb	r0, [r0, #5]
 8002368:	43c0      	mvns	r0, r0
 800236a:	f7fe fb9b 	bl	8000aa4 <__aeabi_i2f>
 800236e:	f8d9 1000 	ldr.w	r1, [r9]
 8002372:	f7fe fd7f 	bl	8000e74 <__aeabi_fcmpeq>
 8002376:	2800      	cmp	r0, #0
 8002378:	f43f ad6e 	beq.w	8001e58 <_ZN5astra8drawLogoEt+0x8>
 800237c:	2300      	movs	r3, #0
 800237e:	4a19      	ldr	r2, [pc, #100]	@ (80023e4 <_ZN5astra8drawLogoEt+0x594>)
 8002380:	7013      	strb	r3, [r2, #0]
 8002382:	e569      	b.n	8001e58 <_ZN5astra8drawLogoEt+0x8>
 8002384:	f002 fea4 	bl	80050d0 <_ZN3HAL3getEv>
      yBackGroundTrg = 0 - HAL::getSystemConfig().screenHeight - 1;
 8002388:	7940      	ldrb	r0, [r0, #5]
      yStarsTrg.assign(getUIConfig().logoStarNum, 0 - getUIConfig().logoStarLength - 1);
 800238a:	4c17      	ldr	r4, [pc, #92]	@ (80023e8 <_ZN5astra8drawLogoEt+0x598>)
      yBackGroundTrg = 0 - HAL::getSystemConfig().screenHeight - 1;
 800238c:	43c0      	mvns	r0, r0
 800238e:	f7fe fb89 	bl	8000aa4 <__aeabi_i2f>
      yStarsTrg.assign(getUIConfig().logoStarNum, 0 - getUIConfig().logoStarLength - 1);
 8002392:	4b16      	ldr	r3, [pc, #88]	@ (80023ec <_ZN5astra8drawLogoEt+0x59c>)
      yBackGroundTrg = 0 - HAL::getSystemConfig().screenHeight - 1;
 8002394:	6038      	str	r0, [r7, #0]
      { _M_fill_assign(__n, __val); }
 8002396:	2110      	movs	r1, #16
 8002398:	4815      	ldr	r0, [pc, #84]	@ (80023f0 <_ZN5astra8drawLogoEt+0x5a0>)
 800239a:	aa05      	add	r2, sp, #20
      yStarsTrg.assign(getUIConfig().logoStarNum, 0 - getUIConfig().logoStarLength - 1);
 800239c:	9305      	str	r3, [sp, #20]
 800239e:	f7ff fd11 	bl	8001dc4 <_ZNSt6vectorIfSaIfEE14_M_fill_assignEjRKf>
 80023a2:	4814      	ldr	r0, [pc, #80]	@ (80023f4 <_ZN5astra8drawLogoEt+0x5a4>)
 80023a4:	e722      	b.n	80021ec <_ZN5astra8drawLogoEt+0x39c>
 80023a6:	bf00      	nop
 80023a8:	40e00000 	.word	0x40e00000
 80023ac:	20000104 	.word	0x20000104
 80023b0:	200000fc 	.word	0x200000fc
 80023b4:	20000100 	.word	0x20000100
 80023b8:	428c0000 	.word	0x428c0000
 80023bc:	20000114 	.word	0x20000114
 80023c0:	0800b484 	.word	0x0800b484
 80023c4:	41600000 	.word	0x41600000
 80023c8:	20000124 	.word	0x20000124
 80023cc:	20000148 	.word	0x20000148
 80023d0:	2000010c 	.word	0x2000010c
 80023d4:	0800bcd7 	.word	0x0800bcd7
 80023d8:	2000011c 	.word	0x2000011c
 80023dc:	2000012c 	.word	0x2000012c
 80023e0:	20000190 	.word	0x20000190
 80023e4:	20000002 	.word	0x20000002
 80023e8:	c1700000 	.word	0xc1700000
 80023ec:	c0400000 	.word	0xc0400000
 80023f0:	20000174 	.word	0x20000174
 80023f4:	c1100000 	.word	0xc1100000

080023f8 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
 80023f8:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80023fa:	b170      	cbz	r0, 800241a <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0+0x22>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80023fc:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 8002400:	d306      	bcc.n	8002410 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0+0x18>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8002402:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002406:	d301      	bcc.n	800240c <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0+0x14>
	      std::__throw_bad_array_new_length();
 8002408:	f007 f802 	bl	8009410 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800240c:	f006 fffd 	bl	800940a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8002410:	0080      	lsls	r0, r0, #2
      }
 8002412:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002416:	f006 bd25 	b.w	8008e64 <_Znwj>
 800241a:	bd08      	pop	{r3, pc}

0800241c <_ZN5astra6configC1Ev>:

namespace astra {
/**
 * @brief config of astra ui. astra ui的配置结构体
 */
struct config {
 800241c:	4a34      	ldr	r2, [pc, #208]	@ (80024f0 <_ZN5astra6configC1Ev+0xd4>)
 800241e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002420:	6002      	str	r2, [r0, #0]
 8002422:	6042      	str	r2, [r0, #4]
 8002424:	60c2      	str	r2, [r0, #12]
 8002426:	6102      	str	r2, [r0, #16]
 8002428:	6282      	str	r2, [r0, #40]	@ 0x28
 800242a:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 800242e:	f04f 547c 	mov.w	r4, #1056964608	@ 0x3f000000
 8002432:	62c2      	str	r2, [r0, #44]	@ 0x2c
 8002434:	2200      	movs	r2, #0
 8002436:	492f      	ldr	r1, [pc, #188]	@ (80024f4 <_ZN5astra6configC1Ev+0xd8>)
 8002438:	f04f 4583 	mov.w	r5, #1098907648	@ 0x41800000
 800243c:	6081      	str	r1, [r0, #8]
 800243e:	492e      	ldr	r1, [pc, #184]	@ (80024f8 <_ZN5astra6configC1Ev+0xdc>)
 8002440:	f880 2030 	strb.w	r2, [r0, #48]	@ 0x30
 8002444:	6141      	str	r1, [r0, #20]
 8002446:	492d      	ldr	r1, [pc, #180]	@ (80024fc <_ZN5astra6configC1Ev+0xe0>)
 8002448:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 800244c:	6181      	str	r1, [r0, #24]
 800244e:	492c      	ldr	r1, [pc, #176]	@ (8002500 <_ZN5astra6configC1Ev+0xe4>)
 8002450:	6444      	str	r4, [r0, #68]	@ 0x44
 8002452:	61c1      	str	r1, [r0, #28]
 8002454:	492b      	ldr	r1, [pc, #172]	@ (8002504 <_ZN5astra6configC1Ev+0xe8>)
 8002456:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 800245a:	6201      	str	r1, [r0, #32]
 800245c:	492a      	ldr	r1, [pc, #168]	@ (8002508 <_ZN5astra6configC1Ev+0xec>)
 800245e:	4f2b      	ldr	r7, [pc, #172]	@ (800250c <_ZN5astra6configC1Ev+0xf0>)
 8002460:	6241      	str	r1, [r0, #36]	@ 0x24
 8002462:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8002466:	6507      	str	r7, [r0, #80]	@ 0x50
 8002468:	6547      	str	r7, [r0, #84]	@ 0x54
 800246a:	4f29      	ldr	r7, [pc, #164]	@ (8002510 <_ZN5astra6configC1Ev+0xf4>)
 800246c:	4e29      	ldr	r6, [pc, #164]	@ (8002514 <_ZN5astra6configC1Ev+0xf8>)
 800246e:	6607      	str	r7, [r0, #96]	@ 0x60
 8002470:	4f29      	ldr	r7, [pc, #164]	@ (8002518 <_ZN5astra6configC1Ev+0xfc>)
 8002472:	6346      	str	r6, [r0, #52]	@ 0x34
 8002474:	6687      	str	r7, [r0, #104]	@ 0x68
 8002476:	6786      	str	r6, [r0, #120]	@ 0x78
 8002478:	4f28      	ldr	r7, [pc, #160]	@ (800251c <_ZN5astra6configC1Ev+0x100>)
 800247a:	4e29      	ldr	r6, [pc, #164]	@ (8002520 <_ZN5astra6configC1Ev+0x104>)
 800247c:	6382      	str	r2, [r0, #56]	@ 0x38
 800247e:	6405      	str	r5, [r0, #64]	@ 0x40
 8002480:	64c4      	str	r4, [r0, #76]	@ 0x4c
 8002482:	6582      	str	r2, [r0, #88]	@ 0x58
 8002484:	65c2      	str	r2, [r0, #92]	@ 0x5c
 8002486:	66c2      	str	r2, [r0, #108]	@ 0x6c
 8002488:	6744      	str	r4, [r0, #116]	@ 0x74
 800248a:	63c1      	str	r1, [r0, #60]	@ 0x3c
 800248c:	6481      	str	r1, [r0, #72]	@ 0x48
 800248e:	6641      	str	r1, [r0, #100]	@ 0x64
 8002490:	6707      	str	r7, [r0, #112]	@ 0x70
 8002492:	67c6      	str	r6, [r0, #124]	@ 0x7c
 8002494:	f8c0 4094 	str.w	r4, [r0, #148]	@ 0x94
 8002498:	f8c0 409c 	str.w	r4, [r0, #156]	@ 0x9c
 800249c:	4c21      	ldr	r4, [pc, #132]	@ (8002524 <_ZN5astra6configC1Ev+0x108>)
 800249e:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
 80024a2:	f8c0 40a0 	str.w	r4, [r0, #160]	@ 0xa0
 80024a6:	2410      	movs	r4, #16
 80024a8:	f8c0 20a4 	str.w	r2, [r0, #164]	@ 0xa4
 80024ac:	f8c0 20b8 	str.w	r2, [r0, #184]	@ 0xb8
 80024b0:	f8c0 20bc 	str.w	r2, [r0, #188]	@ 0xbc
 80024b4:	4a1c      	ldr	r2, [pc, #112]	@ (8002528 <_ZN5astra6configC1Ev+0x10c>)
 80024b6:	f880 40a8 	strb.w	r4, [r0, #168]	@ 0xa8
 80024ba:	f8c0 20c4 	str.w	r2, [r0, #196]	@ 0xc4
 80024be:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80024c2:	4c1a      	ldr	r4, [pc, #104]	@ (800252c <_ZN5astra6configC1Ev+0x110>)
 80024c4:	4e1a      	ldr	r6, [pc, #104]	@ (8002530 <_ZN5astra6configC1Ev+0x114>)
 80024c6:	f8c0 508c 	str.w	r5, [r0, #140]	@ 0x8c
 80024ca:	f8c0 40ac 	str.w	r4, [r0, #172]	@ 0xac
 80024ce:	4d19      	ldr	r5, [pc, #100]	@ (8002534 <_ZN5astra6configC1Ev+0x118>)
 80024d0:	4c19      	ldr	r4, [pc, #100]	@ (8002538 <_ZN5astra6configC1Ev+0x11c>)
 80024d2:	f8c0 6080 	str.w	r6, [r0, #128]	@ 0x80
 80024d6:	e9c0 442c 	strd	r4, r4, [r0, #176]	@ 0xb0
 80024da:	f8c0 6084 	str.w	r6, [r0, #132]	@ 0x84
 80024de:	f8c0 1090 	str.w	r1, [r0, #144]	@ 0x90
 80024e2:	f8c0 5098 	str.w	r5, [r0, #152]	@ 0x98
 80024e6:	f8c0 10c0 	str.w	r1, [r0, #192]	@ 0xc0
 80024ea:	f8c0 20c8 	str.w	r2, [r0, #200]	@ 0xc8
 80024ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024f0:	428c0000 	.word	0x428c0000
 80024f4:	42700000 	.word	0x42700000
 80024f8:	425c0000 	.word	0x425c0000
 80024fc:	41c80000 	.word	0x41c80000
 8002500:	41700000 	.word	0x41700000
 8002504:	42c80000 	.word	0x42c80000
 8002508:	42a00000 	.word	0x42a00000
 800250c:	41f00000 	.word	0x41f00000
 8002510:	40c00000 	.word	0x40c00000
 8002514:	40a00000 	.word	0x40a00000
 8002518:	41900000 	.word	0x41900000
 800251c:	41400000 	.word	0x41400000
 8002520:	40400000 	.word	0x40400000
 8002524:	41600000 	.word	0x41600000
 8002528:	41200000 	.word	0x41200000
 800252c:	0800b484 	.word	0x0800b484
 8002530:	42100000 	.word	0x42100000
 8002534:	42b40000 	.word	0x42b40000
 8002538:	0800bcd7 	.word	0x0800bcd7

0800253c <_ZN5astra9Animation4moveEPfff>:
  static auto *bufferPointer = (unsigned char *) HAL::getCanvasBuffer();

  for (uint16_t i = 0; i < bufferLen; ++i) bufferPointer[i] = bufferPointer[i] & (i % 2 == 0 ? 0x55 : 0xAA);
}

inline void Animation::move(float *_pos, float _posTrg, float _speed) {
 800253c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (*_pos != _posTrg) {
 800253e:	6806      	ldr	r6, [r0, #0]
inline void Animation::move(float *_pos, float _posTrg, float _speed) {
 8002540:	4604      	mov	r4, r0
  if (*_pos != _posTrg) {
 8002542:	4630      	mov	r0, r6
inline void Animation::move(float *_pos, float _posTrg, float _speed) {
 8002544:	460d      	mov	r5, r1
 8002546:	4617      	mov	r7, r2
  if (*_pos != _posTrg) {
 8002548:	f7fe fc94 	bl	8000e74 <__aeabi_fcmpeq>
 800254c:	b958      	cbnz	r0, 8002566 <_ZN5astra9Animation4moveEPfff+0x2a>
    if (std::fabs(*_pos - _posTrg) <= 1.0f) *_pos = _posTrg;
 800254e:	4629      	mov	r1, r5
 8002550:	4630      	mov	r0, r6
 8002552:	f7fe f9f1 	bl	8000938 <__aeabi_fsub>
 8002556:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800255a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800255e:	f7fe fc9d 	bl	8000e9c <__aeabi_fcmple>
 8002562:	b108      	cbz	r0, 8002568 <_ZN5astra9Animation4moveEPfff+0x2c>
 8002564:	6025      	str	r5, [r4, #0]
    else *_pos += (_posTrg - *_pos) / ((100 - _speed) / 1.0f);
  }
}
 8002566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else *_pos += (_posTrg - *_pos) / ((100 - _speed) / 1.0f);
 8002568:	4631      	mov	r1, r6
 800256a:	4628      	mov	r0, r5
 800256c:	f7fe f9e4 	bl	8000938 <__aeabi_fsub>
 8002570:	4639      	mov	r1, r7
 8002572:	4605      	mov	r5, r0
 8002574:	4805      	ldr	r0, [pc, #20]	@ (800258c <_ZN5astra9Animation4moveEPfff+0x50>)
 8002576:	f7fe f9df 	bl	8000938 <__aeabi_fsub>
 800257a:	4601      	mov	r1, r0
 800257c:	4628      	mov	r0, r5
 800257e:	f7fe fb99 	bl	8000cb4 <__aeabi_fdiv>
 8002582:	4631      	mov	r1, r6
 8002584:	f7fe f9da 	bl	800093c <__addsf3>
 8002588:	6020      	str	r0, [r4, #0]
}
 800258a:	e7ec      	b.n	8002566 <_ZN5astra9Animation4moveEPfff+0x2a>
 800258c:	42c80000 	.word	0x42c80000

08002590 <_ZN5astra6CameraC1Eff>:
namespace led {

}

namespace sys {
struct config {
 8002590:	f44f 4381 	mov.w	r3, #16512	@ 0x4080

//这里的坐标应该都是负的 因为最终渲染的时候是加上摄像机的坐标
//所以说比如想显示下一页 应该是item本身的坐标减去摄像机的坐标 这样才会让item向上移动
//一个办法是用户传进来正的坐标 但是在摄像机内部 所有坐标都取其相反数 负的

Camera::Camera(float _x, float _y) {
 8002594:	b570      	push	{r4, r5, r6, lr}
 8002596:	460d      	mov	r5, r1
 8002598:	8003      	strh	r3, [r0, #0]
 800259a:	4b0f      	ldr	r3, [pc, #60]	@ (80025d8 <_ZN5astra6CameraC1Eff+0x48>)
 800259c:	4604      	mov	r4, r0
 800259e:	6043      	str	r3, [r0, #4]
class Item {
 80025a0:	3008      	adds	r0, #8
 80025a2:	4616      	mov	r6, r2
 80025a4:	f7ff ff3a 	bl	800241c <_ZN5astra6configC1Ev>
  this->xInit = 0 - _x;
 80025a8:	4629      	mov	r1, r5
 80025aa:	2000      	movs	r0, #0
 80025ac:	f7fe f9c4 	bl	8000938 <__aeabi_fsub>
  this->yInit = 0 - _y;
 80025b0:	4631      	mov	r1, r6
  this->xInit = 0 - _x;
 80025b2:	4605      	mov	r5, r0
 80025b4:	f8c4 00d4 	str.w	r0, [r4, #212]	@ 0xd4
  this->yInit = 0 - _y;
 80025b8:	2000      	movs	r0, #0
 80025ba:	f7fe f9bd 	bl	8000938 <__aeabi_fsub>

  this->x = 0 - _x;
 80025be:	f8c4 50dc 	str.w	r5, [r4, #220]	@ 0xdc
  this->yInit = 0 - _y;
 80025c2:	f8c4 00d8 	str.w	r0, [r4, #216]	@ 0xd8
  this->y = 0 - _y;
 80025c6:	f8c4 00e0 	str.w	r0, [r4, #224]	@ 0xe0

  this->xTrg = 0 - _x;
  this->yTrg = 0 - _y;
 80025ca:	f8c4 00e8 	str.w	r0, [r4, #232]	@ 0xe8
  this->xTrg = 0 - _x;
 80025ce:	f8c4 50e4 	str.w	r5, [r4, #228]	@ 0xe4
}
 80025d2:	4620      	mov	r0, r4
 80025d4:	bd70      	pop	{r4, r5, r6, pc}
 80025d6:	bf00      	nop
 80025d8:	437f0000 	.word	0x437f0000

080025dc <_ZN5astra6Camera4initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

std::vector<float> Camera::getPositionTrg() {
  return {xTrg, yTrg};
}

void Camera::init(const std::string &_type) {
 80025dc:	b538      	push	{r3, r4, r5, lr}
 80025de:	460d      	mov	r5, r1
 80025e0:	4604      	mov	r4, r0
    { return __lhs.compare(__rhs) == 0; }
 80025e2:	490d      	ldr	r1, [pc, #52]	@ (8002618 <_ZN5astra6Camera4initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c>)
 80025e4:	4628      	mov	r0, r5
 80025e6:	f007 f8d7 	bl	8009798 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
  if (_type == "List") {
 80025ea:	b950      	cbnz	r0, 8002602 <_ZN5astra6Camera4initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x26>
  this->xTrg = 0 - _pos[0];
  this->yTrg = 0 - _pos[1];
}

void Camera::goDirect(float _x, float _y) {
  this->x = 0 - _x;
 80025ec:	2200      	movs	r2, #0
  this->y = 0 - _y;
 80025ee:	4b0b      	ldr	r3, [pc, #44]	@ (800261c <_ZN5astra6Camera4initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x40>)
  this->x = 0 - _x;
 80025f0:	f8c4 20dc 	str.w	r2, [r4, #220]	@ 0xdc
  this->y = 0 - _y;
 80025f4:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
  this->xTrg = 0 - _x;
 80025f8:	f8c4 20e4 	str.w	r2, [r4, #228]	@ 0xe4
  this->yTrg = 0 - _y;
 80025fc:	f8c4 30e8 	str.w	r3, [r4, #232]	@ 0xe8
}
 8002600:	bd38      	pop	{r3, r4, r5, pc}
 8002602:	4628      	mov	r0, r5
 8002604:	4906      	ldr	r1, [pc, #24]	@ (8002620 <_ZN5astra6Camera4initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x44>)
 8002606:	f007 f8c7 	bl	8009798 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
  else if (_type == "Tile") {
 800260a:	2800      	cmp	r0, #0
 800260c:	d1f8      	bne.n	8002600 <_ZN5astra6Camera4initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x24>
  this->x = 0 - _x;
 800260e:	4a05      	ldr	r2, [pc, #20]	@ (8002624 <_ZN5astra6Camera4initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x48>)
  this->y = 0 - _y;
 8002610:	2300      	movs	r3, #0
  this->x = 0 - _x;
 8002612:	f8c4 20dc 	str.w	r2, [r4, #220]	@ 0xdc
  this->y = 0 - _y;
 8002616:	e7ed      	b.n	80025f4 <_ZN5astra6Camera4initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x18>
 8002618:	0800b0dc 	.word	0x0800b0dc
 800261c:	44200000 	.word	0x44200000
 8002620:	0800b0e1 	.word	0x0800b0e1
 8002624:	44a00000 	.word	0x44a00000

08002628 <_ZN5astra6Camera12goToTileItemEh>:
    return;
  }
  else return;
}

void Camera::goToTileItem(unsigned char _index) {
 8002628:	b570      	push	{r4, r5, r6, lr}
 800262a:	4604      	mov	r4, r0
 800262c:	460e      	mov	r6, r1
  go(_index * (astraConfig.tilePicWidth + astraConfig.tilePicMargin), 0);
 800262e:	6e01      	ldr	r1, [r0, #96]	@ 0x60
 8002630:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8002632:	f7fe f983 	bl	800093c <__addsf3>
 8002636:	4605      	mov	r5, r0
 8002638:	4630      	mov	r0, r6
 800263a:	f7fe fa33 	bl	8000aa4 <__aeabi_i2f>
 800263e:	4601      	mov	r1, r0
 8002640:	4628      	mov	r0, r5
 8002642:	f7fe fa83 	bl	8000b4c <__aeabi_fmul>
 8002646:	4601      	mov	r1, r0
  this->xTrg = 0 - _x;
 8002648:	2000      	movs	r0, #0
 800264a:	f7fe f975 	bl	8000938 <__aeabi_fsub>
  this->yTrg = 0 - _y;
 800264e:	2300      	movs	r3, #0
  this->xTrg = 0 - _x;
 8002650:	f8c4 00e4 	str.w	r0, [r4, #228]	@ 0xe4
  this->yTrg = 0 - _y;
 8002654:	f8c4 30e8 	str.w	r3, [r4, #232]	@ 0xe8
}
 8002658:	bd70      	pop	{r4, r5, r6, pc}

0800265a <_ZN5astra6Camera6renderEv>:

void Camera::resetDirect() {
  goDirect(this->xInit, this->yInit);
}

void Camera::render() {
 800265a:	b538      	push	{r3, r4, r5, lr}
 800265c:	4604      	mov	r4, r0
  Animation::move(&this->x, this->xTrg, astraConfig.cameraAnimationSpeed);
 800265e:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
 8002660:	f8d0 10e4 	ldr.w	r1, [r0, #228]	@ 0xe4
 8002664:	462a      	mov	r2, r5
 8002666:	30dc      	adds	r0, #220	@ 0xdc
 8002668:	f7ff ff68 	bl	800253c <_ZN5astra9Animation4moveEPfff>
  Animation::move(&this->y, this->yTrg, astraConfig.cameraAnimationSpeed);
 800266c:	462a      	mov	r2, r5
 800266e:	f8d4 10e8 	ldr.w	r1, [r4, #232]	@ 0xe8
 8002672:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 8002676:	f7ff ff61 	bl	800253c <_ZN5astra9Animation4moveEPfff>
}
 800267a:	bd38      	pop	{r3, r4, r5, pc}

0800267c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	  if (_Num)
 800267c:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800267e:	b510      	push	{r4, lr}
 8002680:	4613      	mov	r3, r2
	  const ptrdiff_t _Num = __last - __first;
 8002682:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
 8002686:	d005      	beq.n	8002694 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8002688:	4601      	mov	r1, r0
 800268a:	4622      	mov	r2, r4
 800268c:	4618      	mov	r0, r3
 800268e:	f007 fc52 	bl	8009f36 <memmove>
 8002692:	4603      	mov	r3, r0
	}
 8002694:	1918      	adds	r0, r3, r4
 8002696:	bd10      	pop	{r4, pc}

08002698 <_ZNSt6vectorIfSaIfEEC1ERKS1_>:
      vector(const vector& __x)
 8002698:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800269a:	e9d1 3600 	ldrd	r3, r6, [r1]
 800269e:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 80026a0:	2300      	movs	r3, #0
      vector(const vector& __x)
 80026a2:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
 80026a4:	e9c0 3300 	strd	r3, r3, [r0]
 80026a8:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
 80026aa:	10b0      	asrs	r0, r6, #2
      vector(const vector& __x)
 80026ac:	460d      	mov	r5, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
 80026ae:	f7ff fea3 	bl	80023f8 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80026b2:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80026b6:	4406      	add	r6, r0
 80026b8:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
 80026ba:	4602      	mov	r2, r0
			      _Category>::__copy_m(__first, __last, __result);
 80026bc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80026c0:	f7ff ffdc 	bl	800267c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
 80026c4:	6060      	str	r0, [r4, #4]
      }
 80026c6:	4620      	mov	r0, r4
 80026c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080026cc <_ZNSt6vectorIfSaIfEE19_M_range_initializeIPKfEEvT_S5_St20forward_iterator_tag.isra.0>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 80026cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 80026ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002700 <_ZNSt6vectorIfSaIfEE19_M_range_initializeIPKfEEvT_S5_St20forward_iterator_tag.isra.0+0x34>)
 80026d0:	1a55      	subs	r5, r2, r1
 80026d2:	429d      	cmp	r5, r3
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 80026d4:	4604      	mov	r4, r0
 80026d6:	460e      	mov	r6, r1
 80026d8:	4617      	mov	r7, r2
 80026da:	ea4f 00a5 	mov.w	r0, r5, asr #2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 80026de:	d902      	bls.n	80026e6 <_ZNSt6vectorIfSaIfEE19_M_range_initializeIPKfEEvT_S5_St20forward_iterator_tag.isra.0+0x1a>
	  __throw_length_error(
 80026e0:	4808      	ldr	r0, [pc, #32]	@ (8002704 <_ZNSt6vectorIfSaIfEE19_M_range_initializeIPKfEEvT_S5_St20forward_iterator_tag.isra.0+0x38>)
 80026e2:	f006 fe9b 	bl	800941c <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80026e6:	f7ff fe87 	bl	80023f8 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80026ea:	4405      	add	r5, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80026ec:	4602      	mov	r2, r0
 80026ee:	6020      	str	r0, [r4, #0]
 80026f0:	4639      	mov	r1, r7
 80026f2:	4630      	mov	r0, r6
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80026f4:	60a5      	str	r5, [r4, #8]
 80026f6:	f7ff ffc1 	bl	800267c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
 80026fa:	6060      	str	r0, [r4, #4]
	}
 80026fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026fe:	bf00      	nop
 8002700:	7ffffffc 	.word	0x7ffffffc
 8002704:	0800af48 	.word	0x0800af48

08002708 <_ZN5astra6Camera14getPositionTrgEv>:
std::vector<float> Camera::getPositionTrg() {
 8002708:	b513      	push	{r0, r1, r4, lr}
  return {xTrg, yTrg};
 800270a:	f8d1 30e4 	ldr.w	r3, [r1, #228]	@ 0xe4
std::vector<float> Camera::getPositionTrg() {
 800270e:	4604      	mov	r4, r0
  return {xTrg, yTrg};
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	f8d1 30e8 	ldr.w	r3, [r1, #232]	@ 0xe8
	_M_range_initialize(__l.begin(), __l.end(),
 8002716:	aa02      	add	r2, sp, #8
 8002718:	9301      	str	r3, [sp, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800271a:	2300      	movs	r3, #0
	_M_range_initialize(__l.begin(), __l.end(),
 800271c:	4669      	mov	r1, sp
	: _M_start(), _M_finish(), _M_end_of_storage()
 800271e:	e9c0 3300 	strd	r3, r3, [r0]
 8002722:	6083      	str	r3, [r0, #8]
	_M_range_initialize(__l.begin(), __l.end(),
 8002724:	f7ff ffd2 	bl	80026cc <_ZNSt6vectorIfSaIfEE19_M_range_initializeIPKfEEvT_S5_St20forward_iterator_tag.isra.0>
}
 8002728:	4620      	mov	r0, r4
 800272a:	b002      	add	sp, #8
 800272c:	bd10      	pop	{r4, pc}

0800272e <_ZN5astra6Camera11getPositionEv>:
std::vector<float> Camera::getPosition() {
 800272e:	b513      	push	{r0, r1, r4, lr}
  return {x, y};
 8002730:	f8d1 30dc 	ldr.w	r3, [r1, #220]	@ 0xdc
std::vector<float> Camera::getPosition() {
 8002734:	4604      	mov	r4, r0
  return {x, y};
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	f8d1 30e0 	ldr.w	r3, [r1, #224]	@ 0xe0
 800273c:	aa02      	add	r2, sp, #8
 800273e:	9301      	str	r3, [sp, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8002740:	2300      	movs	r3, #0
	_M_range_initialize(__l.begin(), __l.end(),
 8002742:	4669      	mov	r1, sp
	: _M_start(), _M_finish(), _M_end_of_storage()
 8002744:	e9c0 3300 	strd	r3, r3, [r0]
 8002748:	6083      	str	r3, [r0, #8]
	_M_range_initialize(__l.begin(), __l.end(),
 800274a:	f7ff ffbf 	bl	80026cc <_ZNSt6vectorIfSaIfEE19_M_range_initializeIPKfEEvT_S5_St20forward_iterator_tag.isra.0>
}
 800274e:	4620      	mov	r0, r4
 8002750:	b002      	add	sp, #8
 8002752:	bd10      	pop	{r4, pc}

08002754 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8002754:	b510      	push	{r4, lr}
	  if (_Num)
 8002756:	1a0c      	subs	r4, r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8002758:	4613      	mov	r3, r2
	  if (_Num)
 800275a:	d005      	beq.n	8002768 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x14>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800275c:	4601      	mov	r1, r0
 800275e:	4622      	mov	r2, r4
 8002760:	4618      	mov	r0, r3
 8002762:	f007 fbe8 	bl	8009f36 <memmove>
 8002766:	4603      	mov	r3, r0
	}
 8002768:	1918      	adds	r0, r3, r4
 800276a:	bd10      	pop	{r4, pc}

0800276c <_ZNSt6vectorIhSaIhEEC1ERKS1_>:
      vector(const vector& __x)
 800276c:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800276e:	e9d1 3500 	ldrd	r3, r5, [r1]
 8002772:	1aed      	subs	r5, r5, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8002774:	2300      	movs	r3, #0
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002776:	429d      	cmp	r5, r3
      vector(const vector& __x)
 8002778:	4604      	mov	r4, r0
 800277a:	460e      	mov	r6, r1
	: _M_start(), _M_finish(), _M_end_of_storage()
 800277c:	e9c0 3300 	strd	r3, r3, [r0]
 8002780:	6083      	str	r3, [r0, #8]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002782:	d011      	beq.n	80027a8 <_ZNSt6vectorIhSaIhEEC1ERKS1_+0x3c>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8002784:	da01      	bge.n	800278a <_ZNSt6vectorIhSaIhEEC1ERKS1_+0x1e>
	    std::__throw_bad_alloc();
 8002786:	f006 fe40 	bl	800940a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800278a:	4628      	mov	r0, r5
 800278c:	f006 fb6a 	bl	8008e64 <_Znwj>
 8002790:	4602      	mov	r2, r0
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8002792:	e9c4 2200 	strd	r2, r2, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8002796:	4415      	add	r5, r2
 8002798:	60a5      	str	r5, [r4, #8]
			      _Category>::__copy_m(__first, __last, __result);
 800279a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800279e:	f7ff ffd9 	bl	8002754 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
 80027a2:	6060      	str	r0, [r4, #4]
      }
 80027a4:	4620      	mov	r0, r4
 80027a6:	bd70      	pop	{r4, r5, r6, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80027a8:	462a      	mov	r2, r5
 80027aa:	e7f2      	b.n	8002792 <_ZNSt6vectorIhSaIhEEC1ERKS1_+0x26>

080027ac <_ZN5astra4List15refreshBoundaryEhh>:
  List(const std::string &_title, const std::vector<unsigned char>& _pic);

public:
  std::vector<unsigned char> boundary = {0, static_cast<unsigned char>(systemConfig.screenHeight / astraConfig.listLineHeight - 1)};
  [[nodiscard]] std::vector<unsigned char> getBoundary() const { return boundary; }
  void refreshBoundary(unsigned char _l, unsigned char _r) { boundary = {_l, _r}; }
 80027ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
			 - this->_M_impl._M_start); }
 80027ae:	f8d0 3160 	ldr.w	r3, [r0, #352]	@ 0x160
 80027b2:	f88d 2005 	strb.w	r2, [sp, #5]
 80027b6:	f8d0 2158 	ldr.w	r2, [r0, #344]	@ 0x158
 80027ba:	4604      	mov	r4, r0
 80027bc:	1a9b      	subs	r3, r3, r2
	if (__len > capacity())
 80027be:	2b01      	cmp	r3, #1
 80027c0:	f88d 1004 	strb.w	r1, [sp, #4]
 80027c4:	d818      	bhi.n	80027f8 <_ZN5astra4List15refreshBoundaryEhh+0x4c>
 80027c6:	2002      	movs	r0, #2
 80027c8:	f006 fb4c 	bl	8008e64 <_Znwj>
 80027cc:	f10d 0106 	add.w	r1, sp, #6
 80027d0:	4602      	mov	r2, r0
 80027d2:	4605      	mov	r5, r0
 80027d4:	a801      	add	r0, sp, #4
 80027d6:	f7ff ffbd 	bl	8002754 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80027da:	f8d4 0158 	ldr.w	r0, [r4, #344]	@ 0x158
	if (__p)
 80027de:	b120      	cbz	r0, 80027ea <_ZN5astra4List15refreshBoundaryEhh+0x3e>
			  - this->_M_impl._M_start);
 80027e0:	f8d4 1160 	ldr.w	r1, [r4, #352]	@ 0x160
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80027e4:	1a09      	subs	r1, r1, r0
 80027e6:	f006 fad7 	bl	8008d98 <_ZdlPvj>
	    this->_M_impl._M_start = __tmp;
 80027ea:	f8c4 5158 	str.w	r5, [r4, #344]	@ 0x158
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
 80027ee:	3502      	adds	r5, #2
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
 80027f0:	e9c4 5557 	strd	r5, r5, [r4, #348]	@ 0x15c
 80027f4:	b003      	add	sp, #12
 80027f6:	bd30      	pop	{r4, r5, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80027f8:	f8d0 515c 	ldr.w	r5, [r0, #348]	@ 0x15c
 80027fc:	1aad      	subs	r5, r5, r2
	else if (size() >= __len)
 80027fe:	2d01      	cmp	r5, #1
 8002800:	d90b      	bls.n	800281a <_ZN5astra4List15refreshBoundaryEhh+0x6e>
 8002802:	f10d 0106 	add.w	r1, sp, #6
 8002806:	a801      	add	r0, sp, #4
 8002808:	f7ff ffa4 	bl	8002754 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800280c:	f8d4 315c 	ldr.w	r3, [r4, #348]	@ 0x15c
 8002810:	4298      	cmp	r0, r3
 8002812:	d0ef      	beq.n	80027f4 <_ZN5astra4List15refreshBoundaryEhh+0x48>
	    this->_M_impl._M_finish =
 8002814:	f8c4 015c 	str.w	r0, [r4, #348]	@ 0x15c
 8002818:	e7ec      	b.n	80027f4 <_ZN5astra4List15refreshBoundaryEhh+0x48>
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 800281a:	ab01      	add	r3, sp, #4
 800281c:	441d      	add	r5, r3
 800281e:	4629      	mov	r1, r5
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff ff97 	bl	8002754 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8002826:	4628      	mov	r0, r5
 8002828:	f8d4 215c 	ldr.w	r2, [r4, #348]	@ 0x15c
 800282c:	f10d 0106 	add.w	r1, sp, #6
 8002830:	f7ff ff90 	bl	8002754 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8002834:	e7ee      	b.n	8002814 <_ZN5astra4List15refreshBoundaryEhh+0x68>
	...

08002838 <_ZN5astra6Camera19goToListItemRollingEPNS_4ListE>:
void Camera::goToListItemRolling(List *_menu) {
 8002838:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  static const unsigned char maxItemPerPage = systemConfig.screenHeight / astraConfig.listLineHeight;
 800283c:	4e41      	ldr	r6, [pc, #260]	@ (8002944 <_ZN5astra6Camera19goToListItemRollingEPNS_4ListE+0x10c>)
void Camera::goToListItemRolling(List *_menu) {
 800283e:	4605      	mov	r5, r0
  static const unsigned char maxItemPerPage = systemConfig.screenHeight / astraConfig.listLineHeight;
 8002840:	6833      	ldr	r3, [r6, #0]
void Camera::goToListItemRolling(List *_menu) {
 8002842:	460c      	mov	r4, r1
  static const unsigned char maxItemPerPage = systemConfig.screenHeight / astraConfig.listLineHeight;
 8002844:	07db      	lsls	r3, r3, #31
 8002846:	f3bf 8f5b 	dmb	ish
 800284a:	d410      	bmi.n	800286e <_ZN5astra6Camera19goToListItemRollingEPNS_4ListE+0x36>
 800284c:	4630      	mov	r0, r6
 800284e:	f006 fafa 	bl	8008e46 <__cxa_guard_acquire>
 8002852:	b160      	cbz	r0, 800286e <_ZN5astra6Camera19goToListItemRollingEPNS_4ListE+0x36>
 8002854:	7868      	ldrb	r0, [r5, #1]
 8002856:	f7fe f925 	bl	8000aa4 <__aeabi_i2f>
 800285a:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 800285c:	f7fe fa2a 	bl	8000cb4 <__aeabi_fdiv>
 8002860:	f7fe fb60 	bl	8000f24 <__aeabi_f2uiz>
 8002864:	4b38      	ldr	r3, [pc, #224]	@ (8002948 <_ZN5astra6Camera19goToListItemRollingEPNS_4ListE+0x110>)
 8002866:	7018      	strb	r0, [r3, #0]
 8002868:	4630      	mov	r0, r6
 800286a:	f006 faf8 	bl	8008e5e <__cxa_guard_release>
  if (!_menu->initFlag) {
 800286e:	f894 3145 	ldrb.w	r3, [r4, #325]	@ 0x145
 8002872:	b93b      	cbnz	r3, 8002884 <_ZN5astra6Camera19goToListItemRollingEPNS_4ListE+0x4c>
  this->xTrg = 0 - _x;
 8002874:	2300      	movs	r3, #0
 8002876:	f8c5 30e4 	str.w	r3, [r5, #228]	@ 0xe4
  this->yTrg = 0 - _y;
 800287a:	f8c5 30e8 	str.w	r3, [r5, #232]	@ 0xe8
    _menu->initFlag = true;
 800287e:	2301      	movs	r3, #1
 8002880:	f884 3145 	strb.w	r3, [r4, #325]	@ 0x145
  [[nodiscard]] std::vector<unsigned char> getBoundary() const { return boundary; }
 8002884:	f504 76ac 	add.w	r6, r4, #344	@ 0x158
 8002888:	4631      	mov	r1, r6
 800288a:	a801      	add	r0, sp, #4
  if (_menu->selectIndex < _menu->getBoundary()[0]) {
 800288c:	f894 8144 	ldrb.w	r8, [r4, #324]	@ 0x144
 8002890:	f7ff ff6c 	bl	800276c <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8002894:	9b01      	ldr	r3, [sp, #4]
      }
 8002896:	a801      	add	r0, sp, #4
 8002898:	781f      	ldrb	r7, [r3, #0]
 800289a:	f7fe fe35 	bl	8001508 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 800289e:	45b8      	cmp	r8, r7
 80028a0:	4631      	mov	r1, r6
 80028a2:	f894 7144 	ldrb.w	r7, [r4, #324]	@ 0x144
 80028a6:	a801      	add	r0, sp, #4
 80028a8:	d220      	bcs.n	80028ec <_ZN5astra6Camera19goToListItemRollingEPNS_4ListE+0xb4>
 80028aa:	f7ff ff5f 	bl	800276c <_ZNSt6vectorIhSaIhEEC1ERKS1_>
    move(0, (_menu->selectIndex - _menu->getBoundary()[0]) * astraConfig.listLineHeight);
 80028ae:	9b01      	ldr	r3, [sp, #4]
 80028b0:	7818      	ldrb	r0, [r3, #0]
 80028b2:	1a38      	subs	r0, r7, r0
 80028b4:	f7fe f8f6 	bl	8000aa4 <__aeabi_i2f>
 80028b8:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 80028ba:	f7fe f947 	bl	8000b4c <__aeabi_fmul>
 80028be:	4601      	mov	r1, r0
  this->yTrg -= _y;
 80028c0:	f8d5 00e8 	ldr.w	r0, [r5, #232]	@ 0xe8
 80028c4:	f7fe f838 	bl	8000938 <__aeabi_fsub>
 80028c8:	f8c5 00e8 	str.w	r0, [r5, #232]	@ 0xe8
 80028cc:	a801      	add	r0, sp, #4
 80028ce:	f7fe fe1b 	bl	8001508 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
    _menu->refreshBoundary(_menu->selectIndex, _menu->selectIndex + maxItemPerPage - 1);
 80028d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002948 <_ZN5astra6Camera19goToListItemRollingEPNS_4ListE+0x110>)
 80028d4:	f894 1144 	ldrb.w	r1, [r4, #324]	@ 0x144
 80028d8:	781a      	ldrb	r2, [r3, #0]
 80028da:	3a01      	subs	r2, #1
 80028dc:	440a      	add	r2, r1
 80028de:	b2d2      	uxtb	r2, r2
    _menu->refreshBoundary(_menu->selectIndex - maxItemPerPage + 1, _menu->selectIndex);
 80028e0:	4620      	mov	r0, r4
 80028e2:	f7ff ff63 	bl	80027ac <_ZN5astra4List15refreshBoundaryEhh>
}
 80028e6:	b004      	add	sp, #16
 80028e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028ec:	f7ff ff3e 	bl	800276c <_ZNSt6vectorIhSaIhEEC1ERKS1_>
  else if (_menu->selectIndex > _menu->getBoundary()[1]) {
 80028f0:	9b01      	ldr	r3, [sp, #4]
 80028f2:	a801      	add	r0, sp, #4
 80028f4:	f893 8001 	ldrb.w	r8, [r3, #1]
 80028f8:	f7fe fe06 	bl	8001508 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80028fc:	4547      	cmp	r7, r8
 80028fe:	d9f2      	bls.n	80028e6 <_ZN5astra6Camera19goToListItemRollingEPNS_4ListE+0xae>
 8002900:	4631      	mov	r1, r6
 8002902:	a801      	add	r0, sp, #4
    move(0, (_menu->selectIndex - _menu->getBoundary()[1]) * astraConfig.listLineHeight);
 8002904:	f894 7144 	ldrb.w	r7, [r4, #324]	@ 0x144
 8002908:	f7ff ff30 	bl	800276c <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 800290c:	9b01      	ldr	r3, [sp, #4]
 800290e:	7858      	ldrb	r0, [r3, #1]
 8002910:	1a38      	subs	r0, r7, r0
 8002912:	f7fe f8c7 	bl	8000aa4 <__aeabi_i2f>
 8002916:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 8002918:	f7fe f918 	bl	8000b4c <__aeabi_fmul>
 800291c:	4601      	mov	r1, r0
  this->yTrg -= _y;
 800291e:	f8d5 00e8 	ldr.w	r0, [r5, #232]	@ 0xe8
 8002922:	f7fe f809 	bl	8000938 <__aeabi_fsub>
 8002926:	f8c5 00e8 	str.w	r0, [r5, #232]	@ 0xe8
 800292a:	a801      	add	r0, sp, #4
 800292c:	f7fe fdec 	bl	8001508 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
    _menu->refreshBoundary(_menu->selectIndex - maxItemPerPage + 1, _menu->selectIndex);
 8002930:	4b05      	ldr	r3, [pc, #20]	@ (8002948 <_ZN5astra6Camera19goToListItemRollingEPNS_4ListE+0x110>)
 8002932:	f894 2144 	ldrb.w	r2, [r4, #324]	@ 0x144
 8002936:	7819      	ldrb	r1, [r3, #0]
 8002938:	f1c1 0101 	rsb	r1, r1, #1
 800293c:	4411      	add	r1, r2
 800293e:	b2c9      	uxtb	r1, r1
 8002940:	e7ce      	b.n	80028e0 <_ZN5astra6Camera19goToListItemRollingEPNS_4ListE+0xa8>
 8002942:	bf00      	nop
 8002944:	20000194 	.word	0x20000194
 8002948:	20000198 	.word	0x20000198

0800294c <_ZN5astra6Camera6updateEPNS_4MenuEPNS_8SelectorE>:

void Camera::update(Menu *_menu, Selector *_selector) {
 800294c:	b5f0      	push	{r4, r5, r6, r7, lr}

  if (_menu->cameraPosMemoryFlag) {
 800294e:	f891 30e4 	ldrb.w	r3, [r1, #228]	@ 0xe4
void Camera::update(Menu *_menu, Selector *_selector) {
 8002952:	4606      	mov	r6, r0
 8002954:	460c      	mov	r4, r1
 8002956:	b08b      	sub	sp, #44	@ 0x2c
  if (_menu->cameraPosMemoryFlag) {
 8002958:	2b00      	cmp	r3, #0
 800295a:	d04a      	beq.n	80029f2 <_ZN5astra6Camera6updateEPNS_4MenuEPNS_8SelectorE+0xa6>
  [[nodiscard]] std::vector<float> getCameraMemoryPos() const { return cameraPosMemory; }
 800295c:	f101 05d8 	add.w	r5, r1, #216	@ 0xd8
 8002960:	4629      	mov	r1, r5
 8002962:	a801      	add	r0, sp, #4
 8002964:	f7ff fe98 	bl	8002698 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
    go(0 - _menu->getCameraMemoryPos()[0], 0 - _menu->getCameraMemoryPos()[1]);
 8002968:	9b01      	ldr	r3, [sp, #4]
 800296a:	2000      	movs	r0, #0
 800296c:	6819      	ldr	r1, [r3, #0]
 800296e:	f7fd ffe3 	bl	8000938 <__aeabi_fsub>
 8002972:	4629      	mov	r1, r5
 8002974:	4607      	mov	r7, r0
 8002976:	a804      	add	r0, sp, #16
 8002978:	f7ff fe8e 	bl	8002698 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 800297c:	9b04      	ldr	r3, [sp, #16]
 800297e:	2000      	movs	r0, #0
 8002980:	6859      	ldr	r1, [r3, #4]
 8002982:	f7fd ffd9 	bl	8000938 <__aeabi_fsub>
  this->xTrg = 0 - _x;
 8002986:	4639      	mov	r1, r7
    go(0 - _menu->getCameraMemoryPos()[0], 0 - _menu->getCameraMemoryPos()[1]);
 8002988:	4605      	mov	r5, r0
  this->xTrg = 0 - _x;
 800298a:	2000      	movs	r0, #0
 800298c:	f7fd ffd4 	bl	8000938 <__aeabi_fsub>
  this->yTrg = 0 - _y;
 8002990:	4629      	mov	r1, r5
  this->xTrg = 0 - _x;
 8002992:	f8c6 00e4 	str.w	r0, [r6, #228]	@ 0xe4
  this->yTrg = 0 - _y;
 8002996:	2000      	movs	r0, #0
 8002998:	f7fd ffce 	bl	8000938 <__aeabi_fsub>
 800299c:	f8c6 00e8 	str.w	r0, [r6, #232]	@ 0xe8
 80029a0:	a804      	add	r0, sp, #16
 80029a2:	f7ff f984 	bl	8001cae <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 80029a6:	a801      	add	r0, sp, #4
 80029a8:	f7ff f981 	bl	8001cae <_ZNSt12_Vector_baseIfSaIfEED1Ev>
    _menu->cameraPosMemoryFlag = false;
 80029ac:	2300      	movs	r3, #0
 80029ae:	f884 30e4 	strb.w	r3, [r4, #228]	@ 0xe4
  void resetCameraMemoryPos() { cameraPosMemory = {0, 0}; }
 80029b2:	2300      	movs	r3, #0
			 - this->_M_impl._M_start); }
 80029b4:	f8d4 20d8 	ldr.w	r2, [r4, #216]	@ 0xd8
 80029b8:	9304      	str	r3, [sp, #16]
 80029ba:	9305      	str	r3, [sp, #20]
 80029bc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80029c0:	1a9b      	subs	r3, r3, r2
	if (__len > capacity())
 80029c2:	2b07      	cmp	r3, #7
 80029c4:	d833      	bhi.n	8002a2e <_ZN5astra6Camera6updateEPNS_4MenuEPNS_8SelectorE+0xe2>
	  pointer __result = this->_M_allocate(__n);
 80029c6:	2002      	movs	r0, #2
 80029c8:	f7ff fd16 	bl	80023f8 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
 80029cc:	a906      	add	r1, sp, #24
 80029ce:	4602      	mov	r2, r0
 80029d0:	4605      	mov	r5, r0
 80029d2:	a804      	add	r0, sp, #16
 80029d4:	f7ff fe52 	bl	800267c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80029d8:	f8d4 00d8 	ldr.w	r0, [r4, #216]	@ 0xd8
	if (__p)
 80029dc:	b120      	cbz	r0, 80029e8 <_ZN5astra6Camera6updateEPNS_4MenuEPNS_8SelectorE+0x9c>
			  - this->_M_impl._M_start);
 80029de:	f8d4 10e0 	ldr.w	r1, [r4, #224]	@ 0xe0
 80029e2:	1a09      	subs	r1, r1, r0
 80029e4:	f006 f9d8 	bl	8008d98 <_ZdlPvj>
	    this->_M_impl._M_start = __tmp;
 80029e8:	f8c4 50d8 	str.w	r5, [r4, #216]	@ 0xd8
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
 80029ec:	3508      	adds	r5, #8
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
 80029ee:	e9c4 5537 	strd	r5, r5, [r4, #220]	@ 0xdc
    _menu->resetCameraMemoryPos();
  }
    //if (this->isReached(_menu->getCameraMemoryPos())) _menu->cameraPosMemoryFlag = false;
  if (_menu->getType() == "List") goToListItemRolling(dynamic_cast<List*>(_menu));
 80029f2:	6823      	ldr	r3, [r4, #0]
 80029f4:	4621      	mov	r1, r4
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	a804      	add	r0, sp, #16
 80029fa:	4798      	blx	r3
 80029fc:	4925      	ldr	r1, [pc, #148]	@ (8002a94 <_ZN5astra6Camera6updateEPNS_4MenuEPNS_8SelectorE+0x148>)
 80029fe:	a804      	add	r0, sp, #16
 8002a00:	f006 feca 	bl	8009798 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 8002a04:	4605      	mov	r5, r0
      { _M_dispose(); }
 8002a06:	a804      	add	r0, sp, #16
 8002a08:	f006 fd40 	bl	800948c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8002a0c:	bb65      	cbnz	r5, 8002a68 <_ZN5astra6Camera6updateEPNS_4MenuEPNS_8SelectorE+0x11c>
 8002a0e:	4922      	ldr	r1, [pc, #136]	@ (8002a98 <_ZN5astra6Camera6updateEPNS_4MenuEPNS_8SelectorE+0x14c>)
 8002a10:	462b      	mov	r3, r5
 8002a12:	4620      	mov	r0, r4
 8002a14:	4a21      	ldr	r2, [pc, #132]	@ (8002a9c <_ZN5astra6Camera6updateEPNS_4MenuEPNS_8SelectorE+0x150>)
 8002a16:	f006 f9c1 	bl	8008d9c <__dynamic_cast>
 8002a1a:	4601      	mov	r1, r0
 8002a1c:	4630      	mov	r0, r6
 8002a1e:	f7ff ff0b 	bl	8002838 <_ZN5astra6Camera19goToListItemRollingEPNS_4ListE>
  else if (_menu->getType() == "Tile") goToTileItem(_menu->selectIndex);

  this->render();
 8002a22:	4630      	mov	r0, r6
}
 8002a24:	b00b      	add	sp, #44	@ 0x2c
 8002a26:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  this->render();
 8002a2a:	f7ff be16 	b.w	800265a <_ZN5astra6Camera6renderEv>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002a2e:	f8d4 50dc 	ldr.w	r5, [r4, #220]	@ 0xdc
 8002a32:	1aad      	subs	r5, r5, r2
	else if (size() >= __len)
 8002a34:	2d07      	cmp	r5, #7
 8002a36:	d90a      	bls.n	8002a4e <_ZN5astra6Camera6updateEPNS_4MenuEPNS_8SelectorE+0x102>
 8002a38:	a906      	add	r1, sp, #24
 8002a3a:	a804      	add	r0, sp, #16
 8002a3c:	f7ff fe1e 	bl	800267c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8002a40:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
 8002a44:	4298      	cmp	r0, r3
 8002a46:	d0d4      	beq.n	80029f2 <_ZN5astra6Camera6updateEPNS_4MenuEPNS_8SelectorE+0xa6>
	    this->_M_impl._M_finish =
 8002a48:	f8c4 00dc 	str.w	r0, [r4, #220]	@ 0xdc
 8002a4c:	e7d1      	b.n	80029f2 <_ZN5astra6Camera6updateEPNS_4MenuEPNS_8SelectorE+0xa6>
 8002a4e:	ab04      	add	r3, sp, #16
 8002a50:	441d      	add	r5, r3
 8002a52:	4629      	mov	r1, r5
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff fe11 	bl	800267c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8002a5a:	4628      	mov	r0, r5
 8002a5c:	f8d4 20dc 	ldr.w	r2, [r4, #220]	@ 0xdc
 8002a60:	a906      	add	r1, sp, #24
 8002a62:	f7ff fe0b 	bl	800267c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8002a66:	e7ef      	b.n	8002a48 <_ZN5astra6Camera6updateEPNS_4MenuEPNS_8SelectorE+0xfc>
  else if (_menu->getType() == "Tile") goToTileItem(_menu->selectIndex);
 8002a68:	6823      	ldr	r3, [r4, #0]
 8002a6a:	4621      	mov	r1, r4
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	a804      	add	r0, sp, #16
 8002a70:	4798      	blx	r3
    { return __lhs.compare(__rhs) == 0; }
 8002a72:	490b      	ldr	r1, [pc, #44]	@ (8002aa0 <_ZN5astra6Camera6updateEPNS_4MenuEPNS_8SelectorE+0x154>)
 8002a74:	a804      	add	r0, sp, #16
 8002a76:	f006 fe8f 	bl	8009798 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 8002a7a:	4605      	mov	r5, r0
      { _M_dispose(); }
 8002a7c:	a804      	add	r0, sp, #16
 8002a7e:	f006 fd05 	bl	800948c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8002a82:	2d00      	cmp	r5, #0
 8002a84:	d1cd      	bne.n	8002a22 <_ZN5astra6Camera6updateEPNS_4MenuEPNS_8SelectorE+0xd6>
 8002a86:	4630      	mov	r0, r6
 8002a88:	f894 1144 	ldrb.w	r1, [r4, #324]	@ 0x144
 8002a8c:	f7ff fdcc 	bl	8002628 <_ZN5astra6Camera12goToTileItemEh>
 8002a90:	e7c7      	b.n	8002a22 <_ZN5astra6Camera6updateEPNS_4MenuEPNS_8SelectorE+0xd6>
 8002a92:	bf00      	nop
 8002a94:	0800b0dc 	.word	0x0800b0dc
 8002a98:	0800b10c 	.word	0x0800b10c
 8002a9c:	0800b150 	.word	0x0800b150
 8002aa0:	0800b0e1 	.word	0x0800b0e1

08002aa4 <_ZN5astra4Menu12childPosInitERKSt6vectorIfSaIfEE>:
  virtual void childPosInit(const std::vector<float> &_camera) {}
 8002aa4:	4770      	bx	lr

08002aa6 <_ZN5astra4Menu11forePosInitEv>:
  virtual void forePosInit() {}
 8002aa6:	4770      	bx	lr

08002aa8 <_ZN5astra4Menu6renderERKSt6vectorIfSaIfEE>:
  virtual void render(const std::vector<float> &_camera) {}  //render all child item.
 8002aa8:	4770      	bx	lr

08002aaa <_ZN5astra4List12childPosInitERKSt6vectorIfSaIfEE>:
    _anyWidget->init();
    return true;
  } else return false;
}

void List::childPosInit(const std::vector<float> &_camera) {
 8002aaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002aae:	e9d0 694b 	ldrd	r6, r9, [r0, #300]	@ 0x12c
 8002ab2:	4604      	mov	r4, r0
 8002ab4:	460f      	mov	r7, r1
  unsigned char _index = 0;

  for (auto _iter : childMenu) {
 8002ab6:	f04f 0a00 	mov.w	sl, #0
 8002aba:	454e      	cmp	r6, r9
 8002abc:	d101      	bne.n	8002ac2 <_ZN5astra4List12childPosInitERKSt6vectorIfSaIfEE+0x18>
    //根页面有开场动画 所以不需要从头展开
    if (_iter->parent->parent == nullptr) { _iter->position.y = _iter->position.yTrg; continue; }
    if (astraConfig.listUnfold) { _iter->position.y = _camera[1] - astraConfig.listLineHeight;
      continue; } //text unfold from top.
  }
}
 8002abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    _iter->position.x = astraConfig.listTextMargin;
 8002ac2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  for (auto _iter : childMenu) {
 8002ac4:	6835      	ldr	r5, [r6, #0]
    _iter->position.yTrg = _index * astraConfig.listLineHeight;
 8002ac6:	f8d4 804c 	ldr.w	r8, [r4, #76]	@ 0x4c
    _iter->position.x = astraConfig.listTextMargin;
 8002aca:	f8c5 30e8 	str.w	r3, [r5, #232]	@ 0xe8
    _iter->position.xTrg = astraConfig.listTextMargin;
 8002ace:	f8c5 30ec 	str.w	r3, [r5, #236]	@ 0xec
    _iter->position.yTrg = _index * astraConfig.listLineHeight;
 8002ad2:	fa5f f08a 	uxtb.w	r0, sl
 8002ad6:	f7fd ffe5 	bl	8000aa4 <__aeabi_i2f>
 8002ada:	4641      	mov	r1, r8
 8002adc:	f7fe f836 	bl	8000b4c <__aeabi_fmul>
    if (_iter->parent->parent == nullptr) { _iter->position.y = _iter->position.yTrg; continue; }
 8002ae0:	f8d5 3128 	ldr.w	r3, [r5, #296]	@ 0x128
    _iter->position.yTrg = _index * astraConfig.listLineHeight;
 8002ae4:	f8c5 00f4 	str.w	r0, [r5, #244]	@ 0xf4
    if (_iter->parent->parent == nullptr) { _iter->position.y = _iter->position.yTrg; continue; }
 8002ae8:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8002aec:	b92b      	cbnz	r3, 8002afa <_ZN5astra4List12childPosInitERKSt6vectorIfSaIfEE+0x50>
    if (astraConfig.listUnfold) { _iter->position.y = _camera[1] - astraConfig.listLineHeight;
 8002aee:	f8c5 00f0 	str.w	r0, [r5, #240]	@ 0xf0
      operator++() _GLIBCXX_NOEXCEPT
 8002af2:	f10a 0a01 	add.w	sl, sl, #1
 8002af6:	3604      	adds	r6, #4
	return *this;
 8002af8:	e7df      	b.n	8002aba <_ZN5astra4List12childPosInitERKSt6vectorIfSaIfEE+0x10>
 8002afa:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0f7      	beq.n	8002af2 <_ZN5astra4List12childPosInitERKSt6vectorIfSaIfEE+0x48>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	4641      	mov	r1, r8
 8002b06:	6858      	ldr	r0, [r3, #4]
 8002b08:	f7fd ff16 	bl	8000938 <__aeabi_fsub>
 8002b0c:	e7ef      	b.n	8002aee <_ZN5astra4List12childPosInitERKSt6vectorIfSaIfEE+0x44>

08002b0e <_ZN5astra4List11forePosInitEv>:

void List::forePosInit() {
 8002b0e:	b538      	push	{r3, r4, r5, lr}
 8002b10:	4604      	mov	r4, r0
  positionForeground.xBarTrg = systemConfig.screenWeight - astraConfig.listBarWeight;
 8002b12:	7905      	ldrb	r5, [r0, #4]
 8002b14:	4628      	mov	r0, r5
 8002b16:	f7fd ffc5 	bl	8000aa4 <__aeabi_i2f>
 8002b1a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8002b1c:	f7fd ff0c 	bl	8000938 <__aeabi_fsub>

  //受展开开关影响的坐标初始化
  if (astraConfig.listUnfold) positionForeground.hBar = 0;  //bar unfold from top.
 8002b20:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
  positionForeground.xBarTrg = systemConfig.screenWeight - astraConfig.listBarWeight;
 8002b24:	f8c4 0154 	str.w	r0, [r4, #340]	@ 0x154
  if (astraConfig.listUnfold) positionForeground.hBar = 0;  //bar unfold from top.
 8002b28:	b94b      	cbnz	r3, 8002b3e <_ZN5astra4List11forePosInitEv+0x30>
  else positionForeground.hBar = positionForeground.hBarTrg;
 8002b2a:	f8d4 314c 	ldr.w	r3, [r4, #332]	@ 0x14c

  //始终执行的坐标初始化
  positionForeground.xBar = systemConfig.screenWeight;
 8002b2e:	4628      	mov	r0, r5
 8002b30:	f8c4 3148 	str.w	r3, [r4, #328]	@ 0x148
 8002b34:	f7fd ffb2 	bl	8000a9c <__aeabi_ui2f>
 8002b38:	f8c4 0150 	str.w	r0, [r4, #336]	@ 0x150
}
 8002b3c:	bd38      	pop	{r3, r4, r5, pc}
  if (astraConfig.listUnfold) positionForeground.hBar = 0;  //bar unfold from top.
 8002b3e:	2300      	movs	r3, #0
 8002b40:	e7f5      	b.n	8002b2e <_ZN5astra4List11forePosInitEv+0x20>

08002b42 <_ZN5astra4Tile12childPosInitERKSt6vectorIfSaIfEE>:

  Animation::move(&positionForeground.hBar, positionForeground.hBarTrg, astraConfig.listAnimationSpeed);
  Animation::move(&positionForeground.xBar, positionForeground.xBarTrg, astraConfig.listAnimationSpeed);
}

void Tile::childPosInit(const std::vector<float> &_camera) {
 8002b42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b46:	e9d0 a34b 	ldrd	sl, r3, [r0, #300]	@ 0x12c
 8002b4a:	4604      	mov	r4, r0
 8002b4c:	460f      	mov	r7, r1
  unsigned char _index = 0;

  for (auto _iter : childMenu) {
 8002b4e:	2600      	movs	r6, #0
    _iter->position.y = 0;
 8002b50:	f04f 0b00 	mov.w	fp, #0
 8002b54:	9300      	str	r3, [sp, #0]
  for (auto _iter : childMenu) {
 8002b56:	9b00      	ldr	r3, [sp, #0]
 8002b58:	459a      	cmp	sl, r3
 8002b5a:	d102      	bne.n	8002b62 <_ZN5astra4Tile12childPosInitERKSt6vectorIfSaIfEE+0x20>
    _index++;

    if (_iter->parent->parent == nullptr) { _iter->position.x = _iter->position.xTrg; continue; }
    if (astraConfig.tileUnfold) { _iter->position.x = _camera[0] - astraConfig.tilePicWidth; continue; } //unfold from left.
  }
}
 8002b5c:	b003      	add	sp, #12
 8002b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (auto _iter : childMenu) {
 8002b62:	f8da 5000 	ldr.w	r5, [sl]
    _iter->position.xTrg = systemConfig.screenWeight / 2 - astraConfig.tilePicWidth / 2 +
 8002b66:	f8d4 805c 	ldr.w	r8, [r4, #92]	@ 0x5c
    _iter->position.y = 0;
 8002b6a:	f8c5 b0f0 	str.w	fp, [r5, #240]	@ 0xf0
    _iter->position.xTrg = systemConfig.screenWeight / 2 - astraConfig.tilePicWidth / 2 +
 8002b6e:	7920      	ldrb	r0, [r4, #4]
 8002b70:	0840      	lsrs	r0, r0, #1
 8002b72:	f7fd ff97 	bl	8000aa4 <__aeabi_i2f>
 8002b76:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002b7a:	4681      	mov	r9, r0
 8002b7c:	4640      	mov	r0, r8
 8002b7e:	f7fd ffe5 	bl	8000b4c <__aeabi_fmul>
 8002b82:	4601      	mov	r1, r0
 8002b84:	4648      	mov	r0, r9
 8002b86:	f7fd fed7 	bl	8000938 <__aeabi_fsub>
 8002b8a:	4681      	mov	r9, r0
                           (_index) * (astraConfig.tilePicMargin + astraConfig.tilePicWidth);
 8002b8c:	b2f0      	uxtb	r0, r6
 8002b8e:	f7fd ff89 	bl	8000aa4 <__aeabi_i2f>
 8002b92:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8002b94:	9001      	str	r0, [sp, #4]
 8002b96:	4640      	mov	r0, r8
 8002b98:	f7fd fed0 	bl	800093c <__addsf3>
 8002b9c:	4601      	mov	r1, r0
 8002b9e:	9801      	ldr	r0, [sp, #4]
 8002ba0:	f7fd ffd4 	bl	8000b4c <__aeabi_fmul>
 8002ba4:	4601      	mov	r1, r0
    _iter->position.xTrg = systemConfig.screenWeight / 2 - astraConfig.tilePicWidth / 2 +
 8002ba6:	4648      	mov	r0, r9
 8002ba8:	f7fd fec8 	bl	800093c <__addsf3>
    _iter->position.yTrg = astraConfig.tilePicTopMargin;
 8002bac:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
    _iter->position.xTrg = systemConfig.screenWeight / 2 - astraConfig.tilePicWidth / 2 +
 8002bae:	f8c5 00ec 	str.w	r0, [r5, #236]	@ 0xec
    _iter->position.yTrg = astraConfig.tilePicTopMargin;
 8002bb2:	f8c5 20f4 	str.w	r2, [r5, #244]	@ 0xf4
    if (_iter->parent->parent == nullptr) { _iter->position.x = _iter->position.xTrg; continue; }
 8002bb6:	f8d5 2128 	ldr.w	r2, [r5, #296]	@ 0x128
 8002bba:	f8d2 2128 	ldr.w	r2, [r2, #296]	@ 0x128
 8002bbe:	b92a      	cbnz	r2, 8002bcc <_ZN5astra4Tile12childPosInitERKSt6vectorIfSaIfEE+0x8a>
    if (astraConfig.tileUnfold) { _iter->position.x = _camera[0] - astraConfig.tilePicWidth; continue; } //unfold from left.
 8002bc0:	f8c5 00e8 	str.w	r0, [r5, #232]	@ 0xe8
      operator++() _GLIBCXX_NOEXCEPT
 8002bc4:	3601      	adds	r6, #1
 8002bc6:	f10a 0a04 	add.w	sl, sl, #4
	return *this;
 8002bca:	e7c4      	b.n	8002b56 <_ZN5astra4Tile12childPosInitERKSt6vectorIfSaIfEE+0x14>
 8002bcc:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 8002bd0:	2a00      	cmp	r2, #0
 8002bd2:	d0f7      	beq.n	8002bc4 <_ZN5astra4Tile12childPosInitERKSt6vectorIfSaIfEE+0x82>
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	4641      	mov	r1, r8
 8002bd8:	6810      	ldr	r0, [r2, #0]
 8002bda:	f7fd fead 	bl	8000938 <__aeabi_fsub>
 8002bde:	e7ef      	b.n	8002bc0 <_ZN5astra4Tile12childPosInitERKSt6vectorIfSaIfEE+0x7e>

08002be0 <_ZN5astra4Tile11forePosInitEv>:

void Tile::forePosInit() {
 8002be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  positionForeground.yBarTrg = 0;
 8002be2:	2500      	movs	r5, #0
  positionForeground.yArrowTrg = systemConfig.screenHeight - astraConfig.tileArrowBottomMargin;
 8002be4:	7947      	ldrb	r7, [r0, #5]
void Tile::forePosInit() {
 8002be6:	4604      	mov	r4, r0
  positionForeground.yBarTrg = 0;
 8002be8:	f8c0 5154 	str.w	r5, [r0, #340]	@ 0x154
  positionForeground.yArrowTrg = systemConfig.screenHeight - astraConfig.tileArrowBottomMargin;
 8002bec:	4638      	mov	r0, r7
 8002bee:	f7fd ff59 	bl	8000aa4 <__aeabi_i2f>
 8002bf2:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8002bf4:	4606      	mov	r6, r0
 8002bf6:	f7fd fe9f 	bl	8000938 <__aeabi_fsub>
  positionForeground.yDottedLineTrg = systemConfig.screenHeight - astraConfig.tileDottedLineBottomMargin;
 8002bfa:	6f61      	ldr	r1, [r4, #116]	@ 0x74
  positionForeground.yArrowTrg = systemConfig.screenHeight - astraConfig.tileArrowBottomMargin;
 8002bfc:	f8c4 015c 	str.w	r0, [r4, #348]	@ 0x15c
  positionForeground.yDottedLineTrg = systemConfig.screenHeight - astraConfig.tileDottedLineBottomMargin;
 8002c00:	4630      	mov	r0, r6
 8002c02:	f7fd fe99 	bl	8000938 <__aeabi_fsub>

  if (astraConfig.tileUnfold) positionForeground.wBar = 0;  //bar unfold from left.
 8002c06:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
  positionForeground.yDottedLineTrg = systemConfig.screenHeight - astraConfig.tileDottedLineBottomMargin;
 8002c0a:	f8c4 0164 	str.w	r0, [r4, #356]	@ 0x164
  if (astraConfig.tileUnfold) positionForeground.wBar = 0;  //bar unfold from left.
 8002c0e:	b90b      	cbnz	r3, 8002c14 <_ZN5astra4Tile11forePosInitEv+0x34>
  else positionForeground.wBar = positionForeground.wBarTrg;
 8002c10:	f8d4 514c 	ldr.w	r5, [r4, #332]	@ 0x14c

  //position.y = -astraConfig.tilePicHeight * 2;

  //始终执行的坐标初始化
  //底部箭头和虚线的初始化
  positionForeground.yArrow = systemConfig.screenHeight;
 8002c14:	4638      	mov	r0, r7
 8002c16:	f8c4 5148 	str.w	r5, [r4, #328]	@ 0x148
 8002c1a:	f7fd ff3f 	bl	8000a9c <__aeabi_ui2f>
  positionForeground.yDottedLine = systemConfig.screenHeight;

  //顶部进度条的从上方滑入的初始化
  positionForeground.yBar = 0 - astraConfig.tileBarHeight; //注意这里是坐标从屏幕外滑入 而不是height从0变大
 8002c1e:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
  positionForeground.yArrow = systemConfig.screenHeight;
 8002c22:	f8c4 0158 	str.w	r0, [r4, #344]	@ 0x158
  positionForeground.yDottedLine = systemConfig.screenHeight;
 8002c26:	f8c4 0160 	str.w	r0, [r4, #352]	@ 0x160
  positionForeground.yBar = 0 - astraConfig.tileBarHeight; //注意这里是坐标从屏幕外滑入 而不是height从0变大
 8002c2a:	2000      	movs	r0, #0
 8002c2c:	f7fd fe84 	bl	8000938 <__aeabi_fsub>
 8002c30:	f8c4 0150 	str.w	r0, [r4, #336]	@ 0x150
}
 8002c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002c36 <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_.isra.0>:
    __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
 8002c36:	460b      	mov	r3, r1
 8002c38:	4611      	mov	r1, r2
      if (const size_t __len = __last - __first)
 8002c3a:	1a1a      	subs	r2, r3, r0
 8002c3c:	d001      	beq.n	8002c42 <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_.isra.0+0xc>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 8002c3e:	f007 b994 	b.w	8009f6a <memset>
    }
 8002c42:	4770      	bx	lr

08002c44 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002c44:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 8002c46:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002c48:	d006      	beq.n	8002c58 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8002c4a:	da01      	bge.n	8002c50 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 8002c4c:	f006 fbdd 	bl	800940a <_ZSt17__throw_bad_allocv>
      }
 8002c50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8002c54:	f006 b906 	b.w	8008e64 <_Znwj>
 8002c58:	bd08      	pop	{r3, pc}
	...

08002c5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>:
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 8002c5c:	f100 0308 	add.w	r3, r0, #8
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 8002c60:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002c62:	4604      	mov	r4, r0
	if (__s == 0)
 8002c64:	460d      	mov	r5, r1
	: allocator_type(__a), _M_p(__dat) { }
 8002c66:	6003      	str	r3, [r0, #0]
	if (__s == 0)
 8002c68:	b911      	cbnz	r1, 8002c70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0+0x14>
	  std::__throw_logic_error(__N("basic_string: "
 8002c6a:	480f      	ldr	r0, [pc, #60]	@ (8002ca8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0+0x4c>)
 8002c6c:	f006 fbd3 	bl	8009416 <_ZSt19__throw_logic_errorPKc>
	return __builtin_strlen(__s);
 8002c70:	4608      	mov	r0, r1
 8002c72:	f7fd fa77 	bl	8000164 <strlen>
	if (__dnew > size_type(_S_local_capacity))
 8002c76:	280f      	cmp	r0, #15
	const _CharT* __end = __s + traits_type::length(__s);
 8002c78:	eb05 0600 	add.w	r6, r5, r0
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8002c7c:	9001      	str	r0, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
 8002c7e:	d907      	bls.n	8002c90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0+0x34>
	    _M_data(_M_create(__dnew, size_type(0)));
 8002c80:	2200      	movs	r2, #0
 8002c82:	4620      	mov	r0, r4
 8002c84:	a901      	add	r1, sp, #4
 8002c86:	f006 fbdf 	bl	8009448 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
 8002c8a:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
 8002c8c:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
 8002c8e:	60a3      	str	r3, [r4, #8]
	this->_S_copy_chars(_M_data(), __beg, __end);
 8002c90:	4632      	mov	r2, r6
 8002c92:	4629      	mov	r1, r5
 8002c94:	6820      	ldr	r0, [r4, #0]
 8002c96:	f006 fc6f 	bl	8009578 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	__c1 = __c2;
 8002c9a:	2100      	movs	r1, #0
	_M_set_length(__dnew);
 8002c9c:	9b01      	ldr	r3, [sp, #4]
 8002c9e:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
 8002ca0:	6063      	str	r3, [r4, #4]
 8002ca2:	54d1      	strb	r1, [r2, r3]
      }
 8002ca4:	b002      	add	sp, #8
 8002ca6:	bd70      	pop	{r4, r5, r6, pc}
 8002ca8:	0800aea0 	.word	0x0800aea0

08002cac <_ZNK5astra4List7getTypeB5cxx11Ev>:
  [[nodiscard]] std::string getType() const override { return "List"; }
 8002cac:	b510      	push	{r4, lr}
 8002cae:	4604      	mov	r4, r0
 8002cb0:	4902      	ldr	r1, [pc, #8]	@ (8002cbc <_ZNK5astra4List7getTypeB5cxx11Ev+0x10>)
 8002cb2:	f7ff ffd3 	bl	8002c5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 8002cb6:	4620      	mov	r0, r4
 8002cb8:	bd10      	pop	{r4, pc}
 8002cba:	bf00      	nop
 8002cbc:	0800b0dc 	.word	0x0800b0dc

08002cc0 <_ZNK5astra4Tile7getTypeB5cxx11Ev>:
  void render(const std::vector<float> &_camera) override;
};

class Tile : public Menu {
public:
  [[nodiscard]] std::string getType() const override { return "Tile"; }
 8002cc0:	b510      	push	{r4, lr}
 8002cc2:	4604      	mov	r4, r0
 8002cc4:	4902      	ldr	r1, [pc, #8]	@ (8002cd0 <_ZNK5astra4Tile7getTypeB5cxx11Ev+0x10>)
 8002cc6:	f7ff ffc9 	bl	8002c5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 8002cca:	4620      	mov	r0, r4
 8002ccc:	bd10      	pop	{r4, pc}
 8002cce:	bf00      	nop
 8002cd0:	0800b0e1 	.word	0x0800b0e1

08002cd4 <_ZNK5astra4Menu7getTypeB5cxx11Ev>:
  [[nodiscard]] virtual std::string getType() const { return "Base"; }
 8002cd4:	b510      	push	{r4, lr}
 8002cd6:	4604      	mov	r4, r0
 8002cd8:	4902      	ldr	r1, [pc, #8]	@ (8002ce4 <_ZNK5astra4Menu7getTypeB5cxx11Ev+0x10>)
 8002cda:	f7ff ffbf 	bl	8002c5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 8002cde:	4620      	mov	r0, r4
 8002ce0:	bd10      	pop	{r4, pc}
 8002ce2:	bf00      	nop
 8002ce4:	0800b124 	.word	0x0800b124

08002ce8 <_ZN3HAL9drawPixelEff>:

  static void setDrawType(unsigned char _type) { get()->_setDrawType(_type); }

  virtual void _setDrawType(unsigned char _type) {}

  static void drawPixel(float _x, float _y) { get()->_drawPixel(_x, _y); }
 8002ce8:	b570      	push	{r4, r5, r6, lr}
 8002cea:	460d      	mov	r5, r1
 8002cec:	4604      	mov	r4, r0
 8002cee:	f002 f9ef 	bl	80050d0 <_ZN3HAL3getEv>
 8002cf2:	6803      	ldr	r3, [r0, #0]
 8002cf4:	462a      	mov	r2, r5
 8002cf6:	4621      	mov	r1, r4
 8002cf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cfe:	4718      	bx	r3

08002d00 <_ZN3HAL7drawBoxEffff>:
                    _bitMap);
  }

  virtual void _drawBMP(float _x, float _y, float _w, float _h, const unsigned char *_bitMap) {}

  static void drawBox(float _x, float _y, float _w, float _h) { get()->_drawBox(_x, _y, _w, _h); }
 8002d00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d02:	460d      	mov	r5, r1
 8002d04:	4616      	mov	r6, r2
 8002d06:	461f      	mov	r7, r3
 8002d08:	4604      	mov	r4, r0
 8002d0a:	f002 f9e1 	bl	80050d0 <_ZN3HAL3getEv>
 8002d0e:	6803      	ldr	r3, [r0, #0]
 8002d10:	9700      	str	r7, [sp, #0]
 8002d12:	6d5f      	ldr	r7, [r3, #84]	@ 0x54
 8002d14:	462a      	mov	r2, r5
 8002d16:	4633      	mov	r3, r6
 8002d18:	4621      	mov	r1, r4
 8002d1a:	47b8      	blx	r7
 8002d1c:	b003      	add	sp, #12
 8002d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d20 <_ZN5astra4Item12updateConfigEv>:
  inline void updateConfig() {
 8002d20:	b510      	push	{r4, lr}
 8002d22:	4604      	mov	r4, r0

  /**
   * @brief system config.
   */
public:
  static sys::config &getSystemConfig() { return get()->config; }
 8002d24:	f002 f9d4 	bl	80050d0 <_ZN3HAL3getEv>
    this->systemConfig = HAL::getSystemConfig();
 8002d28:	6881      	ldr	r1, [r0, #8]
 8002d2a:	6840      	ldr	r0, [r0, #4]
    this->astraConfig = getUIConfig();
 8002d2c:	22cc      	movs	r2, #204	@ 0xcc
    this->systemConfig = HAL::getSystemConfig();
 8002d2e:	e884 0003 	stmia.w	r4, {r0, r1}
    this->astraConfig = getUIConfig();
 8002d32:	4903      	ldr	r1, [pc, #12]	@ (8002d40 <_ZN5astra4Item12updateConfigEv+0x20>)
 8002d34:	f104 0008 	add.w	r0, r4, #8
 8002d38:	f007 f9ef 	bl	800a11a <memcpy>
  }
 8002d3c:	bd10      	pop	{r4, pc}
 8002d3e:	bf00      	nop
 8002d40:	0800b1c0 	.word	0x0800b1c0

08002d44 <_ZN5astra9Animation4exitEv>:
inline void Animation::exit() {
 8002d44:	b538      	push	{r3, r4, r5, lr}
  static unsigned char bufferLen = 8 * HAL::getBufferTileHeight() * HAL::getBufferTileWidth();
 8002d46:	4c2a      	ldr	r4, [pc, #168]	@ (8002df0 <_ZN5astra9Animation4exitEv+0xac>)
 8002d48:	6823      	ldr	r3, [r4, #0]
 8002d4a:	f3bf 8f5b 	dmb	ish
 8002d4e:	07dd      	lsls	r5, r3, #31
 8002d50:	d415      	bmi.n	8002d7e <_ZN5astra9Animation4exitEv+0x3a>
 8002d52:	4620      	mov	r0, r4
 8002d54:	f006 f877 	bl	8008e46 <__cxa_guard_acquire>
 8002d58:	b188      	cbz	r0, 8002d7e <_ZN5astra9Animation4exitEv+0x3a>
  static unsigned char getBufferTileHeight() { return get()->_getBufferTileHeight(); }
 8002d5a:	f002 f9b9 	bl	80050d0 <_ZN3HAL3getEv>
 8002d5e:	6803      	ldr	r3, [r0, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	4798      	blx	r3
 8002d64:	4605      	mov	r5, r0
  static unsigned char getBufferTileWidth() { return get()->_getBufferTileWidth(); }
 8002d66:	f002 f9b3 	bl	80050d0 <_ZN3HAL3getEv>
 8002d6a:	6803      	ldr	r3, [r0, #0]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	4798      	blx	r3
 8002d70:	4368      	muls	r0, r5
 8002d72:	4b20      	ldr	r3, [pc, #128]	@ (8002df4 <_ZN5astra9Animation4exitEv+0xb0>)
 8002d74:	00c0      	lsls	r0, r0, #3
 8002d76:	7018      	strb	r0, [r3, #0]
 8002d78:	4620      	mov	r0, r4
 8002d7a:	f006 f870 	bl	8008e5e <__cxa_guard_release>
  static void *getCanvasBuffer() { return get()->_getCanvasBuffer(); }
 8002d7e:	f002 f9a7 	bl	80050d0 <_ZN3HAL3getEv>
 8002d82:	6803      	ldr	r3, [r0, #0]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	4798      	blx	r3
 8002d88:	4604      	mov	r4, r0
  static void delay(unsigned long _mill) { get()->_delay(_mill); }
 8002d8a:	f002 f9a1 	bl	80050d0 <_ZN3HAL3getEv>
 8002d8e:	6803      	ldr	r3, [r0, #0]
 8002d90:	2164      	movs	r1, #100	@ 0x64
 8002d92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d94:	4798      	blx	r3
    switch (fadeFlag) {
 8002d96:	4a18      	ldr	r2, [pc, #96]	@ (8002df8 <_ZN5astra9Animation4exitEv+0xb4>)
 8002d98:	7813      	ldrb	r3, [r2, #0]
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	2b03      	cmp	r3, #3
 8002d9e:	d824      	bhi.n	8002dea <_ZN5astra9Animation4exitEv+0xa6>
 8002da0:	e8df f003 	tbb	[pc, r3]
 8002da4:	0d200d11 	.word	0x0d200d11
        for (uint16_t i = 0; i < bufferLen; ++i) if (i % 2 != 0) bufferPointer[i] = bufferPointer[i] | 0xAA;
 8002da8:	07c8      	lsls	r0, r1, #31
 8002daa:	bf42      	ittt	mi
 8002dac:	5ce1      	ldrbmi	r1, [r4, r3]
 8002dae:	f061 0155 	ornmi	r1, r1, #85	@ 0x55
 8002db2:	54e1      	strbmi	r1, [r4, r3]
 8002db4:	3301      	adds	r3, #1
 8002db6:	7828      	ldrb	r0, [r5, #0]
 8002db8:	b299      	uxth	r1, r3
 8002dba:	4288      	cmp	r0, r1
 8002dbc:	d8f4      	bhi.n	8002da8 <_ZN5astra9Animation4exitEv+0x64>
  fadeFlag++;
 8002dbe:	7813      	ldrb	r3, [r2, #0]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	7013      	strb	r3, [r2, #0]
}
 8002dc4:	bd38      	pop	{r3, r4, r5, pc}
    switch (fadeFlag) {
 8002dc6:	2300      	movs	r3, #0
        for (uint16_t i = 0; i < bufferLen; ++i) if (i % 2 != 0) bufferPointer[i] = bufferPointer[i] | 0xAA;
 8002dc8:	4d0a      	ldr	r5, [pc, #40]	@ (8002df4 <_ZN5astra9Animation4exitEv+0xb0>)
 8002dca:	e7f4      	b.n	8002db6 <_ZN5astra9Animation4exitEv+0x72>
        for (uint16_t i = 0; i < bufferLen; ++i) if (i % 2 == 0) bufferPointer[i] = bufferPointer[i] | 0x55;
 8002dcc:	07c9      	lsls	r1, r1, #31
 8002dce:	bf5e      	ittt	pl
 8002dd0:	5ce1      	ldrbpl	r1, [r4, r3]
 8002dd2:	f041 0155 	orrpl.w	r1, r1, #85	@ 0x55
 8002dd6:	54e1      	strbpl	r1, [r4, r3]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	7828      	ldrb	r0, [r5, #0]
 8002ddc:	b299      	uxth	r1, r3
 8002dde:	4288      	cmp	r0, r1
 8002de0:	d8f4      	bhi.n	8002dcc <_ZN5astra9Animation4exitEv+0x88>
 8002de2:	e7ec      	b.n	8002dbe <_ZN5astra9Animation4exitEv+0x7a>
    switch (fadeFlag) {
 8002de4:	2300      	movs	r3, #0
        for (uint16_t i = 0; i < bufferLen; ++i) if (i % 2 == 0) bufferPointer[i] = bufferPointer[i] | 0x55;
 8002de6:	4d03      	ldr	r5, [pc, #12]	@ (8002df4 <_ZN5astra9Animation4exitEv+0xb0>)
 8002de8:	e7f7      	b.n	8002dda <_ZN5astra9Animation4exitEv+0x96>
        fadeFlag = 0;
 8002dea:	2300      	movs	r3, #0
 8002dec:	7013      	strb	r3, [r2, #0]
        break;
 8002dee:	e7e6      	b.n	8002dbe <_ZN5astra9Animation4exitEv+0x7a>
 8002df0:	2000019c 	.word	0x2000019c
 8002df4:	200001a0 	.word	0x200001a0
 8002df8:	20000003 	.word	0x20000003

08002dfc <_ZN5astra4Tile6renderERKSt6vectorIfSaIfEE>:

  this->position = {};
  this->positionForeground = {};
}

void Tile::render(const std::vector<float> &_camera) {
 8002dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e00:	4604      	mov	r4, r0
 8002e02:	b085      	sub	sp, #20
  Item::updateConfig();
 8002e04:	3004      	adds	r0, #4
void Tile::render(const std::vector<float> &_camera) {
 8002e06:	460f      	mov	r7, r1
  Item::updateConfig();
 8002e08:	f7ff ff8a 	bl	8002d20 <_ZN5astra4Item12updateConfigEv>

  HAL::setDrawType(1);
 8002e0c:	2001      	movs	r0, #1
 8002e0e:	f7fe ff14 	bl	8001c3a <_ZN3HAL11setDrawTypeEh>
      : _M_current(__i) { }
 8002e12:	e9d4 6a4b 	ldrd	r6, sl, [r4, #300]	@ 0x12c
  //draw pic.
  for (auto _iter : childMenu) {
 8002e16:	4556      	cmp	r6, sl
 8002e18:	f040 8142 	bne.w	80030a0 <_ZN5astra4Tile6renderERKSt6vectorIfSaIfEE+0x2a4>
                    astraConfig.tileAnimationSpeed);
  }

  //draw bar.
  //在屏幕最上方 两个像素高
  positionForeground.wBarTrg = (selectIndex + 1) * ((float) systemConfig.screenWeight / getItemNum());
 8002e1c:	7920      	ldrb	r0, [r4, #4]
 8002e1e:	f7fd fe3d 	bl	8000a9c <__aeabi_ui2f>
 8002e22:	4605      	mov	r5, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002e24:	e9d4 304b 	ldrd	r3, r0, [r4, #300]	@ 0x12c
 8002e28:	1ac0      	subs	r0, r0, r3
 8002e2a:	f3c0 0087 	ubfx	r0, r0, #2, #8
 8002e2e:	f7fd fe39 	bl	8000aa4 <__aeabi_i2f>
 8002e32:	4601      	mov	r1, r0
 8002e34:	4628      	mov	r0, r5
 8002e36:	f7fd ff3d 	bl	8000cb4 <__aeabi_fdiv>
 8002e3a:	4605      	mov	r5, r0
 8002e3c:	f894 0144 	ldrb.w	r0, [r4, #324]	@ 0x144
 8002e40:	3001      	adds	r0, #1
 8002e42:	f7fd fe2f 	bl	8000aa4 <__aeabi_i2f>
 8002e46:	4601      	mov	r1, r0
 8002e48:	4628      	mov	r0, r5
 8002e4a:	f7fd fe7f 	bl	8000b4c <__aeabi_fmul>
  HAL::drawBox(0, positionForeground.yBar, positionForeground.wBar, astraConfig.tileBarHeight);
 8002e4e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8002e52:	f8d4 2148 	ldr.w	r2, [r4, #328]	@ 0x148
 8002e56:	f8d4 1150 	ldr.w	r1, [r4, #336]	@ 0x150
  positionForeground.wBarTrg = (selectIndex + 1) * ((float) systemConfig.screenWeight / getItemNum());
 8002e5a:	f8c4 014c 	str.w	r0, [r4, #332]	@ 0x14c
  HAL::drawBox(0, positionForeground.yBar, positionForeground.wBar, astraConfig.tileBarHeight);
 8002e5e:	2000      	movs	r0, #0
 8002e60:	f7ff ff4e 	bl	8002d00 <_ZN3HAL7drawBoxEffff>

  //draw left arrow.
  HAL::drawHLine(astraConfig.tileArrowMargin, positionForeground.yArrow, astraConfig.tileArrowWidth);
 8002e64:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8002e66:	f8d4 1158 	ldr.w	r1, [r4, #344]	@ 0x158
 8002e6a:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8002e6c:	f7fe ff0f 	bl	8001c8e <_ZN3HAL9drawHLineEfff>
  HAL::drawPixel(astraConfig.tileArrowMargin + 1, positionForeground.yArrow + 1);
 8002e70:	f8d4 0158 	ldr.w	r0, [r4, #344]	@ 0x158
 8002e74:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002e78:	f7fd fd60 	bl	800093c <__addsf3>
 8002e7c:	4605      	mov	r5, r0
 8002e7e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002e82:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8002e84:	f7fd fd5a 	bl	800093c <__addsf3>
 8002e88:	4629      	mov	r1, r5
 8002e8a:	f7ff ff2d 	bl	8002ce8 <_ZN3HAL9drawPixelEff>
  HAL::drawPixel(astraConfig.tileArrowMargin + 2, positionForeground.yArrow + 2);
 8002e8e:	f8d4 0158 	ldr.w	r0, [r4, #344]	@ 0x158
 8002e92:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002e96:	f7fd fd51 	bl	800093c <__addsf3>
 8002e9a:	4605      	mov	r5, r0
 8002e9c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002ea0:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8002ea2:	f7fd fd4b 	bl	800093c <__addsf3>
 8002ea6:	4629      	mov	r1, r5
 8002ea8:	f7ff ff1e 	bl	8002ce8 <_ZN3HAL9drawPixelEff>
  HAL::drawPixel(astraConfig.tileArrowMargin + 1, positionForeground.yArrow - 1);
 8002eac:	f8d4 0158 	ldr.w	r0, [r4, #344]	@ 0x158
 8002eb0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002eb4:	f7fd fd40 	bl	8000938 <__aeabi_fsub>
 8002eb8:	4605      	mov	r5, r0
 8002eba:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002ebe:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8002ec0:	f7fd fd3c 	bl	800093c <__addsf3>
 8002ec4:	4629      	mov	r1, r5
 8002ec6:	f7ff ff0f 	bl	8002ce8 <_ZN3HAL9drawPixelEff>
  HAL::drawPixel(astraConfig.tileArrowMargin + 2, positionForeground.yArrow - 2);
 8002eca:	f8d4 0158 	ldr.w	r0, [r4, #344]	@ 0x158
 8002ece:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002ed2:	f7fd fd31 	bl	8000938 <__aeabi_fsub>
 8002ed6:	4605      	mov	r5, r0
 8002ed8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002edc:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8002ede:	f7fd fd2d 	bl	800093c <__addsf3>
 8002ee2:	4629      	mov	r1, r5
 8002ee4:	f7ff ff00 	bl	8002ce8 <_ZN3HAL9drawPixelEff>

  //draw right arrow.
  HAL::drawHLine(systemConfig.screenWeight - astraConfig.tileArrowWidth - astraConfig.tileArrowMargin,
 8002ee8:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 8002eea:	7920      	ldrb	r0, [r4, #4]
 8002eec:	f7fd fdda 	bl	8000aa4 <__aeabi_i2f>
 8002ef0:	4629      	mov	r1, r5
 8002ef2:	f7fd fd21 	bl	8000938 <__aeabi_fsub>
 8002ef6:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8002ef8:	f7fd fd1e 	bl	8000938 <__aeabi_fsub>
 8002efc:	462a      	mov	r2, r5
 8002efe:	f8d4 1158 	ldr.w	r1, [r4, #344]	@ 0x158
 8002f02:	f7fe fec4 	bl	8001c8e <_ZN3HAL9drawHLineEfff>
                 positionForeground.yArrow,
                 astraConfig.tileArrowWidth);
  HAL::drawPixel(systemConfig.screenWeight - astraConfig.tileArrowWidth, positionForeground.yArrow + 1);
 8002f06:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002f0a:	f8d4 0158 	ldr.w	r0, [r4, #344]	@ 0x158
 8002f0e:	f7fd fd15 	bl	800093c <__addsf3>
 8002f12:	4605      	mov	r5, r0
 8002f14:	7920      	ldrb	r0, [r4, #4]
 8002f16:	f7fd fdc5 	bl	8000aa4 <__aeabi_i2f>
 8002f1a:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8002f1c:	f7fd fd0c 	bl	8000938 <__aeabi_fsub>
 8002f20:	4629      	mov	r1, r5
 8002f22:	f7ff fee1 	bl	8002ce8 <_ZN3HAL9drawPixelEff>
  HAL::drawPixel(systemConfig.screenWeight - astraConfig.tileArrowWidth - 1, positionForeground.yArrow + 2);
 8002f26:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002f2a:	f8d4 0158 	ldr.w	r0, [r4, #344]	@ 0x158
 8002f2e:	f7fd fd05 	bl	800093c <__addsf3>
 8002f32:	4605      	mov	r5, r0
 8002f34:	7920      	ldrb	r0, [r4, #4]
 8002f36:	f7fd fdb5 	bl	8000aa4 <__aeabi_i2f>
 8002f3a:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8002f3c:	f7fd fcfc 	bl	8000938 <__aeabi_fsub>
 8002f40:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002f44:	f7fd fcf8 	bl	8000938 <__aeabi_fsub>
 8002f48:	4629      	mov	r1, r5
 8002f4a:	f7ff fecd 	bl	8002ce8 <_ZN3HAL9drawPixelEff>
  HAL::drawPixel(systemConfig.screenWeight - astraConfig.tileArrowWidth, positionForeground.yArrow - 1);
 8002f4e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002f52:	f8d4 0158 	ldr.w	r0, [r4, #344]	@ 0x158
 8002f56:	f7fd fcef 	bl	8000938 <__aeabi_fsub>
 8002f5a:	4605      	mov	r5, r0
 8002f5c:	7920      	ldrb	r0, [r4, #4]
 8002f5e:	f7fd fda1 	bl	8000aa4 <__aeabi_i2f>
 8002f62:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8002f64:	f7fd fce8 	bl	8000938 <__aeabi_fsub>
 8002f68:	4629      	mov	r1, r5
 8002f6a:	f7ff febd 	bl	8002ce8 <_ZN3HAL9drawPixelEff>
  HAL::drawPixel(systemConfig.screenWeight - astraConfig.tileArrowWidth - 1, positionForeground.yArrow - 2);
 8002f6e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002f72:	f8d4 0158 	ldr.w	r0, [r4, #344]	@ 0x158
 8002f76:	f7fd fcdf 	bl	8000938 <__aeabi_fsub>
 8002f7a:	4605      	mov	r5, r0
 8002f7c:	7920      	ldrb	r0, [r4, #4]
 8002f7e:	f7fd fd91 	bl	8000aa4 <__aeabi_i2f>
 8002f82:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8002f84:	f7fd fcd8 	bl	8000938 <__aeabi_fsub>
 8002f88:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002f8c:	f7fd fcd4 	bl	8000938 <__aeabi_fsub>
 8002f90:	4629      	mov	r1, r5
 8002f92:	f7ff fea9 	bl	8002ce8 <_ZN3HAL9drawPixelEff>

  //draw left button.
  HAL::drawHLine(astraConfig.tileBtnMargin, positionForeground.yArrow + 2, 9);
 8002f96:	f8d4 0158 	ldr.w	r0, [r4, #344]	@ 0x158
 8002f9a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002f9e:	f7fd fccd 	bl	800093c <__addsf3>
 8002fa2:	4a56      	ldr	r2, [pc, #344]	@ (80030fc <_ZN5astra4Tile6renderERKSt6vectorIfSaIfEE+0x300>)
 8002fa4:	4601      	mov	r1, r0
 8002fa6:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 8002faa:	f7fe fe70 	bl	8001c8e <_ZN3HAL9drawHLineEfff>
  HAL::drawBox(astraConfig.tileBtnMargin + 2, positionForeground.yArrow + 2 - 4, 5, 4);
 8002fae:	f8d4 0158 	ldr.w	r0, [r4, #344]	@ 0x158
 8002fb2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002fb6:	f7fd fcc1 	bl	800093c <__addsf3>
 8002fba:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8002fbe:	f7fd fcbb 	bl	8000938 <__aeabi_fsub>
 8002fc2:	4605      	mov	r5, r0
 8002fc4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002fc8:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 8002fcc:	f7fd fcb6 	bl	800093c <__addsf3>
 8002fd0:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8002fd4:	4a4a      	ldr	r2, [pc, #296]	@ (8003100 <_ZN5astra4Tile6renderERKSt6vectorIfSaIfEE+0x304>)
 8002fd6:	4629      	mov	r1, r5
 8002fd8:	f7ff fe92 	bl	8002d00 <_ZN3HAL7drawBoxEffff>

  //draw the right button.
  HAL::drawHLine(systemConfig.screenWeight - astraConfig.tileBtnMargin - 9, positionForeground.yArrow + 2, 9);
 8002fdc:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002fe0:	f8d4 0158 	ldr.w	r0, [r4, #344]	@ 0x158
 8002fe4:	f7fd fcaa 	bl	800093c <__addsf3>
 8002fe8:	4605      	mov	r5, r0
 8002fea:	7920      	ldrb	r0, [r4, #4]
 8002fec:	f7fd fd5a 	bl	8000aa4 <__aeabi_i2f>
 8002ff0:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 8002ff4:	f7fd fca0 	bl	8000938 <__aeabi_fsub>
 8002ff8:	4940      	ldr	r1, [pc, #256]	@ (80030fc <_ZN5astra4Tile6renderERKSt6vectorIfSaIfEE+0x300>)
 8002ffa:	f7fd fc9d 	bl	8000938 <__aeabi_fsub>
 8002ffe:	4a3f      	ldr	r2, [pc, #252]	@ (80030fc <_ZN5astra4Tile6renderERKSt6vectorIfSaIfEE+0x300>)
 8003000:	4629      	mov	r1, r5
 8003002:	f7fe fe44 	bl	8001c8e <_ZN3HAL9drawHLineEfff>
  HAL::drawBox(systemConfig.screenWeight - astraConfig.tileBtnMargin - 9 + 2,
               positionForeground.yArrow + 2 - 4,
 8003006:	f8d4 0158 	ldr.w	r0, [r4, #344]	@ 0x158
 800300a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800300e:	f7fd fc95 	bl	800093c <__addsf3>
  HAL::drawBox(systemConfig.screenWeight - astraConfig.tileBtnMargin - 9 + 2,
 8003012:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8003016:	f7fd fc8f 	bl	8000938 <__aeabi_fsub>
 800301a:	4605      	mov	r5, r0
 800301c:	7920      	ldrb	r0, [r4, #4]
 800301e:	f7fd fd41 	bl	8000aa4 <__aeabi_i2f>
 8003022:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 8003026:	f7fd fc87 	bl	8000938 <__aeabi_fsub>
 800302a:	4934      	ldr	r1, [pc, #208]	@ (80030fc <_ZN5astra4Tile6renderERKSt6vectorIfSaIfEE+0x300>)
 800302c:	f7fd fc84 	bl	8000938 <__aeabi_fsub>
 8003030:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003034:	f7fd fc82 	bl	800093c <__addsf3>
 8003038:	4629      	mov	r1, r5
 800303a:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 800303e:	4a30      	ldr	r2, [pc, #192]	@ (8003100 <_ZN5astra4Tile6renderERKSt6vectorIfSaIfEE+0x304>)
 8003040:	f7ff fe5e 	bl	8002d00 <_ZN3HAL7drawBoxEffff>
               5,
               4);

  //draw dotted line.
  HAL::drawHDottedLine(0, positionForeground.yDottedLine, systemConfig.screenWeight);
 8003044:	7920      	ldrb	r0, [r4, #4]
 8003046:	f7fd fd29 	bl	8000a9c <__aeabi_ui2f>
 800304a:	f8d4 7160 	ldr.w	r7, [r4, #352]	@ 0x160
 800304e:	4605      	mov	r5, r0
  static void drawHDottedLine(float _x, float _y, float _l) { get()->_drawHDottedLine(_x, _y, _l); }
 8003050:	f002 f83e 	bl	80050d0 <_ZN3HAL3getEv>
 8003054:	6803      	ldr	r3, [r0, #0]
 8003056:	463a      	mov	r2, r7
 8003058:	6c5e      	ldr	r6, [r3, #68]	@ 0x44
 800305a:	2100      	movs	r1, #0
 800305c:	462b      	mov	r3, r5
 800305e:	47b0      	blx	r6

  Animation::move(&positionForeground.yDottedLine, positionForeground.yDottedLineTrg, astraConfig.tileAnimationSpeed);
 8003060:	68e5      	ldr	r5, [r4, #12]
 8003062:	f8d4 1164 	ldr.w	r1, [r4, #356]	@ 0x164
 8003066:	462a      	mov	r2, r5
 8003068:	f504 70b0 	add.w	r0, r4, #352	@ 0x160
 800306c:	f7ff fa66 	bl	800253c <_ZN5astra9Animation4moveEPfff>
  Animation::move(&positionForeground.yArrow, positionForeground.yArrowTrg, astraConfig.tileAnimationSpeed);
 8003070:	462a      	mov	r2, r5
 8003072:	f8d4 115c 	ldr.w	r1, [r4, #348]	@ 0x15c
 8003076:	f504 70ac 	add.w	r0, r4, #344	@ 0x158
 800307a:	f7ff fa5f 	bl	800253c <_ZN5astra9Animation4moveEPfff>
  Animation::move(&positionForeground.wBar, positionForeground.wBarTrg, astraConfig.tileAnimationSpeed);
 800307e:	462a      	mov	r2, r5
 8003080:	f8d4 114c 	ldr.w	r1, [r4, #332]	@ 0x14c
 8003084:	f504 70a4 	add.w	r0, r4, #328	@ 0x148
 8003088:	f7ff fa58 	bl	800253c <_ZN5astra9Animation4moveEPfff>
  Animation::move(&positionForeground.yBar, positionForeground.yBarTrg, astraConfig.tileAnimationSpeed);
 800308c:	462a      	mov	r2, r5
 800308e:	f8d4 1154 	ldr.w	r1, [r4, #340]	@ 0x154
 8003092:	f504 70a8 	add.w	r0, r4, #336	@ 0x150
 8003096:	f7ff fa51 	bl	800253c <_ZN5astra9Animation4moveEPfff>
}
 800309a:	b005      	add	sp, #20
 800309c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (auto _iter : childMenu) {
 80030a0:	f856 5b04 	ldr.w	r5, [r6], #4
	return *(this->_M_impl._M_start + __n);
 80030a4:	f8d7 9000 	ldr.w	r9, [r7]
    HAL::drawBMP(_iter->position.x + _camera[0],
 80030a8:	f8d5 00e8 	ldr.w	r0, [r5, #232]	@ 0xe8
 80030ac:	f8d9 1000 	ldr.w	r1, [r9]
 80030b0:	f7fd fc44 	bl	800093c <__addsf3>
 80030b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80030b8:	4680      	mov	r8, r0
 80030ba:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 80030bc:	f7fd fc3e 	bl	800093c <__addsf3>
 80030c0:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
      { return _M_data_ptr(this->_M_impl._M_start); }
 80030c2:	f8d5 1110 	ldr.w	r1, [r5, #272]	@ 0x110
 80030c6:	f8d4 b060 	ldr.w	fp, [r4, #96]	@ 0x60
 80030ca:	4681      	mov	r9, r0
 80030cc:	9303      	str	r3, [sp, #12]
 80030ce:	9102      	str	r1, [sp, #8]
    get()->_drawBMP(_x,
 80030d0:	f001 fffe 	bl	80050d0 <_ZN3HAL3getEv>
 80030d4:	9902      	ldr	r1, [sp, #8]
 80030d6:	6802      	ldr	r2, [r0, #0]
 80030d8:	9101      	str	r1, [sp, #4]
 80030da:	f8cd b000 	str.w	fp, [sp]
 80030de:	4641      	mov	r1, r8
 80030e0:	f8d2 b050 	ldr.w	fp, [r2, #80]	@ 0x50
 80030e4:	9b03      	ldr	r3, [sp, #12]
 80030e6:	464a      	mov	r2, r9
 80030e8:	47d8      	blx	fp
    Animation::move(&_iter->position.x,
 80030ea:	68e2      	ldr	r2, [r4, #12]
 80030ec:	f8d5 10ec 	ldr.w	r1, [r5, #236]	@ 0xec
 80030f0:	f105 00e8 	add.w	r0, r5, #232	@ 0xe8
 80030f4:	f7ff fa22 	bl	800253c <_ZN5astra9Animation4moveEPfff>
	return *this;
 80030f8:	e68d      	b.n	8002e16 <_ZN5astra4Tile6renderERKSt6vectorIfSaIfEE+0x1a>
 80030fa:	bf00      	nop
 80030fc:	41100000 	.word	0x41100000
 8003100:	40a00000 	.word	0x40a00000

08003104 <_ZN5astra4List6renderERKSt6vectorIfSaIfEE>:
void List::render(const std::vector<float> &_camera) {
 8003104:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003108:	4604      	mov	r4, r0
  Item::updateConfig();
 800310a:	3004      	adds	r0, #4
void List::render(const std::vector<float> &_camera) {
 800310c:	460e      	mov	r6, r1
  Item::updateConfig();
 800310e:	f7ff fe07 	bl	8002d20 <_ZN5astra4Item12updateConfigEv>
  HAL::setDrawType(1);
 8003112:	2001      	movs	r0, #1
 8003114:	f7fe fd91 	bl	8001c3a <_ZN3HAL11setDrawTypeEh>
      : _M_current(__i) { }
 8003118:	f8d4 3130 	ldr.w	r3, [r4, #304]	@ 0x130
 800311c:	f8d4 812c 	ldr.w	r8, [r4, #300]	@ 0x12c
 8003120:	9300      	str	r3, [sp, #0]
  for (auto _iter : childMenu) {
 8003122:	9b00      	ldr	r3, [sp, #0]
 8003124:	4543      	cmp	r3, r8
 8003126:	f040 8087 	bne.w	8003238 <_ZN5astra4List6renderERKSt6vectorIfSaIfEE+0x134>
  positionForeground.hBarTrg = (selectIndex + 1) * ((float) systemConfig.screenHeight / getItemNum());
 800312a:	7960      	ldrb	r0, [r4, #5]
 800312c:	f7fd fcb6 	bl	8000a9c <__aeabi_ui2f>
 8003130:	4605      	mov	r5, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8003132:	e9d4 304b 	ldrd	r3, r0, [r4, #300]	@ 0x12c
 8003136:	1ac0      	subs	r0, r0, r3
 8003138:	f3c0 0087 	ubfx	r0, r0, #2, #8
 800313c:	f7fd fcb2 	bl	8000aa4 <__aeabi_i2f>
 8003140:	4601      	mov	r1, r0
 8003142:	4628      	mov	r0, r5
 8003144:	f7fd fdb6 	bl	8000cb4 <__aeabi_fdiv>
 8003148:	4605      	mov	r5, r0
 800314a:	f894 0144 	ldrb.w	r0, [r4, #324]	@ 0x144
 800314e:	3001      	adds	r0, #1
 8003150:	f7fd fca8 	bl	8000aa4 <__aeabi_i2f>
 8003154:	4601      	mov	r1, r0
 8003156:	4628      	mov	r0, r5
 8003158:	f7fd fcf8 	bl	8000b4c <__aeabi_fmul>
  HAL::drawHLine(systemConfig.screenWeight - astraConfig.listBarWeight, 0, astraConfig.listBarWeight);
 800315c:	6c25      	ldr	r5, [r4, #64]	@ 0x40
  positionForeground.hBarTrg = (selectIndex + 1) * ((float) systemConfig.screenHeight / getItemNum());
 800315e:	f8c4 014c 	str.w	r0, [r4, #332]	@ 0x14c
  HAL::drawHLine(systemConfig.screenWeight - astraConfig.listBarWeight, 0, astraConfig.listBarWeight);
 8003162:	7920      	ldrb	r0, [r4, #4]
 8003164:	f7fd fc9e 	bl	8000aa4 <__aeabi_i2f>
 8003168:	4629      	mov	r1, r5
 800316a:	f7fd fbe5 	bl	8000938 <__aeabi_fsub>
 800316e:	462a      	mov	r2, r5
 8003170:	2100      	movs	r1, #0
 8003172:	f7fe fd8c 	bl	8001c8e <_ZN3HAL9drawHLineEfff>
                 systemConfig.screenHeight - 1,
 8003176:	7960      	ldrb	r0, [r4, #5]
  HAL::drawHLine(systemConfig.screenWeight - astraConfig.listBarWeight,
 8003178:	6c26      	ldr	r6, [r4, #64]	@ 0x40
 800317a:	3801      	subs	r0, #1
 800317c:	f7fd fc92 	bl	8000aa4 <__aeabi_i2f>
 8003180:	4605      	mov	r5, r0
 8003182:	7920      	ldrb	r0, [r4, #4]
 8003184:	f7fd fc8e 	bl	8000aa4 <__aeabi_i2f>
 8003188:	4631      	mov	r1, r6
 800318a:	f7fd fbd5 	bl	8000938 <__aeabi_fsub>
 800318e:	4632      	mov	r2, r6
 8003190:	4629      	mov	r1, r5
 8003192:	f7fe fd7c 	bl	8001c8e <_ZN3HAL9drawHLineEfff>
  HAL::drawVLine(systemConfig.screenWeight - ceil((float) astraConfig.listBarWeight / 2.0f),
 8003196:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800319a:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800319c:	f7fd fcd6 	bl	8000b4c <__aeabi_fmul>
 80031a0:	f7fd fa76 	bl	8000690 <__aeabi_f2d>
 80031a4:	f006 fb18 	bl	80097d8 <ceil>
 80031a8:	4606      	mov	r6, r0
 80031aa:	460f      	mov	r7, r1
 80031ac:	7920      	ldrb	r0, [r4, #4]
 80031ae:	f7fd fa5d 	bl	800066c <__aeabi_i2d>
 80031b2:	4632      	mov	r2, r6
 80031b4:	463b      	mov	r3, r7
 80031b6:	f7fd f90b 	bl	80003d0 <__aeabi_dsub>
 80031ba:	f7fd fb69 	bl	8000890 <__aeabi_d2f>
 80031be:	4605      	mov	r5, r0
 80031c0:	7960      	ldrb	r0, [r4, #5]
 80031c2:	f7fd fc6b 	bl	8000a9c <__aeabi_ui2f>
 80031c6:	4606      	mov	r6, r0
  static void drawVLine(float _x, float _y, float _h) { get()->_drawVLine(_x, _y, _h); }
 80031c8:	f001 ff82 	bl	80050d0 <_ZN3HAL3getEv>
 80031cc:	6803      	ldr	r3, [r0, #0]
 80031ce:	2200      	movs	r2, #0
 80031d0:	4629      	mov	r1, r5
 80031d2:	6c9f      	ldr	r7, [r3, #72]	@ 0x48
 80031d4:	4633      	mov	r3, r6
 80031d6:	47b8      	blx	r7
  HAL::drawBox(positionForeground.xBar, 0, astraConfig.listBarWeight, positionForeground.hBar);
 80031d8:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
 80031dc:	2100      	movs	r1, #0
 80031de:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80031e0:	f8d4 0150 	ldr.w	r0, [r4, #336]	@ 0x150
 80031e4:	f7ff fd8c 	bl	8002d00 <_ZN3HAL7drawBoxEffff>
  if (astraConfig.lightMode) {
 80031e8:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80031ec:	b193      	cbz	r3, 8003214 <_ZN5astra4List6renderERKSt6vectorIfSaIfEE+0x110>
    HAL::setDrawType(2);
 80031ee:	2002      	movs	r0, #2
 80031f0:	f7fe fd23 	bl	8001c3a <_ZN3HAL11setDrawTypeEh>
    HAL::drawBox(0, 0, systemConfig.screenWeight, systemConfig.screenHeight);
 80031f4:	7960      	ldrb	r0, [r4, #5]
 80031f6:	f7fd fc51 	bl	8000a9c <__aeabi_ui2f>
 80031fa:	4605      	mov	r5, r0
 80031fc:	7920      	ldrb	r0, [r4, #4]
 80031fe:	f7fd fc4d 	bl	8000a9c <__aeabi_ui2f>
 8003202:	2100      	movs	r1, #0
 8003204:	4602      	mov	r2, r0
 8003206:	462b      	mov	r3, r5
 8003208:	4608      	mov	r0, r1
 800320a:	f7ff fd79 	bl	8002d00 <_ZN3HAL7drawBoxEffff>
    HAL::setDrawType(1);
 800320e:	2001      	movs	r0, #1
 8003210:	f7fe fd13 	bl	8001c3a <_ZN3HAL11setDrawTypeEh>
  Animation::move(&positionForeground.hBar, positionForeground.hBarTrg, astraConfig.listAnimationSpeed);
 8003214:	6925      	ldr	r5, [r4, #16]
 8003216:	f8d4 114c 	ldr.w	r1, [r4, #332]	@ 0x14c
 800321a:	462a      	mov	r2, r5
 800321c:	f504 70a4 	add.w	r0, r4, #328	@ 0x148
 8003220:	f7ff f98c 	bl	800253c <_ZN5astra9Animation4moveEPfff>
  Animation::move(&positionForeground.xBar, positionForeground.xBarTrg, astraConfig.listAnimationSpeed);
 8003224:	462a      	mov	r2, r5
 8003226:	f8d4 1154 	ldr.w	r1, [r4, #340]	@ 0x154
 800322a:	f504 70a8 	add.w	r0, r4, #336	@ 0x150
 800322e:	f7ff f985 	bl	800253c <_ZN5astra9Animation4moveEPfff>
}
 8003232:	b003      	add	sp, #12
 8003234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (auto _iter : childMenu) {
 8003238:	f858 5b04 	ldr.w	r5, [r8], #4
 800323c:	e9d5 794e 	ldrd	r7, r9, [r5, #312]	@ 0x138
    if (!_iter->childWidget.empty()) {
 8003240:	45b9      	cmp	r9, r7
 8003242:	d142      	bne.n	80032ca <_ZN5astra4List6renderERKSt6vectorIfSaIfEE+0x1c6>
	return *(this->_M_impl._M_start + __n);
 8003244:	f8d6 9000 	ldr.w	r9, [r6]
    HAL::drawChinese(_iter->position.x + _camera[0],
 8003248:	f8d5 00e8 	ldr.w	r0, [r5, #232]	@ 0xe8
 800324c:	f8d9 1000 	ldr.w	r1, [r9]
 8003250:	f7fd fb74 	bl	800093c <__addsf3>
                     _iter->position.y + astraConfig.listTextHeight +
 8003254:	6c61      	ldr	r1, [r4, #68]	@ 0x44
    HAL::drawChinese(_iter->position.x + _camera[0],
 8003256:	4607      	mov	r7, r0
                     _iter->position.y + astraConfig.listTextHeight +
 8003258:	f8d5 00f0 	ldr.w	r0, [r5, #240]	@ 0xf0
 800325c:	f7fd fb6e 	bl	800093c <__addsf3>
 8003260:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003262:	f7fd fb6b 	bl	800093c <__addsf3>
    HAL::drawChinese(_iter->position.x + _camera[0],
 8003266:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800326a:	f7fd fb67 	bl	800093c <__addsf3>
 800326e:	4681      	mov	r9, r0
  static void drawChinese(float _x, float _y, const std::string &_text) { get()->_drawChinese(_x, _y, _text); }
 8003270:	f001 ff2e 	bl	80050d0 <_ZN3HAL3getEv>
 8003274:	6803      	ldr	r3, [r0, #0]
 8003276:	464a      	mov	r2, r9
 8003278:	4639      	mov	r1, r7
 800327a:	f8d3 a03c 	ldr.w	sl, [r3, #60]	@ 0x3c
 800327e:	f105 03f8 	add.w	r3, r5, #248	@ 0xf8
 8003282:	47d0      	blx	sl
    Animation::move(&_iter->position.y, _iter->position.yTrg, astraConfig.listAnimationSpeed);
 8003284:	6922      	ldr	r2, [r4, #16]
 8003286:	f8d5 10f4 	ldr.w	r1, [r5, #244]	@ 0xf4
 800328a:	f105 00f0 	add.w	r0, r5, #240	@ 0xf0
 800328e:	f7ff f955 	bl	800253c <_ZN5astra9Animation4moveEPfff>
	return *this;
 8003292:	e746      	b.n	8003122 <_ZN5astra4List6renderERKSt6vectorIfSaIfEE+0x1e>
        _widget->renderIndicator(
 8003294:	f8d4 10cc 	ldr.w	r1, [r4, #204]	@ 0xcc
 8003298:	f7fd fb50 	bl	800093c <__addsf3>
 800329c:	9001      	str	r0, [sp, #4]
            systemConfig.screenWeight - astraConfig.checkBoxRightMargin - astraConfig.checkBoxWidth,
 800329e:	7920      	ldrb	r0, [r4, #4]
 80032a0:	f7fd fc00 	bl	8000aa4 <__aeabi_i2f>
 80032a4:	f8d4 10d0 	ldr.w	r1, [r4, #208]	@ 0xd0
 80032a8:	f7fd fb46 	bl	8000938 <__aeabi_fsub>
        _widget->renderIndicator(
 80032ac:	f8d4 10c4 	ldr.w	r1, [r4, #196]	@ 0xc4
 80032b0:	f7fd fb42 	bl	8000938 <__aeabi_fsub>
      for (auto _widget : _iter->childWidget) {
 80032b4:	f857 ab04 	ldr.w	sl, [r7], #4
        _widget->renderIndicator(
 80032b8:	4601      	mov	r1, r0
 80032ba:	f8da 3000 	ldr.w	r3, [sl]
 80032be:	4650      	mov	r0, sl
 80032c0:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 80032c4:	9a01      	ldr	r2, [sp, #4]
 80032c6:	4633      	mov	r3, r6
 80032c8:	47d8      	blx	fp
      for (auto _widget : _iter->childWidget) {
 80032ca:	454f      	cmp	r7, r9
            _iter->position.y + astraConfig.checkBoxTopMargin,
 80032cc:	f8d5 00f0 	ldr.w	r0, [r5, #240]	@ 0xf0
      for (auto _widget : _iter->childWidget) {
 80032d0:	d1e0      	bne.n	8003294 <_ZN5astra4List6renderERKSt6vectorIfSaIfEE+0x190>
 80032d2:	e7b7      	b.n	8003244 <_ZN5astra4List6renderERKSt6vectorIfSaIfEE+0x140>

080032d4 <_ZNK5astra4Menu10getItemNumEv>:
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80032d4:	f8d0 3130 	ldr.w	r3, [r0, #304]	@ 0x130
 80032d8:	f8d0 012c 	ldr.w	r0, [r0, #300]	@ 0x12c
 80032dc:	1a18      	subs	r0, r3, r0
unsigned char Menu::getItemNum() const { return childMenu.size(); }
 80032de:	f3c0 0087 	ubfx	r0, r0, #2, #8
 80032e2:	4770      	bx	lr

080032e4 <_ZNK5astra4Menu11getNextMenuEv>:
Menu *Menu::getNextMenu() const { return childMenu[selectIndex]; }
 80032e4:	f890 2144 	ldrb.w	r2, [r0, #324]	@ 0x144
 80032e8:	f8d0 312c 	ldr.w	r3, [r0, #300]	@ 0x12c
 80032ec:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80032f0:	4770      	bx	lr

080032f2 <_ZNK5astra4Menu10getPreviewEv>:
Menu *Menu::getPreview() const { return parent; }
 80032f2:	f8d0 0128 	ldr.w	r0, [r0, #296]	@ 0x128
 80032f6:	4770      	bx	lr

080032f8 <_ZN5astra4Menu6deInitEv>:
void Menu::deInit() {
 80032f8:	b508      	push	{r3, lr}
  Animation::exit();
 80032fa:	f7ff fd23 	bl	8002d44 <_ZN5astra9Animation4exitEv>
}
 80032fe:	bd08      	pop	{r3, pc}

08003300 <_ZN5astra4MenuC1Ev>:
  Menu() = default;
 8003300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
struct config {
 8003302:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8003306:	8083      	strh	r3, [r0, #4]
 8003308:	4b49      	ldr	r3, [pc, #292]	@ (8003430 <_ZN5astra4MenuC1Ev+0x130>)
 800330a:	4a4a      	ldr	r2, [pc, #296]	@ (8003434 <_ZN5astra4MenuC1Ev+0x134>)
 800330c:	6083      	str	r3, [r0, #8]
 800330e:	4b4a      	ldr	r3, [pc, #296]	@ (8003438 <_ZN5astra4MenuC1Ev+0x138>)
 8003310:	6142      	str	r2, [r0, #20]
 8003312:	60c3      	str	r3, [r0, #12]
 8003314:	6103      	str	r3, [r0, #16]
 8003316:	6183      	str	r3, [r0, #24]
 8003318:	61c3      	str	r3, [r0, #28]
 800331a:	6343      	str	r3, [r0, #52]	@ 0x34
 800331c:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 8003320:	4a46      	ldr	r2, [pc, #280]	@ (800343c <_ZN5astra4MenuC1Ev+0x13c>)
 8003322:	4604      	mov	r4, r0
 8003324:	6202      	str	r2, [r0, #32]
 8003326:	4a46      	ldr	r2, [pc, #280]	@ (8003440 <_ZN5astra4MenuC1Ev+0x140>)
 8003328:	2500      	movs	r5, #0
 800332a:	6242      	str	r2, [r0, #36]	@ 0x24
 800332c:	4a45      	ldr	r2, [pc, #276]	@ (8003444 <_ZN5astra4MenuC1Ev+0x144>)
 800332e:	6383      	str	r3, [r0, #56]	@ 0x38
 8003330:	6282      	str	r2, [r0, #40]	@ 0x28
 8003332:	4a45      	ldr	r2, [pc, #276]	@ (8003448 <_ZN5astra4MenuC1Ev+0x148>)
 8003334:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8003338:	62c2      	str	r2, [r0, #44]	@ 0x2c
 800333a:	4a44      	ldr	r2, [pc, #272]	@ (800344c <_ZN5astra4MenuC1Ev+0x14c>)
 800333c:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8003340:	6302      	str	r2, [r0, #48]	@ 0x30
 8003342:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8003346:	4e42      	ldr	r6, [pc, #264]	@ (8003450 <_ZN5astra4MenuC1Ev+0x150>)
 8003348:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
 800334c:	6406      	str	r6, [r0, #64]	@ 0x40
 800334e:	6443      	str	r3, [r0, #68]	@ 0x44
 8003350:	6481      	str	r1, [r0, #72]	@ 0x48
 8003352:	f04f 4083 	mov.w	r0, #1098907648	@ 0x41800000
 8003356:	6522      	str	r2, [r4, #80]	@ 0x50
 8003358:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800335c:	4f3d      	ldr	r7, [pc, #244]	@ (8003454 <_ZN5astra4MenuC1Ev+0x154>)
 800335e:	64e0      	str	r0, [r4, #76]	@ 0x4c
 8003360:	65e7      	str	r7, [r4, #92]	@ 0x5c
 8003362:	6627      	str	r7, [r4, #96]	@ 0x60
 8003364:	4f3c      	ldr	r7, [pc, #240]	@ (8003458 <_ZN5astra4MenuC1Ev+0x158>)
 8003366:	6561      	str	r1, [r4, #84]	@ 0x54
 8003368:	66e7      	str	r7, [r4, #108]	@ 0x6c
 800336a:	4f3c      	ldr	r7, [pc, #240]	@ (800345c <_ZN5astra4MenuC1Ev+0x15c>)
 800336c:	65a2      	str	r2, [r4, #88]	@ 0x58
 800336e:	6767      	str	r7, [r4, #116]	@ 0x74
 8003370:	4f3b      	ldr	r7, [pc, #236]	@ (8003460 <_ZN5astra4MenuC1Ev+0x160>)
 8003372:	6663      	str	r3, [r4, #100]	@ 0x64
 8003374:	66a3      	str	r3, [r4, #104]	@ 0x68
 8003376:	6721      	str	r1, [r4, #112]	@ 0x70
 8003378:	67a3      	str	r3, [r4, #120]	@ 0x78
 800337a:	67e7      	str	r7, [r4, #124]	@ 0x7c
 800337c:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
 8003380:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 8003384:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
 8003388:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 800338c:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
 8003390:	4b34      	ldr	r3, [pc, #208]	@ (8003464 <_ZN5astra4MenuC1Ev+0x164>)
 8003392:	f8c4 20a0 	str.w	r2, [r4, #160]	@ 0xa0
 8003396:	f8c4 20a8 	str.w	r2, [r4, #168]	@ 0xa8
 800339a:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
 800339e:	4a32      	ldr	r2, [pc, #200]	@ (8003468 <_ZN5astra4MenuC1Ev+0x168>)
 80033a0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80033a4:	f8c4 20ac 	str.w	r2, [r4, #172]	@ 0xac
 80033a8:	2210      	movs	r2, #16
 80033aa:	f8c4 0098 	str.w	r0, [r4, #152]	@ 0x98
 80033ae:	482f      	ldr	r0, [pc, #188]	@ (800346c <_ZN5astra4MenuC1Ev+0x16c>)
 80033b0:	f8c4 6084 	str.w	r6, [r4, #132]	@ 0x84
 80033b4:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
 80033b8:	4e2d      	ldr	r6, [pc, #180]	@ (8003470 <_ZN5astra4MenuC1Ev+0x170>)
 80033ba:	482e      	ldr	r0, [pc, #184]	@ (8003474 <_ZN5astra4MenuC1Ev+0x174>)
 80033bc:	f8c4 6088 	str.w	r6, [r4, #136]	@ 0x88
 80033c0:	f8c4 00b8 	str.w	r0, [r4, #184]	@ 0xb8
 80033c4:	4e2c      	ldr	r6, [pc, #176]	@ (8003478 <_ZN5astra4MenuC1Ev+0x178>)
 80033c6:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
 80033ca:	482c      	ldr	r0, [pc, #176]	@ (800347c <_ZN5astra4MenuC1Ev+0x17c>)
 80033cc:	4b2c      	ldr	r3, [pc, #176]	@ (8003480 <_ZN5astra4MenuC1Ev+0x180>)
 80033ce:	e9c4 002f 	strd	r0, r0, [r4, #188]	@ 0xbc
 80033d2:	f8c4 109c 	str.w	r1, [r4, #156]	@ 0x9c
 80033d6:	f8c4 10cc 	str.w	r1, [r4, #204]	@ 0xcc
 80033da:	6023      	str	r3, [r4, #0]
 80033dc:	4629      	mov	r1, r5
	: _M_start(), _M_finish(), _M_end_of_storage()
 80033de:	e9c4 5536 	strd	r5, r5, [r4, #216]	@ 0xd8
 80033e2:	f8c4 608c 	str.w	r6, [r4, #140]	@ 0x8c
 80033e6:	f8c4 6090 	str.w	r6, [r4, #144]	@ 0x90
 80033ea:	f884 20b4 	strb.w	r2, [r4, #180]	@ 0xb4
 80033ee:	f8c4 50e0 	str.w	r5, [r4, #224]	@ 0xe0
 80033f2:	f884 50e4 	strb.w	r5, [r4, #228]	@ 0xe4
 80033f6:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 80033fa:	f006 fdb6 	bl	8009f6a <memset>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 80033fe:	f504 7380 	add.w	r3, r4, #256	@ 0x100
 8003402:	f884 5100 	strb.w	r5, [r4, #256]	@ 0x100
 8003406:	f8a4 5144 	strh.w	r5, [r4, #324]	@ 0x144
 800340a:	4620      	mov	r0, r4
      { _M_string_length = __length; }
 800340c:	e9c4 353e 	strd	r3, r5, [r4, #248]	@ 0xf8
 8003410:	e9c4 5544 	strd	r5, r5, [r4, #272]	@ 0x110
 8003414:	e9c4 5546 	strd	r5, r5, [r4, #280]	@ 0x118
 8003418:	e9c4 5548 	strd	r5, r5, [r4, #288]	@ 0x120
 800341c:	e9c4 554a 	strd	r5, r5, [r4, #296]	@ 0x128
 8003420:	e9c4 554c 	strd	r5, r5, [r4, #304]	@ 0x130
 8003424:	e9c4 554e 	strd	r5, r5, [r4, #312]	@ 0x138
 8003428:	f8c4 5140 	str.w	r5, [r4, #320]	@ 0x140
 800342c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800342e:	bf00      	nop
 8003430:	437f0000 	.word	0x437f0000
 8003434:	42700000 	.word	0x42700000
 8003438:	428c0000 	.word	0x428c0000
 800343c:	425c0000 	.word	0x425c0000
 8003440:	41c80000 	.word	0x41c80000
 8003444:	41700000 	.word	0x41700000
 8003448:	42c80000 	.word	0x42c80000
 800344c:	42a00000 	.word	0x42a00000
 8003450:	40a00000 	.word	0x40a00000
 8003454:	41f00000 	.word	0x41f00000
 8003458:	40c00000 	.word	0x40c00000
 800345c:	41900000 	.word	0x41900000
 8003460:	41400000 	.word	0x41400000
 8003464:	41200000 	.word	0x41200000
 8003468:	41600000 	.word	0x41600000
 800346c:	42b40000 	.word	0x42b40000
 8003470:	40400000 	.word	0x40400000
 8003474:	0800b484 	.word	0x0800b484
 8003478:	42100000 	.word	0x42100000
 800347c:	0800bcd7 	.word	0x0800bcd7
 8003480:	0800b180 	.word	0x0800b180

08003484 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8003484:	b530      	push	{r4, r5, lr}
	  _M_finish = __x._M_finish;
 8003486:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_end_of_storage = __x._M_end_of_storage;
 800348a:	6883      	ldr	r3, [r0, #8]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 800348c:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 800348e:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 8003490:	2300      	movs	r3, #0
 8003492:	680d      	ldr	r5, [r1, #0]
	  _M_finish = __x._M_finish;
 8003494:	e9cd 4201 	strd	r4, r2, [sp, #4]
	  _M_start = __x._M_start;
 8003498:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 800349a:	684d      	ldr	r5, [r1, #4]
 800349c:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800349e:	688d      	ldr	r5, [r1, #8]
 80034a0:	6085      	str	r5, [r0, #8]
	  _M_finish = __x._M_finish;
 80034a2:	e9c1 3300 	strd	r3, r3, [r1]
	  _M_end_of_storage = __x._M_end_of_storage;
 80034a6:	608b      	str	r3, [r1, #8]
      }
 80034a8:	a801      	add	r0, sp, #4
 80034aa:	f7fe f82d 	bl	8001508 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      }
 80034ae:	b005      	add	sp, #20
 80034b0:	bd30      	pop	{r4, r5, pc}

080034b2 <_ZNSt6vectorIPN5astra4MenuESaIS2_EE5clearEv>:
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80034b2:	e9d0 3200 	ldrd	r3, r2, [r0]
 80034b6:	4293      	cmp	r3, r2
	    this->_M_impl._M_finish = __pos;
 80034b8:	bf18      	it	ne
 80034ba:	6043      	strne	r3, [r0, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 80034bc:	4770      	bx	lr

080034be <_ZNSt6vectorIPN5astra6WidgetESaIS2_EE5clearEv>:
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80034be:	e9d0 3200 	ldrd	r3, r2, [r0]
 80034c2:	4293      	cmp	r3, r2
	    this->_M_impl._M_finish = __pos;
 80034c4:	bf18      	it	ne
 80034c6:	6043      	strne	r3, [r0, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 80034c8:	4770      	bx	lr
	...

080034cc <_ZNSt6vectorIPN5astra4MenuESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80034cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80034d0:	e9d0 8a00 	ldrd	r8, sl, [r0]
	if (max_size() - size() < __n)
 80034d4:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 80034d8:	4693      	mov	fp, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80034da:	ebaa 0208 	sub.w	r2, sl, r8
	if (max_size() - size() < __n)
 80034de:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
 80034e2:	4607      	mov	r7, r0
 80034e4:	4689      	mov	r9, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80034e6:	ea4f 04a2 	mov.w	r4, r2, asr #2
	if (max_size() - size() < __n)
 80034ea:	d102      	bne.n	80034f2 <_ZNSt6vectorIPN5astra4MenuESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 80034ec:	481e      	ldr	r0, [pc, #120]	@ (8003568 <_ZNSt6vectorIPN5astra4MenuESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x9c>)
 80034ee:	f005 ff95 	bl	800941c <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 80034f2:	45c2      	cmp	sl, r8
 80034f4:	bf14      	ite	ne
 80034f6:	4622      	movne	r2, r4
 80034f8:	2201      	moveq	r2, #1
 80034fa:	18a4      	adds	r4, r4, r2
    { return __lhs.base() - __rhs.base(); }
 80034fc:	eba1 0508 	sub.w	r5, r1, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8003500:	d22e      	bcs.n	8003560 <_ZNSt6vectorIPN5astra4MenuESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x94>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003502:	b37c      	cbz	r4, 8003564 <_ZNSt6vectorIPN5astra4MenuESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x98>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8003504:	429c      	cmp	r4, r3
 8003506:	bf28      	it	cs
 8003508:	461c      	movcs	r4, r3
 800350a:	00a0      	lsls	r0, r4, #2
 800350c:	f005 fcaa 	bl	8008e64 <_Znwj>
 8003510:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003512:	f8db 3000 	ldr.w	r3, [fp]
      if (__count > 0)
 8003516:	2d00      	cmp	r5, #0
 8003518:	5173      	str	r3, [r6, r5]
 800351a:	dd04      	ble.n	8003526 <_ZNSt6vectorIPN5astra4MenuESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x5a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800351c:	462a      	mov	r2, r5
 800351e:	4641      	mov	r1, r8
 8003520:	4630      	mov	r0, r6
 8003522:	f006 fd08 	bl	8009f36 <memmove>
      ptrdiff_t __count = __last - __first;
 8003526:	ebaa 0a09 	sub.w	sl, sl, r9
	      ++__new_finish;
 800352a:	3504      	adds	r5, #4
      if (__count > 0)
 800352c:	f1ba 0f00 	cmp.w	sl, #0
 8003530:	4435      	add	r5, r6
 8003532:	dd04      	ble.n	800353e <_ZNSt6vectorIPN5astra4MenuESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x72>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8003534:	4652      	mov	r2, sl
 8003536:	4649      	mov	r1, r9
 8003538:	4628      	mov	r0, r5
 800353a:	f006 fdee 	bl	800a11a <memcpy>
      return __result + __count;
 800353e:	4455      	add	r5, sl
	if (__p)
 8003540:	f1b8 0f00 	cmp.w	r8, #0
 8003544:	d005      	beq.n	8003552 <_ZNSt6vectorIPN5astra4MenuESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x86>
		    this->_M_impl._M_end_of_storage - __old_start);
 8003546:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8003548:	4640      	mov	r0, r8
 800354a:	eba1 0108 	sub.w	r1, r1, r8
 800354e:	f005 fc23 	bl	8008d98 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8003552:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8003556:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 800355a:	60be      	str	r6, [r7, #8]
    }
 800355c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8003560:	461c      	mov	r4, r3
 8003562:	e7d2      	b.n	800350a <_ZNSt6vectorIPN5astra4MenuESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003564:	4626      	mov	r6, r4
 8003566:	e7d4      	b.n	8003512 <_ZNSt6vectorIPN5astra4MenuESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x46>
 8003568:	0800b0ae 	.word	0x0800b0ae

0800356c <_ZN5astra4Menu7addItemEPS0_>:
bool Menu::addItem(Menu *_page) {
 800356c:	b513      	push	{r0, r1, r4, lr}
 800356e:	4604      	mov	r4, r0
 8003570:	9101      	str	r1, [sp, #4]
  if (_page == nullptr) return false;
 8003572:	4608      	mov	r0, r1
 8003574:	b191      	cbz	r1, 800359c <_ZN5astra4Menu7addItemEPS0_+0x30>
  if (!_page->childWidget.empty()) return false;
 8003576:	e9d1 234e 	ldrd	r2, r3, [r1, #312]	@ 0x138
 800357a:	429a      	cmp	r2, r3
 800357c:	d116      	bne.n	80035ac <_ZN5astra4Menu7addItemEPS0_+0x40>
    _page->parent = this;
 800357e:	f8c1 4128 	str.w	r4, [r1, #296]	@ 0x128
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8003582:	e9d4 134c 	ldrd	r1, r3, [r4, #304]	@ 0x130
 8003586:	4299      	cmp	r1, r3
 8003588:	d00a      	beq.n	80035a0 <_ZN5astra4Menu7addItemEPS0_+0x34>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800358a:	f841 0b04 	str.w	r0, [r1], #4
	    ++this->_M_impl._M_finish;
 800358e:	f8c4 1130 	str.w	r1, [r4, #304]	@ 0x130
    this->forePosInit();
 8003592:	6823      	ldr	r3, [r4, #0]
 8003594:	4620      	mov	r0, r4
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	4798      	blx	r3
    return true;
 800359a:	2001      	movs	r0, #1
}
 800359c:	b002      	add	sp, #8
 800359e:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), __x);
 80035a0:	aa01      	add	r2, sp, #4
 80035a2:	f504 7096 	add.w	r0, r4, #300	@ 0x12c
 80035a6:	f7ff ff91 	bl	80034cc <_ZNSt6vectorIPN5astra4MenuESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
 80035aa:	e7f2      	b.n	8003592 <_ZN5astra4Menu7addItemEPS0_+0x26>
  if (_page == nullptr) return false;
 80035ac:	2000      	movs	r0, #0
 80035ae:	e7f5      	b.n	800359c <_ZN5astra4Menu7addItemEPS0_+0x30>

080035b0 <_ZNSt6vectorIPN5astra6WidgetESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80035b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80035b4:	e9d0 8a00 	ldrd	r8, sl, [r0]
	if (max_size() - size() < __n)
 80035b8:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 80035bc:	4693      	mov	fp, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80035be:	ebaa 0208 	sub.w	r2, sl, r8
	if (max_size() - size() < __n)
 80035c2:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
 80035c6:	4607      	mov	r7, r0
 80035c8:	4689      	mov	r9, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80035ca:	ea4f 04a2 	mov.w	r4, r2, asr #2
	if (max_size() - size() < __n)
 80035ce:	d102      	bne.n	80035d6 <_ZNSt6vectorIPN5astra6WidgetESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 80035d0:	481e      	ldr	r0, [pc, #120]	@ (800364c <_ZNSt6vectorIPN5astra6WidgetESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x9c>)
 80035d2:	f005 ff23 	bl	800941c <_ZSt20__throw_length_errorPKc>
 80035d6:	45c2      	cmp	sl, r8
 80035d8:	bf14      	ite	ne
 80035da:	4622      	movne	r2, r4
 80035dc:	2201      	moveq	r2, #1
 80035de:	18a4      	adds	r4, r4, r2
 80035e0:	eba1 0508 	sub.w	r5, r1, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80035e4:	d22e      	bcs.n	8003644 <_ZNSt6vectorIPN5astra6WidgetESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x94>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80035e6:	b37c      	cbz	r4, 8003648 <_ZNSt6vectorIPN5astra6WidgetESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x98>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80035e8:	429c      	cmp	r4, r3
 80035ea:	bf28      	it	cs
 80035ec:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80035ee:	00a0      	lsls	r0, r4, #2
 80035f0:	f005 fc38 	bl	8008e64 <_Znwj>
 80035f4:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80035f6:	f8db 3000 	ldr.w	r3, [fp]
      if (__count > 0)
 80035fa:	2d00      	cmp	r5, #0
 80035fc:	5173      	str	r3, [r6, r5]
 80035fe:	dd04      	ble.n	800360a <_ZNSt6vectorIPN5astra6WidgetESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x5a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8003600:	462a      	mov	r2, r5
 8003602:	4641      	mov	r1, r8
 8003604:	4630      	mov	r0, r6
 8003606:	f006 fc96 	bl	8009f36 <memmove>
      ptrdiff_t __count = __last - __first;
 800360a:	ebaa 0a09 	sub.w	sl, sl, r9
	      ++__new_finish;
 800360e:	3504      	adds	r5, #4
      if (__count > 0)
 8003610:	f1ba 0f00 	cmp.w	sl, #0
 8003614:	4435      	add	r5, r6
 8003616:	dd04      	ble.n	8003622 <_ZNSt6vectorIPN5astra6WidgetESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x72>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8003618:	4652      	mov	r2, sl
 800361a:	4649      	mov	r1, r9
 800361c:	4628      	mov	r0, r5
 800361e:	f006 fd7c 	bl	800a11a <memcpy>
      return __result + __count;
 8003622:	4455      	add	r5, sl
	if (__p)
 8003624:	f1b8 0f00 	cmp.w	r8, #0
 8003628:	d005      	beq.n	8003636 <_ZNSt6vectorIPN5astra6WidgetESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x86>
		    this->_M_impl._M_end_of_storage - __old_start);
 800362a:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800362c:	4640      	mov	r0, r8
 800362e:	eba1 0108 	sub.w	r1, r1, r8
 8003632:	f005 fbb1 	bl	8008d98 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8003636:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800363a:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 800363e:	60be      	str	r6, [r7, #8]
    }
 8003640:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8003644:	461c      	mov	r4, r3
 8003646:	e7d2      	b.n	80035ee <_ZNSt6vectorIPN5astra6WidgetESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003648:	4626      	mov	r6, r4
 800364a:	e7d4      	b.n	80035f6 <_ZNSt6vectorIPN5astra6WidgetESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x46>
 800364c:	0800b0ae 	.word	0x0800b0ae

08003650 <_ZN5astra4Menu7addItemEPS0_PNS_6WidgetE>:
bool Menu::addItem(Menu *_page, Widget *_anyWidget) {
 8003650:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003652:	460d      	mov	r5, r1
  if (_anyWidget == nullptr) return false;
 8003654:	4614      	mov	r4, r2
bool Menu::addItem(Menu *_page, Widget *_anyWidget) {
 8003656:	9201      	str	r2, [sp, #4]
  if (_anyWidget == nullptr) return false;
 8003658:	b91a      	cbnz	r2, 8003662 <_ZN5astra4Menu7addItemEPS0_PNS_6WidgetE+0x12>
 800365a:	2600      	movs	r6, #0
}
 800365c:	4630      	mov	r0, r6
 800365e:	b002      	add	sp, #8
 8003660:	bd70      	pop	{r4, r5, r6, pc}
  if (this->addItem(_page)) {
 8003662:	f7ff ff83 	bl	800356c <_ZN5astra4Menu7addItemEPS0_>
 8003666:	4606      	mov	r6, r0
 8003668:	2800      	cmp	r0, #0
 800366a:	d0f6      	beq.n	800365a <_ZN5astra4Menu7addItemEPS0_PNS_6WidgetE+0xa>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800366c:	e9d5 134f 	ldrd	r1, r3, [r5, #316]	@ 0x13c
 8003670:	4299      	cmp	r1, r3
 8003672:	d00a      	beq.n	800368a <_ZN5astra4Menu7addItemEPS0_PNS_6WidgetE+0x3a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003674:	f841 4b04 	str.w	r4, [r1], #4
	    ++this->_M_impl._M_finish;
 8003678:	f8c5 113c 	str.w	r1, [r5, #316]	@ 0x13c
    _anyWidget->init();
 800367c:	6823      	ldr	r3, [r4, #0]
    _anyWidget->parent = _page;
 800367e:	f8c4 50d8 	str.w	r5, [r4, #216]	@ 0xd8
    _anyWidget->init();
 8003682:	4620      	mov	r0, r4
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	4798      	blx	r3
    return true;
 8003688:	e7e8      	b.n	800365c <_ZN5astra4Menu7addItemEPS0_PNS_6WidgetE+0xc>
	  _M_realloc_insert(end(), __x);
 800368a:	aa01      	add	r2, sp, #4
 800368c:	f505 709c 	add.w	r0, r5, #312	@ 0x138
 8003690:	f7ff ff8e 	bl	80035b0 <_ZNSt6vectorIPN5astra6WidgetESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
 8003694:	e7f2      	b.n	800367c <_ZN5astra4Menu7addItemEPS0_PNS_6WidgetE+0x2c>

08003696 <_ZNSt6vectorIhSaIhEEaSERKS1_.isra.0>:
      if (std::__addressof(__x) != this)
 8003696:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
 8003698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800369c:	4604      	mov	r4, r0
 800369e:	460d      	mov	r5, r1
      if (std::__addressof(__x) != this)
 80036a0:	d01d      	beq.n	80036de <_ZNSt6vectorIhSaIhEEaSERKS1_.isra.0+0x48>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80036a2:	e9d1 7800 	ldrd	r7, r8, [r1]
			 - this->_M_impl._M_start); }
 80036a6:	6802      	ldr	r2, [r0, #0]
 80036a8:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80036aa:	eba8 0607 	sub.w	r6, r8, r7
			 - this->_M_impl._M_start); }
 80036ae:	1a9b      	subs	r3, r3, r2
	  if (__xlen > capacity())
 80036b0:	429e      	cmp	r6, r3
 80036b2:	d916      	bls.n	80036e2 <_ZNSt6vectorIhSaIhEEaSERKS1_.isra.0+0x4c>
	  pointer __result = this->_M_allocate(__n);
 80036b4:	4630      	mov	r0, r6
 80036b6:	f7ff fac5 	bl	8002c44 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
			      _Category>::__copy_m(__first, __last, __result);
 80036ba:	4641      	mov	r1, r8
 80036bc:	4602      	mov	r2, r0
 80036be:	4605      	mov	r5, r0
 80036c0:	4638      	mov	r0, r7
 80036c2:	f7ff f847 	bl	8002754 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80036c6:	6820      	ldr	r0, [r4, #0]
	if (__p)
 80036c8:	b118      	cbz	r0, 80036d2 <_ZNSt6vectorIhSaIhEEaSERKS1_.isra.0+0x3c>
			    - this->_M_impl._M_start);
 80036ca:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80036cc:	1a09      	subs	r1, r1, r0
 80036ce:	f005 fb63 	bl	8008d98 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
 80036d2:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 80036d4:	4435      	add	r5, r6
 80036d6:	60a5      	str	r5, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 80036d8:	6823      	ldr	r3, [r4, #0]
 80036da:	4433      	add	r3, r6
 80036dc:	6063      	str	r3, [r4, #4]
    }
 80036de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80036e2:	6843      	ldr	r3, [r0, #4]
 80036e4:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
 80036e6:	429e      	cmp	r6, r3
 80036e8:	d804      	bhi.n	80036f4 <_ZNSt6vectorIhSaIhEEaSERKS1_.isra.0+0x5e>
 80036ea:	4641      	mov	r1, r8
 80036ec:	4638      	mov	r0, r7
 80036ee:	f7ff f831 	bl	8002754 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
      return std::uninitialized_copy(__first, __last, __result);
 80036f2:	e7f1      	b.n	80036d8 <_ZNSt6vectorIhSaIhEEaSERKS1_.isra.0+0x42>
 80036f4:	18f9      	adds	r1, r7, r3
 80036f6:	4638      	mov	r0, r7
 80036f8:	f7ff f82c 	bl	8002754 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80036fc:	e9d4 0200 	ldrd	r0, r2, [r4]
 8003700:	e9d5 3100 	ldrd	r3, r1, [r5]
 8003704:	1a10      	subs	r0, r2, r0
 8003706:	4418      	add	r0, r3
 8003708:	e7f1      	b.n	80036ee <_ZNSt6vectorIhSaIhEEaSERKS1_.isra.0+0x58>
	...

0800370c <_ZN5astra4ListC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIhSaIhEE>:
List::List(const std::string &_title, const std::vector<unsigned char> &_pic) {
 800370c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003710:	4604      	mov	r4, r0
 8003712:	2610      	movs	r6, #16
 8003714:	2500      	movs	r5, #0
 8003716:	b085      	sub	sp, #20
 8003718:	4688      	mov	r8, r1
 800371a:	4617      	mov	r7, r2
 800371c:	f7ff fdf0 	bl	8003300 <_ZN5astra4MenuC1Ev>
 8003720:	4b25      	ldr	r3, [pc, #148]	@ (80037b8 <_ZN5astra4ListC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIhSaIhEE+0xac>)
 8003722:	f504 79a4 	add.w	r9, r4, #328	@ 0x148
 8003726:	4632      	mov	r2, r6
 8003728:	6023      	str	r3, [r4, #0]
 800372a:	2100      	movs	r1, #0
 800372c:	4648      	mov	r0, r9
 800372e:	f006 fc1c 	bl	8009f6a <memset>
 8003732:	7960      	ldrb	r0, [r4, #5]
 8003734:	f88d 5004 	strb.w	r5, [sp, #4]
 8003738:	f7fd f9b4 	bl	8000aa4 <__aeabi_i2f>
 800373c:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800373e:	f7fd fab9 	bl	8000cb4 <__aeabi_fdiv>
 8003742:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003746:	f7fd f8f7 	bl	8000938 <__aeabi_fsub>
 800374a:	f7fd fbeb 	bl	8000f24 <__aeabi_f2uiz>
 800374e:	ab01      	add	r3, sp, #4
 8003750:	9302      	str	r3, [sp, #8]
 8003752:	2302      	movs	r3, #2
 8003754:	eb0d 0206 	add.w	r2, sp, r6
 8003758:	9303      	str	r3, [sp, #12]
 800375a:	e912 0006 	ldmdb	r2, {r1, r2}
 800375e:	466b      	mov	r3, sp
 8003760:	f88d 0005 	strb.w	r0, [sp, #5]
 8003764:	f504 70ac 	add.w	r0, r4, #344	@ 0x158
 8003768:	f7fd fed8 	bl	800151c <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
	this->_M_assign(__str);
 800376c:	4641      	mov	r1, r8
 800376e:	f104 00f8 	add.w	r0, r4, #248	@ 0xf8
 8003772:	f005 ff0f 	bl	8009594 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
  this->pic = _pic;
 8003776:	4639      	mov	r1, r7
 8003778:	f504 7088 	add.w	r0, r4, #272	@ 0x110
 800377c:	f7ff ff8b 	bl	8003696 <_ZNSt6vectorIhSaIhEEaSERKS1_.isra.0>
  this->childMenu.clear();
 8003780:	f504 7096 	add.w	r0, r4, #300	@ 0x12c
  this->selectIndex = 0;
 8003784:	f884 5144 	strb.w	r5, [r4, #324]	@ 0x144
  this->parent = nullptr;
 8003788:	f8c4 5128 	str.w	r5, [r4, #296]	@ 0x128
  this->childMenu.clear();
 800378c:	f7ff fe91 	bl	80034b2 <_ZNSt6vectorIPN5astra4MenuESaIS2_EE5clearEv>
  this->childWidget.clear();
 8003790:	f504 709c 	add.w	r0, r4, #312	@ 0x138
 8003794:	f7ff fe93 	bl	80034be <_ZNSt6vectorIPN5astra6WidgetESaIS2_EE5clearEv>
  this->position = {};
 8003798:	4632      	mov	r2, r6
 800379a:	4629      	mov	r1, r5
 800379c:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 80037a0:	f006 fbe3 	bl	8009f6a <memset>
  this->positionForeground = {};
 80037a4:	4632      	mov	r2, r6
 80037a6:	4629      	mov	r1, r5
 80037a8:	4648      	mov	r0, r9
 80037aa:	f006 fbde 	bl	8009f6a <memset>
}
 80037ae:	4620      	mov	r0, r4
 80037b0:	b005      	add	sp, #20
 80037b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80037b6:	bf00      	nop
 80037b8:	0800b198 	.word	0x0800b198

080037bc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80037bc:	b510      	push	{r4, lr}
	  if (_Num)
 80037be:	1a0c      	subs	r4, r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80037c0:	4613      	mov	r3, r2
	  if (_Num)
 80037c2:	d005      	beq.n	80037d0 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x14>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80037c4:	4601      	mov	r1, r0
 80037c6:	4622      	mov	r2, r4
 80037c8:	4618      	mov	r0, r3
 80037ca:	f006 fbb4 	bl	8009f36 <memmove>
 80037ce:	4603      	mov	r3, r0
	}
 80037d0:	1918      	adds	r0, r3, r4
 80037d2:	bd10      	pop	{r4, pc}

080037d4 <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh>:

  template<typename _Tp, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    void
    vector<_Tp, _Alloc>::
 80037d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037d8:	4605      	mov	r5, r0
 80037da:	460e      	mov	r6, r1
 80037dc:	469b      	mov	fp, r3
    _M_fill_insert(iterator __position, size_type __n, const value_type& __x)
    {
      if (__n != 0)
 80037de:	4614      	mov	r4, r2
 80037e0:	2a00      	cmp	r2, #0
 80037e2:	d074      	beq.n	80038ce <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0xfa>
	{
	  if (size_type(this->_M_impl._M_end_of_storage
			- this->_M_impl._M_finish) >= __n)
 80037e4:	e9d0 7301 	ldrd	r7, r3, [r0, #4]
 80037e8:	1bdb      	subs	r3, r3, r7
	  if (size_type(this->_M_impl._M_end_of_storage
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d334      	bcc.n	8003858 <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0x84>
 80037ee:	eba7 0801 	sub.w	r8, r7, r1
	      _Temporary_value __tmp(this, __x);
	      value_type& __x_copy = __tmp._M_val();
#endif
	      const size_type __elems_after = end() - __position;
	      pointer __old_finish(this->_M_impl._M_finish);
	      if (__elems_after > __n)
 80037f2:	4542      	cmp	r2, r8
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80037f4:	f89b 9000 	ldrb.w	r9, [fp]
 80037f8:	d217      	bcs.n	800382a <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0x56>
		{
		  _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
		  std::__uninitialized_move_a(__old_finish - __n,
 80037fa:	eba7 0802 	sub.w	r8, r7, r2
			      _Category>::__copy_m(__first, __last, __result);
 80037fe:	4639      	mov	r1, r7
 8003800:	463a      	mov	r2, r7
 8003802:	4640      	mov	r0, r8
 8003804:	f7ff ffda 	bl	80037bc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
					      __old_finish,
					      __old_finish,
					      _M_get_Tp_allocator());
		  this->_M_impl._M_finish += __n;
 8003808:	686b      	ldr	r3, [r5, #4]
	  if (_Num)
 800380a:	ebb8 0206 	subs.w	r2, r8, r6
 800380e:	4423      	add	r3, r4
 8003810:	606b      	str	r3, [r5, #4]
 8003812:	d003      	beq.n	800381c <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0x48>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8003814:	4631      	mov	r1, r6
 8003816:	1ab8      	subs	r0, r7, r2
 8003818:	f006 fb8d 	bl	8009f36 <memmove>
    { std::__fill_a1(__first, __last, __value); }
 800381c:	464a      	mov	r2, r9
 800381e:	1931      	adds	r1, r6, r4
 8003820:	4630      	mov	r0, r6
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_finish;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
 8003822:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003826:	f7ff ba06 	b.w	8002c36 <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_.isra.0>
      if (__n <= 0)
 800382a:	ebb2 0408 	subs.w	r4, r2, r8
 800382e:	d011      	beq.n	8003854 <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0x80>
      std::__fill_a(__first, __first + __n, __value);
 8003830:	443c      	add	r4, r7
    { std::__fill_a1(__first, __last, __value); }
 8003832:	464a      	mov	r2, r9
 8003834:	4621      	mov	r1, r4
 8003836:	4638      	mov	r0, r7
 8003838:	f7ff f9fd 	bl	8002c36 <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_.isra.0>
			      _Category>::__copy_m(__first, __last, __result);
 800383c:	4622      	mov	r2, r4
 800383e:	4639      	mov	r1, r7
 8003840:	4630      	mov	r0, r6
		  this->_M_impl._M_finish =
 8003842:	606c      	str	r4, [r5, #4]
 8003844:	f7ff ffba 	bl	80037bc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		  this->_M_impl._M_finish += __elems_after;
 8003848:	686b      	ldr	r3, [r5, #4]
    { std::__fill_a1(__first, __last, __value); }
 800384a:	464a      	mov	r2, r9
 800384c:	4443      	add	r3, r8
 800384e:	4639      	mov	r1, r7
 8003850:	606b      	str	r3, [r5, #4]
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 8003852:	e7e5      	b.n	8003820 <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0x4c>
	return __first;
 8003854:	463c      	mov	r4, r7
 8003856:	e7f1      	b.n	800383c <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0x68>
	if (max_size() - size() < __n)
 8003858:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
	      pointer __old_start = this->_M_impl._M_start;
 800385c:	f8d0 a000 	ldr.w	sl, [r0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8003860:	eba7 030a 	sub.w	r3, r7, sl
	if (max_size() - size() < __n)
 8003864:	eba9 0203 	sub.w	r2, r9, r3
 8003868:	4294      	cmp	r4, r2
 800386a:	d902      	bls.n	8003872 <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0x9e>
	  __throw_length_error(__N(__s));
 800386c:	4819      	ldr	r0, [pc, #100]	@ (80038d4 <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0x100>)
 800386e:	f005 fdd5 	bl	800941c <_ZSt20__throw_length_errorPKc>
 8003872:	429c      	cmp	r4, r3
 8003874:	4622      	mov	r2, r4
 8003876:	bf38      	it	cc
 8003878:	461a      	movcc	r2, r3
 800387a:	18d2      	adds	r2, r2, r3
 800387c:	d202      	bcs.n	8003884 <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0xb0>
 800387e:	4591      	cmp	r9, r2
 8003880:	bf28      	it	cs
 8003882:	4691      	movcs	r9, r2
	      pointer __new_start(this->_M_allocate(__len));
 8003884:	4648      	mov	r0, r9
 8003886:	f7ff f9dd 	bl	8002c44 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 800388a:	4680      	mov	r8, r0
	      const size_type __elems_before = __pos - __old_start;
 800388c:	eba6 000a 	sub.w	r0, r6, sl
		  std::__uninitialized_fill_n_a(__new_start + __elems_before,
 8003890:	4440      	add	r0, r8
    { std::__fill_a1(__first, __last, __value); }
 8003892:	1901      	adds	r1, r0, r4
 8003894:	f89b 2000 	ldrb.w	r2, [fp]
 8003898:	f7ff f9cd 	bl	8002c36 <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_.isra.0>
			      _Category>::__copy_m(__first, __last, __result);
 800389c:	4642      	mov	r2, r8
 800389e:	4631      	mov	r1, r6
 80038a0:	4650      	mov	r0, sl
 80038a2:	f7ff ff8b 	bl	80037bc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80038a6:	4639      	mov	r1, r7
 80038a8:	1902      	adds	r2, r0, r4
 80038aa:	4630      	mov	r0, r6
 80038ac:	f7ff ff86 	bl	80037bc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80038b0:	4604      	mov	r4, r0
	if (__p)
 80038b2:	f1ba 0f00 	cmp.w	sl, #0
 80038b6:	d005      	beq.n	80038c4 <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0xf0>
			    this->_M_impl._M_end_of_storage - __old_start);
 80038b8:	68a9      	ldr	r1, [r5, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80038ba:	4650      	mov	r0, sl
 80038bc:	eba1 010a 	sub.w	r1, r1, sl
 80038c0:	f005 fa6a 	bl	8008d98 <_ZdlPvj>
	      this->_M_impl._M_finish = __new_finish;
 80038c4:	e9c5 8400 	strd	r8, r4, [r5]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 80038c8:	eb08 0009 	add.w	r0, r8, r9
 80038cc:	60a8      	str	r0, [r5, #8]
    }
 80038ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038d2:	bf00      	nop
 80038d4:	0800b129 	.word	0x0800b129

080038d8 <_ZN5astra4Menu18generateDefaultPicEv>:
  this->picDefault.resize(120, 0xFF);
 80038d8:	23ff      	movs	r3, #255	@ 0xff
std::vector<unsigned char> Menu::generateDefaultPic() {
 80038da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80038dc:	460d      	mov	r5, r1
  this->picDefault.resize(120, 0xFF);
 80038de:	f88d 3007 	strb.w	r3, [sp, #7]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80038e2:	e9d1 3147 	ldrd	r3, r1, [r1, #284]	@ 0x11c
 80038e6:	1aca      	subs	r2, r1, r3
	if (__new_size > size())
 80038e8:	2a77      	cmp	r2, #119	@ 0x77
std::vector<unsigned char> Menu::generateDefaultPic() {
 80038ea:	4604      	mov	r4, r0
 80038ec:	d81e      	bhi.n	800392c <_ZN5astra4Menu18generateDefaultPicEv+0x54>
	  _M_fill_insert(end(), __new_size - size(), __x);
 80038ee:	f10d 0307 	add.w	r3, sp, #7
 80038f2:	f1c2 0278 	rsb	r2, r2, #120	@ 0x78
 80038f6:	f505 708e 	add.w	r0, r5, #284	@ 0x11c
 80038fa:	f7ff ff6b 	bl	80037d4 <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80038fe:	e9d5 3647 	ldrd	r3, r6, [r5, #284]	@ 0x11c
 8003902:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8003904:	2300      	movs	r3, #0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8003906:	4630      	mov	r0, r6
	: _M_start(), _M_finish(), _M_end_of_storage()
 8003908:	e9c4 3300 	strd	r3, r3, [r4]
 800390c:	60a3      	str	r3, [r4, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800390e:	f7ff f999 	bl	8002c44 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8003912:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8003916:	4406      	add	r6, r0
 8003918:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800391a:	4602      	mov	r2, r0
 800391c:	e9d5 0147 	ldrd	r0, r1, [r5, #284]	@ 0x11c
 8003920:	f7fe ff18 	bl	8002754 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
 8003924:	6060      	str	r0, [r4, #4]
}
 8003926:	4620      	mov	r0, r4
 8003928:	b002      	add	sp, #8
 800392a:	bd70      	pop	{r4, r5, r6, pc}
	else if (__new_size < size())
 800392c:	2a78      	cmp	r2, #120	@ 0x78
 800392e:	d0e6      	beq.n	80038fe <_ZN5astra4Menu18generateDefaultPicEv+0x26>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 8003930:	3378      	adds	r3, #120	@ 0x78
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8003932:	4299      	cmp	r1, r3
	    this->_M_impl._M_finish = __pos;
 8003934:	bf18      	it	ne
 8003936:	f8c5 3120 	strne.w	r3, [r5, #288]	@ 0x120
 800393a:	e7e0      	b.n	80038fe <_ZN5astra4Menu18generateDefaultPicEv+0x26>

0800393c <_ZN5astra4ListC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
List::List(const std::string &_title) {
 800393c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003940:	4604      	mov	r4, r0
 8003942:	2610      	movs	r6, #16
 8003944:	2500      	movs	r5, #0
 8003946:	b086      	sub	sp, #24
 8003948:	460f      	mov	r7, r1
 800394a:	f7ff fcd9 	bl	8003300 <_ZN5astra4MenuC1Ev>
 800394e:	4b28      	ldr	r3, [pc, #160]	@ (80039f0 <_ZN5astra4ListC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb4>)
 8003950:	f504 78a4 	add.w	r8, r4, #328	@ 0x148
 8003954:	4632      	mov	r2, r6
 8003956:	6023      	str	r3, [r4, #0]
 8003958:	2100      	movs	r1, #0
 800395a:	4640      	mov	r0, r8
 800395c:	f006 fb05 	bl	8009f6a <memset>
 8003960:	7960      	ldrb	r0, [r4, #5]
 8003962:	f88d 5000 	strb.w	r5, [sp]
 8003966:	f7fd f89d 	bl	8000aa4 <__aeabi_i2f>
 800396a:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800396c:	f7fd f9a2 	bl	8000cb4 <__aeabi_fdiv>
 8003970:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003974:	f7fc ffe0 	bl	8000938 <__aeabi_fsub>
 8003978:	f7fd fad4 	bl	8000f24 <__aeabi_f2uiz>
 800397c:	2302      	movs	r3, #2
 800397e:	2202      	movs	r2, #2
 8003980:	4669      	mov	r1, sp
 8003982:	f88d 0001 	strb.w	r0, [sp, #1]
 8003986:	9302      	str	r3, [sp, #8]
 8003988:	f504 70ac 	add.w	r0, r4, #344	@ 0x158
 800398c:	ab03      	add	r3, sp, #12
 800398e:	f8cd d004 	str.w	sp, [sp, #4]
 8003992:	f7fd fdc3 	bl	800151c <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8003996:	4639      	mov	r1, r7
 8003998:	f104 00f8 	add.w	r0, r4, #248	@ 0xf8
 800399c:	f005 fdfa 	bl	8009594 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
  this->pic = generateDefaultPic();
 80039a0:	4621      	mov	r1, r4
 80039a2:	a803      	add	r0, sp, #12
 80039a4:	f7ff ff98 	bl	80038d8 <_ZN5astra4Menu18generateDefaultPicEv>
 80039a8:	a903      	add	r1, sp, #12
 80039aa:	f504 7088 	add.w	r0, r4, #272	@ 0x110
 80039ae:	f7ff fd69 	bl	8003484 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 80039b2:	a803      	add	r0, sp, #12
 80039b4:	f7fd fda8 	bl	8001508 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
  this->childMenu.clear();
 80039b8:	f504 7096 	add.w	r0, r4, #300	@ 0x12c
  this->selectIndex = 0;
 80039bc:	f884 5144 	strb.w	r5, [r4, #324]	@ 0x144
  this->parent = nullptr;
 80039c0:	f8c4 5128 	str.w	r5, [r4, #296]	@ 0x128
  this->childMenu.clear();
 80039c4:	f7ff fd75 	bl	80034b2 <_ZNSt6vectorIPN5astra4MenuESaIS2_EE5clearEv>
  this->childWidget.clear();
 80039c8:	f504 709c 	add.w	r0, r4, #312	@ 0x138
 80039cc:	f7ff fd77 	bl	80034be <_ZNSt6vectorIPN5astra6WidgetESaIS2_EE5clearEv>
  this->position = {};
 80039d0:	4632      	mov	r2, r6
 80039d2:	4629      	mov	r1, r5
 80039d4:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 80039d8:	f006 fac7 	bl	8009f6a <memset>
  this->positionForeground = {};
 80039dc:	4632      	mov	r2, r6
 80039de:	4629      	mov	r1, r5
 80039e0:	4640      	mov	r0, r8
 80039e2:	f006 fac2 	bl	8009f6a <memset>
}
 80039e6:	4620      	mov	r0, r4
 80039e8:	b006      	add	sp, #24
 80039ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039ee:	bf00      	nop
 80039f0:	0800b198 	.word	0x0800b198

080039f4 <_ZN5astra4TileC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
Tile::Tile(const std::string &_title) {
 80039f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039f6:	4604      	mov	r4, r0
 80039f8:	2720      	movs	r7, #32
 80039fa:	460d      	mov	r5, r1
 80039fc:	b085      	sub	sp, #20
 80039fe:	f7ff fc7f 	bl	8003300 <_ZN5astra4MenuC1Ev>
 8003a02:	4b1a      	ldr	r3, [pc, #104]	@ (8003a6c <_ZN5astra4TileC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x78>)
 8003a04:	f504 76a4 	add.w	r6, r4, #328	@ 0x148
 8003a08:	6023      	str	r3, [r4, #0]
 8003a0a:	463a      	mov	r2, r7
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	4630      	mov	r0, r6
 8003a10:	f006 faab 	bl	8009f6a <memset>
 8003a14:	4629      	mov	r1, r5
  this->selectIndex = 0;
 8003a16:	2500      	movs	r5, #0
 8003a18:	f104 00f8 	add.w	r0, r4, #248	@ 0xf8
 8003a1c:	f005 fdba 	bl	8009594 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
  this->pic = generateDefaultPic();
 8003a20:	4621      	mov	r1, r4
 8003a22:	a801      	add	r0, sp, #4
 8003a24:	f7ff ff58 	bl	80038d8 <_ZN5astra4Menu18generateDefaultPicEv>
 8003a28:	a901      	add	r1, sp, #4
 8003a2a:	f504 7088 	add.w	r0, r4, #272	@ 0x110
 8003a2e:	f7ff fd29 	bl	8003484 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 8003a32:	a801      	add	r0, sp, #4
 8003a34:	f7fd fd68 	bl	8001508 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
  this->childMenu.clear();
 8003a38:	f504 7096 	add.w	r0, r4, #300	@ 0x12c
  this->selectIndex = 0;
 8003a3c:	f884 5144 	strb.w	r5, [r4, #324]	@ 0x144
  this->parent = nullptr;
 8003a40:	f8c4 5128 	str.w	r5, [r4, #296]	@ 0x128
  this->childMenu.clear();
 8003a44:	f7ff fd35 	bl	80034b2 <_ZNSt6vectorIPN5astra4MenuESaIS2_EE5clearEv>
  this->childWidget.clear();
 8003a48:	f504 709c 	add.w	r0, r4, #312	@ 0x138
 8003a4c:	f7ff fd37 	bl	80034be <_ZNSt6vectorIPN5astra6WidgetESaIS2_EE5clearEv>
  this->position = {};
 8003a50:	4629      	mov	r1, r5
 8003a52:	2210      	movs	r2, #16
 8003a54:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 8003a58:	f006 fa87 	bl	8009f6a <memset>
  this->positionForeground = {};
 8003a5c:	463a      	mov	r2, r7
 8003a5e:	4629      	mov	r1, r5
 8003a60:	4630      	mov	r0, r6
 8003a62:	f006 fa82 	bl	8009f6a <memset>
}
 8003a66:	4620      	mov	r0, r4
 8003a68:	b005      	add	sp, #20
 8003a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a6c:	0800b1b0 	.word	0x0800b1b0

08003a70 <_ZN5astra8Selector11setPositionEv>:

#include "selector.h"

namespace astra {

void Selector::setPosition() {
 8003a70:	b570      	push	{r4, r5, r6, lr}
  //在go的时候改变trg的值
  if (menu->getType() == "Tile") {
 8003a72:	f8d0 10d4 	ldr.w	r1, [r0, #212]	@ 0xd4
void Selector::setPosition() {
 8003a76:	b086      	sub	sp, #24
  if (menu->getType() == "Tile") {
 8003a78:	680b      	ldr	r3, [r1, #0]
void Selector::setPosition() {
 8003a7a:	4604      	mov	r4, r0
  if (menu->getType() == "Tile") {
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4668      	mov	r0, sp
 8003a80:	4798      	blx	r3
    { return __lhs.compare(__rhs) == 0; }
 8003a82:	4937      	ldr	r1, [pc, #220]	@ (8003b60 <_ZN5astra8Selector11setPositionEv+0xf0>)
 8003a84:	4668      	mov	r0, sp
 8003a86:	f005 fe87 	bl	8009798 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 8003a8a:	4605      	mov	r5, r0
      { _M_dispose(); }
 8003a8c:	4668      	mov	r0, sp
 8003a8e:	f005 fcfd 	bl	800948c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003a92:	f8d4 10d4 	ldr.w	r1, [r4, #212]	@ 0xd4
 8003a96:	bb6d      	cbnz	r5, 8003af4 <_ZN5astra8Selector11setPositionEv+0x84>
//    xTrg = menu->child[_index]->position.xTrg - (astraConfig.tileSelectBoxWeight - astraConfig.tilePicWidth) / 2;
//    yTrg = menu->child[_index]->position.yTrg - (astraConfig.tileSelectBoxHeight - astraConfig.tilePicHeight) / 2;
    xTrg = menu->childMenu[menu->selectIndex]->position.xTrg - astraConfig.tileSelectBoxMargin;
 8003a98:	f8d1 312c 	ldr.w	r3, [r1, #300]	@ 0x12c
 8003a9c:	f891 2144 	ldrb.w	r2, [r1, #324]	@ 0x144
 8003aa0:	f8d4 6084 	ldr.w	r6, [r4, #132]	@ 0x84
 8003aa4:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8003aa8:	4631      	mov	r1, r6
 8003aaa:	f8d5 00ec 	ldr.w	r0, [r5, #236]	@ 0xec
 8003aae:	f7fc ff43 	bl	8000938 <__aeabi_fsub>
    yTrg = menu->childMenu[menu->selectIndex]->position.yTrg - astraConfig.tileSelectBoxMargin;
 8003ab2:	4631      	mov	r1, r6
    xTrg = menu->childMenu[menu->selectIndex]->position.xTrg - astraConfig.tileSelectBoxMargin;
 8003ab4:	f8c4 00dc 	str.w	r0, [r4, #220]	@ 0xdc
    yTrg = menu->childMenu[menu->selectIndex]->position.yTrg - astraConfig.tileSelectBoxMargin;
 8003ab8:	f8d5 00f4 	ldr.w	r0, [r5, #244]	@ 0xf4
 8003abc:	f7fc ff3c 	bl	8000938 <__aeabi_fsub>

    yText = systemConfig.screenHeight; //给磁贴文字归零 从屏幕外滑入
 8003ac0:	7865      	ldrb	r5, [r4, #1]
    yTrg = menu->childMenu[menu->selectIndex]->position.yTrg - astraConfig.tileSelectBoxMargin;
 8003ac2:	f8c4 00e4 	str.w	r0, [r4, #228]	@ 0xe4
    yText = systemConfig.screenHeight; //给磁贴文字归零 从屏幕外滑入
 8003ac6:	4628      	mov	r0, r5
 8003ac8:	f7fc ffe8 	bl	8000a9c <__aeabi_ui2f>
 8003acc:	f8c4 00f8 	str.w	r0, [r4, #248]	@ 0xf8
    yTextTrg = systemConfig.screenHeight - astraConfig.tileTextBottomMargin;
 8003ad0:	4628      	mov	r0, r5
 8003ad2:	f7fc ffe7 	bl	8000aa4 <__aeabi_i2f>
 8003ad6:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8003ad8:	f7fc ff2e 	bl	8000938 <__aeabi_fsub>

    wTrg = astraConfig.tileSelectBoxWidth;
 8003adc:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
    yTextTrg = systemConfig.screenHeight - astraConfig.tileTextBottomMargin;
 8003ae0:	f8c4 00fc 	str.w	r0, [r4, #252]	@ 0xfc
    wTrg = astraConfig.tileSelectBoxWidth;
 8003ae4:	f8c4 30ec 	str.w	r3, [r4, #236]	@ 0xec
    hTrg = astraConfig.tileSelectBoxHeight;
 8003ae8:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
  } else if (menu->getType() == "List") {
    xTrg = menu->childMenu[menu->selectIndex]->position.xTrg - astraConfig.selectorMargin;
    yTrg = menu->childMenu[menu->selectIndex]->position.yTrg;

    wTrg = (float) HAL::getFontWidth(menu->childMenu[menu->selectIndex]->title) + astraConfig.listTextMargin * 2;
    hTrg = astraConfig.listLineHeight;
 8003aec:	f8c4 30f4 	str.w	r3, [r4, #244]	@ 0xf4
  }
}
 8003af0:	b006      	add	sp, #24
 8003af2:	bd70      	pop	{r4, r5, r6, pc}
  } else if (menu->getType() == "List") {
 8003af4:	680b      	ldr	r3, [r1, #0]
 8003af6:	4668      	mov	r0, sp
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4798      	blx	r3
    { return __lhs.compare(__rhs) == 0; }
 8003afc:	4668      	mov	r0, sp
 8003afe:	4919      	ldr	r1, [pc, #100]	@ (8003b64 <_ZN5astra8Selector11setPositionEv+0xf4>)
 8003b00:	f005 fe4a 	bl	8009798 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 8003b04:	4605      	mov	r5, r0
      { _M_dispose(); }
 8003b06:	4668      	mov	r0, sp
 8003b08:	f005 fcc0 	bl	800948c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8003b0c:	2d00      	cmp	r5, #0
 8003b0e:	d1ef      	bne.n	8003af0 <_ZN5astra8Selector11setPositionEv+0x80>
    xTrg = menu->childMenu[menu->selectIndex]->position.xTrg - astraConfig.selectorMargin;
 8003b10:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 8003b14:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8003b16:	f893 2144 	ldrb.w	r2, [r3, #324]	@ 0x144
 8003b1a:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8003b1e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8003b22:	f8d5 00ec 	ldr.w	r0, [r5, #236]	@ 0xec
 8003b26:	f7fc ff07 	bl	8000938 <__aeabi_fsub>
    yTrg = menu->childMenu[menu->selectIndex]->position.yTrg;
 8003b2a:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
    xTrg = menu->childMenu[menu->selectIndex]->position.xTrg - astraConfig.selectorMargin;
 8003b2e:	f8c4 00dc 	str.w	r0, [r4, #220]	@ 0xdc
    yTrg = menu->childMenu[menu->selectIndex]->position.yTrg;
 8003b32:	f8c4 30e4 	str.w	r3, [r4, #228]	@ 0xe4
    wTrg = (float) HAL::getFontWidth(menu->childMenu[menu->selectIndex]->title) + astraConfig.listTextMargin * 2;
 8003b36:	f105 00f8 	add.w	r0, r5, #248	@ 0xf8
 8003b3a:	f7fe f874 	bl	8001c26 <_ZN3HAL12getFontWidthERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003b3e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003b40:	4606      	mov	r6, r0
 8003b42:	4608      	mov	r0, r1
 8003b44:	f7fc fefa 	bl	800093c <__addsf3>
 8003b48:	4605      	mov	r5, r0
 8003b4a:	4630      	mov	r0, r6
 8003b4c:	f7fc ffa6 	bl	8000a9c <__aeabi_ui2f>
 8003b50:	4601      	mov	r1, r0
 8003b52:	4628      	mov	r0, r5
 8003b54:	f7fc fef2 	bl	800093c <__addsf3>
    hTrg = astraConfig.listLineHeight;
 8003b58:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
    wTrg = (float) HAL::getFontWidth(menu->childMenu[menu->selectIndex]->title) + astraConfig.listTextMargin * 2;
 8003b5a:	f8c4 00ec 	str.w	r0, [r4, #236]	@ 0xec
    hTrg = astraConfig.listLineHeight;
 8003b5e:	e7c5      	b.n	8003aec <_ZN5astra8Selector11setPositionEv+0x7c>
 8003b60:	0800b0e1 	.word	0x0800b0e1
 8003b64:	0800b0dc 	.word	0x0800b0dc

08003b68 <_ZN5astra8Selector2goEh>:
 *
 * @param _index
 * @note selector接管了移动选择指针的功能
 * @warning not support in loop. 不支持在循环内执行
 */
void Selector::go(unsigned char _index) {
 8003b68:	b538      	push	{r3, r4, r5, lr}
 8003b6a:	4604      	mov	r4, r0
 8003b6c:	460d      	mov	r5, r1
  Item::updateConfig();
 8003b6e:	f7ff f8d7 	bl	8002d20 <_ZN5astra4Item12updateConfigEv>
//  } else if (_index < 0) {
//    if (astraConfig.menuLoop) _index = menu->childMenu.size() - 1;
//    else return;
//  }

  if (_index > menu->childMenu.size() - 1) return;
 8003b72:	f8d4 20d4 	ldr.w	r2, [r4, #212]	@ 0xd4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8003b76:	e9d2 134b 	ldrd	r1, r3, [r2, #300]	@ 0x12c
 8003b7a:	1a5b      	subs	r3, r3, r1
 8003b7c:	109b      	asrs	r3, r3, #2
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	429d      	cmp	r5, r3
 8003b82:	d806      	bhi.n	8003b92 <_ZN5astra8Selector2goEh+0x2a>
  if (_index < 0) return;
  menu->selectIndex = _index;
 8003b84:	f882 5144 	strb.w	r5, [r2, #324]	@ 0x144

  setPosition();
 8003b88:	4620      	mov	r0, r4
}
 8003b8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  setPosition();
 8003b8e:	f7ff bf6f 	b.w	8003a70 <_ZN5astra8Selector11setPositionEv>
}
 8003b92:	bd38      	pop	{r3, r4, r5, pc}

08003b94 <_ZN5astra8Selector6goNextEv>:

void Selector::goNext() {
 8003b94:	b510      	push	{r4, lr}
  if (this->menu->selectIndex == this->menu->childMenu.size() - 1) {
 8003b96:	f8d0 20d4 	ldr.w	r2, [r0, #212]	@ 0xd4
void Selector::goNext() {
 8003b9a:	4604      	mov	r4, r0
  if (this->menu->selectIndex == this->menu->childMenu.size() - 1) {
 8003b9c:	f892 1144 	ldrb.w	r1, [r2, #324]	@ 0x144
 8003ba0:	f8d2 3130 	ldr.w	r3, [r2, #304]	@ 0x130
 8003ba4:	f8d2 212c 	ldr.w	r2, [r2, #300]	@ 0x12c
 8003ba8:	1a9b      	subs	r3, r3, r2
 8003baa:	109b      	asrs	r3, r3, #2
 8003bac:	3b01      	subs	r3, #1
 8003bae:	4299      	cmp	r1, r3
 8003bb0:	d10a      	bne.n	8003bc8 <_ZN5astra8Selector6goNextEv+0x34>
    if (astraConfig.menuLoop) go(0);
 8003bb2:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 8003bb6:	b153      	cbz	r3, 8003bce <_ZN5astra8Selector6goNextEv+0x3a>
 8003bb8:	2100      	movs	r1, #0
    else return;
  } else go(menu->selectIndex + 1);
 8003bba:	f7ff ffd5 	bl	8003b68 <_ZN5astra8Selector2goEh>
  setPosition();
 8003bbe:	4620      	mov	r0, r4
}
 8003bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  setPosition();
 8003bc4:	f7ff bf54 	b.w	8003a70 <_ZN5astra8Selector11setPositionEv>
  } else go(menu->selectIndex + 1);
 8003bc8:	3101      	adds	r1, #1
 8003bca:	b2c9      	uxtb	r1, r1
 8003bcc:	e7f5      	b.n	8003bba <_ZN5astra8Selector6goNextEv+0x26>
}
 8003bce:	bd10      	pop	{r4, pc}

08003bd0 <_ZN5astra8Selector9goPreviewEv>:

void Selector::goPreview() {
 8003bd0:	b510      	push	{r4, lr}
  if (this->menu->selectIndex == 0) {
 8003bd2:	f8d0 30d4 	ldr.w	r3, [r0, #212]	@ 0xd4
void Selector::goPreview() {
 8003bd6:	4604      	mov	r4, r0
  if (this->menu->selectIndex == 0) {
 8003bd8:	f893 1144 	ldrb.w	r1, [r3, #324]	@ 0x144
 8003bdc:	b941      	cbnz	r1, 8003bf0 <_ZN5astra8Selector9goPreviewEv+0x20>
    if (astraConfig.menuLoop) go(this->menu->childMenu.size() - 1);
 8003bde:	f890 2036 	ldrb.w	r2, [r0, #54]	@ 0x36
 8003be2:	b172      	cbz	r2, 8003c02 <_ZN5astra8Selector9goPreviewEv+0x32>
 8003be4:	f8d3 1130 	ldr.w	r1, [r3, #304]	@ 0x130
 8003be8:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8003bec:	1ac9      	subs	r1, r1, r3
 8003bee:	1089      	asrs	r1, r1, #2
    else return;
  } else go(menu->selectIndex - 1);
 8003bf0:	3901      	subs	r1, #1
 8003bf2:	b2c9      	uxtb	r1, r1
 8003bf4:	f7ff ffb8 	bl	8003b68 <_ZN5astra8Selector2goEh>
  setPosition();
 8003bf8:	4620      	mov	r0, r4
}
 8003bfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  setPosition();
 8003bfe:	f7ff bf37 	b.w	8003a70 <_ZN5astra8Selector11setPositionEv>
}
 8003c02:	bd10      	pop	{r4, pc}

08003c04 <_ZN5astra8Selector6injectEPNS_4MenuE>:

bool Selector::inject(Menu *_menu) {
 8003c04:	b508      	push	{r3, lr}
  if (_menu == nullptr) return false;
 8003c06:	b139      	cbz	r1, 8003c18 <_ZN5astra8Selector6injectEPNS_4MenuE+0x14>

  //if (this->menu != nullptr) return false;
  this->menu = _menu;
 8003c08:	f8c0 10d4 	str.w	r1, [r0, #212]	@ 0xd4

  go(this->menu->selectIndex);  //注入之后要初始化选择框的位置
 8003c0c:	f891 1144 	ldrb.w	r1, [r1, #324]	@ 0x144
 8003c10:	f7ff ffaa 	bl	8003b68 <_ZN5astra8Selector2goEh>

  return true;
 8003c14:	2001      	movs	r0, #1
}
 8003c16:	bd08      	pop	{r3, pc}
  if (_menu == nullptr) return false;
 8003c18:	4608      	mov	r0, r1
 8003c1a:	e7fc      	b.n	8003c16 <_ZN5astra8Selector6injectEPNS_4MenuE+0x12>

08003c1c <_ZN5astra8Selector6renderESt6vectorIfSaIfEE>:
  this->menu = nullptr;

  return true;
}

void Selector::render(std::vector<float> _camera) {
 8003c1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c20:	4604      	mov	r4, r0
 8003c22:	b089      	sub	sp, #36	@ 0x24
 8003c24:	460d      	mov	r5, r1
  Item::updateConfig();
 8003c26:	f7ff f87b 	bl	8002d20 <_ZN5astra4Item12updateConfigEv>

  //实际上 这里已经实现过渡动画了
  Animation::move(&x, xTrg, astraConfig.selectorXAnimationSpeed);
 8003c2a:	6962      	ldr	r2, [r4, #20]
 8003c2c:	f8d4 10dc 	ldr.w	r1, [r4, #220]	@ 0xdc
 8003c30:	f104 00d8 	add.w	r0, r4, #216	@ 0xd8
 8003c34:	f7fe fc82 	bl	800253c <_ZN5astra9Animation4moveEPfff>
  Animation::move(&y, yTrg, astraConfig.selectorYAnimationSpeed);
 8003c38:	6922      	ldr	r2, [r4, #16]
 8003c3a:	f8d4 10e4 	ldr.w	r1, [r4, #228]	@ 0xe4
 8003c3e:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 8003c42:	f7fe fc7b 	bl	800253c <_ZN5astra9Animation4moveEPfff>
  Animation::move(&h, hTrg, astraConfig.selectorHeightAnimationSpeed);
 8003c46:	69e2      	ldr	r2, [r4, #28]
 8003c48:	f8d4 10f4 	ldr.w	r1, [r4, #244]	@ 0xf4
 8003c4c:	f104 00f0 	add.w	r0, r4, #240	@ 0xf0
 8003c50:	f7fe fc74 	bl	800253c <_ZN5astra9Animation4moveEPfff>
  Animation::move(&w, wTrg, astraConfig.selectorWidthAnimationSpeed);
 8003c54:	69a2      	ldr	r2, [r4, #24]
 8003c56:	f8d4 10ec 	ldr.w	r1, [r4, #236]	@ 0xec
 8003c5a:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 8003c5e:	f7fe fc6d 	bl	800253c <_ZN5astra9Animation4moveEPfff>

  if (menu->getType() == "Tile") {
 8003c62:	f8d4 10d4 	ldr.w	r1, [r4, #212]	@ 0xd4
 8003c66:	a802      	add	r0, sp, #8
 8003c68:	680b      	ldr	r3, [r1, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4798      	blx	r3
    { return __lhs.compare(__rhs) == 0; }
 8003c6e:	49c2      	ldr	r1, [pc, #776]	@ (8003f78 <_ZN5astra8Selector6renderESt6vectorIfSaIfEE+0x35c>)
 8003c70:	a802      	add	r0, sp, #8
 8003c72:	f005 fd91 	bl	8009798 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 8003c76:	4606      	mov	r6, r0
      { _M_dispose(); }
 8003c78:	a802      	add	r0, sp, #8
 8003c7a:	f005 fc07 	bl	800948c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8003c7e:	2e00      	cmp	r6, #0
 8003c80:	f040 817c 	bne.w	8003f7c <_ZN5astra8Selector6renderESt6vectorIfSaIfEE+0x360>
    Animation::move(&yText, yTextTrg, astraConfig.selectorYAnimationSpeed);
 8003c84:	f8d4 10fc 	ldr.w	r1, [r4, #252]	@ 0xfc
 8003c88:	6922      	ldr	r2, [r4, #16]
 8003c8a:	f104 00f8 	add.w	r0, r4, #248	@ 0xf8
 8003c8e:	f7fe fc55 	bl	800253c <_ZN5astra9Animation4moveEPfff>

    //draw text.
    //文字不受摄像机的影响
    HAL::setDrawType(1);
 8003c92:	2001      	movs	r0, #1
 8003c94:	f7fd ffd1 	bl	8001c3a <_ZN3HAL11setDrawTypeEh>
    HAL::drawChinese((systemConfig.screenWeight -
 8003c98:	7820      	ldrb	r0, [r4, #0]
 8003c9a:	f7fc ff03 	bl	8000aa4 <__aeabi_i2f>
                      (float) HAL::getFontWidth(menu->childMenu[menu->selectIndex]->title)) / 2.0,
 8003c9e:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
    HAL::drawChinese((systemConfig.screenWeight -
 8003ca2:	4606      	mov	r6, r0
                      (float) HAL::getFontWidth(menu->childMenu[menu->selectIndex]->title)) / 2.0,
 8003ca4:	f893 2144 	ldrb.w	r2, [r3, #324]	@ 0x144
 8003ca8:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8003cac:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003cb0:	30f8      	adds	r0, #248	@ 0xf8
 8003cb2:	f7fd ffb8 	bl	8001c26 <_ZN3HAL12getFontWidthERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003cb6:	f7fc fef1 	bl	8000a9c <__aeabi_ui2f>
 8003cba:	4601      	mov	r1, r0
    HAL::drawChinese((systemConfig.screenWeight -
 8003cbc:	4630      	mov	r0, r6
 8003cbe:	f7fc fe3b 	bl	8000938 <__aeabi_fsub>
 8003cc2:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003cc6:	f7fc ff41 	bl	8000b4c <__aeabi_fmul>
 8003cca:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 8003cce:	4606      	mov	r6, r0
 8003cd0:	f8d4 00f8 	ldr.w	r0, [r4, #248]	@ 0xf8
 8003cd4:	f7fc fe32 	bl	800093c <__addsf3>
                     yText + astraConfig.tileTitleHeight,
                     menu->childMenu[menu->selectIndex]->title);
 8003cd8:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
    HAL::drawChinese((systemConfig.screenWeight -
 8003cdc:	4607      	mov	r7, r0
                     menu->childMenu[menu->selectIndex]->title);
 8003cde:	f893 2144 	ldrb.w	r2, [r3, #324]	@ 0x144
 8003ce2:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8003ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cea:	f103 08f8 	add.w	r8, r3, #248	@ 0xf8
  static void drawChinese(float _x, float _y, const std::string &_text) { get()->_drawChinese(_x, _y, _text); }
 8003cee:	f001 f9ef 	bl	80050d0 <_ZN3HAL3getEv>
 8003cf2:	6803      	ldr	r3, [r0, #0]
 8003cf4:	463a      	mov	r2, r7
 8003cf6:	4631      	mov	r1, r6
 8003cf8:	f8d3 903c 	ldr.w	r9, [r3, #60]	@ 0x3c
 8003cfc:	4643      	mov	r3, r8
 8003cfe:	47c8      	blx	r9

    //draw box.
    //大框需要受摄像机的影响
    HAL::setDrawType(2);
 8003d00:	2002      	movs	r0, #2
 8003d02:	f7fd ff9a 	bl	8001c3a <_ZN3HAL11setDrawTypeEh>
	return *(this->_M_impl._M_start + __n);
 8003d06:	682f      	ldr	r7, [r5, #0]
    HAL::drawPixel(x + _camera[0], y + _camera[1]);
 8003d08:	f8d4 00e0 	ldr.w	r0, [r4, #224]	@ 0xe0
 8003d0c:	6879      	ldr	r1, [r7, #4]
 8003d0e:	f7fc fe15 	bl	800093c <__addsf3>
 8003d12:	4606      	mov	r6, r0
 8003d14:	6839      	ldr	r1, [r7, #0]
 8003d16:	f8d4 00d8 	ldr.w	r0, [r4, #216]	@ 0xd8
 8003d1a:	f7fc fe0f 	bl	800093c <__addsf3>
 8003d1e:	4631      	mov	r1, r6
 8003d20:	f7fe ffe2 	bl	8002ce8 <_ZN3HAL9drawPixelEff>
    //左上角
    HAL::drawHLine(x + _camera[0], y + _camera[1], astraConfig.tileSelectBoxLineLength + 1);
 8003d24:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003d28:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8003d2c:	f7fc fe06 	bl	800093c <__addsf3>
 8003d30:	f8d5 8000 	ldr.w	r8, [r5]
 8003d34:	4607      	mov	r7, r0
 8003d36:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003d3a:	f8d4 00e0 	ldr.w	r0, [r4, #224]	@ 0xe0
 8003d3e:	f7fc fdfd 	bl	800093c <__addsf3>
 8003d42:	4606      	mov	r6, r0
 8003d44:	f8d8 1000 	ldr.w	r1, [r8]
 8003d48:	f8d4 00d8 	ldr.w	r0, [r4, #216]	@ 0xd8
 8003d4c:	f7fc fdf6 	bl	800093c <__addsf3>
 8003d50:	463a      	mov	r2, r7
 8003d52:	4631      	mov	r1, r6
 8003d54:	f7fd ff9b 	bl	8001c8e <_ZN3HAL9drawHLineEfff>
    HAL::drawVLine(x + _camera[0], y + _camera[1], astraConfig.tileSelectBoxLineLength + 1);
 8003d58:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003d5c:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8003d60:	f7fc fdec 	bl	800093c <__addsf3>
 8003d64:	f8d5 8000 	ldr.w	r8, [r5]
 8003d68:	4607      	mov	r7, r0
 8003d6a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003d6e:	f8d4 00e0 	ldr.w	r0, [r4, #224]	@ 0xe0
 8003d72:	f7fc fde3 	bl	800093c <__addsf3>
 8003d76:	4606      	mov	r6, r0
 8003d78:	f8d8 1000 	ldr.w	r1, [r8]
 8003d7c:	f8d4 00d8 	ldr.w	r0, [r4, #216]	@ 0xd8
 8003d80:	f7fc fddc 	bl	800093c <__addsf3>
 8003d84:	463a      	mov	r2, r7
 8003d86:	4631      	mov	r1, r6
 8003d88:	f7fd ff71 	bl	8001c6e <_ZN3HAL9drawVLineEfff>
    //左下角
    HAL::drawHLine(x + _camera[0], y + _camera[1] + h - 1, astraConfig.tileSelectBoxLineLength + 1);
 8003d8c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003d90:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8003d94:	f7fc fdd2 	bl	800093c <__addsf3>
 8003d98:	f8d5 8000 	ldr.w	r8, [r5]
 8003d9c:	4607      	mov	r7, r0
 8003d9e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003da2:	f8d4 00e0 	ldr.w	r0, [r4, #224]	@ 0xe0
 8003da6:	f7fc fdc9 	bl	800093c <__addsf3>
 8003daa:	f8d4 10f0 	ldr.w	r1, [r4, #240]	@ 0xf0
 8003dae:	f7fc fdc5 	bl	800093c <__addsf3>
 8003db2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003db6:	f7fc fdbf 	bl	8000938 <__aeabi_fsub>
 8003dba:	4606      	mov	r6, r0
 8003dbc:	f8d8 1000 	ldr.w	r1, [r8]
 8003dc0:	f8d4 00d8 	ldr.w	r0, [r4, #216]	@ 0xd8
 8003dc4:	f7fc fdba 	bl	800093c <__addsf3>
 8003dc8:	463a      	mov	r2, r7
 8003dca:	4631      	mov	r1, r6
 8003dcc:	f7fd ff5f 	bl	8001c8e <_ZN3HAL9drawHLineEfff>
 8003dd0:	f8d5 8000 	ldr.w	r8, [r5]
    HAL::drawVLine(x + _camera[0],
                   y + _camera[1] + h - astraConfig.tileSelectBoxLineLength - 1,
 8003dd4:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 8003dd8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003ddc:	f8d4 00e0 	ldr.w	r0, [r4, #224]	@ 0xe0
 8003de0:	f7fc fdac 	bl	800093c <__addsf3>
 8003de4:	f8d4 10f0 	ldr.w	r1, [r4, #240]	@ 0xf0
 8003de8:	f7fc fda8 	bl	800093c <__addsf3>
 8003dec:	4639      	mov	r1, r7
 8003dee:	f7fc fda3 	bl	8000938 <__aeabi_fsub>
    HAL::drawVLine(x + _camera[0],
 8003df2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003df6:	f7fc fd9f 	bl	8000938 <__aeabi_fsub>
 8003dfa:	4606      	mov	r6, r0
 8003dfc:	f8d8 1000 	ldr.w	r1, [r8]
 8003e00:	f8d4 00d8 	ldr.w	r0, [r4, #216]	@ 0xd8
 8003e04:	f7fc fd9a 	bl	800093c <__addsf3>
 8003e08:	463a      	mov	r2, r7
 8003e0a:	4631      	mov	r1, r6
 8003e0c:	f7fd ff2f 	bl	8001c6e <_ZN3HAL9drawVLineEfff>
 8003e10:	f8d5 8000 	ldr.w	r8, [r5]
                   astraConfig.tileSelectBoxLineLength);
    //右上角
    HAL::drawHLine(x + _camera[0] + w - astraConfig.tileSelectBoxLineLength - 1,
 8003e14:	f8d4 00e0 	ldr.w	r0, [r4, #224]	@ 0xe0
 8003e18:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003e1c:	f7fc fd8e 	bl	800093c <__addsf3>
 8003e20:	4606      	mov	r6, r0
 8003e22:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 8003e26:	f8d8 1000 	ldr.w	r1, [r8]
 8003e2a:	f8d4 00d8 	ldr.w	r0, [r4, #216]	@ 0xd8
 8003e2e:	f7fc fd85 	bl	800093c <__addsf3>
 8003e32:	f8d4 10e8 	ldr.w	r1, [r4, #232]	@ 0xe8
 8003e36:	f7fc fd81 	bl	800093c <__addsf3>
 8003e3a:	4639      	mov	r1, r7
 8003e3c:	f7fc fd7c 	bl	8000938 <__aeabi_fsub>
 8003e40:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003e44:	f7fc fd78 	bl	8000938 <__aeabi_fsub>
 8003e48:	463a      	mov	r2, r7
 8003e4a:	4631      	mov	r1, r6
 8003e4c:	f7fd ff1f 	bl	8001c8e <_ZN3HAL9drawHLineEfff>
                   y + _camera[1],
                   astraConfig.tileSelectBoxLineLength);
    HAL::drawVLine(x + _camera[0] + w - 1, y + _camera[1], astraConfig.tileSelectBoxLineLength + 1);
 8003e50:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003e54:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8003e58:	f7fc fd70 	bl	800093c <__addsf3>
 8003e5c:	f8d5 8000 	ldr.w	r8, [r5]
 8003e60:	4607      	mov	r7, r0
 8003e62:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003e66:	f8d4 00e0 	ldr.w	r0, [r4, #224]	@ 0xe0
 8003e6a:	f7fc fd67 	bl	800093c <__addsf3>
 8003e6e:	4606      	mov	r6, r0
 8003e70:	f8d8 1000 	ldr.w	r1, [r8]
 8003e74:	f8d4 00d8 	ldr.w	r0, [r4, #216]	@ 0xd8
 8003e78:	f7fc fd60 	bl	800093c <__addsf3>
 8003e7c:	f8d4 10e8 	ldr.w	r1, [r4, #232]	@ 0xe8
 8003e80:	f7fc fd5c 	bl	800093c <__addsf3>
 8003e84:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003e88:	f7fc fd56 	bl	8000938 <__aeabi_fsub>
 8003e8c:	463a      	mov	r2, r7
 8003e8e:	4631      	mov	r1, r6
 8003e90:	f7fd feed 	bl	8001c6e <_ZN3HAL9drawVLineEfff>
 8003e94:	f8d5 8000 	ldr.w	r8, [r5]
    //右下角
    HAL::drawHLine(x + _camera[0] + w - astraConfig.tileSelectBoxLineLength - 1,
                   y + _camera[1] + h - 1,
 8003e98:	f8d4 00e0 	ldr.w	r0, [r4, #224]	@ 0xe0
 8003e9c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003ea0:	f7fc fd4c 	bl	800093c <__addsf3>
 8003ea4:	f8d4 10f0 	ldr.w	r1, [r4, #240]	@ 0xf0
 8003ea8:	f7fc fd48 	bl	800093c <__addsf3>
    HAL::drawHLine(x + _camera[0] + w - astraConfig.tileSelectBoxLineLength - 1,
 8003eac:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003eb0:	f7fc fd42 	bl	8000938 <__aeabi_fsub>
 8003eb4:	4606      	mov	r6, r0
 8003eb6:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 8003eba:	f8d8 1000 	ldr.w	r1, [r8]
 8003ebe:	f8d4 00d8 	ldr.w	r0, [r4, #216]	@ 0xd8
 8003ec2:	f7fc fd3b 	bl	800093c <__addsf3>
 8003ec6:	f8d4 10e8 	ldr.w	r1, [r4, #232]	@ 0xe8
 8003eca:	f7fc fd37 	bl	800093c <__addsf3>
 8003ece:	4639      	mov	r1, r7
 8003ed0:	f7fc fd32 	bl	8000938 <__aeabi_fsub>
 8003ed4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003ed8:	f7fc fd2e 	bl	8000938 <__aeabi_fsub>
 8003edc:	463a      	mov	r2, r7
 8003ede:	4631      	mov	r1, r6
 8003ee0:	f7fd fed5 	bl	8001c8e <_ZN3HAL9drawHLineEfff>
 8003ee4:	f8d5 8000 	ldr.w	r8, [r5]
                   astraConfig.tileSelectBoxLineLength);
    HAL::drawVLine(x + _camera[0] + w - 1,
                   y + _camera[1] + h - astraConfig.tileSelectBoxLineLength - 1,
 8003ee8:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 8003eec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003ef0:	f8d4 00e0 	ldr.w	r0, [r4, #224]	@ 0xe0
 8003ef4:	f7fc fd22 	bl	800093c <__addsf3>
 8003ef8:	f8d4 10f0 	ldr.w	r1, [r4, #240]	@ 0xf0
 8003efc:	f7fc fd1e 	bl	800093c <__addsf3>
 8003f00:	4639      	mov	r1, r7
 8003f02:	f7fc fd19 	bl	8000938 <__aeabi_fsub>
    HAL::drawVLine(x + _camera[0] + w - 1,
 8003f06:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003f0a:	f7fc fd15 	bl	8000938 <__aeabi_fsub>
 8003f0e:	4606      	mov	r6, r0
 8003f10:	f8d8 1000 	ldr.w	r1, [r8]
 8003f14:	f8d4 00d8 	ldr.w	r0, [r4, #216]	@ 0xd8
 8003f18:	f7fc fd10 	bl	800093c <__addsf3>
 8003f1c:	f8d4 10e8 	ldr.w	r1, [r4, #232]	@ 0xe8
 8003f20:	f7fc fd0c 	bl	800093c <__addsf3>
 8003f24:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003f28:	f7fc fd06 	bl	8000938 <__aeabi_fsub>
 8003f2c:	463a      	mov	r2, r7
 8003f2e:	4631      	mov	r1, r6
 8003f30:	f7fd fe9d 	bl	8001c6e <_ZN3HAL9drawVLineEfff>
 8003f34:	682e      	ldr	r6, [r5, #0]
                   astraConfig.tileSelectBoxLineLength);

    HAL::drawPixel(x + _camera[0] + w - 1, y + _camera[1] + h - 1);
 8003f36:	f8d4 00e0 	ldr.w	r0, [r4, #224]	@ 0xe0
 8003f3a:	6871      	ldr	r1, [r6, #4]
 8003f3c:	f7fc fcfe 	bl	800093c <__addsf3>
 8003f40:	f8d4 10f0 	ldr.w	r1, [r4, #240]	@ 0xf0
 8003f44:	f7fc fcfa 	bl	800093c <__addsf3>
 8003f48:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003f4c:	f7fc fcf4 	bl	8000938 <__aeabi_fsub>
 8003f50:	4605      	mov	r5, r0
 8003f52:	6831      	ldr	r1, [r6, #0]
 8003f54:	f8d4 00d8 	ldr.w	r0, [r4, #216]	@ 0xd8
 8003f58:	f7fc fcf0 	bl	800093c <__addsf3>
 8003f5c:	f8d4 10e8 	ldr.w	r1, [r4, #232]	@ 0xe8
 8003f60:	f7fc fcec 	bl	800093c <__addsf3>
 8003f64:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003f68:	f7fc fce6 	bl	8000938 <__aeabi_fsub>
 8003f6c:	4629      	mov	r1, r5
 8003f6e:	f7fe febb 	bl	8002ce8 <_ZN3HAL9drawPixelEff>
    HAL::setDrawType(2);
    HAL::drawRBox(x + _camera[0], y + _camera[1], w, h - 1, astraConfig.selectorRadius);
    //HAL::drawRBox(x, y, w, astraConfig.listLineHeight, astraConfig.selectorRadius);
    HAL::setDrawType(1);
  }
}
 8003f72:	b009      	add	sp, #36	@ 0x24
 8003f74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f78:	0800b0e1 	.word	0x0800b0e1
  } else if (menu->getType() == "List") {
 8003f7c:	f8d4 10d4 	ldr.w	r1, [r4, #212]	@ 0xd4
 8003f80:	a802      	add	r0, sp, #8
 8003f82:	680b      	ldr	r3, [r1, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4798      	blx	r3
    { return __lhs.compare(__rhs) == 0; }
 8003f88:	4918      	ldr	r1, [pc, #96]	@ (8003fec <_ZN5astra8Selector6renderESt6vectorIfSaIfEE+0x3d0>)
 8003f8a:	a802      	add	r0, sp, #8
 8003f8c:	f005 fc04 	bl	8009798 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 8003f90:	4606      	mov	r6, r0
      { _M_dispose(); }
 8003f92:	a802      	add	r0, sp, #8
 8003f94:	f005 fa7a 	bl	800948c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8003f98:	2e00      	cmp	r6, #0
 8003f9a:	d1ea      	bne.n	8003f72 <_ZN5astra8Selector6renderESt6vectorIfSaIfEE+0x356>
    HAL::setDrawType(2);
 8003f9c:	2002      	movs	r0, #2
 8003f9e:	f7fd fe4c 	bl	8001c3a <_ZN3HAL11setDrawTypeEh>
 8003fa2:	682e      	ldr	r6, [r5, #0]
    HAL::drawRBox(x + _camera[0], y + _camera[1], w, h - 1, astraConfig.selectorRadius);
 8003fa4:	f8d4 00d8 	ldr.w	r0, [r4, #216]	@ 0xd8
 8003fa8:	6831      	ldr	r1, [r6, #0]
 8003faa:	f7fc fcc7 	bl	800093c <__addsf3>
 8003fae:	6871      	ldr	r1, [r6, #4]
 8003fb0:	4605      	mov	r5, r0
 8003fb2:	f8d4 00e0 	ldr.w	r0, [r4, #224]	@ 0xe0
 8003fb6:	f7fc fcc1 	bl	800093c <__addsf3>
 8003fba:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003fbe:	4606      	mov	r6, r0
 8003fc0:	f8d4 00f0 	ldr.w	r0, [r4, #240]	@ 0xf0
 8003fc4:	f7fc fcb8 	bl	8000938 <__aeabi_fsub>
 8003fc8:	f8d4 80e8 	ldr.w	r8, [r4, #232]	@ 0xe8
 8003fcc:	4607      	mov	r7, r0
 8003fce:	6ce4      	ldr	r4, [r4, #76]	@ 0x4c
    get()->_drawRBox(_x,
 8003fd0:	f001 f87e 	bl	80050d0 <_ZN3HAL3getEv>
 8003fd4:	6803      	ldr	r3, [r0, #0]
 8003fd6:	9401      	str	r4, [sp, #4]
 8003fd8:	9700      	str	r7, [sp, #0]
 8003fda:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
 8003fdc:	4632      	mov	r2, r6
 8003fde:	4643      	mov	r3, r8
 8003fe0:	4629      	mov	r1, r5
 8003fe2:	47a0      	blx	r4
    HAL::setDrawType(1);
 8003fe4:	2001      	movs	r0, #1
 8003fe6:	f7fd fe28 	bl	8001c3a <_ZN3HAL11setDrawTypeEh>
}
 8003fea:	e7c2      	b.n	8003f72 <_ZN5astra8Selector6renderESt6vectorIfSaIfEE+0x356>
 8003fec:	0800b0dc 	.word	0x0800b0dc

08003ff0 <_ZN5astra6Widget4initEv>:

public:
  Widget() = default;

public:
  virtual void init() {}
 8003ff0:	4770      	bx	lr

08003ff2 <_ZN5astra6Widget6deInitEv>:
  virtual void deInit() {}
 8003ff2:	4770      	bx	lr

08003ff4 <_ZN5astra6Widget15renderIndicatorEffRKSt6vectorIfSaIfEE>:
  //open and close是启动器的事情 与控件无关

public:
  //绘制控件在列表中的指示器
  virtual void renderIndicator(float _x, float _y, const std::vector<float> &_camera) {}
 8003ff4:	4770      	bx	lr

08003ff6 <_ZN5astra6Widget6renderERKSt6vectorIfSaIfEE>:

public:
  virtual void render(const std::vector<float> &_camera) {}
 8003ff6:	4770      	bx	lr

08003ff8 <_ZN5astra8CheckBox4initEv>:
  isCheck = !isCheck;
  return isCheck;
}

void CheckBox::init() {
  if (value) isCheck = true;
 8003ff8:	f890 30dc 	ldrb.w	r3, [r0, #220]	@ 0xdc
 8003ffc:	3b00      	subs	r3, #0
 8003ffe:	bf18      	it	ne
 8004000:	2301      	movne	r3, #1
 8004002:	f880 30dd 	strb.w	r3, [r0, #221]	@ 0xdd
  else isCheck = false;
}
 8004006:	4770      	bx	lr

08004008 <_ZN5astra5PopUp6renderERKSt6vectorIfSaIfEE>:
                 astraConfig.checkBoxHeight / 2);
}

void CheckBox::render(const std::vector<float> &_camera) {
  //todo 选中复选框后弹出消息提醒 这玩意现在我倒觉得没啥必要 可以暂时不做
}
 8004008:	4770      	bx	lr

0800400a <_ZN5astra5PopUp4initEv>:
  if (_index < 0) return false;
  value = _index;
  return true;
}

void PopUp::init() { }
 800400a:	4770      	bx	lr

0800400c <_ZN5astra8CheckBox6deInitEv>:
  delete this;
 800400c:	21e0      	movs	r1, #224	@ 0xe0
 800400e:	f004 bec3 	b.w	8008d98 <_ZdlPvj>
	...

08004014 <_ZN5astra6Slider6deInitEv>:
    position.lTrg = maxLength;
    lengthIndicator = 6;
  }
}

void Slider::deInit() {
 8004014:	b510      	push	{r4, lr}
 8004016:	4604      	mov	r4, r0

public:
  void render(const std::vector<float> &_camera) override;
};

class Slider : public Widget {
 8004018:	4b05      	ldr	r3, [pc, #20]	@ (8004030 <_ZN5astra6Slider6deInitEv+0x1c>)
 800401a:	f840 3bf8 	str.w	r3, [r0], #248
 800401e:	f005 fa35 	bl	800948c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
  delete this;
 8004022:	4620      	mov	r0, r4
}
 8004024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delete this;
 8004028:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800402c:	f004 beb4 	b.w	8008d98 <_ZdlPvj>
 8004030:	0800b384 	.word	0x0800b384
 8004034:	00000000 	.word	0x00000000

08004038 <_ZN5astra6Slider4initEv>:
void Slider::init() {
 8004038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800403a:	4604      	mov	r4, r0
  static sys::config &getSystemConfig() { return get()->config; }
 800403c:	f001 f848 	bl	80050d0 <_ZN3HAL3getEv>
  maxLength = std::floor(HAL::getSystemConfig().screenWeight * 0.6);
 8004040:	7900      	ldrb	r0, [r0, #4]
 8004042:	f7fc fb13 	bl	800066c <__aeabi_i2d>
 8004046:	a320      	add	r3, pc, #128	@ (adr r3, 80040c8 <_ZN5astra6Slider4initEv+0x90>)
 8004048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800404c:	f7fc f892 	bl	8000174 <__aeabi_dmul>
 8004050:	f005 fc3e 	bl	80098d0 <floor>
 8004054:	f7fc fbfc 	bl	8000850 <__aeabi_d2uiz>
  position.lTrg = std::floor(((float)(value - min) / (max - min)) * maxLength); //计算目标长度
 8004058:	f894 7111 	ldrb.w	r7, [r4, #273]	@ 0x111
  maxLength = std::floor(HAL::getSystemConfig().screenWeight * 0.6);
 800405c:	b2c5      	uxtb	r5, r0
  position.lTrg = std::floor(((float)(value - min) / (max - min)) * maxLength); //计算目标长度
 800405e:	f894 00dc 	ldrb.w	r0, [r4, #220]	@ 0xdc
  maxLength = std::floor(HAL::getSystemConfig().screenWeight * 0.6);
 8004062:	f884 5110 	strb.w	r5, [r4, #272]	@ 0x110
  position.lTrg = std::floor(((float)(value - min) / (max - min)) * maxLength); //计算目标长度
 8004066:	1bc0      	subs	r0, r0, r7
 8004068:	f7fc fd1c 	bl	8000aa4 <__aeabi_i2f>
 800406c:	4606      	mov	r6, r0
 800406e:	f894 0112 	ldrb.w	r0, [r4, #274]	@ 0x112
 8004072:	1bc0      	subs	r0, r0, r7
 8004074:	f7fc fd16 	bl	8000aa4 <__aeabi_i2f>
 8004078:	4601      	mov	r1, r0
 800407a:	4630      	mov	r0, r6
 800407c:	f7fc fe1a 	bl	8000cb4 <__aeabi_fdiv>
 8004080:	4606      	mov	r6, r0
 8004082:	4628      	mov	r0, r5
 8004084:	f7fc fd0e 	bl	8000aa4 <__aeabi_i2f>
 8004088:	4631      	mov	r1, r6
 800408a:	f7fc fd5f 	bl	8000b4c <__aeabi_fmul>
  using ::floor;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  floor(float __x)
  { return __builtin_floorf(__x); }
 800408e:	f005 fc9f 	bl	80099d0 <floorf>
  lengthIndicator = std::round(((float)(value - min) / (max - min)) * 6);  //映射在0-6个像素之间
 8004092:	490f      	ldr	r1, [pc, #60]	@ (80040d0 <_ZN5astra6Slider4initEv+0x98>)
  position.lTrg = std::floor(((float)(value - min) / (max - min)) * maxLength); //计算目标长度
 8004094:	f8c4 00f4 	str.w	r0, [r4, #244]	@ 0xf4
  lengthIndicator = std::round(((float)(value - min) / (max - min)) * 6);  //映射在0-6个像素之间
 8004098:	4630      	mov	r0, r6
 800409a:	f7fc fd57 	bl	8000b4c <__aeabi_fmul>
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 800409e:	f005 fcd9 	bl	8009a54 <roundf>
 80040a2:	f7fc ff3f 	bl	8000f24 <__aeabi_f2uiz>
  if (valueOverflow) {
 80040a6:	f894 3114 	ldrb.w	r3, [r4, #276]	@ 0x114
  lengthIndicator = std::round(((float)(value - min) / (max - min)) * 6);  //映射在0-6个像素之间
 80040aa:	f884 0115 	strb.w	r0, [r4, #277]	@ 0x115
  if (valueOverflow) {
 80040ae:	b13b      	cbz	r3, 80040c0 <_ZN5astra6Slider4initEv+0x88>
    position.lTrg = maxLength;
 80040b0:	4628      	mov	r0, r5
 80040b2:	f7fc fcf3 	bl	8000a9c <__aeabi_ui2f>
    lengthIndicator = 6;
 80040b6:	2306      	movs	r3, #6
    position.lTrg = maxLength;
 80040b8:	f8c4 00f4 	str.w	r0, [r4, #244]	@ 0xf4
    lengthIndicator = 6;
 80040bc:	f884 3115 	strb.w	r3, [r4, #277]	@ 0x115
}
 80040c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040c2:	bf00      	nop
 80040c4:	f3af 8000 	nop.w
 80040c8:	33333333 	.word	0x33333333
 80040cc:	3fe33333 	.word	0x3fe33333
 80040d0:	40c00000 	.word	0x40c00000

080040d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>:
      basic_string(const basic_string& __str)
 80040d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 80040d6:	f100 0308 	add.w	r3, r0, #8
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 80040da:	6003      	str	r3, [r0, #0]
      { return _M_string_length; }
 80040dc:	e9d1 5300 	ldrd	r5, r3, [r1]
	if (__dnew > size_type(_S_local_capacity))
 80040e0:	2b0f      	cmp	r3, #15
      basic_string(const basic_string& __str)
 80040e2:	4604      	mov	r4, r0
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
 80040e4:	eb05 0603 	add.w	r6, r5, r3
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 80040e8:	9301      	str	r3, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
 80040ea:	d906      	bls.n	80040fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x26>
	    _M_data(_M_create(__dnew, size_type(0)));
 80040ec:	2200      	movs	r2, #0
 80040ee:	a901      	add	r1, sp, #4
 80040f0:	f005 f9aa 	bl	8009448 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
 80040f4:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
 80040f6:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
 80040f8:	60a3      	str	r3, [r4, #8]
	this->_S_copy_chars(_M_data(), __beg, __end);
 80040fa:	4632      	mov	r2, r6
 80040fc:	4629      	mov	r1, r5
 80040fe:	6820      	ldr	r0, [r4, #0]
 8004100:	f005 fa35 	bl	800956e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8004104:	2100      	movs	r1, #0
	_M_set_length(__dnew);
 8004106:	9b01      	ldr	r3, [sp, #4]
 8004108:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
 800410a:	6063      	str	r3, [r4, #4]
 800410c:	54d1      	strb	r1, [r2, r3]
      }
 800410e:	b002      	add	sp, #8
 8004110:	bd70      	pop	{r4, r5, r6, pc}
	...

08004114 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>:
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 8004114:	f100 0308 	add.w	r3, r0, #8
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 8004118:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800411a:	4604      	mov	r4, r0
	if (__s == 0)
 800411c:	460d      	mov	r5, r1
	: allocator_type(__a), _M_p(__dat) { }
 800411e:	6003      	str	r3, [r0, #0]
	if (__s == 0)
 8004120:	b911      	cbnz	r1, 8004128 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0+0x14>
	  std::__throw_logic_error(__N("basic_string: "
 8004122:	480f      	ldr	r0, [pc, #60]	@ (8004160 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0+0x4c>)
 8004124:	f005 f977 	bl	8009416 <_ZSt19__throw_logic_errorPKc>
	return __builtin_strlen(__s);
 8004128:	4608      	mov	r0, r1
 800412a:	f7fc f81b 	bl	8000164 <strlen>
	if (__dnew > size_type(_S_local_capacity))
 800412e:	280f      	cmp	r0, #15
	const _CharT* __end = __s + traits_type::length(__s);
 8004130:	eb05 0600 	add.w	r6, r5, r0
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8004134:	9001      	str	r0, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
 8004136:	d907      	bls.n	8004148 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0+0x34>
	    _M_data(_M_create(__dnew, size_type(0)));
 8004138:	2200      	movs	r2, #0
 800413a:	4620      	mov	r0, r4
 800413c:	a901      	add	r1, sp, #4
 800413e:	f005 f983 	bl	8009448 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
 8004142:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
 8004144:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
 8004146:	60a3      	str	r3, [r4, #8]
	this->_S_copy_chars(_M_data(), __beg, __end);
 8004148:	4632      	mov	r2, r6
 800414a:	4629      	mov	r1, r5
 800414c:	6820      	ldr	r0, [r4, #0]
 800414e:	f005 fa13 	bl	8009578 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	__c1 = __c2;
 8004152:	2100      	movs	r1, #0
	_M_set_length(__dnew);
 8004154:	9b01      	ldr	r3, [sp, #4]
 8004156:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
 8004158:	6063      	str	r3, [r4, #4]
 800415a:	54d1      	strb	r1, [r2, r3]
      }
 800415c:	b002      	add	sp, #8
 800415e:	bd70      	pop	{r4, r5, r6, pc}
 8004160:	0800aea0 	.word	0x0800aea0

08004164 <_ZNK5astra8CheckBox7getTypeB5cxx11Ev>:
  [[nodiscard]] std::string getType() const override { return "CheckBox"; }
 8004164:	b510      	push	{r4, lr}
 8004166:	4604      	mov	r4, r0
 8004168:	4902      	ldr	r1, [pc, #8]	@ (8004174 <_ZNK5astra8CheckBox7getTypeB5cxx11Ev+0x10>)
 800416a:	f7ff ffd3 	bl	8004114 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 800416e:	4620      	mov	r0, r4
 8004170:	bd10      	pop	{r4, pc}
 8004172:	bf00      	nop
 8004174:	0800b28c 	.word	0x0800b28c

08004178 <_ZNK5astra5PopUp7getTypeB5cxx11Ev>:
  [[nodiscard]] std::string getType() const override { return "PopUp"; }
 8004178:	b510      	push	{r4, lr}
 800417a:	4604      	mov	r4, r0
 800417c:	4902      	ldr	r1, [pc, #8]	@ (8004188 <_ZNK5astra5PopUp7getTypeB5cxx11Ev+0x10>)
 800417e:	f7ff ffc9 	bl	8004114 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 8004182:	4620      	mov	r0, r4
 8004184:	bd10      	pop	{r4, pc}
 8004186:	bf00      	nop
 8004188:	0800b295 	.word	0x0800b295

0800418c <_ZNK5astra6Slider7getTypeB5cxx11Ev>:
public:
  [[nodiscard]] std::string getType() const override { return "Slider"; }
 800418c:	b510      	push	{r4, lr}
 800418e:	4604      	mov	r4, r0
 8004190:	4902      	ldr	r1, [pc, #8]	@ (800419c <_ZNK5astra6Slider7getTypeB5cxx11Ev+0x10>)
 8004192:	f7ff ffbf 	bl	8004114 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 8004196:	4620      	mov	r0, r4
 8004198:	bd10      	pop	{r4, pc}
 800419a:	bf00      	nop
 800419c:	0800b29b 	.word	0x0800b29b

080041a0 <_ZNK5astra6Widget7getTypeB5cxx11Ev>:
  [[nodiscard]] virtual std::string getType() const { return "base"; }
 80041a0:	b510      	push	{r4, lr}
 80041a2:	4604      	mov	r4, r0
 80041a4:	4902      	ldr	r1, [pc, #8]	@ (80041b0 <_ZNK5astra6Widget7getTypeB5cxx11Ev+0x10>)
 80041a6:	f7ff ffb5 	bl	8004114 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 80041aa:	4620      	mov	r0, r4
 80041ac:	bd10      	pop	{r4, pc}
 80041ae:	bf00      	nop
 80041b0:	0800b2a2 	.word	0x0800b2a2

080041b4 <_ZN5astra5PopUp6deInitEv>:
void PopUp::deInit() {
 80041b4:	b570      	push	{r4, r5, r6, lr}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80041b6:	e9d0 5642 	ldrd	r5, r6, [r0, #264]	@ 0x108
 80041ba:	4604      	mov	r4, r0
class PopUp : public Widget {
 80041bc:	4b0d      	ldr	r3, [pc, #52]	@ (80041f4 <_ZN5astra5PopUp6deInitEv+0x40>)
 80041be:	6003      	str	r3, [r0, #0]
 80041c0:	42ae      	cmp	r6, r5
 80041c2:	d112      	bne.n	80041ea <_ZN5astra5PopUp6deInitEv+0x36>
	_M_deallocate(_M_impl._M_start,
 80041c4:	f8d4 0108 	ldr.w	r0, [r4, #264]	@ 0x108
	if (__p)
 80041c8:	b120      	cbz	r0, 80041d4 <_ZN5astra5PopUp6deInitEv+0x20>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80041ca:	f8d4 1110 	ldr.w	r1, [r4, #272]	@ 0x110
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80041ce:	1a09      	subs	r1, r1, r0
 80041d0:	f004 fde2 	bl	8008d98 <_ZdlPvj>
      { _M_dispose(); }
 80041d4:	f104 00f0 	add.w	r0, r4, #240	@ 0xf0
 80041d8:	f005 f958 	bl	800948c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
  delete this;
 80041dc:	4620      	mov	r0, r4
}
 80041de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  delete this;
 80041e2:	f44f 718c 	mov.w	r1, #280	@ 0x118
 80041e6:	f004 bdd7 	b.w	8008d98 <_ZdlPvj>
 80041ea:	4628      	mov	r0, r5
 80041ec:	f005 f94e 	bl	800948c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80041f0:	3518      	adds	r5, #24
 80041f2:	e7e5      	b.n	80041c0 <_ZN5astra5PopUp6deInitEv+0xc>
 80041f4:	0800b368 	.word	0x0800b368

080041f8 <_ZN3HAL10drawRFrameEfffff>:
  static void drawRFrame(float _x, float _y, float _w, float _h, float _r) {
 80041f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041fa:	460d      	mov	r5, r1
 80041fc:	4616      	mov	r6, r2
 80041fe:	461f      	mov	r7, r3
 8004200:	4604      	mov	r4, r0
    get()->_drawRFrame(_x,
 8004202:	f000 ff65 	bl	80050d0 <_ZN3HAL3getEv>
 8004206:	9a08      	ldr	r2, [sp, #32]
 8004208:	6803      	ldr	r3, [r0, #0]
 800420a:	9201      	str	r2, [sp, #4]
 800420c:	9700      	str	r7, [sp, #0]
 800420e:	6e1f      	ldr	r7, [r3, #96]	@ 0x60
 8004210:	462a      	mov	r2, r5
 8004212:	4633      	mov	r3, r6
 8004214:	4621      	mov	r1, r4
 8004216:	47b8      	blx	r7
  }
 8004218:	b003      	add	sp, #12
 800421a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800421c <_ZN5astra8CheckBox15renderIndicatorEffRKSt6vectorIfSaIfEE>:
void CheckBox::renderIndicator(float _x, float _y, const std::vector<float> &_camera) {
 800421c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004220:	461f      	mov	r7, r3
 8004222:	4616      	mov	r6, r2
 8004224:	4604      	mov	r4, r0
  Item::updateConfig();
 8004226:	3004      	adds	r0, #4
void CheckBox::renderIndicator(float _x, float _y, const std::vector<float> &_camera) {
 8004228:	460d      	mov	r5, r1
  Item::updateConfig();
 800422a:	f7fe fd79 	bl	8002d20 <_ZN5astra4Item12updateConfigEv>
  HAL::setDrawType(1);
 800422e:	2001      	movs	r0, #1
 8004230:	f7fd fd03 	bl	8001c3a <_ZN3HAL11setDrawTypeEh>
	return *(this->_M_impl._M_start + __n);
 8004234:	f8d7 9000 	ldr.w	r9, [r7]
  HAL::drawRFrame(_x + _camera[0],
 8004238:	4630      	mov	r0, r6
 800423a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800423e:	f7fc fb7d 	bl	800093c <__addsf3>
 8004242:	4680      	mov	r8, r0
 8004244:	f8d9 1000 	ldr.w	r1, [r9]
 8004248:	4628      	mov	r0, r5
 800424a:	f7fc fb77 	bl	800093c <__addsf3>
 800424e:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 8004252:	4641      	mov	r1, r8
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
 800425a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800425e:	f7ff ffcb 	bl	80041f8 <_ZN3HAL10drawRFrameEfffff>
  if (isCheck) //绘制复选框内的点
 8004262:	f894 30dd 	ldrb.w	r3, [r4, #221]	@ 0xdd
 8004266:	2b00      	cmp	r3, #0
 8004268:	d035      	beq.n	80042d6 <_ZN5astra8CheckBox15renderIndicatorEffRKSt6vectorIfSaIfEE+0xba>
                 _y + _camera[1] + astraConfig.checkBoxHeight / 4,
 800426a:	f8d4 b0c8 	ldr.w	fp, [r4, #200]	@ 0xc8
    HAL::drawBox(_x + _camera[0] + astraConfig.checkBoxWidth / 4,
 800426e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004272:	4658      	mov	r0, fp
 8004274:	f7fc fc6a 	bl	8000b4c <__aeabi_fmul>
 8004278:	f8d4 90c4 	ldr.w	r9, [r4, #196]	@ 0xc4
 800427c:	4680      	mov	r8, r0
 800427e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004282:	4648      	mov	r0, r9
 8004284:	f7fc fc62 	bl	8000b4c <__aeabi_fmul>
 8004288:	f8d7 a000 	ldr.w	sl, [r7]
 800428c:	4607      	mov	r7, r0
                 _y + _camera[1] + astraConfig.checkBoxHeight / 4,
 800428e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8004292:	4630      	mov	r0, r6
 8004294:	f7fc fb52 	bl	800093c <__addsf3>
 8004298:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 800429c:	4604      	mov	r4, r0
 800429e:	4658      	mov	r0, fp
 80042a0:	f7fc fc54 	bl	8000b4c <__aeabi_fmul>
 80042a4:	4601      	mov	r1, r0
    HAL::drawBox(_x + _camera[0] + astraConfig.checkBoxWidth / 4,
 80042a6:	4620      	mov	r0, r4
 80042a8:	f7fc fb48 	bl	800093c <__addsf3>
 80042ac:	f8da 1000 	ldr.w	r1, [sl]
 80042b0:	4604      	mov	r4, r0
 80042b2:	4628      	mov	r0, r5
 80042b4:	f7fc fb42 	bl	800093c <__addsf3>
 80042b8:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 80042bc:	4605      	mov	r5, r0
 80042be:	4648      	mov	r0, r9
 80042c0:	f7fc fc44 	bl	8000b4c <__aeabi_fmul>
 80042c4:	4601      	mov	r1, r0
 80042c6:	4628      	mov	r0, r5
 80042c8:	f7fc fb38 	bl	800093c <__addsf3>
 80042cc:	4643      	mov	r3, r8
 80042ce:	463a      	mov	r2, r7
 80042d0:	4621      	mov	r1, r4
 80042d2:	f7fe fd15 	bl	8002d00 <_ZN3HAL7drawBoxEffff>
}
 80042d6:	b003      	add	sp, #12
 80042d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080042dc <_ZN5astra6Slider15renderIndicatorEffRKSt6vectorIfSaIfEE>:

void Slider::renderIndicator(float _x, float _y, const std::vector<float> &_camera) {
 80042dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80042e0:	461f      	mov	r7, r3
 80042e2:	4615      	mov	r5, r2
 80042e4:	4606      	mov	r6, r0
  Item::updateConfig();
 80042e6:	3004      	adds	r0, #4
void Slider::renderIndicator(float _x, float _y, const std::vector<float> &_camera) {
 80042e8:	460c      	mov	r4, r1
  Item::updateConfig();
 80042ea:	f7fe fd19 	bl	8002d20 <_ZN5astra4Item12updateConfigEv>
  HAL::setDrawType(1);
 80042ee:	2001      	movs	r0, #1
 80042f0:	f7fd fca3 	bl	8001c3a <_ZN3HAL11setDrawTypeEh>
 80042f4:	f8d7 8000 	ldr.w	r8, [r7]
  HAL::drawRFrame(_x + _camera[0] - 1, _y + _camera[1] - 1, 10, 8, 1);
 80042f8:	4628      	mov	r0, r5
 80042fa:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80042fe:	f7fc fb1d 	bl	800093c <__addsf3>
 8004302:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004306:	f7fc fb17 	bl	8000938 <__aeabi_fsub>
 800430a:	f8d8 1000 	ldr.w	r1, [r8]
 800430e:	4681      	mov	r9, r0
 8004310:	f04f 587e 	mov.w	r8, #1065353216	@ 0x3f800000
 8004314:	4620      	mov	r0, r4
 8004316:	f7fc fb11 	bl	800093c <__addsf3>
 800431a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800431e:	f7fc fb0b 	bl	8000938 <__aeabi_fsub>
 8004322:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8004326:	4a12      	ldr	r2, [pc, #72]	@ (8004370 <_ZN5astra6Slider15renderIndicatorEffRKSt6vectorIfSaIfEE+0x94>)
 8004328:	4649      	mov	r1, r9
 800432a:	f8cd 8000 	str.w	r8, [sp]
 800432e:	f7ff ff63 	bl	80041f8 <_ZN3HAL10drawRFrameEfffff>
  HAL::drawBox(_x + _camera[0] + 1, _y + _camera[1] + 1, lengthIndicator, 4);
 8004332:	f896 0115 	ldrb.w	r0, [r6, #277]	@ 0x115
 8004336:	f7fc fbb1 	bl	8000a9c <__aeabi_ui2f>
 800433a:	683f      	ldr	r7, [r7, #0]
 800433c:	4606      	mov	r6, r0
 800433e:	6879      	ldr	r1, [r7, #4]
 8004340:	4628      	mov	r0, r5
 8004342:	f7fc fafb 	bl	800093c <__addsf3>
 8004346:	4641      	mov	r1, r8
 8004348:	f7fc faf8 	bl	800093c <__addsf3>
 800434c:	4605      	mov	r5, r0
 800434e:	6839      	ldr	r1, [r7, #0]
 8004350:	4620      	mov	r0, r4
 8004352:	f7fc faf3 	bl	800093c <__addsf3>
 8004356:	4641      	mov	r1, r8
 8004358:	f7fc faf0 	bl	800093c <__addsf3>
 800435c:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8004360:	4632      	mov	r2, r6
 8004362:	4629      	mov	r1, r5
 8004364:	f7fe fccc 	bl	8002d00 <_ZN3HAL7drawBoxEffff>
}
 8004368:	b003      	add	sp, #12
 800436a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800436e:	bf00      	nop
 8004370:	41200000 	.word	0x41200000

08004374 <_ZN5astra5PopUp15renderIndicatorEffRKSt6vectorIfSaIfEE>:
void PopUp::renderIndicator(float _x, float _y, const std::vector<float> &_camera) {
 8004374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004376:	461f      	mov	r7, r3
 8004378:	460e      	mov	r6, r1
 800437a:	b087      	sub	sp, #28
 800437c:	4604      	mov	r4, r0
  Item::updateConfig();
 800437e:	3004      	adds	r0, #4
void PopUp::renderIndicator(float _x, float _y, const std::vector<float> &_camera) {
 8004380:	4615      	mov	r5, r2
  Item::updateConfig();
 8004382:	f7fe fccd 	bl	8002d20 <_ZN5astra4Item12updateConfigEv>
  HAL::setDrawType(1);
 8004386:	2001      	movs	r0, #1
 8004388:	f7fd fc57 	bl	8001c3a <_ZN3HAL11setDrawTypeEh>
 800438c:	683f      	ldr	r7, [r7, #0]
  HAL::drawEnglish(_x + _camera[0] + 1, _y + _camera[1] + astraConfig.listTextHeight, std::to_string(value));
 800438e:	4630      	mov	r0, r6
 8004390:	6839      	ldr	r1, [r7, #0]
 8004392:	f7fc fad3 	bl	800093c <__addsf3>
 8004396:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800439a:	f7fc facf 	bl	800093c <__addsf3>
 800439e:	6879      	ldr	r1, [r7, #4]
 80043a0:	4606      	mov	r6, r0
 80043a2:	4628      	mov	r0, r5
 80043a4:	f7fc faca 	bl	800093c <__addsf3>
 80043a8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80043aa:	f7fc fac7 	bl	800093c <__addsf3>
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
 80043ae:	f894 40dc 	ldrb.w	r4, [r4, #220]	@ 0xdc
 80043b2:	4607      	mov	r7, r0
	  if (__value < (unsigned)__base) return __n;
 80043b4:	2c09      	cmp	r4, #9
 80043b6:	d924      	bls.n	8004402 <_ZN5astra5PopUp15renderIndicatorEffRKSt6vectorIfSaIfEE+0x8e>
	  if (__value < __b3) return __n + 2;
 80043b8:	2c64      	cmp	r4, #100	@ 0x64
 80043ba:	bf34      	ite	cc
 80043bc:	2502      	movcc	r5, #2
 80043be:	2503      	movcs	r5, #3
      { _M_construct(__n, __c); }
 80043c0:	222d      	movs	r2, #45	@ 0x2d
 80043c2:	4668      	mov	r0, sp
	: allocator_type(__a), _M_p(__dat) { }
 80043c4:	ab02      	add	r3, sp, #8
      { _M_construct(__n, __c); }
 80043c6:	4629      	mov	r1, r5
	: allocator_type(__a), _M_p(__dat) { }
 80043c8:	9300      	str	r3, [sp, #0]
      { _M_construct(__n, __c); }
 80043ca:	f005 f8b6 	bl	800953a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>
      while (__val >= 100)
 80043ce:	2c63      	cmp	r4, #99	@ 0x63
      { return _M_dataplus._M_p; }
 80043d0:	9a00      	ldr	r2, [sp, #0]
      unsigned __pos = __len - 1;
 80043d2:	f105 30ff 	add.w	r0, r5, #4294967295
      while (__val >= 100)
 80043d6:	d916      	bls.n	8004406 <_ZN5astra5PopUp15renderIndicatorEffRKSt6vectorIfSaIfEE+0x92>
	  auto const __num = (__val % 100) * 2;
 80043d8:	2364      	movs	r3, #100	@ 0x64
 80043da:	fbb4 f1f3 	udiv	r1, r4, r3
 80043de:	fb03 4311 	mls	r3, r3, r1, r4
	  __val /= 100;
 80043e2:	460c      	mov	r4, r1
	  __first[__pos] = __digits[__num + 1];
 80043e4:	4913      	ldr	r1, [pc, #76]	@ (8004434 <_ZN5astra5PopUp15renderIndicatorEffRKSt6vectorIfSaIfEE+0xc0>)
	  __first[__pos - 1] = __digits[__num];
 80043e6:	4415      	add	r5, r2
	  __first[__pos] = __digits[__num + 1];
 80043e8:	eb01 0c43 	add.w	ip, r1, r3, lsl #1
 80043ec:	f89c c001 	ldrb.w	ip, [ip, #1]
	  __first[__pos - 1] = __digits[__num];
 80043f0:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
	  __first[__pos] = __digits[__num + 1];
 80043f4:	f802 c000 	strb.w	ip, [r2, r0]
	  __first[__pos - 1] = __digits[__num];
 80043f8:	f805 3c02 	strb.w	r3, [r5, #-2]
	__first[0] = '0' + __val;
 80043fc:	3430      	adds	r4, #48	@ 0x30
 80043fe:	b2e4      	uxtb	r4, r4
 8004400:	e00a      	b.n	8004418 <_ZN5astra5PopUp15renderIndicatorEffRKSt6vectorIfSaIfEE+0xa4>
 8004402:	2501      	movs	r5, #1
 8004404:	e7dc      	b.n	80043c0 <_ZN5astra5PopUp15renderIndicatorEffRKSt6vectorIfSaIfEE+0x4c>
      if (__val >= 10)
 8004406:	2c09      	cmp	r4, #9
 8004408:	d9f8      	bls.n	80043fc <_ZN5astra5PopUp15renderIndicatorEffRKSt6vectorIfSaIfEE+0x88>
	  __first[1] = __digits[__num + 1];
 800440a:	4b0a      	ldr	r3, [pc, #40]	@ (8004434 <_ZN5astra5PopUp15renderIndicatorEffRKSt6vectorIfSaIfEE+0xc0>)
 800440c:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 8004410:	7849      	ldrb	r1, [r1, #1]
	  __first[0] = __digits[__num];
 8004412:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
	  __first[1] = __digits[__num + 1];
 8004416:	7051      	strb	r1, [r2, #1]
	  __first[0] = __digits[__num];
 8004418:	7014      	strb	r4, [r2, #0]
  static void drawEnglish(float _x, float _y, const std::string &_text) { get()->_drawEnglish(_x, _y, _text); }
 800441a:	f000 fe59 	bl	80050d0 <_ZN3HAL3getEv>
 800441e:	6803      	ldr	r3, [r0, #0]
 8004420:	463a      	mov	r2, r7
 8004422:	4631      	mov	r1, r6
 8004424:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8004426:	466b      	mov	r3, sp
 8004428:	47a0      	blx	r4
      { _M_dispose(); }
 800442a:	4668      	mov	r0, sp
 800442c:	f005 f82e 	bl	800948c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
}
 8004430:	b007      	add	sp, #28
 8004432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004434:	0800af85 	.word	0x0800af85

08004438 <_ZN5astra6WidgetC1Ev>:
struct config {
 8004438:	f44f 4281 	mov.w	r2, #16512	@ 0x4080
 800443c:	8082      	strh	r2, [r0, #4]
 800443e:	4a3f      	ldr	r2, [pc, #252]	@ (800453c <_ZN5astra6WidgetC1Ev+0x104>)
  Widget() = default;
 8004440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004442:	6082      	str	r2, [r0, #8]
 8004444:	4a3e      	ldr	r2, [pc, #248]	@ (8004540 <_ZN5astra6WidgetC1Ev+0x108>)
 8004446:	f04f 547c 	mov.w	r4, #1056964608	@ 0x3f000000
 800444a:	60c2      	str	r2, [r0, #12]
 800444c:	6102      	str	r2, [r0, #16]
 800444e:	6182      	str	r2, [r0, #24]
 8004450:	61c2      	str	r2, [r0, #28]
 8004452:	6342      	str	r2, [r0, #52]	@ 0x34
 8004454:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 8004458:	493a      	ldr	r1, [pc, #232]	@ (8004544 <_ZN5astra6WidgetC1Ev+0x10c>)
 800445a:	2500      	movs	r5, #0
 800445c:	6141      	str	r1, [r0, #20]
 800445e:	493a      	ldr	r1, [pc, #232]	@ (8004548 <_ZN5astra6WidgetC1Ev+0x110>)
 8004460:	f04f 4683 	mov.w	r6, #1098907648	@ 0x41800000
 8004464:	6201      	str	r1, [r0, #32]
 8004466:	4939      	ldr	r1, [pc, #228]	@ (800454c <_ZN5astra6WidgetC1Ev+0x114>)
 8004468:	6382      	str	r2, [r0, #56]	@ 0x38
 800446a:	6241      	str	r1, [r0, #36]	@ 0x24
 800446c:	4938      	ldr	r1, [pc, #224]	@ (8004550 <_ZN5astra6WidgetC1Ev+0x118>)
 800446e:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8004472:	6281      	str	r1, [r0, #40]	@ 0x28
 8004474:	4937      	ldr	r1, [pc, #220]	@ (8004554 <_ZN5astra6WidgetC1Ev+0x11c>)
 8004476:	6504      	str	r4, [r0, #80]	@ 0x50
 8004478:	62c1      	str	r1, [r0, #44]	@ 0x2c
 800447a:	4937      	ldr	r1, [pc, #220]	@ (8004558 <_ZN5astra6WidgetC1Ev+0x120>)
 800447c:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 8004480:	6301      	str	r1, [r0, #48]	@ 0x30
 8004482:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8004486:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800455c <_ZN5astra6WidgetC1Ev+0x124>
 800448a:	4f35      	ldr	r7, [pc, #212]	@ (8004560 <_ZN5astra6WidgetC1Ev+0x128>)
 800448c:	f8c0 c05c 	str.w	ip, [r0, #92]	@ 0x5c
 8004490:	f8c0 c060 	str.w	ip, [r0, #96]	@ 0x60
 8004494:	f8df c0cc 	ldr.w	ip, [pc, #204]	@ 8004564 <_ZN5astra6WidgetC1Ev+0x12c>
 8004498:	6407      	str	r7, [r0, #64]	@ 0x40
 800449a:	f8c0 c06c 	str.w	ip, [r0, #108]	@ 0x6c
 800449e:	f8df c0c8 	ldr.w	ip, [pc, #200]	@ 8004568 <_ZN5astra6WidgetC1Ev+0x130>
 80044a2:	6442      	str	r2, [r0, #68]	@ 0x44
 80044a4:	f8c0 c074 	str.w	ip, [r0, #116]	@ 0x74
 80044a8:	f8df c0c0 	ldr.w	ip, [pc, #192]	@ 800456c <_ZN5astra6WidgetC1Ev+0x134>
 80044ac:	64c6      	str	r6, [r0, #76]	@ 0x4c
 80044ae:	6584      	str	r4, [r0, #88]	@ 0x58
 80044b0:	6642      	str	r2, [r0, #100]	@ 0x64
 80044b2:	6682      	str	r2, [r0, #104]	@ 0x68
 80044b4:	6782      	str	r2, [r0, #120]	@ 0x78
 80044b6:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
 80044ba:	6481      	str	r1, [r0, #72]	@ 0x48
 80044bc:	6541      	str	r1, [r0, #84]	@ 0x54
 80044be:	6701      	str	r1, [r0, #112]	@ 0x70
 80044c0:	f8c0 c07c 	str.w	ip, [r0, #124]	@ 0x7c
 80044c4:	f8c0 4080 	str.w	r4, [r0, #128]	@ 0x80
 80044c8:	f8c0 40a0 	str.w	r4, [r0, #160]	@ 0xa0
 80044cc:	f8c0 40a8 	str.w	r4, [r0, #168]	@ 0xa8
 80044d0:	4c27      	ldr	r4, [pc, #156]	@ (8004570 <_ZN5astra6WidgetC1Ev+0x138>)
 80044d2:	f8c0 2094 	str.w	r2, [r0, #148]	@ 0x94
 80044d6:	f8c0 40ac 	str.w	r4, [r0, #172]	@ 0xac
 80044da:	f8c0 20b0 	str.w	r2, [r0, #176]	@ 0xb0
 80044de:	2410      	movs	r4, #16
 80044e0:	f8c0 20c4 	str.w	r2, [r0, #196]	@ 0xc4
 80044e4:	f8c0 20c8 	str.w	r2, [r0, #200]	@ 0xc8
 80044e8:	4a22      	ldr	r2, [pc, #136]	@ (8004574 <_ZN5astra6WidgetC1Ev+0x13c>)
 80044ea:	f8c0 7084 	str.w	r7, [r0, #132]	@ 0x84
 80044ee:	f8c0 20d0 	str.w	r2, [r0, #208]	@ 0xd0
 80044f2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80044f6:	4f20      	ldr	r7, [pc, #128]	@ (8004578 <_ZN5astra6WidgetC1Ev+0x140>)
 80044f8:	f880 40b4 	strb.w	r4, [r0, #180]	@ 0xb4
 80044fc:	4c1f      	ldr	r4, [pc, #124]	@ (800457c <_ZN5astra6WidgetC1Ev+0x144>)
 80044fe:	f8c0 7088 	str.w	r7, [r0, #136]	@ 0x88
 8004502:	f8c0 6098 	str.w	r6, [r0, #152]	@ 0x98
 8004506:	4f1e      	ldr	r7, [pc, #120]	@ (8004580 <_ZN5astra6WidgetC1Ev+0x148>)
 8004508:	4e1e      	ldr	r6, [pc, #120]	@ (8004584 <_ZN5astra6WidgetC1Ev+0x14c>)
 800450a:	f8c0 40b8 	str.w	r4, [r0, #184]	@ 0xb8
 800450e:	f8c0 20d4 	str.w	r2, [r0, #212]	@ 0xd4
 8004512:	4c1d      	ldr	r4, [pc, #116]	@ (8004588 <_ZN5astra6WidgetC1Ev+0x150>)
 8004514:	4a1d      	ldr	r2, [pc, #116]	@ (800458c <_ZN5astra6WidgetC1Ev+0x154>)
 8004516:	e9c0 442f 	strd	r4, r4, [r0, #188]	@ 0xbc
 800451a:	f8c0 708c 	str.w	r7, [r0, #140]	@ 0x8c
 800451e:	f8c0 7090 	str.w	r7, [r0, #144]	@ 0x90
 8004522:	f8c0 109c 	str.w	r1, [r0, #156]	@ 0x9c
 8004526:	f8c0 60a4 	str.w	r6, [r0, #164]	@ 0xa4
 800452a:	f8c0 10cc 	str.w	r1, [r0, #204]	@ 0xcc
 800452e:	6002      	str	r2, [r0, #0]
 8004530:	f8c0 50d8 	str.w	r5, [r0, #216]	@ 0xd8
 8004534:	f880 50dc 	strb.w	r5, [r0, #220]	@ 0xdc
 8004538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800453a:	bf00      	nop
 800453c:	437f0000 	.word	0x437f0000
 8004540:	428c0000 	.word	0x428c0000
 8004544:	42700000 	.word	0x42700000
 8004548:	425c0000 	.word	0x425c0000
 800454c:	41c80000 	.word	0x41c80000
 8004550:	41700000 	.word	0x41700000
 8004554:	42c80000 	.word	0x42c80000
 8004558:	42a00000 	.word	0x42a00000
 800455c:	41f00000 	.word	0x41f00000
 8004560:	40a00000 	.word	0x40a00000
 8004564:	40c00000 	.word	0x40c00000
 8004568:	41900000 	.word	0x41900000
 800456c:	41400000 	.word	0x41400000
 8004570:	41600000 	.word	0x41600000
 8004574:	41200000 	.word	0x41200000
 8004578:	40400000 	.word	0x40400000
 800457c:	0800b484 	.word	0x0800b484
 8004580:	42100000 	.word	0x42100000
 8004584:	42b40000 	.word	0x42b40000
 8004588:	0800bcd7 	.word	0x0800bcd7
 800458c:	0800b330 	.word	0x0800b330

08004590 <_ZN5astra8CheckBoxC1ERb>:
CheckBox::CheckBox(bool &_value) {
 8004590:	b538      	push	{r3, r4, r5, lr}
 8004592:	4604      	mov	r4, r0
 8004594:	460d      	mov	r5, r1
 8004596:	f7ff ff4f 	bl	8004438 <_ZN5astra6WidgetC1Ev>
 800459a:	4b06      	ldr	r3, [pc, #24]	@ (80045b4 <_ZN5astra8CheckBoxC1ERb+0x24>)
}
 800459c:	4620      	mov	r0, r4
CheckBox::CheckBox(bool &_value) {
 800459e:	6023      	str	r3, [r4, #0]
  value = _value;
 80045a0:	782b      	ldrb	r3, [r5, #0]
 80045a2:	f884 30dc 	strb.w	r3, [r4, #220]	@ 0xdc
  if (value) isCheck = true;
 80045a6:	f884 30dd 	strb.w	r3, [r4, #221]	@ 0xdd
  this->parent = nullptr;
 80045aa:	2300      	movs	r3, #0
 80045ac:	f8c4 30d8 	str.w	r3, [r4, #216]	@ 0xd8
}
 80045b0:	bd38      	pop	{r3, r4, r5, pc}
 80045b2:	bf00      	nop
 80045b4:	0800b34c 	.word	0x0800b34c

080045b8 <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh>:
PopUp::PopUp(unsigned char _direction,
 80045b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045bc:	4604      	mov	r4, r0
 80045be:	460e      	mov	r6, r1
 80045c0:	4615      	mov	r5, r2
 80045c2:	4699      	mov	r9, r3
             unsigned char &_value) {
 80045c4:	f7ff ff38 	bl	8004438 <_ZN5astra6WidgetC1Ev>
 80045c8:	4620      	mov	r0, r4
 80045ca:	4b58      	ldr	r3, [pc, #352]	@ (800472c <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh+0x174>)
 80045cc:	2210      	movs	r2, #16
 80045ce:	2100      	movs	r1, #0
 80045d0:	f840 3be0 	str.w	r3, [r0], #224
 80045d4:	f005 fcc9 	bl	8009f6a <memset>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 80045d8:	f104 03f8 	add.w	r3, r4, #248	@ 0xf8
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 80045dc:	f8c4 30f0 	str.w	r3, [r4, #240]	@ 0xf0
      { _M_string_length = __length; }
 80045e0:	2300      	movs	r3, #0
	this->_M_assign(__str);
 80045e2:	4629      	mov	r1, r5
	: _M_start(), _M_finish(), _M_end_of_storage()
 80045e4:	e9c4 3342 	strd	r3, r3, [r4, #264]	@ 0x108
      { _M_string_length = __length; }
 80045e8:	f8c4 30f4 	str.w	r3, [r4, #244]	@ 0xf4
 80045ec:	f884 30f8 	strb.w	r3, [r4, #248]	@ 0xf8
 80045f0:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
  direction = _direction;
 80045f4:	f884 6114 	strb.w	r6, [r4, #276]	@ 0x114
	this->_M_assign(__str);
 80045f8:	f104 00f0 	add.w	r0, r4, #240	@ 0xf0
 80045fc:	f004 ffca 	bl	8009594 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
             unsigned char &_value) {
 8004600:	f504 7384 	add.w	r3, r4, #264	@ 0x108
      if (std::__addressof(__x) != this)
 8004604:	4599      	cmp	r9, r3
 8004606:	d02d      	beq.n	8004664 <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh+0xac>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004608:	e9d9 5a00 	ldrd	r5, sl, [r9]
			 - this->_M_impl._M_start); }
 800460c:	f8d4 8108 	ldr.w	r8, [r4, #264]	@ 0x108
 8004610:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004614:	ebaa 0705 	sub.w	r7, sl, r5
			 - this->_M_impl._M_start); }
 8004618:	eba3 0308 	sub.w	r3, r3, r8
	  if (__xlen > capacity())
 800461c:	42bb      	cmp	r3, r7
 800461e:	d240      	bcs.n	80046a2 <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh+0xea>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8004620:	4b43      	ldr	r3, [pc, #268]	@ (8004730 <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh+0x178>)
 8004622:	429f      	cmp	r7, r3
 8004624:	d901      	bls.n	800462a <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh+0x72>
	      std::__throw_bad_array_new_length();
 8004626:	f004 fef3 	bl	8009410 <_ZSt28__throw_bad_array_new_lengthv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800462a:	4638      	mov	r0, r7
 800462c:	f004 fc1a 	bl	8008e64 <_Znwj>
 8004630:	4606      	mov	r6, r0
      _ForwardIterator __cur = __result;
 8004632:	4680      	mov	r8, r0
	  for (; __first != __last; ++__first, (void)++__cur)
 8004634:	45aa      	cmp	sl, r5
 8004636:	d127      	bne.n	8004688 <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh+0xd0>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004638:	e9d4 5842 	ldrd	r5, r8, [r4, #264]	@ 0x108
 800463c:	45a8      	cmp	r8, r5
 800463e:	d12b      	bne.n	8004698 <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh+0xe0>
	      _M_deallocate(this->_M_impl._M_start,
 8004640:	f8d4 0108 	ldr.w	r0, [r4, #264]	@ 0x108
	if (__p)
 8004644:	b120      	cbz	r0, 8004650 <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh+0x98>
			    - this->_M_impl._M_start);
 8004646:	f8d4 1110 	ldr.w	r1, [r4, #272]	@ 0x110
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800464a:	1a09      	subs	r1, r1, r0
 800464c:	f004 fba4 	bl	8008d98 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
 8004650:	f8c4 6108 	str.w	r6, [r4, #264]	@ 0x108
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8004654:	443e      	add	r6, r7
 8004656:	f8c4 6110 	str.w	r6, [r4, #272]	@ 0x110
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 800465a:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 800465e:	443b      	add	r3, r7
 8004660:	f8c4 310c 	str.w	r3, [r4, #268]	@ 0x10c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004664:	e9d4 2342 	ldrd	r2, r3, [r4, #264]	@ 0x108
 8004668:	1a9b      	subs	r3, r3, r2
 800466a:	4a32      	ldr	r2, [pc, #200]	@ (8004734 <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh+0x17c>)
 800466c:	10db      	asrs	r3, r3, #3
 800466e:	4353      	muls	r3, r2
  boundary = options.size();
 8004670:	f884 3115 	strb.w	r3, [r4, #277]	@ 0x115
  value = _value;
 8004674:	9b08      	ldr	r3, [sp, #32]
}
 8004676:	4620      	mov	r0, r4
  value = _value;
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	f884 30dc 	strb.w	r3, [r4, #220]	@ 0xdc
  this->parent = nullptr;
 800467e:	2300      	movs	r3, #0
 8004680:	f8c4 30d8 	str.w	r3, [r4, #216]	@ 0xd8
}
 8004684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8004688:	4629      	mov	r1, r5
 800468a:	4640      	mov	r0, r8
 800468c:	f7ff fd22 	bl	80040d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
 8004690:	f108 0818 	add.w	r8, r8, #24
 8004694:	3518      	adds	r5, #24
 8004696:	e7cd      	b.n	8004634 <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh+0x7c>
      { _M_dispose(); }
 8004698:	4628      	mov	r0, r5
 800469a:	f004 fef7 	bl	800948c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
	  for (; __first != __last; ++__first)
 800469e:	3518      	adds	r5, #24
 80046a0:	e7cc      	b.n	800463c <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh+0x84>
 80046a2:	f8d4 610c 	ldr.w	r6, [r4, #268]	@ 0x10c
 80046a6:	4b23      	ldr	r3, [pc, #140]	@ (8004734 <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh+0x17c>)
 80046a8:	eba6 0608 	sub.w	r6, r6, r8
	  else if (size() >= __xlen)
 80046ac:	42b7      	cmp	r7, r6
 80046ae:	d81e      	bhi.n	80046ee <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh+0x136>
 80046b0:	10fe      	asrs	r6, r7, #3
 80046b2:	435e      	muls	r6, r3
 80046b4:	46c2      	mov	sl, r8
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 80046b6:	46b1      	mov	r9, r6
 80046b8:	f1b9 0f00 	cmp.w	r9, #0
 80046bc:	dc0d      	bgt.n	80046da <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh+0x122>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80046be:	2318      	movs	r3, #24
 80046c0:	ea26 75e6 	bic.w	r5, r6, r6, asr #31
 80046c4:	fb03 8505 	mla	r5, r3, r5, r8
      : _M_current(__i) { }
 80046c8:	f8d4 910c 	ldr.w	r9, [r4, #268]	@ 0x10c
 80046cc:	45a9      	cmp	r9, r5
 80046ce:	d0c4      	beq.n	800465a <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh+0xa2>
 80046d0:	4628      	mov	r0, r5
 80046d2:	f004 fedb 	bl	800948c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      operator++() _GLIBCXX_NOEXCEPT
 80046d6:	3518      	adds	r5, #24
	return *this;
 80046d8:	e7f8      	b.n	80046cc <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh+0x114>
	this->_M_assign(__str);
 80046da:	4629      	mov	r1, r5
 80046dc:	4650      	mov	r0, sl
 80046de:	f004 ff59 	bl	8009594 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	      ++__first;
 80046e2:	3518      	adds	r5, #24
	      ++__result;
 80046e4:	f10a 0a18 	add.w	sl, sl, #24
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 80046e8:	f109 39ff 	add.w	r9, r9, #4294967295
 80046ec:	e7e4      	b.n	80046b8 <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh+0x100>
 80046ee:	10f6      	asrs	r6, r6, #3
 80046f0:	435e      	muls	r6, r3
 80046f2:	2e00      	cmp	r6, #0
 80046f4:	dc10      	bgt.n	8004718 <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh+0x160>
 80046f6:	e9d4 3642 	ldrd	r3, r6, [r4, #264]	@ 0x108
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 80046fa:	f8d9 5000 	ldr.w	r5, [r9]
 80046fe:	1af3      	subs	r3, r6, r3
					  __x._M_impl._M_finish,
 8004700:	f8d9 8004 	ldr.w	r8, [r9, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8004704:	441d      	add	r5, r3
 8004706:	45a8      	cmp	r8, r5
 8004708:	d0a7      	beq.n	800465a <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh+0xa2>
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800470a:	4629      	mov	r1, r5
 800470c:	4630      	mov	r0, r6
 800470e:	f7ff fce1 	bl	80040d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
 8004712:	3518      	adds	r5, #24
 8004714:	3618      	adds	r6, #24
 8004716:	e7f6      	b.n	8004706 <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh+0x14e>
 8004718:	4629      	mov	r1, r5
 800471a:	4640      	mov	r0, r8
 800471c:	f004 ff3a 	bl	8009594 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	      ++__first;
 8004720:	3518      	adds	r5, #24
	      ++__result;
 8004722:	f108 0818 	add.w	r8, r8, #24
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8004726:	3e01      	subs	r6, #1
 8004728:	e7e3      	b.n	80046f2 <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh+0x13a>
 800472a:	bf00      	nop
 800472c:	0800b368 	.word	0x0800b368
 8004730:	7ffffff8 	.word	0x7ffffff8
 8004734:	aaaaaaab 	.word	0xaaaaaaab

08004738 <_ZN5astra6SliderC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhhRh>:
Slider::Slider(const std::string &_title,
 8004738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800473c:	4604      	mov	r4, r0
 800473e:	461e      	mov	r6, r3
 8004740:	4688      	mov	r8, r1
 8004742:	4617      	mov	r7, r2
               unsigned char &_value) {
 8004744:	f7ff fe78 	bl	8004438 <_ZN5astra6WidgetC1Ev>
 8004748:	4620      	mov	r0, r4
      { _M_string_length = __length; }
 800474a:	2500      	movs	r5, #0
 800474c:	4b17      	ldr	r3, [pc, #92]	@ (80047ac <_ZN5astra6SliderC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhhRh+0x74>)
 800474e:	2218      	movs	r2, #24
 8004750:	2100      	movs	r1, #0
 8004752:	f840 3be0 	str.w	r3, [r0], #224
 8004756:	f005 fc08 	bl	8009f6a <memset>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 800475a:	f504 7380 	add.w	r3, r4, #256	@ 0x100
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 800475e:	f8c4 30f8 	str.w	r3, [r4, #248]	@ 0xf8
	this->_M_assign(__str);
 8004762:	f104 00f8 	add.w	r0, r4, #248	@ 0xf8
 8004766:	4641      	mov	r1, r8
      { _M_string_length = __length; }
 8004768:	f8c4 50fc 	str.w	r5, [r4, #252]	@ 0xfc
 800476c:	f884 5100 	strb.w	r5, [r4, #256]	@ 0x100
	this->_M_assign(__str);
 8004770:	f004 ff10 	bl	8009594 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
  step = _step;
 8004774:	f89d 3018 	ldrb.w	r3, [sp, #24]
  maxLength = 0;
 8004778:	f884 5110 	strb.w	r5, [r4, #272]	@ 0x110
  step = _step;
 800477c:	f884 3113 	strb.w	r3, [r4, #275]	@ 0x113
  value = _value;
 8004780:	9b07      	ldr	r3, [sp, #28]
  min = _min;
 8004782:	f884 7111 	strb.w	r7, [r4, #273]	@ 0x111
  value = _value;
 8004786:	781a      	ldrb	r2, [r3, #0]
  max = _max;
 8004788:	f884 6112 	strb.w	r6, [r4, #274]	@ 0x112
  if (value > max) valueOverflow = true;
 800478c:	42b2      	cmp	r2, r6
  value = _value;
 800478e:	f884 20dc 	strb.w	r2, [r4, #220]	@ 0xdc
  if (value > max) valueOverflow = true;
 8004792:	bf94      	ite	ls
 8004794:	2200      	movls	r2, #0
 8004796:	2201      	movhi	r2, #1
  lengthIndicator = 0;
 8004798:	f884 5115 	strb.w	r5, [r4, #277]	@ 0x115
}
 800479c:	4620      	mov	r0, r4
  this->parent = nullptr;
 800479e:	f8c4 50d8 	str.w	r5, [r4, #216]	@ 0xd8
  if (value > max) valueOverflow = true;
 80047a2:	f884 2114 	strb.w	r2, [r4, #276]	@ 0x114
}
 80047a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047aa:	bf00      	nop
 80047ac:	0800b384 	.word	0x0800b384

080047b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>:
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 80047b0:	f100 0308 	add.w	r3, r0, #8
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 80047b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80047b6:	4604      	mov	r4, r0
	if (__s == 0)
 80047b8:	460d      	mov	r5, r1
	: allocator_type(__a), _M_p(__dat) { }
 80047ba:	6003      	str	r3, [r0, #0]
	if (__s == 0)
 80047bc:	b911      	cbnz	r1, 80047c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0+0x14>
	  std::__throw_logic_error(__N("basic_string: "
 80047be:	480f      	ldr	r0, [pc, #60]	@ (80047fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0+0x4c>)
 80047c0:	f004 fe29 	bl	8009416 <_ZSt19__throw_logic_errorPKc>
	return __builtin_strlen(__s);
 80047c4:	4608      	mov	r0, r1
 80047c6:	f7fb fccd 	bl	8000164 <strlen>
	if (__dnew > size_type(_S_local_capacity))
 80047ca:	280f      	cmp	r0, #15
	const _CharT* __end = __s + traits_type::length(__s);
 80047cc:	eb05 0600 	add.w	r6, r5, r0
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 80047d0:	9001      	str	r0, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
 80047d2:	d907      	bls.n	80047e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0+0x34>
	    _M_data(_M_create(__dnew, size_type(0)));
 80047d4:	2200      	movs	r2, #0
 80047d6:	4620      	mov	r0, r4
 80047d8:	a901      	add	r1, sp, #4
 80047da:	f004 fe35 	bl	8009448 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
 80047de:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
 80047e0:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
 80047e2:	60a3      	str	r3, [r4, #8]
	this->_S_copy_chars(_M_data(), __beg, __end);
 80047e4:	4632      	mov	r2, r6
 80047e6:	4629      	mov	r1, r5
 80047e8:	6820      	ldr	r0, [r4, #0]
 80047ea:	f004 fec5 	bl	8009578 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	__c1 = __c2;
 80047ee:	2100      	movs	r1, #0
	_M_set_length(__dnew);
 80047f0:	9b01      	ldr	r3, [sp, #4]
 80047f2:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
 80047f4:	6063      	str	r3, [r4, #4]
 80047f6:	54d1      	strb	r1, [r2, r3]
      }
 80047f8:	b002      	add	sp, #8
 80047fa:	bd70      	pop	{r4, r5, r6, pc}
 80047fc:	0800aea0 	.word	0x0800aea0

08004800 <_ZN3HAL12canvasUpdateEv>:
  static void canvasUpdate() { get()->_canvasUpdate(); }
 8004800:	b510      	push	{r4, lr}
 8004802:	f000 fc65 	bl	80050d0 <_ZN3HAL3getEv>
 8004806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800480a:	6803      	ldr	r3, [r0, #0]
 800480c:	69db      	ldr	r3, [r3, #28]
 800480e:	4718      	bx	r3

08004810 <_ZN3HAL11canvasClearEv>:
  static void canvasClear() { get()->_canvasClear(); }
 8004810:	b510      	push	{r4, lr}
 8004812:	f000 fc5d 	bl	80050d0 <_ZN3HAL3getEv>
 8004816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800481a:	6803      	ldr	r3, [r0, #0]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	4718      	bx	r3

08004820 <_ZN3HAL13getFontHeightEv>:
  static unsigned char getFontHeight() { return get()->_getFontHeight(); }
 8004820:	b510      	push	{r4, lr}
 8004822:	f000 fc55 	bl	80050d0 <_ZN3HAL3getEv>
 8004826:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800482a:	6803      	ldr	r3, [r0, #0]
 800482c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800482e:	4718      	bx	r3

08004830 <_ZN5astra8Launcher6noticeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>:
#include <cstring>
#include "launcher.h"

namespace astra {

void Launcher::notice(std::string _info, uint16_t _time) {
 8004830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004834:	b08d      	sub	sp, #52	@ 0x34
 8004836:	e9cd 1204 	strd	r1, r2, [sp, #16]
  static bool init = false;
  static unsigned long long int time = 0;
  static bool onRender = false;

  if (!init) {
 800483a:	4aa3      	ldr	r2, [pc, #652]	@ (8004ac8 <_ZN5astra8Launcher6noticeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x298>)
void Launcher::notice(std::string _info, uint16_t _time) {
 800483c:	4605      	mov	r5, r0
  if (!init) {
 800483e:	7813      	ldrb	r3, [r2, #0]
 8004840:	b943      	cbnz	r3, 8004854 <_ZN5astra8Launcher6noticeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x24>
    init = true;
 8004842:	2301      	movs	r3, #1
    time = 0;
 8004844:	2000      	movs	r0, #0
 8004846:	2100      	movs	r1, #0
    init = true;
 8004848:	7013      	strb	r3, [r2, #0]
    time = 0;
 800484a:	4aa0      	ldr	r2, [pc, #640]	@ (8004acc <_ZN5astra8Launcher6noticeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x29c>)
 800484c:	e9c2 0100 	strd	r0, r1, [r2]
    onRender = true;
 8004850:	4a9f      	ldr	r2, [pc, #636]	@ (8004ad0 <_ZN5astra8Launcher6noticeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x2a0>)
 8004852:	7013      	strb	r3, [r2, #0]
  static unsigned char getFontWidth(std::string &_text) { return get()->_getFontWidth(_text); }
 8004854:	f000 fc3c 	bl	80050d0 <_ZN3HAL3getEv>
 8004858:	6803      	ldr	r3, [r0, #0]
 800485a:	9904      	ldr	r1, [sp, #16]
 800485c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800485e:	4798      	blx	r3
  }

  float wPop = HAL::getFontWidth(_info) + 2 * getUIConfig().popMargin;  //宽度
 8004860:	f7fc f920 	bl	8000aa4 <__aeabi_i2f>
 8004864:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8004868:	f7fc f868 	bl	800093c <__addsf3>
 800486c:	9002      	str	r0, [sp, #8]
  float hPop = HAL::getFontHeight() + 2 * getUIConfig().popMargin;  //高度
 800486e:	f7ff ffd7 	bl	8004820 <_ZN3HAL13getFontHeightEv>
 8004872:	f7fc f917 	bl	8000aa4 <__aeabi_i2f>
 8004876:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 800487a:	f7fc f85f 	bl	800093c <__addsf3>
  float yPop = 0 - hPop - 8; //从屏幕上方滑入
 800487e:	4601      	mov	r1, r0
  float hPop = HAL::getFontHeight() + 2 * getUIConfig().popMargin;  //高度
 8004880:	4680      	mov	r8, r0
  float yPop = 0 - hPop - 8; //从屏幕上方滑入
 8004882:	2000      	movs	r0, #0
 8004884:	f7fc f858 	bl	8000938 <__aeabi_fsub>
 8004888:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 800488c:	f7fc f854 	bl	8000938 <__aeabi_fsub>
 8004890:	4607      	mov	r7, r0
  static sys::config &getSystemConfig() { return get()->config; }
 8004892:	f000 fc1d 	bl	80050d0 <_ZN3HAL3getEv>
  float yPopTrg = (HAL::getSystemConfig().screenHeight - hPop) / 3;  //目标位置 中间偏上
 8004896:	7940      	ldrb	r0, [r0, #5]
 8004898:	f7fc f904 	bl	8000aa4 <__aeabi_i2f>
 800489c:	4641      	mov	r1, r8
 800489e:	f7fc f84b 	bl	8000938 <__aeabi_fsub>
 80048a2:	498c      	ldr	r1, [pc, #560]	@ (8004ad4 <_ZN5astra8Launcher6noticeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x2a4>)
 80048a4:	f7fc fa06 	bl	8000cb4 <__aeabi_fdiv>
 80048a8:	4606      	mov	r6, r0
 80048aa:	f000 fc11 	bl	80050d0 <_ZN3HAL3getEv>
  float xPop = (HAL::getSystemConfig().screenWeight - wPop) / 2;  //居中
 80048ae:	7900      	ldrb	r0, [r0, #4]
 80048b0:	f7fc f8f8 	bl	8000aa4 <__aeabi_i2f>
 80048b4:	9902      	ldr	r1, [sp, #8]
 80048b6:	f7fc f83f 	bl	8000938 <__aeabi_fsub>
 80048ba:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80048be:	f7fc f945 	bl	8000b4c <__aeabi_fmul>
  float yPop = 0 - hPop - 8; //从屏幕上方滑入
 80048c2:	463c      	mov	r4, r7
  float xPop = (HAL::getSystemConfig().screenWeight - wPop) / 2;  //居中
 80048c4:	9003      	str	r0, [sp, #12]

  while (onRender) {
 80048c6:	4b82      	ldr	r3, [pc, #520]	@ (8004ad0 <_ZN5astra8Launcher6noticeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x2a0>)
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	b913      	cbnz	r3, 80048d2 <_ZN5astra8Launcher6noticeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0xa2>
    if (yPop == 0 - hPop - 8) {
      onRender = false;  //退出条件
      init = false;
    }
  }
}
 80048cc:	b00d      	add	sp, #52	@ 0x34
 80048ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    time++;
 80048d2:	f8df 91f8 	ldr.w	r9, [pc, #504]	@ 8004acc <_ZN5astra8Launcher6noticeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x29c>
 80048d6:	e9d9 3200 	ldrd	r3, r2, [r9]
 80048da:	3301      	adds	r3, #1
 80048dc:	f142 0200 	adc.w	r2, r2, #0
 80048e0:	e9c9 3200 	strd	r3, r2, [r9]
    HAL::canvasClear();
 80048e4:	f7ff ff94 	bl	8004810 <_ZN3HAL11canvasClearEv>
    currentMenu->render(camera->getPosition());
 80048e8:	f8d5 a008 	ldr.w	sl, [r5, #8]
 80048ec:	6869      	ldr	r1, [r5, #4]
 80048ee:	f8da 3000 	ldr.w	r3, [sl]
 80048f2:	a809      	add	r0, sp, #36	@ 0x24
 80048f4:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 80048f8:	f7fd ff19 	bl	800272e <_ZN5astra6Camera11getPositionEv>
 80048fc:	4650      	mov	r0, sl
 80048fe:	a909      	add	r1, sp, #36	@ 0x24
 8004900:	47d8      	blx	fp
      }
 8004902:	a809      	add	r0, sp, #36	@ 0x24
 8004904:	f7fd f9d3 	bl	8001cae <_ZNSt12_Vector_baseIfSaIfEED1Ev>
    selector->render(camera->getPosition());
 8004908:	e9d5 a100 	ldrd	sl, r1, [r5]
 800490c:	a809      	add	r0, sp, #36	@ 0x24
 800490e:	f7fd ff0e 	bl	800272e <_ZN5astra6Camera11getPositionEv>
 8004912:	4650      	mov	r0, sl
 8004914:	a909      	add	r1, sp, #36	@ 0x24
 8004916:	f7ff f981 	bl	8003c1c <_ZN5astra8Selector6renderESt6vectorIfSaIfEE>
 800491a:	a809      	add	r0, sp, #36	@ 0x24
 800491c:	f7fd f9c7 	bl	8001cae <_ZNSt12_Vector_baseIfSaIfEED1Ev>
    camera->update(currentMenu, selector);
 8004920:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
 8004924:	682a      	ldr	r2, [r5, #0]
 8004926:	f7fe f811 	bl	800294c <_ZN5astra6Camera6updateEPNS_4MenuEPNS_8SelectorE>
    HAL::setDrawType(0);
 800492a:	2000      	movs	r0, #0
 800492c:	f7fd f985 	bl	8001c3a <_ZN3HAL11setDrawTypeEh>
    HAL::drawRBox(xPop - 4, yPop - 4, wPop + 8, hPop + 8, getUIConfig().popRadius + 2);
 8004930:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8004934:	9803      	ldr	r0, [sp, #12]
 8004936:	f7fb ffff 	bl	8000938 <__aeabi_fsub>
 800493a:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 800493e:	4682      	mov	sl, r0
 8004940:	4620      	mov	r0, r4
 8004942:	f7fb fff9 	bl	8000938 <__aeabi_fsub>
 8004946:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 800494a:	9007      	str	r0, [sp, #28]
 800494c:	9802      	ldr	r0, [sp, #8]
 800494e:	f7fb fff5 	bl	800093c <__addsf3>
 8004952:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8004956:	9006      	str	r0, [sp, #24]
 8004958:	4640      	mov	r0, r8
 800495a:	f7fb ffef 	bl	800093c <__addsf3>
 800495e:	4683      	mov	fp, r0
    get()->_drawRBox(_x,
 8004960:	f000 fbb6 	bl	80050d0 <_ZN3HAL3getEv>
 8004964:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8004968:	6801      	ldr	r1, [r0, #0]
 800496a:	9301      	str	r3, [sp, #4]
 800496c:	f8cd b000 	str.w	fp, [sp]
 8004970:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8004974:	f8d1 b058 	ldr.w	fp, [r1, #88]	@ 0x58
 8004978:	4651      	mov	r1, sl
 800497a:	47d8      	blx	fp
    HAL::setDrawType(1);  //反色显示
 800497c:	2001      	movs	r0, #1
 800497e:	f7fd f95c 	bl	8001c3a <_ZN3HAL11setDrawTypeEh>
    HAL::drawRFrame(xPop - 1, yPop - 1, wPop + 2, hPop + 2, getUIConfig().popRadius);  //绘制一个圆角矩形
 8004982:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004986:	9803      	ldr	r0, [sp, #12]
 8004988:	f7fb ffd6 	bl	8000938 <__aeabi_fsub>
 800498c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004990:	4682      	mov	sl, r0
 8004992:	4620      	mov	r0, r4
 8004994:	f7fb ffd0 	bl	8000938 <__aeabi_fsub>
 8004998:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800499c:	9007      	str	r0, [sp, #28]
 800499e:	9802      	ldr	r0, [sp, #8]
 80049a0:	f7fb ffcc 	bl	800093c <__addsf3>
 80049a4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80049a8:	9006      	str	r0, [sp, #24]
 80049aa:	4640      	mov	r0, r8
 80049ac:	f7fb ffc6 	bl	800093c <__addsf3>
 80049b0:	4683      	mov	fp, r0
    get()->_drawRFrame(_x,
 80049b2:	f000 fb8d 	bl	80050d0 <_ZN3HAL3getEv>
 80049b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80049ba:	f04f 4c80 	mov.w	ip, #1073741824	@ 0x40000000
 80049be:	6801      	ldr	r1, [r0, #0]
 80049c0:	f8cd c004 	str.w	ip, [sp, #4]
 80049c4:	f8cd b000 	str.w	fp, [sp]
 80049c8:	f8d1 b060 	ldr.w	fp, [r1, #96]	@ 0x60
 80049cc:	4651      	mov	r1, sl
 80049ce:	47d8      	blx	fp
    HAL::drawEnglish(xPop + getUIConfig().popMargin,
 80049d0:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80049d4:	9803      	ldr	r0, [sp, #12]
 80049d6:	f7fb ffb1 	bl	800093c <__addsf3>
		   yPop + getUIConfig().popMargin + HAL::getFontHeight(),
 80049da:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
    HAL::drawEnglish(xPop + getUIConfig().popMargin,
 80049de:	4682      	mov	sl, r0
		   yPop + getUIConfig().popMargin + HAL::getFontHeight(),
 80049e0:	4620      	mov	r0, r4
 80049e2:	f7fb ffab 	bl	800093c <__addsf3>
 80049e6:	4683      	mov	fp, r0
 80049e8:	f7ff ff1a 	bl	8004820 <_ZN3HAL13getFontHeightEv>
    HAL::drawEnglish(xPop + getUIConfig().popMargin,
 80049ec:	f7fc f85a 	bl	8000aa4 <__aeabi_i2f>
 80049f0:	4659      	mov	r1, fp
 80049f2:	f7fb ffa3 	bl	800093c <__addsf3>
 80049f6:	9006      	str	r0, [sp, #24]
  static void drawEnglish(float _x, float _y, const std::string &_text) { get()->_drawEnglish(_x, _y, _text); }
 80049f8:	f000 fb6a 	bl	80050d0 <_ZN3HAL3getEv>
 80049fc:	6803      	ldr	r3, [r0, #0]
 80049fe:	4651      	mov	r1, sl
 8004a00:	f8d3 b038 	ldr.w	fp, [r3, #56]	@ 0x38
 8004a04:	9a06      	ldr	r2, [sp, #24]
 8004a06:	9b04      	ldr	r3, [sp, #16]
 8004a08:	47d8      	blx	fp
    HAL::canvasUpdate();
 8004a0a:	f7ff fef9 	bl	8004800 <_ZN3HAL12canvasUpdateEv>
  if (*_pos != _posTrg) {
 8004a0e:	4621      	mov	r1, r4
 8004a10:	4630      	mov	r0, r6
 8004a12:	f7fc fa2f 	bl	8000e74 <__aeabi_fcmpeq>
 8004a16:	b9b8      	cbnz	r0, 8004a48 <_ZN5astra8Launcher6noticeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x218>
    if (std::fabs(*_pos - _posTrg) <= 1.0f) *_pos = _posTrg;
 8004a18:	4631      	mov	r1, r6
 8004a1a:	4620      	mov	r0, r4
 8004a1c:	f7fb ff8c 	bl	8000938 <__aeabi_fsub>
 8004a20:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
  { return __builtin_fabsf(__x); }
 8004a24:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004a28:	f7fc fa38 	bl	8000e9c <__aeabi_fcmple>
 8004a2c:	2800      	cmp	r0, #0
 8004a2e:	d148      	bne.n	8004ac2 <_ZN5astra8Launcher6noticeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x292>
    else *_pos += (_posTrg - *_pos) / ((100 - _speed) / 1.0f);
 8004a30:	4621      	mov	r1, r4
 8004a32:	4630      	mov	r0, r6
 8004a34:	f7fb ff80 	bl	8000938 <__aeabi_fsub>
 8004a38:	4927      	ldr	r1, [pc, #156]	@ (8004ad8 <_ZN5astra8Launcher6noticeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x2a8>)
 8004a3a:	f7fc f93b 	bl	8000cb4 <__aeabi_fdiv>
 8004a3e:	4601      	mov	r1, r0
 8004a40:	4620      	mov	r0, r4
 8004a42:	f7fb ff7b 	bl	800093c <__addsf3>
 8004a46:	4604      	mov	r4, r0
    if (time >= _time) yPopTrg = 0 - hPop - 8;  //滑出
 8004a48:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004a4c:	9905      	ldr	r1, [sp, #20]
 8004a4e:	428a      	cmp	r2, r1
 8004a50:	f173 0300 	sbcs.w	r3, r3, #0
 8004a54:	bf28      	it	cs
 8004a56:	463e      	movcs	r6, r7
  static void keyScan() { get()->_keyScan(); }
 8004a58:	f000 fb3a 	bl	80050d0 <_ZN3HAL3getEv>
 8004a5c:	6803      	ldr	r3, [r0, #0]
 8004a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a62:	4798      	blx	r3
  static bool getAnyKey() { return get()->_getAnyKey(); }
 8004a64:	f000 fb34 	bl	80050d0 <_ZN3HAL3getEv>
 8004a68:	6803      	ldr	r3, [r0, #0]
 8004a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a6e:	4798      	blx	r3
    if (HAL::getAnyKey()) {
 8004a70:	b1d0      	cbz	r0, 8004aa8 <_ZN5astra8Launcher6noticeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x278>
 8004a72:	f04f 0900 	mov.w	r9, #0
  static key::KEY_ACTION *getKeyMap() { return get()->key; }
 8004a76:	f000 fb2b 	bl	80050d0 <_ZN3HAL3getEv>
      if (HAL::getKeyMap()[i] == key::CLICK) yPopTrg = 0 - hPop - 8;  //滑出
 8004a7a:	4448      	add	r0, r9
 8004a7c:	7b03      	ldrb	r3, [r0, #12]
      for (unsigned char i = 0; i < key::KEY_NUM; i++)
 8004a7e:	f109 0901 	add.w	r9, r9, #1
      if (HAL::getKeyMap()[i] == key::CLICK) yPopTrg = 0 - hPop - 8;  //滑出
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	bf08      	it	eq
 8004a86:	463e      	moveq	r6, r7
      for (unsigned char i = 0; i < key::KEY_NUM; i++)
 8004a88:	f1b9 0f04 	cmp.w	r9, #4
 8004a8c:	d1f3      	bne.n	8004a76 <_ZN5astra8Launcher6noticeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x246>
 8004a8e:	f000 fb1f 	bl	80050d0 <_ZN3HAL3getEv>
 8004a92:	4681      	mov	r9, r0
 8004a94:	f000 fb1c 	bl	80050d0 <_ZN3HAL3getEv>
	*__first = __value;
 8004a98:	1d02      	adds	r2, r0, #4
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	eba2 0209 	sub.w	r2, r2, r9
 8004aa0:	f109 000c 	add.w	r0, r9, #12
 8004aa4:	f005 fa61 	bl	8009f6a <memset>
    if (yPop == 0 - hPop - 8) {
 8004aa8:	4621      	mov	r1, r4
 8004aaa:	4638      	mov	r0, r7
 8004aac:	f7fc f9e2 	bl	8000e74 <__aeabi_fcmpeq>
 8004ab0:	2800      	cmp	r0, #0
 8004ab2:	f43f af08 	beq.w	80048c6 <_ZN5astra8Launcher6noticeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x96>
      onRender = false;  //退出条件
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	4a05      	ldr	r2, [pc, #20]	@ (8004ad0 <_ZN5astra8Launcher6noticeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x2a0>)
 8004aba:	7013      	strb	r3, [r2, #0]
      init = false;
 8004abc:	4a02      	ldr	r2, [pc, #8]	@ (8004ac8 <_ZN5astra8Launcher6noticeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x298>)
 8004abe:	7013      	strb	r3, [r2, #0]
 8004ac0:	e701      	b.n	80048c6 <_ZN5astra8Launcher6noticeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x96>
    if (std::fabs(*_pos - _posTrg) <= 1.0f) *_pos = _posTrg;
 8004ac2:	4634      	mov	r4, r6
 8004ac4:	e7c0      	b.n	8004a48 <_ZN5astra8Launcher6noticeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x218>
 8004ac6:	bf00      	nop
 8004ac8:	200001b0 	.word	0x200001b0
 8004acc:	200001a8 	.word	0x200001a8
 8004ad0:	200001a1 	.word	0x200001a1
 8004ad4:	40400000 	.word	0x40400000
 8004ad8:	41200000 	.word	0x41200000

08004adc <_ZN5astra8Launcher6updateEv>:

  selector->inject(currentMenu);
  //selector->go(currentPage->selectIndex);
}

void Launcher::update() {
 8004adc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8004ade:	4604      	mov	r4, r0
  HAL::canvasClear();
 8004ae0:	f7ff fe96 	bl	8004810 <_ZN3HAL11canvasClearEv>

  currentMenu->render(camera->getPosition());
 8004ae4:	68a5      	ldr	r5, [r4, #8]
 8004ae6:	6861      	ldr	r1, [r4, #4]
 8004ae8:	682b      	ldr	r3, [r5, #0]
 8004aea:	a801      	add	r0, sp, #4
 8004aec:	68de      	ldr	r6, [r3, #12]
 8004aee:	f7fd fe1e 	bl	800272e <_ZN5astra6Camera11getPositionEv>
 8004af2:	4628      	mov	r0, r5
 8004af4:	a901      	add	r1, sp, #4
 8004af6:	47b0      	blx	r6
 8004af8:	a801      	add	r0, sp, #4
 8004afa:	f7fd f8d8 	bl	8001cae <_ZNSt12_Vector_baseIfSaIfEED1Ev>
  if (currentWidget != nullptr) currentWidget->render(camera->getPosition());
 8004afe:	68e5      	ldr	r5, [r4, #12]
 8004b00:	b15d      	cbz	r5, 8004b1a <_ZN5astra8Launcher6updateEv+0x3e>
 8004b02:	682b      	ldr	r3, [r5, #0]
 8004b04:	6861      	ldr	r1, [r4, #4]
 8004b06:	a801      	add	r0, sp, #4
 8004b08:	691e      	ldr	r6, [r3, #16]
 8004b0a:	f7fd fe10 	bl	800272e <_ZN5astra6Camera11getPositionEv>
 8004b0e:	4628      	mov	r0, r5
 8004b10:	a901      	add	r1, sp, #4
 8004b12:	47b0      	blx	r6
 8004b14:	a801      	add	r0, sp, #4
 8004b16:	f7fd f8ca 	bl	8001cae <_ZNSt12_Vector_baseIfSaIfEED1Ev>
  selector->render(camera->getPosition());
 8004b1a:	e9d4 5100 	ldrd	r5, r1, [r4]
 8004b1e:	a801      	add	r0, sp, #4
 8004b20:	f7fd fe05 	bl	800272e <_ZN5astra6Camera11getPositionEv>
 8004b24:	a901      	add	r1, sp, #4
 8004b26:	4628      	mov	r0, r5
 8004b28:	f7ff f878 	bl	8003c1c <_ZN5astra8Selector6renderESt6vectorIfSaIfEE>
 8004b2c:	a801      	add	r0, sp, #4
 8004b2e:	f7fd f8be 	bl	8001cae <_ZNSt12_Vector_baseIfSaIfEED1Ev>
  camera->update(currentMenu, selector);
 8004b32:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8004b36:	6822      	ldr	r2, [r4, #0]
 8004b38:	f7fd ff08 	bl	800294c <_ZN5astra6Camera6updateEPNS_4MenuEPNS_8SelectorE>

  HAL::canvasUpdate();
 8004b3c:	f7ff fe60 	bl	8004800 <_ZN3HAL12canvasUpdateEv>
}
 8004b40:	b004      	add	sp, #16
 8004b42:	bd70      	pop	{r4, r5, r6, pc}

08004b44 <_ZN5astra8Launcher4initEPNS_4MenuE>:
void Launcher::init(Menu *_rootPage) {
 8004b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b46:	4606      	mov	r6, r0
 8004b48:	b087      	sub	sp, #28
  currentMenu = _rootPage;
 8004b4a:	6081      	str	r1, [r0, #8]
  camera = new Camera(0, 0);
 8004b4c:	20ec      	movs	r0, #236	@ 0xec
void Launcher::init(Menu *_rootPage) {
 8004b4e:	460d      	mov	r5, r1
  camera = new Camera(0, 0);
 8004b50:	f004 f988 	bl	8008e64 <_Znwj>
 8004b54:	2200      	movs	r2, #0
 8004b56:	4604      	mov	r4, r0
 8004b58:	4611      	mov	r1, r2
 8004b5a:	f7fd fd19 	bl	8002590 <_ZN5astra6CameraC1Eff>
  _rootPage->childPosInit(camera->getPosition());
 8004b5e:	682b      	ldr	r3, [r5, #0]
 8004b60:	4621      	mov	r1, r4
 8004b62:	4668      	mov	r0, sp
  camera = new Camera(0, 0);
 8004b64:	6074      	str	r4, [r6, #4]
  _rootPage->childPosInit(camera->getPosition());
 8004b66:	685f      	ldr	r7, [r3, #4]
 8004b68:	f7fd fde1 	bl	800272e <_ZN5astra6Camera11getPositionEv>
 8004b6c:	4669      	mov	r1, sp
 8004b6e:	4628      	mov	r0, r5
 8004b70:	47b8      	blx	r7
 8004b72:	4668      	mov	r0, sp
 8004b74:	f7fd f89b 	bl	8001cae <_ZNSt12_Vector_baseIfSaIfEED1Ev>
  selector = new Selector();
 8004b78:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004b7c:	f004 f972 	bl	8008e64 <_Znwj>
 8004b80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b84:	2100      	movs	r1, #0
 8004b86:	4604      	mov	r4, r0
 8004b88:	f005 f9ef 	bl	8009f6a <memset>
struct config {
 8004b8c:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8004b90:	8023      	strh	r3, [r4, #0]
 8004b92:	4b43      	ldr	r3, [pc, #268]	@ (8004ca0 <_ZN5astra8Launcher4initEPNS_4MenuE+0x15c>)
 8004b94:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004b98:	6063      	str	r3, [r4, #4]
 8004b9a:	4b42      	ldr	r3, [pc, #264]	@ (8004ca4 <_ZN5astra8Launcher4initEPNS_4MenuE+0x160>)
 8004b9c:	4a42      	ldr	r2, [pc, #264]	@ (8004ca8 <_ZN5astra8Launcher4initEPNS_4MenuE+0x164>)
 8004b9e:	60a3      	str	r3, [r4, #8]
 8004ba0:	60e3      	str	r3, [r4, #12]
 8004ba2:	6163      	str	r3, [r4, #20]
 8004ba4:	61a3      	str	r3, [r4, #24]
 8004ba6:	6323      	str	r3, [r4, #48]	@ 0x30
 8004ba8:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 8004bac:	6122      	str	r2, [r4, #16]
 8004bae:	4a3f      	ldr	r2, [pc, #252]	@ (8004cac <_ZN5astra8Launcher4initEPNS_4MenuE+0x168>)
 8004bb0:	f04f 4083 	mov.w	r0, #1098907648	@ 0x41800000
 8004bb4:	61e2      	str	r2, [r4, #28]
 8004bb6:	4a3e      	ldr	r2, [pc, #248]	@ (8004cb0 <_ZN5astra8Launcher4initEPNS_4MenuE+0x16c>)
 8004bb8:	6363      	str	r3, [r4, #52]	@ 0x34
 8004bba:	6222      	str	r2, [r4, #32]
 8004bbc:	4a3d      	ldr	r2, [pc, #244]	@ (8004cb4 <_ZN5astra8Launcher4initEPNS_4MenuE+0x170>)
 8004bbe:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8004bc2:	6262      	str	r2, [r4, #36]	@ 0x24
 8004bc4:	4a3c      	ldr	r2, [pc, #240]	@ (8004cb8 <_ZN5astra8Launcher4initEPNS_4MenuE+0x174>)
 8004bc6:	64e1      	str	r1, [r4, #76]	@ 0x4c
 8004bc8:	62a2      	str	r2, [r4, #40]	@ 0x28
 8004bca:	4a3c      	ldr	r2, [pc, #240]	@ (8004cbc <_ZN5astra8Launcher4initEPNS_4MenuE+0x178>)
 8004bcc:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004bd0:	62e2      	str	r2, [r4, #44]	@ 0x2c
 8004bd2:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8004bd6:	f8df c0e8 	ldr.w	ip, [pc, #232]	@ 8004cc0 <_ZN5astra8Launcher4initEPNS_4MenuE+0x17c>
 8004bda:	4f3a      	ldr	r7, [pc, #232]	@ (8004cc4 <_ZN5astra8Launcher4initEPNS_4MenuE+0x180>)
 8004bdc:	f8c4 c058 	str.w	ip, [r4, #88]	@ 0x58
 8004be0:	f8c4 c05c 	str.w	ip, [r4, #92]	@ 0x5c
 8004be4:	f8df c0e0 	ldr.w	ip, [pc, #224]	@ 8004cc8 <_ZN5astra8Launcher4initEPNS_4MenuE+0x184>
 8004be8:	63e7      	str	r7, [r4, #60]	@ 0x3c
 8004bea:	f8c4 c068 	str.w	ip, [r4, #104]	@ 0x68
 8004bee:	f8df c0dc 	ldr.w	ip, [pc, #220]	@ 8004ccc <_ZN5astra8Launcher4initEPNS_4MenuE+0x188>
 8004bf2:	f8c4 7080 	str.w	r7, [r4, #128]	@ 0x80
 8004bf6:	f8c4 c070 	str.w	ip, [r4, #112]	@ 0x70
 8004bfa:	4f35      	ldr	r7, [pc, #212]	@ (8004cd0 <_ZN5astra8Launcher4initEPNS_4MenuE+0x18c>)
 8004bfc:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8004cd4 <_ZN5astra8Launcher4initEPNS_4MenuE+0x190>
 8004c00:	6462      	str	r2, [r4, #68]	@ 0x44
 8004c02:	6522      	str	r2, [r4, #80]	@ 0x50
 8004c04:	66e2      	str	r2, [r4, #108]	@ 0x6c
 8004c06:	f8c4 c078 	str.w	ip, [r4, #120]	@ 0x78
 8004c0a:	6423      	str	r3, [r4, #64]	@ 0x40
 8004c0c:	64a0      	str	r0, [r4, #72]	@ 0x48
 8004c0e:	6561      	str	r1, [r4, #84]	@ 0x54
 8004c10:	6623      	str	r3, [r4, #96]	@ 0x60
 8004c12:	6663      	str	r3, [r4, #100]	@ 0x64
 8004c14:	6763      	str	r3, [r4, #116]	@ 0x74
 8004c16:	67e1      	str	r1, [r4, #124]	@ 0x7c
 8004c18:	f8c4 7084 	str.w	r7, [r4, #132]	@ 0x84
 8004c1c:	f8c4 109c 	str.w	r1, [r4, #156]	@ 0x9c
 8004c20:	f8c4 10a4 	str.w	r1, [r4, #164]	@ 0xa4
 8004c24:	492c      	ldr	r1, [pc, #176]	@ (8004cd8 <_ZN5astra8Launcher4initEPNS_4MenuE+0x194>)
 8004c26:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8004c2a:	f8c4 10a8 	str.w	r1, [r4, #168]	@ 0xa8
 8004c2e:	2110      	movs	r1, #16
 8004c30:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
 8004c34:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
 8004c38:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8004c3c:	4b27      	ldr	r3, [pc, #156]	@ (8004cdc <_ZN5astra8Launcher4initEPNS_4MenuE+0x198>)
 8004c3e:	f884 10b0 	strb.w	r1, [r4, #176]	@ 0xb0
 8004c42:	f8c4 30cc 	str.w	r3, [r4, #204]	@ 0xcc
 8004c46:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004c4a:	4925      	ldr	r1, [pc, #148]	@ (8004ce0 <_ZN5astra8Launcher4initEPNS_4MenuE+0x19c>)
 8004c4c:	4f25      	ldr	r7, [pc, #148]	@ (8004ce4 <_ZN5astra8Launcher4initEPNS_4MenuE+0x1a0>)
 8004c4e:	f8c4 0094 	str.w	r0, [r4, #148]	@ 0x94
 8004c52:	f8c4 10b4 	str.w	r1, [r4, #180]	@ 0xb4
 8004c56:	4824      	ldr	r0, [pc, #144]	@ (8004ce8 <_ZN5astra8Launcher4initEPNS_4MenuE+0x1a4>)
 8004c58:	4924      	ldr	r1, [pc, #144]	@ (8004cec <_ZN5astra8Launcher4initEPNS_4MenuE+0x1a8>)
 8004c5a:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 8004c5e:	f8c4 20c8 	str.w	r2, [r4, #200]	@ 0xc8
 8004c62:	e9c4 112e 	strd	r1, r1, [r4, #184]	@ 0xb8
 8004c66:	f8c4 7088 	str.w	r7, [r4, #136]	@ 0x88
  selector->inject(_rootPage);
 8004c6a:	4629      	mov	r1, r5
 8004c6c:	f8c4 708c 	str.w	r7, [r4, #140]	@ 0x8c
 8004c70:	f8c4 00a0 	str.w	r0, [r4, #160]	@ 0xa0
 8004c74:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
  selector = new Selector();
 8004c78:	6034      	str	r4, [r6, #0]
  selector->inject(_rootPage);
 8004c7a:	4620      	mov	r0, r4
 8004c7c:	f7fe ffc2 	bl	8003c04 <_ZN5astra8Selector6injectEPNS_4MenuE>
  camera->init(_rootPage->getType());
 8004c80:	682b      	ldr	r3, [r5, #0]
 8004c82:	6874      	ldr	r4, [r6, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4629      	mov	r1, r5
 8004c88:	4668      	mov	r0, sp
 8004c8a:	4798      	blx	r3
 8004c8c:	4669      	mov	r1, sp
 8004c8e:	4620      	mov	r0, r4
 8004c90:	f7fd fca4 	bl	80025dc <_ZN5astra6Camera4initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
      { _M_dispose(); }
 8004c94:	4668      	mov	r0, sp
 8004c96:	f004 fbf9 	bl	800948c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
}
 8004c9a:	b007      	add	sp, #28
 8004c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	437f0000 	.word	0x437f0000
 8004ca4:	428c0000 	.word	0x428c0000
 8004ca8:	42700000 	.word	0x42700000
 8004cac:	425c0000 	.word	0x425c0000
 8004cb0:	41c80000 	.word	0x41c80000
 8004cb4:	41700000 	.word	0x41700000
 8004cb8:	42c80000 	.word	0x42c80000
 8004cbc:	42a00000 	.word	0x42a00000
 8004cc0:	41f00000 	.word	0x41f00000
 8004cc4:	40a00000 	.word	0x40a00000
 8004cc8:	40c00000 	.word	0x40c00000
 8004ccc:	41900000 	.word	0x41900000
 8004cd0:	40400000 	.word	0x40400000
 8004cd4:	41400000 	.word	0x41400000
 8004cd8:	41600000 	.word	0x41600000
 8004cdc:	41200000 	.word	0x41200000
 8004ce0:	0800b484 	.word	0x0800b484
 8004ce4:	42100000 	.word	0x42100000
 8004ce8:	42b40000 	.word	0x42b40000
 8004cec:	0800bcd7 	.word	0x0800bcd7

08004cf0 <_ZNSt6vectorIfSaIfEEaSERKS1_.isra.0>:
      if (std::__addressof(__x) != this)
 8004cf0:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
 8004cf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cf6:	4604      	mov	r4, r0
 8004cf8:	460d      	mov	r5, r1
      if (std::__addressof(__x) != this)
 8004cfa:	d022      	beq.n	8004d42 <_ZNSt6vectorIfSaIfEEaSERKS1_.isra.0+0x52>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004cfc:	e9d1 7800 	ldrd	r7, r8, [r1]
			 - this->_M_impl._M_start); }
 8004d00:	6802      	ldr	r2, [r0, #0]
 8004d02:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004d04:	eba8 0607 	sub.w	r6, r8, r7
			 - this->_M_impl._M_start); }
 8004d08:	1a9b      	subs	r3, r3, r2
	  if (__xlen > capacity())
 8004d0a:	429e      	cmp	r6, r3
 8004d0c:	d91b      	bls.n	8004d46 <_ZNSt6vectorIfSaIfEEaSERKS1_.isra.0+0x56>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8004d0e:	4b18      	ldr	r3, [pc, #96]	@ (8004d70 <_ZNSt6vectorIfSaIfEEaSERKS1_.isra.0+0x80>)
 8004d10:	429e      	cmp	r6, r3
 8004d12:	d901      	bls.n	8004d18 <_ZNSt6vectorIfSaIfEEaSERKS1_.isra.0+0x28>
	      std::__throw_bad_array_new_length();
 8004d14:	f004 fb7c 	bl	8009410 <_ZSt28__throw_bad_array_new_lengthv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8004d18:	4630      	mov	r0, r6
 8004d1a:	f004 f8a3 	bl	8008e64 <_Znwj>
			      _Category>::__copy_m(__first, __last, __result);
 8004d1e:	4641      	mov	r1, r8
 8004d20:	4602      	mov	r2, r0
 8004d22:	4605      	mov	r5, r0
 8004d24:	4638      	mov	r0, r7
 8004d26:	f7fd fca9 	bl	800267c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004d2a:	6820      	ldr	r0, [r4, #0]
	if (__p)
 8004d2c:	b118      	cbz	r0, 8004d36 <_ZNSt6vectorIfSaIfEEaSERKS1_.isra.0+0x46>
			    - this->_M_impl._M_start);
 8004d2e:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8004d30:	1a09      	subs	r1, r1, r0
 8004d32:	f004 f831 	bl	8008d98 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
 8004d36:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8004d38:	4435      	add	r5, r6
 8004d3a:	60a5      	str	r5, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8004d3c:	6823      	ldr	r3, [r4, #0]
 8004d3e:	4433      	add	r3, r6
 8004d40:	6063      	str	r3, [r4, #4]
    }
 8004d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004d46:	6843      	ldr	r3, [r0, #4]
 8004d48:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
 8004d4a:	429e      	cmp	r6, r3
 8004d4c:	d804      	bhi.n	8004d58 <_ZNSt6vectorIfSaIfEEaSERKS1_.isra.0+0x68>
 8004d4e:	4641      	mov	r1, r8
 8004d50:	4638      	mov	r0, r7
 8004d52:	f7fd fc93 	bl	800267c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
      return std::uninitialized_copy(__first, __last, __result);
 8004d56:	e7f1      	b.n	8004d3c <_ZNSt6vectorIfSaIfEEaSERKS1_.isra.0+0x4c>
 8004d58:	18f9      	adds	r1, r7, r3
 8004d5a:	4638      	mov	r0, r7
 8004d5c:	f7fd fc8e 	bl	800267c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8004d60:	e9d4 0200 	ldrd	r0, r2, [r4]
 8004d64:	e9d5 3100 	ldrd	r3, r1, [r5]
 8004d68:	1a10      	subs	r0, r2, r0
 8004d6a:	4418      	add	r0, r3
 8004d6c:	e7f1      	b.n	8004d52 <_ZNSt6vectorIfSaIfEEaSERKS1_.isra.0+0x62>
 8004d6e:	bf00      	nop
 8004d70:	7ffffffc 	.word	0x7ffffffc

08004d74 <_ZN5astra8Launcher4openEv>:
bool Launcher::open() {
 8004d74:	b570      	push	{r4, r5, r6, lr}
 8004d76:	4604      	mov	r4, r0
 8004d78:	b086      	sub	sp, #24
  if (currentMenu->getNextMenu() == nullptr) {
 8004d7a:	6880      	ldr	r0, [r0, #8]
 8004d7c:	f7fe fab2 	bl	80032e4 <_ZNK5astra4Menu11getNextMenuEv>
 8004d80:	b978      	cbnz	r0, 8004da2 <_ZN5astra8Launcher4openEv+0x2e>
    notice("Unreferenced Page!", 600);
 8004d82:	4668      	mov	r0, sp
 8004d84:	4921      	ldr	r1, [pc, #132]	@ (8004e0c <_ZN5astra8Launcher4openEv+0x98>)
 8004d86:	f7ff fd13 	bl	80047b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 8004d8a:	4620      	mov	r0, r4
 8004d8c:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8004d90:	4669      	mov	r1, sp
 8004d92:	f7ff fd4d 	bl	8004830 <_ZN5astra8Launcher6noticeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 8004d96:	4668      	mov	r0, sp
 8004d98:	f004 fb78 	bl	800948c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
    return false;
 8004d9c:	2000      	movs	r0, #0
}
 8004d9e:	b006      	add	sp, #24
 8004da0:	bd70      	pop	{r4, r5, r6, pc}
  if (currentMenu->getNextMenu()->getItemNum() == 0) return true;
 8004da2:	68a0      	ldr	r0, [r4, #8]
 8004da4:	f7fe fa9e 	bl	80032e4 <_ZNK5astra4Menu11getNextMenuEv>
 8004da8:	f7fe fa94 	bl	80032d4 <_ZNK5astra4Menu10getItemNumEv>
 8004dac:	b358      	cbz	r0, 8004e06 <_ZN5astra8Launcher4openEv+0x92>
  currentMenu->rememberCameraPos(camera->getPositionTrg());
 8004dae:	e9d4 1501 	ldrd	r1, r5, [r4, #4]
 8004db2:	4668      	mov	r0, sp
 8004db4:	f7fd fca8 	bl	8002708 <_ZN5astra6Camera14getPositionTrgEv>
    cameraPosMemory = _camera;
 8004db8:	4669      	mov	r1, sp
 8004dba:	f105 00d8 	add.w	r0, r5, #216	@ 0xd8
 8004dbe:	f7ff ff97 	bl	8004cf0 <_ZNSt6vectorIfSaIfEEaSERKS1_.isra.0>
    cameraPosMemoryFlag = true;
 8004dc2:	2301      	movs	r3, #1
      }
 8004dc4:	4668      	mov	r0, sp
 8004dc6:	f885 30e4 	strb.w	r3, [r5, #228]	@ 0xe4
 8004dca:	f7fc ff70 	bl	8001cae <_ZNSt12_Vector_baseIfSaIfEED1Ev>
  currentMenu->deInit();  //先析构（退场动画）再挪动指针
 8004dce:	68a0      	ldr	r0, [r4, #8]
 8004dd0:	f7fe fa92 	bl	80032f8 <_ZN5astra4Menu6deInitEv>
  currentMenu = currentMenu->getNextMenu();
 8004dd4:	68a0      	ldr	r0, [r4, #8]
 8004dd6:	f7fe fa85 	bl	80032e4 <_ZNK5astra4Menu11getNextMenuEv>
  currentMenu->forePosInit();
 8004dda:	6803      	ldr	r3, [r0, #0]
  currentMenu = currentMenu->getNextMenu();
 8004ddc:	60a0      	str	r0, [r4, #8]
  currentMenu->forePosInit();
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	4798      	blx	r3
  currentMenu->childPosInit(camera->getPosition());
 8004de2:	68a5      	ldr	r5, [r4, #8]
 8004de4:	4668      	mov	r0, sp
 8004de6:	682b      	ldr	r3, [r5, #0]
 8004de8:	6861      	ldr	r1, [r4, #4]
 8004dea:	685e      	ldr	r6, [r3, #4]
 8004dec:	f7fd fc9f 	bl	800272e <_ZN5astra6Camera11getPositionEv>
 8004df0:	4669      	mov	r1, sp
 8004df2:	4628      	mov	r0, r5
 8004df4:	47b0      	blx	r6
 8004df6:	4668      	mov	r0, sp
 8004df8:	f7fc ff59 	bl	8001cae <_ZNSt12_Vector_baseIfSaIfEED1Ev>
  selector->inject(currentMenu);
 8004dfc:	68a1      	ldr	r1, [r4, #8]
 8004dfe:	6820      	ldr	r0, [r4, #0]
 8004e00:	f7fe ff00 	bl	8003c04 <_ZN5astra8Selector6injectEPNS_4MenuE>
  return false;
 8004e04:	e7ca      	b.n	8004d9c <_ZN5astra8Launcher4openEv+0x28>
  if (currentMenu->getNextMenu()->getItemNum() == 0) return true;
 8004e06:	2001      	movs	r0, #1
 8004e08:	e7c9      	b.n	8004d9e <_ZN5astra8Launcher4openEv+0x2a>
 8004e0a:	bf00      	nop
 8004e0c:	0800b398 	.word	0x0800b398

08004e10 <_ZN5astra8Launcher5closeEv>:
void Launcher::close() {
 8004e10:	b570      	push	{r4, r5, r6, lr}
 8004e12:	4604      	mov	r4, r0
 8004e14:	b086      	sub	sp, #24
  if (currentMenu->getPreview() == nullptr) return;
 8004e16:	6880      	ldr	r0, [r0, #8]
 8004e18:	f7fe fa6b 	bl	80032f2 <_ZNK5astra4Menu10getPreviewEv>
 8004e1c:	b190      	cbz	r0, 8004e44 <_ZN5astra8Launcher5closeEv+0x34>
  if (currentMenu->getPreview()->getItemNum() == 0) {
 8004e1e:	68a0      	ldr	r0, [r4, #8]
 8004e20:	f7fe fa67 	bl	80032f2 <_ZNK5astra4Menu10getPreviewEv>
 8004e24:	f7fe fa56 	bl	80032d4 <_ZNK5astra4Menu10getItemNumEv>
 8004e28:	b970      	cbnz	r0, 8004e48 <_ZN5astra8Launcher5closeEv+0x38>
    notice("Empty Page!", 600);
 8004e2a:	4668      	mov	r0, sp
 8004e2c:	491d      	ldr	r1, [pc, #116]	@ (8004ea4 <_ZN5astra8Launcher5closeEv+0x94>)
 8004e2e:	f7ff fcbf 	bl	80047b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 8004e32:	4620      	mov	r0, r4
 8004e34:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8004e38:	4669      	mov	r1, sp
 8004e3a:	f7ff fcf9 	bl	8004830 <_ZN5astra8Launcher6noticeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 8004e3e:	4668      	mov	r0, sp
 8004e40:	f004 fb24 	bl	800948c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
}
 8004e44:	b006      	add	sp, #24
 8004e46:	bd70      	pop	{r4, r5, r6, pc}
  currentMenu->rememberCameraPos(camera->getPositionTrg());
 8004e48:	e9d4 1501 	ldrd	r1, r5, [r4, #4]
 8004e4c:	4668      	mov	r0, sp
 8004e4e:	f7fd fc5b 	bl	8002708 <_ZN5astra6Camera14getPositionTrgEv>
    cameraPosMemory = _camera;
 8004e52:	4669      	mov	r1, sp
 8004e54:	f105 00d8 	add.w	r0, r5, #216	@ 0xd8
 8004e58:	f7ff ff4a 	bl	8004cf0 <_ZNSt6vectorIfSaIfEEaSERKS1_.isra.0>
    cameraPosMemoryFlag = true;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	4668      	mov	r0, sp
 8004e60:	f885 30e4 	strb.w	r3, [r5, #228]	@ 0xe4
 8004e64:	f7fc ff23 	bl	8001cae <_ZNSt12_Vector_baseIfSaIfEED1Ev>
  currentMenu->deInit();  //先析构（退场动画）再挪动指针
 8004e68:	68a0      	ldr	r0, [r4, #8]
 8004e6a:	f7fe fa45 	bl	80032f8 <_ZN5astra4Menu6deInitEv>
  currentMenu = currentMenu->getPreview();
 8004e6e:	68a0      	ldr	r0, [r4, #8]
 8004e70:	f7fe fa3f 	bl	80032f2 <_ZNK5astra4Menu10getPreviewEv>
  currentMenu->forePosInit();
 8004e74:	6803      	ldr	r3, [r0, #0]
  currentMenu = currentMenu->getPreview();
 8004e76:	60a0      	str	r0, [r4, #8]
  currentMenu->forePosInit();
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	4798      	blx	r3
  currentMenu->childPosInit(camera->getPosition());
 8004e7c:	68a5      	ldr	r5, [r4, #8]
 8004e7e:	4668      	mov	r0, sp
 8004e80:	682b      	ldr	r3, [r5, #0]
 8004e82:	6861      	ldr	r1, [r4, #4]
 8004e84:	685e      	ldr	r6, [r3, #4]
 8004e86:	f7fd fc52 	bl	800272e <_ZN5astra6Camera11getPositionEv>
 8004e8a:	4669      	mov	r1, sp
 8004e8c:	4628      	mov	r0, r5
 8004e8e:	47b0      	blx	r6
 8004e90:	4668      	mov	r0, sp
 8004e92:	f7fc ff0c 	bl	8001cae <_ZNSt12_Vector_baseIfSaIfEED1Ev>
  selector->inject(currentMenu);
 8004e96:	68a1      	ldr	r1, [r4, #8]
 8004e98:	6820      	ldr	r0, [r4, #0]
}
 8004e9a:	b006      	add	sp, #24
 8004e9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  selector->inject(currentMenu);
 8004ea0:	f7fe beb0 	b.w	8003c04 <_ZN5astra8Selector6injectEPNS_4MenuE>
 8004ea4:	0800b3ab 	.word	0x0800b3ab

08004ea8 <_ZN3HAL5_beepEf>:
   * @brief buzzer.
   * */
public:
  static void beep(float _freq) { get()->_beep(_freq); }

  virtual void _beep(float _freq) {}
 8004ea8:	4770      	bx	lr

08004eaa <_ZN3HAL9_beepStopEv>:

  static void beepStop() { get()->_beepStop(); }

  virtual void _beepStop() {}
 8004eaa:	4770      	bx	lr

08004eac <_ZN3HAL11_setBeepVolEh>:

  static void setBeepVol(unsigned char _vol) { get()->_setBeepVol(_vol); }

  virtual void _setBeepVol(unsigned char _vol) {}
 8004eac:	4770      	bx	lr

08004eae <_ZN3HAL13_updateConfigEv>:

  static void setSystemConfig(sys::config _cfg) { get()->config = _cfg; }

  static void updateConfig() { get()->_updateConfig(); }

  virtual void _updateConfig() {}
 8004eae:	4770      	bx	lr

08004eb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>:
      basic_string(const basic_string& __str)
 8004eb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 8004eb2:	f100 0308 	add.w	r3, r0, #8
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 8004eb6:	6003      	str	r3, [r0, #0]
      { return _M_string_length; }
 8004eb8:	e9d1 5300 	ldrd	r5, r3, [r1]
	if (__dnew > size_type(_S_local_capacity))
 8004ebc:	2b0f      	cmp	r3, #15
      basic_string(const basic_string& __str)
 8004ebe:	4604      	mov	r4, r0
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
 8004ec0:	eb05 0603 	add.w	r6, r5, r3
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8004ec4:	9301      	str	r3, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
 8004ec6:	d906      	bls.n	8004ed6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x26>
	    _M_data(_M_create(__dnew, size_type(0)));
 8004ec8:	2200      	movs	r2, #0
 8004eca:	a901      	add	r1, sp, #4
 8004ecc:	f004 fabc 	bl	8009448 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
 8004ed0:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
 8004ed2:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
 8004ed4:	60a3      	str	r3, [r4, #8]
	this->_S_copy_chars(_M_data(), __beg, __end);
 8004ed6:	4632      	mov	r2, r6
 8004ed8:	4629      	mov	r1, r5
 8004eda:	6820      	ldr	r0, [r4, #0]
 8004edc:	f004 fb47 	bl	800956e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8004ee0:	2100      	movs	r1, #0
	_M_set_length(__dnew);
 8004ee2:	9b01      	ldr	r3, [sp, #4]
 8004ee4:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
 8004ee6:	6063      	str	r3, [r4, #4]
 8004ee8:	54d1      	strb	r1, [r2, r3]
      }
 8004eea:	b002      	add	sp, #8
 8004eec:	bd70      	pop	{r4, r5, r6, pc}
	...

08004ef0 <_ZN3HAL4typeB5cxx11Ev>:
  virtual std::string type() { return "Base"; }
 8004ef0:	b510      	push	{r4, lr}
 8004ef2:	4604      	mov	r4, r0
	this->_S_copy_chars(_M_data(), __beg, __end);
 8004ef4:	4a06      	ldr	r2, [pc, #24]	@ (8004f10 <_ZN3HAL4typeB5cxx11Ev+0x20>)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 8004ef6:	3008      	adds	r0, #8
	: allocator_type(__a), _M_p(__dat) { }
 8004ef8:	6020      	str	r0, [r4, #0]
 8004efa:	1f11      	subs	r1, r2, #4
 8004efc:	f004 fb3c 	bl	8009578 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
      { _M_string_length = __length; }
 8004f00:	2304      	movs	r3, #4
 8004f02:	2200      	movs	r2, #0
 8004f04:	6063      	str	r3, [r4, #4]
      { return _M_dataplus._M_p; }
 8004f06:	6823      	ldr	r3, [r4, #0]
 8004f08:	4620      	mov	r0, r4
 8004f0a:	711a      	strb	r2, [r3, #4]
 8004f0c:	bd10      	pop	{r4, pc}
 8004f0e:	bf00      	nop
 8004f10:	0800b128 	.word	0x0800b128

08004f14 <__tcf_0>:
 *
 * @param _msg message want to print. 要输出的信息
 * @note cannot execute within a loop. 不能在循环内执行
 */
void HAL::_printInfo(std::string _msg) {
  static std::vector<std::string> _infoCache = {};
 8004f14:	b570      	push	{r4, r5, r6, lr}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004f16:	4c09      	ldr	r4, [pc, #36]	@ (8004f3c <__tcf_0+0x28>)
 8004f18:	e9d4 5600 	ldrd	r5, r6, [r4]
	  for (; __first != __last; ++__first)
 8004f1c:	42ae      	cmp	r6, r5
 8004f1e:	d107      	bne.n	8004f30 <__tcf_0+0x1c>
	_M_deallocate(_M_impl._M_start,
 8004f20:	6820      	ldr	r0, [r4, #0]
	if (__p)
 8004f22:	b150      	cbz	r0, 8004f3a <__tcf_0+0x26>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8004f24:	68a1      	ldr	r1, [r4, #8]
 8004f26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004f2a:	1a09      	subs	r1, r1, r0
 8004f2c:	f003 bf34 	b.w	8008d98 <_ZdlPvj>
      { _M_dispose(); }
 8004f30:	4628      	mov	r0, r5
 8004f32:	f004 faab 	bl	800948c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8004f36:	3518      	adds	r5, #24
 8004f38:	e7f0      	b.n	8004f1c <__tcf_0+0x8>
 8004f3a:	bd70      	pop	{r4, r5, r6, pc}
 8004f3c:	200001c8 	.word	0x200001c8

08004f40 <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 8004f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f44:	4604      	mov	r4, r0
 8004f46:	460e      	mov	r6, r1
      { _M_string_length = __length; }
 8004f48:	2700      	movs	r7, #0
 8004f4a:	f102 0508 	add.w	r5, r2, #8
      for (; __first != __last; ++__first, (void)++__cur)
 8004f4e:	42b4      	cmp	r4, r6
 8004f50:	f1a5 0008 	sub.w	r0, r5, #8
 8004f54:	d101      	bne.n	8004f5a <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0x1a>
    }
 8004f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (__str._M_is_local())
 8004f5a:	4620      	mov	r0, r4
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 8004f5c:	f845 5c08 	str.w	r5, [r5, #-8]
	if (__str._M_is_local())
 8004f60:	f004 fa6c 	bl	800943c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
 8004f64:	f104 0808 	add.w	r8, r4, #8
      { return _M_string_length; }
 8004f68:	6862      	ldr	r2, [r4, #4]
	if (__str._M_is_local())
 8004f6a:	b188      	cbz	r0, 8004f90 <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0x50>
	if (__n == 0)
 8004f6c:	3201      	adds	r2, #1
 8004f6e:	d003      	beq.n	8004f78 <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0x38>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
 8004f70:	4641      	mov	r1, r8
 8004f72:	4628      	mov	r0, r5
 8004f74:	f005 f8d1 	bl	800a11a <memcpy>
      { _M_string_length = __length; }
 8004f78:	6863      	ldr	r3, [r4, #4]
      { _M_dispose(); }
 8004f7a:	4620      	mov	r0, r4
      { _M_string_length = __length; }
 8004f7c:	f845 3c04 	str.w	r3, [r5, #-4]
 8004f80:	e9c4 8700 	strd	r8, r7, [r4]
	__c1 = __c2;
 8004f84:	7227      	strb	r7, [r4, #8]
      { _M_dispose(); }
 8004f86:	f004 fa81 	bl	800948c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      for (; __first != __last; ++__first, (void)++__cur)
 8004f8a:	3418      	adds	r4, #24
 8004f8c:	3518      	adds	r5, #24
 8004f8e:	e7de      	b.n	8004f4e <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0xe>
      { _M_dataplus._M_p = __p; }
 8004f90:	6823      	ldr	r3, [r4, #0]
 8004f92:	f845 3c08 	str.w	r3, [r5, #-8]
      { _M_allocated_capacity = __capacity; }
 8004f96:	68a3      	ldr	r3, [r4, #8]
 8004f98:	602b      	str	r3, [r5, #0]
 8004f9a:	e7ed      	b.n	8004f78 <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0x38>

08004f9c <_ZN3HAL6getKeyEN3key8keyIndexE>:
  return hal;
 8004f9c:	4b03      	ldr	r3, [pc, #12]	@ (8004fac <_ZN3HAL6getKeyEN3key8keyIndexE+0x10>)
  static bool getKey(key::KEY_INDEX _keyIndex) { return get()->_getKey(_keyIndex); }
 8004f9e:	4601      	mov	r1, r0
 8004fa0:	6818      	ldr	r0, [r3, #0]
 8004fa2:	6802      	ldr	r2, [r0, #0]
 8004fa4:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 8004fa8:	4710      	bx	r2
 8004faa:	bf00      	nop
 8004fac:	200001d4 	.word	0x200001d4

08004fb0 <_ZN3HAL10_getAnyKeyEv>:
  }
  canvasUpdate();
  setDrawType(1); //回归实色显示
}

bool HAL::_getAnyKey() {
 8004fb0:	b510      	push	{r4, lr}
  for (int i = 0; i < key::KEY_NUM; i++) {
 8004fb2:	2400      	movs	r4, #0
    if (getKey(static_cast<key::KEY_INDEX>(i))) return true;
 8004fb4:	b2e0      	uxtb	r0, r4
 8004fb6:	f7ff fff1 	bl	8004f9c <_ZN3HAL6getKeyEN3key8keyIndexE>
 8004fba:	b910      	cbnz	r0, 8004fc2 <_ZN3HAL10_getAnyKeyEv+0x12>
  for (int i = 0; i < key::KEY_NUM; i++) {
 8004fbc:	3401      	adds	r4, #1
 8004fbe:	2c04      	cmp	r4, #4
 8004fc0:	d1f8      	bne.n	8004fb4 <_ZN3HAL10_getAnyKeyEv+0x4>
  }
  return false;
}
 8004fc2:	bd10      	pop	{r4, pc}

08004fc4 <_ZN3HAL9getAnyKeyEv>:
  return hal;
 8004fc4:	4b02      	ldr	r3, [pc, #8]	@ (8004fd0 <_ZN3HAL9getAnyKeyEv+0xc>)
 8004fc6:	6818      	ldr	r0, [r3, #0]
  static bool getAnyKey() { return get()->_getAnyKey(); }
 8004fc8:	6803      	ldr	r3, [r0, #0]
 8004fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fce:	4718      	bx	r3
 8004fd0:	200001d4 	.word	0x200001d4

08004fd4 <_ZN3HAL8_keyScanEv>:
 * @brief key scanner default. 默认按键扫描函数
 *
 * @note run per 5 ms.
 * @return key::keyValue
 */
void HAL::_keyScan() {
 8004fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  static unsigned char _timeCnt = 0;
  static bool _lock = false;
  static key::KEY_FILTER _keyFilter = key::CHECKING;
  switch (_keyFilter) {
 8004fd6:	4d37      	ldr	r5, [pc, #220]	@ (80050b4 <_ZN3HAL8_keyScanEv+0xe0>)
void HAL::_keyScan() {
 8004fd8:	4604      	mov	r4, r0
  switch (_keyFilter) {
 8004fda:	782f      	ldrb	r7, [r5, #0]
 8004fdc:	2f04      	cmp	r7, #4
 8004fde:	d825      	bhi.n	800502c <_ZN3HAL8_keyScanEv+0x58>
 8004fe0:	4e35      	ldr	r6, [pc, #212]	@ (80050b8 <_ZN3HAL8_keyScanEv+0xe4>)
 8004fe2:	b337      	cbz	r7, 8005032 <_ZN3HAL8_keyScanEv+0x5e>
    case key::KEY_0_CONFIRM:
    case key::KEY_1_CONFIRM:
    case key::KEY_2_CONFIRM:
    case key::KEY_3_CONFIRM:
      //filter
      if (getAnyKey()) {
 8004fe4:	f7ff ffee 	bl	8004fc4 <_ZN3HAL9getAnyKeyEv>
        if (!_lock) _lock = true;
 8004fe8:	7833      	ldrb	r3, [r6, #0]
      if (getAnyKey()) {
 8004fea:	2800      	cmp	r0, #0
 8004fec:	d041      	beq.n	8005072 <_ZN3HAL8_keyScanEv+0x9e>
        if (!_lock) _lock = true;
 8004fee:	b90b      	cbnz	r3, 8004ff4 <_ZN3HAL8_keyScanEv+0x20>
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	7033      	strb	r3, [r6, #0]
        _timeCnt++;
 8004ff4:	4f31      	ldr	r7, [pc, #196]	@ (80050bc <_ZN3HAL8_keyScanEv+0xe8>)
 8004ff6:	783b      	ldrb	r3, [r7, #0]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	b2db      	uxtb	r3, r3

        //timer
        if (_timeCnt > 100) {
 8004ffc:	2b64      	cmp	r3, #100	@ 0x64
        _timeCnt++;
 8004ffe:	703b      	strb	r3, [r7, #0]
        if (_timeCnt > 100) {
 8005000:	d916      	bls.n	8005030 <_ZN3HAL8_keyScanEv+0x5c>
          keyFlag = key::KEY_PRESSED;
 8005002:	2301      	movs	r3, #1
          //long press 1s
          if (getKey(key::KEY_0)) {
 8005004:	2000      	movs	r0, #0
          keyFlag = key::KEY_PRESSED;
 8005006:	7423      	strb	r3, [r4, #16]
          if (getKey(key::KEY_0)) {
 8005008:	f7ff ffc8 	bl	8004f9c <_ZN3HAL6getKeyEN3key8keyIndexE>
 800500c:	b108      	cbz	r0, 8005012 <_ZN3HAL8_keyScanEv+0x3e>
            key[key::KEY_0] = key::PRESS;
 800500e:	2302      	movs	r3, #2
 8005010:	81a3      	strh	r3, [r4, #12]
            key[key::KEY_1] = key::INVALID;
          }
          if (getKey(key::KEY_1)) {
 8005012:	2001      	movs	r0, #1
 8005014:	f7ff ffc2 	bl	8004f9c <_ZN3HAL6getKeyEN3key8keyIndexE>
 8005018:	b110      	cbz	r0, 8005020 <_ZN3HAL8_keyScanEv+0x4c>
            key[key::KEY_1] = key::PRESS;
            key[key::KEY_0] = key::INVALID;
 800501a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800501e:	81a3      	strh	r3, [r4, #12]
          }
          _timeCnt = 0;
 8005020:	2300      	movs	r3, #0
 8005022:	703b      	strb	r3, [r7, #0]
          _lock = false;
 8005024:	7033      	strb	r3, [r6, #0]
	    key[key::KEY_1] = key::INVALID;
	    key[key::KEY_2] = key::INVALID;
	    key[key::KEY_3] = key::CLICK;
	  }
          keyFlag = key::KEY_PRESSED;
          _keyFilter = key::RELEASED;
 8005026:	2305      	movs	r3, #5
 8005028:	702b      	strb	r3, [r5, #0]
 800502a:	e001      	b.n	8005030 <_ZN3HAL8_keyScanEv+0x5c>
  switch (_keyFilter) {
 800502c:	2f05      	cmp	r7, #5
 800502e:	d03a      	beq.n	80050a6 <_ZN3HAL8_keyScanEv+0xd2>
      if (!getAnyKey()) _keyFilter = key::CHECKING;
      break;

    default: break;
  }
}
 8005030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (getAnyKey()) {
 8005032:	f7ff ffc7 	bl	8004fc4 <_ZN3HAL9getAnyKeyEv>
 8005036:	b1b8      	cbz	r0, 8005068 <_ZN3HAL8_keyScanEv+0x94>
        if (getKey(key::KEY_0)) _keyFilter = key::KEY_0_CONFIRM;
 8005038:	4638      	mov	r0, r7
 800503a:	f7ff ffaf 	bl	8004f9c <_ZN3HAL6getKeyEN3key8keyIndexE>
 800503e:	b108      	cbz	r0, 8005044 <_ZN3HAL8_keyScanEv+0x70>
 8005040:	2301      	movs	r3, #1
 8005042:	702b      	strb	r3, [r5, #0]
        if (getKey(key::KEY_1)) _keyFilter = key::KEY_1_CONFIRM;
 8005044:	2001      	movs	r0, #1
 8005046:	f7ff ffa9 	bl	8004f9c <_ZN3HAL6getKeyEN3key8keyIndexE>
 800504a:	b108      	cbz	r0, 8005050 <_ZN3HAL8_keyScanEv+0x7c>
 800504c:	2302      	movs	r3, #2
 800504e:	702b      	strb	r3, [r5, #0]
        if (getKey(key::KEY_2)) _keyFilter = key::KEY_2_CONFIRM;
 8005050:	2002      	movs	r0, #2
 8005052:	f7ff ffa3 	bl	8004f9c <_ZN3HAL6getKeyEN3key8keyIndexE>
 8005056:	b108      	cbz	r0, 800505c <_ZN3HAL8_keyScanEv+0x88>
 8005058:	2303      	movs	r3, #3
 800505a:	702b      	strb	r3, [r5, #0]
        if (getKey(key::KEY_3)) _keyFilter = key::KEY_3_CONFIRM;
 800505c:	2003      	movs	r0, #3
 800505e:	f7ff ff9d 	bl	8004f9c <_ZN3HAL6getKeyEN3key8keyIndexE>
 8005062:	b108      	cbz	r0, 8005068 <_ZN3HAL8_keyScanEv+0x94>
 8005064:	2304      	movs	r3, #4
 8005066:	702b      	strb	r3, [r5, #0]
      _timeCnt = 0;
 8005068:	2300      	movs	r3, #0
 800506a:	4a14      	ldr	r2, [pc, #80]	@ (80050bc <_ZN3HAL8_keyScanEv+0xe8>)
      _lock = false;
 800506c:	7033      	strb	r3, [r6, #0]
      _timeCnt = 0;
 800506e:	7013      	strb	r3, [r2, #0]
      break;
 8005070:	e7de      	b.n	8005030 <_ZN3HAL8_keyScanEv+0x5c>
        if (_lock) {
 8005072:	b1ab      	cbz	r3, 80050a0 <_ZN3HAL8_keyScanEv+0xcc>
          if (_keyFilter == key::KEY_0_CONFIRM) {
 8005074:	782b      	ldrb	r3, [r5, #0]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d103      	bne.n	8005082 <_ZN3HAL8_keyScanEv+0xae>
	    key[key::KEY_0] = key::INVALID;
 800507a:	60e3      	str	r3, [r4, #12]
          keyFlag = key::KEY_PRESSED;
 800507c:	2301      	movs	r3, #1
 800507e:	7423      	strb	r3, [r4, #16]
 8005080:	e7d1      	b.n	8005026 <_ZN3HAL8_keyScanEv+0x52>
          if (_keyFilter == key::KEY_1_CONFIRM) {
 8005082:	2b02      	cmp	r3, #2
 8005084:	d102      	bne.n	800508c <_ZN3HAL8_keyScanEv+0xb8>
	    key[key::KEY_0] = key::INVALID;
 8005086:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800508a:	e7f6      	b.n	800507a <_ZN3HAL8_keyScanEv+0xa6>
          if (_keyFilter == key::KEY_2_CONFIRM) {
 800508c:	2b03      	cmp	r3, #3
 800508e:	d102      	bne.n	8005096 <_ZN3HAL8_keyScanEv+0xc2>
	    key[key::KEY_0] = key::INVALID;
 8005090:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005094:	e7f1      	b.n	800507a <_ZN3HAL8_keyScanEv+0xa6>
          if (_keyFilter == key::KEY_3_CONFIRM) {
 8005096:	2b04      	cmp	r3, #4
 8005098:	d1f0      	bne.n	800507c <_ZN3HAL8_keyScanEv+0xa8>
	    key[key::KEY_0] = key::INVALID;
 800509a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800509e:	e7ec      	b.n	800507a <_ZN3HAL8_keyScanEv+0xa6>
          _keyFilter = key::CHECKING;
 80050a0:	702b      	strb	r3, [r5, #0]
          key[key::KEY_0] = key::INVALID;
 80050a2:	60e3      	str	r3, [r4, #12]
 80050a4:	e7c4      	b.n	8005030 <_ZN3HAL8_keyScanEv+0x5c>
      if (!getAnyKey()) _keyFilter = key::CHECKING;
 80050a6:	f7ff ff8d 	bl	8004fc4 <_ZN3HAL9getAnyKeyEv>
 80050aa:	2800      	cmp	r0, #0
 80050ac:	d1c0      	bne.n	8005030 <_ZN3HAL8_keyScanEv+0x5c>
 80050ae:	7028      	strb	r0, [r5, #0]
}
 80050b0:	e7be      	b.n	8005030 <_ZN3HAL8_keyScanEv+0x5c>
 80050b2:	bf00      	nop
 80050b4:	200001b1 	.word	0x200001b1
 80050b8:	200001b2 	.word	0x200001b2
 80050bc:	200001b3 	.word	0x200001b3

080050c0 <_ZN3HAL8_keyTestEv>:

/**
 * @brief default key tester. 默认按键测试函数
 */
void HAL::_keyTest() {
 80050c0:	b510      	push	{r4, lr}
 80050c2:	4604      	mov	r4, r0
  if (getAnyKey()) {
 80050c4:	f7ff ff7e 	bl	8004fc4 <_ZN3HAL9getAnyKeyEv>
 80050c8:	b108      	cbz	r0, 80050ce <_ZN3HAL8_keyTestEv+0xe>
        //do something when key pressed
        if (i == 0) break;
        if (i == 1) break;
      }
    }
    memset(key, key::INVALID, sizeof(key));
 80050ca:	2300      	movs	r3, #0
 80050cc:	60e3      	str	r3, [r4, #12]
  }
}
 80050ce:	bd10      	pop	{r4, pc}

080050d0 <_ZN3HAL3getEv>:
}
 80050d0:	4b01      	ldr	r3, [pc, #4]	@ (80050d8 <_ZN3HAL3getEv+0x8>)
 80050d2:	6818      	ldr	r0, [r3, #0]
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	200001d4 	.word	0x200001d4

080050dc <_ZN3HAL6injectEPS_>:
bool HAL::inject(HAL *_hal) {
 80050dc:	b510      	push	{r4, lr}
  if (_hal == nullptr) {
 80050de:	4604      	mov	r4, r0
 80050e0:	b128      	cbz	r0, 80050ee <_ZN3HAL6injectEPS_+0x12>
  _hal->init();
 80050e2:	6803      	ldr	r3, [r0, #0]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	4798      	blx	r3
  return true;
 80050e8:	2001      	movs	r0, #1
  hal = _hal;
 80050ea:	4b01      	ldr	r3, [pc, #4]	@ (80050f0 <_ZN3HAL6injectEPS_+0x14>)
 80050ec:	601c      	str	r4, [r3, #0]
}
 80050ee:	bd10      	pop	{r4, pc}
 80050f0:	200001d4 	.word	0x200001d4

080050f4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80050f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80050f8:	e9d0 6800 	ldrd	r6, r8, [r0]
 80050fc:	4b20      	ldr	r3, [pc, #128]	@ (8005180 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x8c>)
 80050fe:	eba8 0406 	sub.w	r4, r8, r6
 8005102:	10e4      	asrs	r4, r4, #3
 8005104:	435c      	muls	r4, r3
	if (max_size() - size() < __n)
 8005106:	4b1f      	ldr	r3, [pc, #124]	@ (8005184 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x90>)
 8005108:	4605      	mov	r5, r0
 800510a:	429c      	cmp	r4, r3
 800510c:	460f      	mov	r7, r1
 800510e:	4691      	mov	r9, r2
 8005110:	d102      	bne.n	8005118 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
 8005112:	481d      	ldr	r0, [pc, #116]	@ (8005188 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x94>)
 8005114:	f004 f982 	bl	800941c <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 8005118:	45b0      	cmp	r8, r6
 800511a:	bf14      	ite	ne
 800511c:	4622      	movne	r2, r4
 800511e:	2201      	moveq	r2, #1
 8005120:	18a4      	adds	r4, r4, r2
    { return __lhs.base() - __rhs.base(); }
 8005122:	eba1 0b06 	sub.w	fp, r1, r6
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8005126:	d227      	bcs.n	8005178 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x84>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8005128:	b344      	cbz	r4, 800517c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x88>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800512a:	429c      	cmp	r4, r3
 800512c:	bf28      	it	cs
 800512e:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8005130:	2018      	movs	r0, #24
 8005132:	4360      	muls	r0, r4
 8005134:	f003 fe96 	bl	8008e64 <_Znwj>
 8005138:	4682      	mov	sl, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800513a:	4649      	mov	r1, r9
 800513c:	eb0a 000b 	add.w	r0, sl, fp
 8005140:	f7ff feb6 	bl	8004eb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 8005144:	4639      	mov	r1, r7
 8005146:	4652      	mov	r2, sl
 8005148:	4630      	mov	r0, r6
 800514a:	f7ff fef9 	bl	8004f40 <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0>
 800514e:	4641      	mov	r1, r8
 8005150:	f100 0218 	add.w	r2, r0, #24
 8005154:	4638      	mov	r0, r7
 8005156:	f7ff fef3 	bl	8004f40 <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0>
 800515a:	4607      	mov	r7, r0
	if (__p)
 800515c:	b126      	cbz	r6, 8005168 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x74>
		    this->_M_impl._M_end_of_storage - __old_start);
 800515e:	68a9      	ldr	r1, [r5, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8005160:	4630      	mov	r0, r6
 8005162:	1b89      	subs	r1, r1, r6
 8005164:	f003 fe18 	bl	8008d98 <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8005168:	2318      	movs	r3, #24
 800516a:	fb03 a304 	mla	r3, r3, r4, sl
      this->_M_impl._M_finish = __new_finish;
 800516e:	e9c5 a700 	strd	sl, r7, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8005172:	60ab      	str	r3, [r5, #8]
    }
 8005174:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005178:	461c      	mov	r4, r3
 800517a:	e7d9      	b.n	8005130 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800517c:	46a2      	mov	sl, r4
 800517e:	e7dc      	b.n	800513a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x46>
 8005180:	aaaaaaab 	.word	0xaaaaaaab
 8005184:	05555555 	.word	0x05555555
 8005188:	0800b0ae 	.word	0x0800b0ae

0800518c <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
void HAL::_printInfo(std::string _msg) {
 800518c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  static std::vector<std::string> _infoCache = {};
 8005190:	4f4f      	ldr	r7, [pc, #316]	@ (80052d0 <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x144>)
void HAL::_printInfo(std::string _msg) {
 8005192:	460e      	mov	r6, r1
  static std::vector<std::string> _infoCache = {};
 8005194:	683d      	ldr	r5, [r7, #0]
 8005196:	4c4f      	ldr	r4, [pc, #316]	@ (80052d4 <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x148>)
 8005198:	f015 0501 	ands.w	r5, r5, #1
 800519c:	f3bf 8f5b 	dmb	ish
 80051a0:	d10c      	bne.n	80051bc <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x30>
 80051a2:	4638      	mov	r0, r7
 80051a4:	f003 fe4f 	bl	8008e46 <__cxa_guard_acquire>
 80051a8:	b140      	cbz	r0, 80051bc <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x30>
 80051aa:	484b      	ldr	r0, [pc, #300]	@ (80052d8 <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x14c>)
	: _M_start(), _M_finish(), _M_end_of_storage()
 80051ac:	e9c4 5500 	strd	r5, r5, [r4]
 80051b0:	60a5      	str	r5, [r4, #8]
 80051b2:	f004 fc7a 	bl	8009aaa <atexit>
 80051b6:	4638      	mov	r0, r7
 80051b8:	f003 fe51 	bl	8008e5e <__cxa_guard_release>
  static const unsigned char _max = getSystemConfig().screenHeight / getFontHeight();
 80051bc:	4d47      	ldr	r5, [pc, #284]	@ (80052dc <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x150>)
 80051be:	f8df 9120 	ldr.w	r9, [pc, #288]	@ 80052e0 <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x154>
 80051c2:	682b      	ldr	r3, [r5, #0]
 80051c4:	f3bf 8f5b 	dmb	ish
 80051c8:	f013 0f01 	tst.w	r3, #1
 80051cc:	d10f      	bne.n	80051ee <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x62>
 80051ce:	4628      	mov	r0, r5
 80051d0:	f003 fe39 	bl	8008e46 <__cxa_guard_acquire>
 80051d4:	b158      	cbz	r0, 80051ee <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x62>
 80051d6:	4b43      	ldr	r3, [pc, #268]	@ (80052e4 <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x158>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	795f      	ldrb	r7, [r3, #5]
 80051dc:	f7ff fb20 	bl	8004820 <_ZN3HAL13getFontHeightEv>
 80051e0:	fbb7 f7f0 	udiv	r7, r7, r0
 80051e4:	4628      	mov	r0, r5
 80051e6:	f889 7000 	strb.w	r7, [r9]
 80051ea:	f003 fe38 	bl	8008e5e <__cxa_guard_release>
  static const unsigned char _fontHeight = getFontHeight();
 80051ee:	4d3e      	ldr	r5, [pc, #248]	@ (80052e8 <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x15c>)
 80051f0:	682b      	ldr	r3, [r5, #0]
 80051f2:	f3bf 8f5b 	dmb	ish
 80051f6:	07db      	lsls	r3, r3, #31
 80051f8:	d40a      	bmi.n	8005210 <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x84>
 80051fa:	4628      	mov	r0, r5
 80051fc:	f003 fe23 	bl	8008e46 <__cxa_guard_acquire>
 8005200:	b130      	cbz	r0, 8005210 <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x84>
 8005202:	f7ff fb0d 	bl	8004820 <_ZN3HAL13getFontHeightEv>
 8005206:	4b39      	ldr	r3, [pc, #228]	@ (80052ec <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x160>)
 8005208:	7018      	strb	r0, [r3, #0]
 800520a:	4628      	mov	r0, r5
 800520c:	f003 fe27 	bl	8008e5e <__cxa_guard_release>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8005210:	e9d4 5800 	ldrd	r5, r8, [r4]
 8005214:	4936      	ldr	r1, [pc, #216]	@ (80052f0 <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x164>)
 8005216:	eba8 0305 	sub.w	r3, r8, r5
 800521a:	10db      	asrs	r3, r3, #3
 800521c:	434b      	muls	r3, r1
  if (_infoCache.size() >= _max) _infoCache.clear();
 800521e:	f899 2000 	ldrb.w	r2, [r9]
 8005222:	429a      	cmp	r2, r3
 8005224:	d809      	bhi.n	800523a <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xae>
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8005226:	4545      	cmp	r5, r8
 8005228:	d007      	beq.n	800523a <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xae>
 800522a:	462f      	mov	r7, r5
      { _M_dispose(); }
 800522c:	4638      	mov	r0, r7
 800522e:	3718      	adds	r7, #24
 8005230:	f004 f92c 	bl	800948c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8005234:	45b8      	cmp	r8, r7
 8005236:	d1f9      	bne.n	800522c <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa0>
	    this->_M_impl._M_finish = __pos;
 8005238:	6065      	str	r5, [r4, #4]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800523a:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
 800523e:	4298      	cmp	r0, r3
 8005240:	d02c      	beq.n	800529c <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x110>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8005242:	4631      	mov	r1, r6
 8005244:	f7ff fe34 	bl	8004eb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
	    ++this->_M_impl._M_finish;
 8005248:	6863      	ldr	r3, [r4, #4]
 800524a:	3318      	adds	r3, #24
 800524c:	6063      	str	r3, [r4, #4]
  return hal;
 800524e:	4f25      	ldr	r7, [pc, #148]	@ (80052e4 <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x158>)
  for (unsigned char i = 0; i < _infoCache.size(); i++) {
 8005250:	2600      	movs	r6, #0
  return hal;
 8005252:	6838      	ldr	r0, [r7, #0]
  static void drawEnglish(float _x, float _y, const std::string &_text) { get()->_drawEnglish(_x, _y, _text); }
 8005254:	f04f 0a00 	mov.w	sl, #0
  static void canvasClear() { get()->_canvasClear(); }
 8005258:	6803      	ldr	r3, [r0, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800525a:	f8df 8094 	ldr.w	r8, [pc, #148]	@ 80052f0 <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x164>
 800525e:	6a1b      	ldr	r3, [r3, #32]
 8005260:	4798      	blx	r3
  setDrawType(2); //反色显示
 8005262:	2002      	movs	r0, #2
 8005264:	f7fc fce9 	bl	8001c3a <_ZN3HAL11setDrawTypeEh>
    drawEnglish(0, _fontHeight + i * (1 + _fontHeight), _infoCache[i]);
 8005268:	f8df 9080 	ldr.w	r9, [pc, #128]	@ 80052ec <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x160>
 800526c:	6823      	ldr	r3, [r4, #0]
 800526e:	6862      	ldr	r2, [r4, #4]
 8005270:	b2f1      	uxtb	r1, r6
 8005272:	1ad2      	subs	r2, r2, r3
 8005274:	10d2      	asrs	r2, r2, #3
 8005276:	fb08 f202 	mul.w	r2, r8, r2
  return hal;
 800527a:	683d      	ldr	r5, [r7, #0]
  for (unsigned char i = 0; i < _infoCache.size(); i++) {
 800527c:	428a      	cmp	r2, r1
  static void drawEnglish(float _x, float _y, const std::string &_text) { get()->_drawEnglish(_x, _y, _text); }
 800527e:	f8d5 b000 	ldr.w	fp, [r5]
 8005282:	f106 0601 	add.w	r6, r6, #1
 8005286:	d80f      	bhi.n	80052a8 <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11c>
  static void canvasUpdate() { get()->_canvasUpdate(); }
 8005288:	4628      	mov	r0, r5
 800528a:	f8db 301c 	ldr.w	r3, [fp, #28]
 800528e:	4798      	blx	r3
  setDrawType(1); //回归实色显示
 8005290:	2001      	movs	r0, #1
 8005292:	f7fc fcd2 	bl	8001c3a <_ZN3HAL11setDrawTypeEh>
}
 8005296:	b003      	add	sp, #12
 8005298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  _M_realloc_insert(end(), __x);
 800529c:	4601      	mov	r1, r0
 800529e:	4632      	mov	r2, r6
 80052a0:	480c      	ldr	r0, [pc, #48]	@ (80052d4 <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x148>)
 80052a2:	f7ff ff27 	bl	80050f4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>
 80052a6:	e7d2      	b.n	800524e <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc2>
	return *(this->_M_impl._M_start + __n);
 80052a8:	2018      	movs	r0, #24
    drawEnglish(0, _fontHeight + i * (1 + _fontHeight), _infoCache[i]);
 80052aa:	f899 2000 	ldrb.w	r2, [r9]
 80052ae:	fb00 3301 	mla	r3, r0, r1, r3
 80052b2:	fb02 1101 	mla	r1, r2, r1, r1
 80052b6:	1888      	adds	r0, r1, r2
 80052b8:	9301      	str	r3, [sp, #4]
 80052ba:	f7fb fbf3 	bl	8000aa4 <__aeabi_i2f>
  static void drawEnglish(float _x, float _y, const std::string &_text) { get()->_drawEnglish(_x, _y, _text); }
 80052be:	4651      	mov	r1, sl
 80052c0:	4602      	mov	r2, r0
 80052c2:	f8db b038 	ldr.w	fp, [fp, #56]	@ 0x38
 80052c6:	4628      	mov	r0, r5
 80052c8:	9b01      	ldr	r3, [sp, #4]
 80052ca:	47d8      	blx	fp
  for (unsigned char i = 0; i < _infoCache.size(); i++) {
 80052cc:	e7ce      	b.n	800526c <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe0>
 80052ce:	bf00      	nop
 80052d0:	200001c4 	.word	0x200001c4
 80052d4:	200001c8 	.word	0x200001c8
 80052d8:	08004f15 	.word	0x08004f15
 80052dc:	200001bc 	.word	0x200001bc
 80052e0:	200001c0 	.word	0x200001c0
 80052e4:	200001d4 	.word	0x200001d4
 80052e8:	200001b4 	.word	0x200001b4
 80052ec:	200001b8 	.word	0x200001b8
 80052f0:	aaaaaaab 	.word	0xaaaaaaab

080052f4 <_ZN8MixinHAL7_getKeyEN3key8keyIndexE>:
#include "main.h"
#include "components.h"

bool MixinHAL::_getKey(key::KEY_INDEX _keyIndex) {
 80052f4:	b508      	push	{r3, lr}
 80052f6:	2903      	cmp	r1, #3
 80052f8:	d813      	bhi.n	8005322 <_ZN8MixinHAL7_getKeyEN3key8keyIndexE+0x2e>
 80052fa:	e8df f001 	tbb	[pc, r1]
 80052fe:	0a02      	.short	0x0a02
 8005300:	0f0c      	.short	0x0f0c
  if (_keyIndex == key::KEY_0) return !HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin);
 8005302:	2110      	movs	r1, #16
  if (_keyIndex == key::KEY_1) return !HAL_GPIO_ReadPin(KEY2_GPIO_Port, KEY2_Pin);
 8005304:	4808      	ldr	r0, [pc, #32]	@ (8005328 <_ZN8MixinHAL7_getKeyEN3key8keyIndexE+0x34>)
  if (_keyIndex == key::KEY_2) return !HAL_GPIO_ReadPin(KEY3_GPIO_Port, KEY3_Pin);
  if (_keyIndex == key::KEY_3) return !HAL_GPIO_ReadPin(KEY4_GPIO_Port, KEY4_Pin);
 8005306:	f002 fcef 	bl	8007ce8 <HAL_GPIO_ReadPin>
 800530a:	fab0 f080 	clz	r0, r0
 800530e:	0940      	lsrs	r0, r0, #5
  return false;
}
 8005310:	bd08      	pop	{r3, pc}
  if (_keyIndex == key::KEY_1) return !HAL_GPIO_ReadPin(KEY2_GPIO_Port, KEY2_Pin);
 8005312:	2140      	movs	r1, #64	@ 0x40
 8005314:	e7f6      	b.n	8005304 <_ZN8MixinHAL7_getKeyEN3key8keyIndexE+0x10>
  if (_keyIndex == key::KEY_2) return !HAL_GPIO_ReadPin(KEY3_GPIO_Port, KEY3_Pin);
 8005316:	2101      	movs	r1, #1
  if (_keyIndex == key::KEY_3) return !HAL_GPIO_ReadPin(KEY4_GPIO_Port, KEY4_Pin);
 8005318:	4804      	ldr	r0, [pc, #16]	@ (800532c <_ZN8MixinHAL7_getKeyEN3key8keyIndexE+0x38>)
 800531a:	e7f4      	b.n	8005306 <_ZN8MixinHAL7_getKeyEN3key8keyIndexE+0x12>
 800531c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005320:	e7fa      	b.n	8005318 <_ZN8MixinHAL7_getKeyEN3key8keyIndexE+0x24>
bool MixinHAL::_getKey(key::KEY_INDEX _keyIndex) {
 8005322:	2000      	movs	r0, #0
 8005324:	e7f4      	b.n	8005310 <_ZN8MixinHAL7_getKeyEN3key8keyIndexE+0x1c>
 8005326:	bf00      	nop
 8005328:	40010800 	.word	0x40010800
 800532c:	40010c00 	.word	0x40010c00

08005330 <_ZN8MixinHAL16_getCanvasBufferEv>:
  u8g2_SetFont(&canvasBuffer, u8g2_font_myfont); /*字库选择*/
}

void *MixinHAL::_getCanvasBuffer() {
  return u8g2_GetBufferPtr(&canvasBuffer);
}
 8005330:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8005332:	4770      	bx	lr

08005334 <_ZN8MixinHAL20_getBufferTileHeightEv>:

unsigned char MixinHAL::_getBufferTileHeight() {
  return u8g2_GetBufferTileHeight(&canvasBuffer);
}
 8005334:	f890 004c 	ldrb.w	r0, [r0, #76]	@ 0x4c
 8005338:	4770      	bx	lr

0800533a <_ZN8MixinHAL19_getBufferTileWidthEv>:

unsigned char MixinHAL::_getBufferTileWidth() {
  return u8g2_GetBufferTileWidth(&canvasBuffer);
 800533a:	6943      	ldr	r3, [r0, #20]
}
 800533c:	7c18      	ldrb	r0, [r3, #16]
 800533e:	4770      	bx	lr

08005340 <_ZN8MixinHAL14_getFontHeightEv>:
  return u8g2_GetUTF8Width(&canvasBuffer, _text.c_str());
}

unsigned char MixinHAL::_getFontHeight() {
  return u8g2_GetMaxCharHeight(&canvasBuffer);
}
 8005340:	f890 0092 	ldrb.w	r0, [r0, #146]	@ 0x92
 8005344:	4770      	bx	lr

08005346 <_ZN8MixinHALD1Ev>:
#ifndef ASTRA_CORE_SRC_HAL_HAL_DREAMCORE_HAL_DREAMCORE_H_
#define ASTRA_CORE_SRC_HAL_HAL_DREAMCORE_HAL_DREAMCORE_H_
#include "../hal/base.h"
#include "../lib/u8g2/u8g2.h"

class MixinHAL : public HAL {
 8005346:	4770      	bx	lr

08005348 <_ZN8MixinHAL26_u8x8_byte_hw_spi_callbackEP11u8x8_structhhPv>:
unsigned char MixinHAL::_u8x8_byte_hw_spi_callback(u8x8_t *_u8x8, unsigned char _msg, unsigned char _argInt, void *_argPtr) { //NOLINT
 8005348:	b538      	push	{r3, r4, r5, lr}
 800534a:	4604      	mov	r4, r0
 800534c:	4608      	mov	r0, r1
  switch (_msg) {
 800534e:	3814      	subs	r0, #20
unsigned char MixinHAL::_u8x8_byte_hw_spi_callback(u8x8_t *_u8x8, unsigned char _msg, unsigned char _argInt, void *_argPtr) { //NOLINT
 8005350:	4619      	mov	r1, r3
  switch (_msg) {
 8005352:	280c      	cmp	r0, #12
 8005354:	d834      	bhi.n	80053c0 <_ZN8MixinHAL26_u8x8_byte_hw_spi_callbackEP11u8x8_structhhPv+0x78>
 8005356:	e8df f000 	tbb	[pc, r0]
 800535a:	330f      	.short	0x330f
 800535c:	25170733 	.word	0x25170733
 8005360:	33333333 	.word	0x33333333
 8005364:	3333      	.short	0x3333
 8005366:	11          	.byte	0x11
 8005367:	00          	.byte	0x00
      HAL_SPI_Transmit_DMA(&hspi2, (unsigned char *) _argPtr, _argInt);
 8005368:	4816      	ldr	r0, [pc, #88]	@ (80053c4 <_ZN8MixinHAL26_u8x8_byte_hw_spi_callbackEP11u8x8_structhhPv+0x7c>)
 800536a:	f003 f9db 	bl	8008724 <HAL_SPI_Transmit_DMA>
      while (hspi2.TxXferCount);//DMA
 800536e:	4a15      	ldr	r2, [pc, #84]	@ (80053c4 <_ZN8MixinHAL26_u8x8_byte_hw_spi_callbackEP11u8x8_structhhPv+0x7c>)
 8005370:	8ed3      	ldrh	r3, [r2, #54]	@ 0x36
 8005372:	b29b      	uxth	r3, r3
 8005374:	2b00      	cmp	r3, #0
 8005376:	d1fb      	bne.n	8005370 <_ZN8MixinHAL26_u8x8_byte_hw_spi_callbackEP11u8x8_structhhPv+0x28>
  return 1;
 8005378:	2001      	movs	r0, #1
}
 800537a:	bd38      	pop	{r3, r4, r5, pc}
      HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, static_cast<GPIO_PinState>(_argInt));
 800537c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005380:	4811      	ldr	r0, [pc, #68]	@ (80053c8 <_ZN8MixinHAL26_u8x8_byte_hw_spi_callbackEP11u8x8_structhhPv+0x80>)
 8005382:	f002 fcb7 	bl	8007cf4 <HAL_GPIO_WritePin>
      break;
 8005386:	e7f7      	b.n	8005378 <_ZN8MixinHAL26_u8x8_byte_hw_spi_callbackEP11u8x8_structhhPv+0x30>
      u8x8_gpio_SetCS(_u8x8, _u8x8->display_info->chip_enable_level);
 8005388:	6823      	ldr	r3, [r4, #0]
 800538a:	4620      	mov	r0, r4
 800538c:	781a      	ldrb	r2, [r3, #0]
 800538e:	2149      	movs	r1, #73	@ 0x49
 8005390:	f001 fd69 	bl	8006e66 <u8x8_gpio_call>
      _u8x8->gpio_and_delay_cb(_u8x8, U8X8_MSG_DELAY_NANO, _u8x8->display_info->post_chip_enable_wait_ns, nullptr);
 8005394:	6822      	ldr	r2, [r4, #0]
 8005396:	2300      	movs	r3, #0
 8005398:	212c      	movs	r1, #44	@ 0x2c
 800539a:	4620      	mov	r0, r4
 800539c:	6965      	ldr	r5, [r4, #20]
 800539e:	7892      	ldrb	r2, [r2, #2]
 80053a0:	47a8      	blx	r5
      break;
 80053a2:	e7e9      	b.n	8005378 <_ZN8MixinHAL26_u8x8_byte_hw_spi_callbackEP11u8x8_structhhPv+0x30>
                               _u8x8->display_info->pre_chip_disable_wait_ns,
 80053a4:	6822      	ldr	r2, [r4, #0]
      _u8x8->gpio_and_delay_cb(_u8x8,
 80053a6:	2300      	movs	r3, #0
 80053a8:	212c      	movs	r1, #44	@ 0x2c
 80053aa:	4620      	mov	r0, r4
 80053ac:	6965      	ldr	r5, [r4, #20]
 80053ae:	78d2      	ldrb	r2, [r2, #3]
 80053b0:	47a8      	blx	r5
      u8x8_gpio_SetCS(_u8x8, _u8x8->display_info->chip_disable_level);
 80053b2:	6823      	ldr	r3, [r4, #0]
 80053b4:	2149      	movs	r1, #73	@ 0x49
 80053b6:	4620      	mov	r0, r4
 80053b8:	785a      	ldrb	r2, [r3, #1]
 80053ba:	f001 fd54 	bl	8006e66 <u8x8_gpio_call>
      break;
 80053be:	e7db      	b.n	8005378 <_ZN8MixinHAL26_u8x8_byte_hw_spi_callbackEP11u8x8_structhhPv+0x30>
  switch (_msg) {
 80053c0:	2000      	movs	r0, #0
 80053c2:	e7da      	b.n	800537a <_ZN8MixinHAL26_u8x8_byte_hw_spi_callbackEP11u8x8_structhhPv+0x32>
 80053c4:	20000668 	.word	0x20000668
 80053c8:	40010800 	.word	0x40010800

080053cc <_ZN8MixinHAL12_canvasClearEv>:
  u8g2_ClearBuffer(&canvasBuffer);
 80053cc:	3014      	adds	r0, #20
 80053ce:	f000 bd9b 	b.w	8005f08 <u8g2_ClearBuffer>

080053d2 <_ZN8MixinHAL8_setFontEPKh>:
void MixinHAL::_setFont(const unsigned char *_font) {
 80053d2:	b538      	push	{r3, r4, r5, lr}
 80053d4:	460d      	mov	r5, r1
  u8g2_SetFontMode(&canvasBuffer, 1); /*字体模式选择*/
 80053d6:	f100 0414 	add.w	r4, r0, #20
 80053da:	4620      	mov	r0, r4
 80053dc:	2101      	movs	r1, #1
 80053de:	f001 f912 	bl	8006606 <u8g2_SetFontMode>
  u8g2_SetFontDirection(&canvasBuffer, 0); /*字体方向选择*/
 80053e2:	4620      	mov	r0, r4
 80053e4:	2100      	movs	r1, #0
 80053e6:	f001 f9cd 	bl	8006784 <u8g2_SetFontDirection>
  u8g2_SetFont(&canvasBuffer, _font);
 80053ea:	4629      	mov	r1, r5
 80053ec:	4620      	mov	r0, r4
}
 80053ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  u8g2_SetFont(&canvasBuffer, _font);
 80053f2:	f001 b9b1 	b.w	8006758 <u8g2_SetFont>

080053f6 <_ZN8MixinHAL13_canvasUpdateEv>:
  u8g2_SendBuffer(&canvasBuffer);
 80053f6:	3014      	adds	r0, #20
 80053f8:	f000 bd90 	b.w	8005f1c <u8g2_SendBuffer>

080053fc <_ZN8MixinHAL13_getFontWidthERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
unsigned char MixinHAL::_getFontWidth(std::string &_text) {
 80053fc:	b508      	push	{r3, lr}
  return u8g2_GetUTF8Width(&canvasBuffer, _text.c_str());
 80053fe:	6809      	ldr	r1, [r1, #0]
 8005400:	3014      	adds	r0, #20
 8005402:	f001 f9b9 	bl	8006778 <u8g2_GetUTF8Width>
}
 8005406:	b2c0      	uxtb	r0, r0
 8005408:	bd08      	pop	{r3, pc}

0800540a <_ZN8MixinHAL12_setDrawTypeEh>:

void MixinHAL::_setDrawType(unsigned char _type) {
  u8g2_SetDrawColor(&canvasBuffer, _type);
 800540a:	3014      	adds	r0, #20
 800540c:	f001 ba56 	b.w	80068bc <u8g2_SetDrawColor>

08005410 <_ZN8MixinHAL10_drawPixelEff>:
}

void MixinHAL::_drawPixel(float _x, float _y) {
 8005410:	b570      	push	{r4, r5, r6, lr}
 8005412:	4604      	mov	r4, r0
  { return __builtin_roundf(__x); }
 8005414:	4608      	mov	r0, r1
 8005416:	4615      	mov	r5, r2
 8005418:	f004 fb1c 	bl	8009a54 <roundf>
 800541c:	4606      	mov	r6, r0
 800541e:	4628      	mov	r0, r5
 8005420:	f004 fb18 	bl	8009a54 <roundf>
  u8g2_DrawPixel(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y));
 8005424:	f7fb fd58 	bl	8000ed8 <__aeabi_f2iz>
 8005428:	b285      	uxth	r5, r0
 800542a:	4630      	mov	r0, r6
 800542c:	f7fb fd54 	bl	8000ed8 <__aeabi_f2iz>
 8005430:	462a      	mov	r2, r5
 8005432:	b281      	uxth	r1, r0
 8005434:	f104 0014 	add.w	r0, r4, #20
}
 8005438:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  u8g2_DrawPixel(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y));
 800543c:	f001 ba26 	b.w	800688c <u8g2_DrawPixel>

08005440 <_ZN8MixinHAL16_drawVDottedLineEfff>:

void MixinHAL::_drawChinese(float _x, float _y, const std::string &_text) {
  u8g2_DrawUTF8(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y), _text.c_str());
}

void MixinHAL::_drawVDottedLine(float _x, float _y, float _h) {
 8005440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005444:	4605      	mov	r5, r0
 8005446:	4618      	mov	r0, r3
 8005448:	460f      	mov	r7, r1
 800544a:	4690      	mov	r8, r2
 800544c:	f004 fb02 	bl	8009a54 <roundf>
  for (unsigned char i = 0; i < (unsigned char)std::round(_h); i++) {
 8005450:	f7fb fd68 	bl	8000f24 <__aeabi_f2uiz>
 8005454:	2400      	movs	r4, #0
 8005456:	fa5f fa80 	uxtb.w	sl, r0
    if (i % 8 == 0 | (i - 1) % 8 == 0 | (i - 2) % 8 == 0) continue;
    u8g2_DrawPixel(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y) + i);
 800545a:	3514      	adds	r5, #20
 800545c:	b2e2      	uxtb	r2, r4
  for (unsigned char i = 0; i < (unsigned char)std::round(_h); i++) {
 800545e:	4592      	cmp	sl, r2
 8005460:	d801      	bhi.n	8005466 <_ZN8MixinHAL16_drawVDottedLineEfff+0x26>
  }
}
 8005462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (i % 8 == 0 | (i - 1) % 8 == 0 | (i - 2) % 8 == 0) continue;
 8005466:	1e63      	subs	r3, r4, #1
 8005468:	f013 0f07 	tst.w	r3, #7
 800546c:	bf0c      	ite	eq
 800546e:	2301      	moveq	r3, #1
 8005470:	2300      	movne	r3, #0
 8005472:	f012 0f07 	tst.w	r2, #7
 8005476:	bf08      	it	eq
 8005478:	f043 0301 	orreq.w	r3, r3, #1
 800547c:	b9ab      	cbnz	r3, 80054aa <_ZN8MixinHAL16_drawVDottedLineEfff+0x6a>
 800547e:	1ea3      	subs	r3, r4, #2
 8005480:	075b      	lsls	r3, r3, #29
 8005482:	d012      	beq.n	80054aa <_ZN8MixinHAL16_drawVDottedLineEfff+0x6a>
 8005484:	4638      	mov	r0, r7
 8005486:	f004 fae5 	bl	8009a54 <roundf>
 800548a:	4681      	mov	r9, r0
 800548c:	4640      	mov	r0, r8
 800548e:	f004 fae1 	bl	8009a54 <roundf>
    u8g2_DrawPixel(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y) + i);
 8005492:	f7fb fd21 	bl	8000ed8 <__aeabi_f2iz>
 8005496:	1906      	adds	r6, r0, r4
 8005498:	4648      	mov	r0, r9
 800549a:	f7fb fd1d 	bl	8000ed8 <__aeabi_f2iz>
 800549e:	b2b6      	uxth	r6, r6
 80054a0:	b281      	uxth	r1, r0
 80054a2:	4632      	mov	r2, r6
 80054a4:	4628      	mov	r0, r5
 80054a6:	f001 f9f1 	bl	800688c <u8g2_DrawPixel>
  for (unsigned char i = 0; i < (unsigned char)std::round(_h); i++) {
 80054aa:	3401      	adds	r4, #1
 80054ac:	e7d6      	b.n	800545c <_ZN8MixinHAL16_drawVDottedLineEfff+0x1c>

080054ae <_ZN8MixinHAL16_drawHDottedLineEfff>:

void MixinHAL::_drawHDottedLine(float _x, float _y, float _l) {
 80054ae:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054b2:	460f      	mov	r7, r1
 80054b4:	4690      	mov	r8, r2
 80054b6:	461d      	mov	r5, r3
  for (unsigned char i = 0; i < _l; i++) {
 80054b8:	2600      	movs	r6, #0
    if (i % 8 == 0 | (i - 1) % 8 == 0 | (i - 2) % 8 == 0) continue;
    u8g2_DrawPixel(&canvasBuffer, (int16_t)std::round(_x) + i, (int16_t)std::round(_y));
 80054ba:	f100 0914 	add.w	r9, r0, #20
 80054be:	b2f4      	uxtb	r4, r6
  for (unsigned char i = 0; i < _l; i++) {
 80054c0:	4620      	mov	r0, r4
 80054c2:	f7fb faef 	bl	8000aa4 <__aeabi_i2f>
 80054c6:	4629      	mov	r1, r5
 80054c8:	f7fb fcde 	bl	8000e88 <__aeabi_fcmplt>
 80054cc:	b908      	cbnz	r0, 80054d2 <_ZN8MixinHAL16_drawHDottedLineEfff+0x24>
  }
}
 80054ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (i % 8 == 0 | (i - 1) % 8 == 0 | (i - 2) % 8 == 0) continue;
 80054d2:	1e63      	subs	r3, r4, #1
 80054d4:	f013 0f07 	tst.w	r3, #7
 80054d8:	bf0c      	ite	eq
 80054da:	2301      	moveq	r3, #1
 80054dc:	2300      	movne	r3, #0
 80054de:	1ea2      	subs	r2, r4, #2
 80054e0:	f012 0f07 	tst.w	r2, #7
 80054e4:	bf08      	it	eq
 80054e6:	f043 0301 	orreq.w	r3, r3, #1
 80054ea:	b9ab      	cbnz	r3, 8005518 <_ZN8MixinHAL16_drawHDottedLineEfff+0x6a>
 80054ec:	0763      	lsls	r3, r4, #29
 80054ee:	d013      	beq.n	8005518 <_ZN8MixinHAL16_drawHDottedLineEfff+0x6a>
 80054f0:	4638      	mov	r0, r7
 80054f2:	f004 faaf 	bl	8009a54 <roundf>
 80054f6:	4683      	mov	fp, r0
 80054f8:	4640      	mov	r0, r8
 80054fa:	f004 faab 	bl	8009a54 <roundf>
    u8g2_DrawPixel(&canvasBuffer, (int16_t)std::round(_x) + i, (int16_t)std::round(_y));
 80054fe:	f7fb fceb 	bl	8000ed8 <__aeabi_f2iz>
 8005502:	fa1f fa80 	uxth.w	sl, r0
 8005506:	4658      	mov	r0, fp
 8005508:	f7fb fce6 	bl	8000ed8 <__aeabi_f2iz>
 800550c:	1821      	adds	r1, r4, r0
 800550e:	4652      	mov	r2, sl
 8005510:	4648      	mov	r0, r9
 8005512:	b289      	uxth	r1, r1
 8005514:	f001 f9ba 	bl	800688c <u8g2_DrawPixel>
  for (unsigned char i = 0; i < _l; i++) {
 8005518:	3601      	adds	r6, #1
 800551a:	e7d0      	b.n	80054be <_ZN8MixinHAL16_drawHDottedLineEfff+0x10>

0800551c <_ZN8MixinHAL12_drawEnglishEffRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
void MixinHAL::_drawEnglish(float _x, float _y, const std::string &_text) {
 800551c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005520:	4604      	mov	r4, r0
 8005522:	4608      	mov	r0, r1
 8005524:	4615      	mov	r5, r2
 8005526:	461e      	mov	r6, r3
 8005528:	f004 fa94 	bl	8009a54 <roundf>
 800552c:	4607      	mov	r7, r0
 800552e:	4628      	mov	r0, r5
 8005530:	f004 fa90 	bl	8009a54 <roundf>
  u8g2_DrawStr(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y), _text.c_str());
 8005534:	f7fb fcd0 	bl	8000ed8 <__aeabi_f2iz>
 8005538:	b285      	uxth	r5, r0
 800553a:	4638      	mov	r0, r7
 800553c:	f7fb fccc 	bl	8000ed8 <__aeabi_f2iz>
 8005540:	462a      	mov	r2, r5
 8005542:	6833      	ldr	r3, [r6, #0]
 8005544:	b281      	uxth	r1, r0
 8005546:	f104 0014 	add.w	r0, r4, #20
}
 800554a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  u8g2_DrawStr(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y), _text.c_str());
 800554e:	f001 b8c1 	b.w	80066d4 <u8g2_DrawStr>

08005552 <_ZN8MixinHAL12_drawChineseEffRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
void MixinHAL::_drawChinese(float _x, float _y, const std::string &_text) {
 8005552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005556:	4604      	mov	r4, r0
 8005558:	4608      	mov	r0, r1
 800555a:	4615      	mov	r5, r2
 800555c:	461e      	mov	r6, r3
 800555e:	f004 fa79 	bl	8009a54 <roundf>
 8005562:	4607      	mov	r7, r0
 8005564:	4628      	mov	r0, r5
 8005566:	f004 fa75 	bl	8009a54 <roundf>
  u8g2_DrawUTF8(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y), _text.c_str());
 800556a:	f7fb fcb5 	bl	8000ed8 <__aeabi_f2iz>
 800556e:	b285      	uxth	r5, r0
 8005570:	4638      	mov	r0, r7
 8005572:	f7fb fcb1 	bl	8000ed8 <__aeabi_f2iz>
 8005576:	462a      	mov	r2, r5
 8005578:	6833      	ldr	r3, [r6, #0]
 800557a:	b281      	uxth	r1, r0
 800557c:	f104 0014 	add.w	r0, r4, #20
}
 8005580:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  u8g2_DrawUTF8(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y), _text.c_str());
 8005584:	f001 b8ae 	b.w	80066e4 <u8g2_DrawUTF8>

08005588 <_ZN8MixinHAL10_drawVLineEfff>:

void MixinHAL::_drawVLine(float _x, float _y, float _h) {
 8005588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800558c:	4604      	mov	r4, r0
 800558e:	4608      	mov	r0, r1
 8005590:	4615      	mov	r5, r2
 8005592:	461e      	mov	r6, r3
 8005594:	f004 fa5e 	bl	8009a54 <roundf>
 8005598:	4607      	mov	r7, r0
 800559a:	4628      	mov	r0, r5
 800559c:	f004 fa5a 	bl	8009a54 <roundf>
 80055a0:	4605      	mov	r5, r0
 80055a2:	4630      	mov	r0, r6
 80055a4:	f004 fa56 	bl	8009a54 <roundf>
  u8g2_DrawVLine(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y), (int16_t)std::round(_h));
 80055a8:	f7fb fc96 	bl	8000ed8 <__aeabi_f2iz>
 80055ac:	b286      	uxth	r6, r0
 80055ae:	4628      	mov	r0, r5
 80055b0:	f7fb fc92 	bl	8000ed8 <__aeabi_f2iz>
 80055b4:	b285      	uxth	r5, r0
 80055b6:	4638      	mov	r0, r7
 80055b8:	f7fb fc8e 	bl	8000ed8 <__aeabi_f2iz>
 80055bc:	4633      	mov	r3, r6
 80055be:	462a      	mov	r2, r5
 80055c0:	b281      	uxth	r1, r0
 80055c2:	f104 0014 	add.w	r0, r4, #20
}
 80055c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  u8g2_DrawVLine(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y), (int16_t)std::round(_h));
 80055ca:	f001 b958 	b.w	800687e <u8g2_DrawVLine>

080055ce <_ZN8MixinHAL10_drawHLineEfff>:

void MixinHAL::_drawHLine(float _x, float _y, float _l) {
 80055ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055d2:	4604      	mov	r4, r0
 80055d4:	4608      	mov	r0, r1
 80055d6:	4615      	mov	r5, r2
 80055d8:	461e      	mov	r6, r3
 80055da:	f004 fa3b 	bl	8009a54 <roundf>
 80055de:	4607      	mov	r7, r0
 80055e0:	4628      	mov	r0, r5
 80055e2:	f004 fa37 	bl	8009a54 <roundf>
 80055e6:	4605      	mov	r5, r0
 80055e8:	4630      	mov	r0, r6
 80055ea:	f004 fa33 	bl	8009a54 <roundf>
  u8g2_DrawHLine(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y), (int16_t)std::round(_l));
 80055ee:	f7fb fc73 	bl	8000ed8 <__aeabi_f2iz>
 80055f2:	b286      	uxth	r6, r0
 80055f4:	4628      	mov	r0, r5
 80055f6:	f7fb fc6f 	bl	8000ed8 <__aeabi_f2iz>
 80055fa:	b285      	uxth	r5, r0
 80055fc:	4638      	mov	r0, r7
 80055fe:	f7fb fc6b 	bl	8000ed8 <__aeabi_f2iz>
 8005602:	4633      	mov	r3, r6
 8005604:	462a      	mov	r2, r5
 8005606:	b281      	uxth	r1, r0
 8005608:	f104 0014 	add.w	r0, r4, #20
}
 800560c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  u8g2_DrawHLine(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y), (int16_t)std::round(_l));
 8005610:	f001 b92e 	b.w	8006870 <u8g2_DrawHLine>

08005614 <_ZN8MixinHAL8_drawBMPEffffPKh>:

void MixinHAL::_drawBMP(float _x, float _y, float _w, float _h, const unsigned char *_bitMap) {
 8005614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005618:	4604      	mov	r4, r0
 800561a:	4608      	mov	r0, r1
 800561c:	4616      	mov	r6, r2
 800561e:	461f      	mov	r7, r3
 8005620:	f004 fa18 	bl	8009a54 <roundf>
 8005624:	4605      	mov	r5, r0
 8005626:	4630      	mov	r0, r6
 8005628:	f004 fa14 	bl	8009a54 <roundf>
 800562c:	4606      	mov	r6, r0
 800562e:	4638      	mov	r0, r7
 8005630:	f004 fa10 	bl	8009a54 <roundf>
 8005634:	4607      	mov	r7, r0
 8005636:	9806      	ldr	r0, [sp, #24]
 8005638:	f004 fa0c 	bl	8009a54 <roundf>
 800563c:	4680      	mov	r8, r0
  u8g2_DrawXBMP(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y), (int16_t)std::round(_w), (int16_t)std::round(_h), _bitMap);
 800563e:	4638      	mov	r0, r7
 8005640:	f7fb fc4a 	bl	8000ed8 <__aeabi_f2iz>
 8005644:	b287      	uxth	r7, r0
 8005646:	4630      	mov	r0, r6
 8005648:	f7fb fc46 	bl	8000ed8 <__aeabi_f2iz>
 800564c:	b286      	uxth	r6, r0
 800564e:	4628      	mov	r0, r5
 8005650:	f7fb fc42 	bl	8000ed8 <__aeabi_f2iz>
 8005654:	9b07      	ldr	r3, [sp, #28]
 8005656:	b285      	uxth	r5, r0
 8005658:	4640      	mov	r0, r8
 800565a:	9307      	str	r3, [sp, #28]
 800565c:	f7fb fc3c 	bl	8000ed8 <__aeabi_f2iz>
 8005660:	3414      	adds	r4, #20
 8005662:	b280      	uxth	r0, r0
 8005664:	9006      	str	r0, [sp, #24]
 8005666:	463b      	mov	r3, r7
 8005668:	4632      	mov	r2, r6
 800566a:	4629      	mov	r1, r5
 800566c:	4620      	mov	r0, r4
}
 800566e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  u8g2_DrawXBMP(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y), (int16_t)std::round(_w), (int16_t)std::round(_h), _bitMap);
 8005672:	f000 babe 	b.w	8005bf2 <u8g2_DrawXBMP>

08005676 <_ZN8MixinHAL8_drawBoxEffff>:

void MixinHAL::_drawBox(float _x, float _y, float _w, float _h) {
 8005676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800567a:	4604      	mov	r4, r0
 800567c:	4608      	mov	r0, r1
 800567e:	4616      	mov	r6, r2
 8005680:	461f      	mov	r7, r3
 8005682:	f004 f9e7 	bl	8009a54 <roundf>
 8005686:	4605      	mov	r5, r0
 8005688:	4630      	mov	r0, r6
 800568a:	f004 f9e3 	bl	8009a54 <roundf>
 800568e:	4606      	mov	r6, r0
 8005690:	4638      	mov	r0, r7
 8005692:	f004 f9df 	bl	8009a54 <roundf>
 8005696:	4607      	mov	r7, r0
 8005698:	9806      	ldr	r0, [sp, #24]
 800569a:	f004 f9db 	bl	8009a54 <roundf>
 800569e:	4680      	mov	r8, r0
  u8g2_DrawBox(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y), (int16_t)std::round(_w), (int16_t)std::round(_h));
 80056a0:	4638      	mov	r0, r7
 80056a2:	f7fb fc19 	bl	8000ed8 <__aeabi_f2iz>
 80056a6:	b287      	uxth	r7, r0
 80056a8:	4630      	mov	r0, r6
 80056aa:	f7fb fc15 	bl	8000ed8 <__aeabi_f2iz>
 80056ae:	b286      	uxth	r6, r0
 80056b0:	4628      	mov	r0, r5
 80056b2:	f7fb fc11 	bl	8000ed8 <__aeabi_f2iz>
 80056b6:	b285      	uxth	r5, r0
 80056b8:	4640      	mov	r0, r8
 80056ba:	f7fb fc0d 	bl	8000ed8 <__aeabi_f2iz>
 80056be:	3414      	adds	r4, #20
 80056c0:	b280      	uxth	r0, r0
 80056c2:	9006      	str	r0, [sp, #24]
 80056c4:	463b      	mov	r3, r7
 80056c6:	4632      	mov	r2, r6
 80056c8:	4629      	mov	r1, r5
 80056ca:	4620      	mov	r0, r4
}
 80056cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  u8g2_DrawBox(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y), (int16_t)std::round(_w), (int16_t)std::round(_h));
 80056d0:	f000 ba96 	b.w	8005c00 <u8g2_DrawBox>

080056d4 <_ZN8MixinHAL9_drawRBoxEfffff>:

void MixinHAL::_drawRBox(float _x, float _y, float _w, float _h, float _r) {
 80056d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056d8:	4604      	mov	r4, r0
 80056da:	4608      	mov	r0, r1
 80056dc:	4616      	mov	r6, r2
 80056de:	461f      	mov	r7, r3
 80056e0:	f004 f9b8 	bl	8009a54 <roundf>
 80056e4:	4605      	mov	r5, r0
 80056e6:	4630      	mov	r0, r6
 80056e8:	f004 f9b4 	bl	8009a54 <roundf>
 80056ec:	4606      	mov	r6, r0
 80056ee:	4638      	mov	r0, r7
 80056f0:	f004 f9b0 	bl	8009a54 <roundf>
 80056f4:	4607      	mov	r7, r0
 80056f6:	9808      	ldr	r0, [sp, #32]
 80056f8:	f004 f9ac 	bl	8009a54 <roundf>
 80056fc:	4680      	mov	r8, r0
 80056fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005700:	f004 f9a8 	bl	8009a54 <roundf>
 8005704:	4681      	mov	r9, r0
  u8g2_DrawRBox(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y), (int16_t)std::round(_w), (int16_t)std::round(_h), (int16_t)std::round(_r));
 8005706:	4638      	mov	r0, r7
 8005708:	f7fb fbe6 	bl	8000ed8 <__aeabi_f2iz>
 800570c:	b287      	uxth	r7, r0
 800570e:	4630      	mov	r0, r6
 8005710:	f7fb fbe2 	bl	8000ed8 <__aeabi_f2iz>
 8005714:	b286      	uxth	r6, r0
 8005716:	4628      	mov	r0, r5
 8005718:	f7fb fbde 	bl	8000ed8 <__aeabi_f2iz>
 800571c:	b285      	uxth	r5, r0
 800571e:	4648      	mov	r0, r9
 8005720:	f7fb fbda 	bl	8000ed8 <__aeabi_f2iz>
 8005724:	b280      	uxth	r0, r0
 8005726:	9009      	str	r0, [sp, #36]	@ 0x24
 8005728:	4640      	mov	r0, r8
 800572a:	f7fb fbd5 	bl	8000ed8 <__aeabi_f2iz>
 800572e:	3414      	adds	r4, #20
 8005730:	b280      	uxth	r0, r0
 8005732:	9008      	str	r0, [sp, #32]
 8005734:	463b      	mov	r3, r7
 8005736:	4632      	mov	r2, r6
 8005738:	4629      	mov	r1, r5
 800573a:	4620      	mov	r0, r4
}
 800573c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u8g2_DrawRBox(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y), (int16_t)std::round(_w), (int16_t)std::round(_h), (int16_t)std::round(_r));
 8005740:	f000 bac6 	b.w	8005cd0 <u8g2_DrawRBox>

08005744 <_ZN8MixinHAL10_drawFrameEffff>:

void MixinHAL::_drawFrame(float _x, float _y, float _w, float _h) {
 8005744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005748:	4604      	mov	r4, r0
 800574a:	4608      	mov	r0, r1
 800574c:	4616      	mov	r6, r2
 800574e:	461f      	mov	r7, r3
 8005750:	f004 f980 	bl	8009a54 <roundf>
 8005754:	4605      	mov	r5, r0
 8005756:	4630      	mov	r0, r6
 8005758:	f004 f97c 	bl	8009a54 <roundf>
 800575c:	4606      	mov	r6, r0
 800575e:	4638      	mov	r0, r7
 8005760:	f004 f978 	bl	8009a54 <roundf>
 8005764:	4607      	mov	r7, r0
 8005766:	9806      	ldr	r0, [sp, #24]
 8005768:	f004 f974 	bl	8009a54 <roundf>
 800576c:	4680      	mov	r8, r0
  u8g2_DrawFrame(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y), (int16_t)std::round(_w), (int16_t)std::round(_h));
 800576e:	4638      	mov	r0, r7
 8005770:	f7fb fbb2 	bl	8000ed8 <__aeabi_f2iz>
 8005774:	b287      	uxth	r7, r0
 8005776:	4630      	mov	r0, r6
 8005778:	f7fb fbae 	bl	8000ed8 <__aeabi_f2iz>
 800577c:	b286      	uxth	r6, r0
 800577e:	4628      	mov	r0, r5
 8005780:	f7fb fbaa 	bl	8000ed8 <__aeabi_f2iz>
 8005784:	b285      	uxth	r5, r0
 8005786:	4640      	mov	r0, r8
 8005788:	f7fb fba6 	bl	8000ed8 <__aeabi_f2iz>
 800578c:	3414      	adds	r4, #20
 800578e:	b280      	uxth	r0, r0
 8005790:	9006      	str	r0, [sp, #24]
 8005792:	463b      	mov	r3, r7
 8005794:	4632      	mov	r2, r6
 8005796:	4629      	mov	r1, r5
 8005798:	4620      	mov	r0, r4
}
 800579a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  u8g2_DrawFrame(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y), (int16_t)std::round(_w), (int16_t)std::round(_h));
 800579e:	f000 ba51 	b.w	8005c44 <u8g2_DrawFrame>

080057a2 <_ZN8MixinHAL11_drawRFrameEfffff>:

void MixinHAL::_drawRFrame(float _x, float _y, float _w, float _h, float _r) {
 80057a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057a6:	4604      	mov	r4, r0
 80057a8:	4608      	mov	r0, r1
 80057aa:	4616      	mov	r6, r2
 80057ac:	461f      	mov	r7, r3
 80057ae:	f004 f951 	bl	8009a54 <roundf>
 80057b2:	4605      	mov	r5, r0
 80057b4:	4630      	mov	r0, r6
 80057b6:	f004 f94d 	bl	8009a54 <roundf>
 80057ba:	4606      	mov	r6, r0
 80057bc:	4638      	mov	r0, r7
 80057be:	f004 f949 	bl	8009a54 <roundf>
 80057c2:	4607      	mov	r7, r0
 80057c4:	9808      	ldr	r0, [sp, #32]
 80057c6:	f004 f945 	bl	8009a54 <roundf>
 80057ca:	4680      	mov	r8, r0
 80057cc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80057ce:	f004 f941 	bl	8009a54 <roundf>
 80057d2:	4681      	mov	r9, r0
  u8g2_DrawRFrame(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y), (int16_t)std::round(_w), (int16_t)std::round(_h), (int16_t)std::round(_r));
 80057d4:	4638      	mov	r0, r7
 80057d6:	f7fb fb7f 	bl	8000ed8 <__aeabi_f2iz>
 80057da:	b287      	uxth	r7, r0
 80057dc:	4630      	mov	r0, r6
 80057de:	f7fb fb7b 	bl	8000ed8 <__aeabi_f2iz>
 80057e2:	b286      	uxth	r6, r0
 80057e4:	4628      	mov	r0, r5
 80057e6:	f7fb fb77 	bl	8000ed8 <__aeabi_f2iz>
 80057ea:	b285      	uxth	r5, r0
 80057ec:	4648      	mov	r0, r9
 80057ee:	f7fb fb73 	bl	8000ed8 <__aeabi_f2iz>
 80057f2:	b280      	uxth	r0, r0
 80057f4:	9009      	str	r0, [sp, #36]	@ 0x24
 80057f6:	4640      	mov	r0, r8
 80057f8:	f7fb fb6e 	bl	8000ed8 <__aeabi_f2iz>
 80057fc:	3414      	adds	r4, #20
 80057fe:	b280      	uxth	r0, r0
 8005800:	9008      	str	r0, [sp, #32]
 8005802:	463b      	mov	r3, r7
 8005804:	4632      	mov	r2, r6
 8005806:	4629      	mov	r1, r5
 8005808:	4620      	mov	r0, r4
}
 800580a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u8g2_DrawRFrame(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y), (int16_t)std::round(_w), (int16_t)std::round(_h), (int16_t)std::round(_r));
 800580e:	f000 bad4 	b.w	8005dba <u8g2_DrawRFrame>

08005812 <_ZN8MixinHALD0Ev>:
 8005812:	b510      	push	{r4, lr}
 8005814:	4604      	mov	r4, r0
 8005816:	21a8      	movs	r1, #168	@ 0xa8
 8005818:	f003 fabe 	bl	8008d98 <_ZdlPvj>
 800581c:	4620      	mov	r0, r4
 800581e:	bd10      	pop	{r4, pc}

08005820 <_ZN8MixinHAL29_u8x8_gpio_and_delay_callbackEP11u8x8_structhhPv>:
  switch (_msg) {
 8005820:	2929      	cmp	r1, #41	@ 0x29
                                                    __attribute__((unused)) void *_argPtr) { //NOLINT
 8005822:	4610      	mov	r0, r2
 8005824:	b508      	push	{r3, lr}
  switch (_msg) {
 8005826:	d003      	beq.n	8005830 <_ZN8MixinHAL29_u8x8_gpio_and_delay_callbackEP11u8x8_structhhPv+0x10>
 8005828:	2949      	cmp	r1, #73	@ 0x49
 800582a:	d004      	beq.n	8005836 <_ZN8MixinHAL29_u8x8_gpio_and_delay_callbackEP11u8x8_structhhPv+0x16>
}
 800582c:	2001      	movs	r0, #1
 800582e:	bd08      	pop	{r3, pc}
      HAL_Delay(_argInt);
 8005830:	f001 fda0 	bl	8007374 <HAL_Delay>
      break;
 8005834:	e7fa      	b.n	800582c <_ZN8MixinHAL29_u8x8_gpio_and_delay_callbackEP11u8x8_structhhPv+0xc>
      HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, static_cast<GPIO_PinState>(_argInt));
 8005836:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800583a:	4802      	ldr	r0, [pc, #8]	@ (8005844 <_ZN8MixinHAL29_u8x8_gpio_and_delay_callbackEP11u8x8_structhhPv+0x24>)
 800583c:	f002 fa5a 	bl	8007cf4 <HAL_GPIO_WritePin>
      break;
 8005840:	e7f4      	b.n	800582c <_ZN8MixinHAL29_u8x8_gpio_and_delay_callbackEP11u8x8_structhhPv+0xc>
 8005842:	bf00      	nop
 8005844:	40010800 	.word	0x40010800

08005848 <_ZN8MixinHAL21_ssd1306_transmit_cmdEh.constprop.0>:
void MixinHAL::_ssd1306_transmit_cmd(unsigned char _cmd) { //NOLINT
 8005848:	b530      	push	{r4, r5, lr}
  unsigned char rxData = 0;
 800584a:	2500      	movs	r5, #0
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 800584c:	4c12      	ldr	r4, [pc, #72]	@ (8005898 <_ZN8MixinHAL21_ssd1306_transmit_cmdEh.constprop.0+0x50>)
void MixinHAL::_ssd1306_transmit_cmd(unsigned char _cmd) { //NOLINT
 800584e:	b087      	sub	sp, #28
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8005850:	462a      	mov	r2, r5
void MixinHAL::_ssd1306_transmit_cmd(unsigned char _cmd) { //NOLINT
 8005852:	f88d 000f 	strb.w	r0, [sp, #15]
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8005856:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800585a:	4620      	mov	r0, r4
  unsigned char rxData = 0;
 800585c:	f88d 5017 	strb.w	r5, [sp, #23]
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8005860:	f002 fa48 	bl	8007cf4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8005864:	462a      	mov	r2, r5
 8005866:	4620      	mov	r0, r4
 8005868:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800586c:	f002 fa42 	bl	8007cf4 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi2, &_cmd, &rxData, 1, 1000);
 8005870:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005874:	f10d 0217 	add.w	r2, sp, #23
 8005878:	9300      	str	r3, [sp, #0]
 800587a:	f10d 010f 	add.w	r1, sp, #15
 800587e:	2301      	movs	r3, #1
 8005880:	4806      	ldr	r0, [pc, #24]	@ (800589c <_ZN8MixinHAL21_ssd1306_transmit_cmdEh.constprop.0+0x54>)
 8005882:	f002 fe53 	bl	800852c <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8005886:	2201      	movs	r2, #1
 8005888:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800588c:	4620      	mov	r0, r4
 800588e:	f002 fa31 	bl	8007cf4 <HAL_GPIO_WritePin>
}
 8005892:	b007      	add	sp, #28
 8005894:	bd30      	pop	{r4, r5, pc}
 8005896:	bf00      	nop
 8005898:	40010800 	.word	0x40010800
 800589c:	20000668 	.word	0x20000668

080058a0 <_ZN8MixinHAL10_screenOffEv>:
void MixinHAL::_screenOff() {
 80058a0:	b508      	push	{r3, lr}
  _ssd1306_transmit_cmd(0X8D);  //set dc-dc command.
 80058a2:	208d      	movs	r0, #141	@ 0x8d
 80058a4:	f7ff ffd0 	bl	8005848 <_ZN8MixinHAL21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0X10);  //dc-dc disable.
 80058a8:	2010      	movs	r0, #16
 80058aa:	f7ff ffcd 	bl	8005848 <_ZN8MixinHAL21_ssd1306_transmit_cmdEh.constprop.0>
}
 80058ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  _ssd1306_transmit_cmd(0XAE);  //display off.
 80058b2:	20ae      	movs	r0, #174	@ 0xae
 80058b4:	f7ff bfc8 	b.w	8005848 <_ZN8MixinHAL21_ssd1306_transmit_cmdEh.constprop.0>

080058b8 <_ZN8MixinHAL9_screenOnEv>:
void MixinHAL::_screenOn() {
 80058b8:	b508      	push	{r3, lr}
  _ssd1306_transmit_cmd(0X8D);  //set dc-dc command.
 80058ba:	208d      	movs	r0, #141	@ 0x8d
 80058bc:	f7ff ffc4 	bl	8005848 <_ZN8MixinHAL21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0X14);  //dc-dc enable.
 80058c0:	2014      	movs	r0, #20
 80058c2:	f7ff ffc1 	bl	8005848 <_ZN8MixinHAL21_ssd1306_transmit_cmdEh.constprop.0>
}
 80058c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  _ssd1306_transmit_cmd(0XAF);  //display on.
 80058ca:	20af      	movs	r0, #175	@ 0xaf
 80058cc:	f7ff bfbc 	b.w	8005848 <_ZN8MixinHAL21_ssd1306_transmit_cmdEh.constprop.0>

080058d0 <_ZN8MixinHAL22_ssd1306_transmit_dataEhh>:
void MixinHAL::_ssd1306_transmit_data(unsigned char _data, unsigned char _mode) { //NOLINT
 80058d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80058d2:	f88d 100f 	strb.w	r1, [sp, #15]
  if (!_mode) _data = ~_data;
 80058d6:	b91a      	cbnz	r2, 80058e0 <_ZN8MixinHAL22_ssd1306_transmit_dataEhh+0x10>
 80058d8:	b2cb      	uxtb	r3, r1
 80058da:	43db      	mvns	r3, r3
 80058dc:	f88d 300f 	strb.w	r3, [sp, #15]
  unsigned char rxData = 0;
 80058e0:	2200      	movs	r2, #0
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 80058e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80058e6:	480f      	ldr	r0, [pc, #60]	@ (8005924 <_ZN8MixinHAL22_ssd1306_transmit_dataEhh+0x54>)
  unsigned char rxData = 0;
 80058e8:	f88d 2017 	strb.w	r2, [sp, #23]
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 80058ec:	f002 fa02 	bl	8007cf4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_SET);
 80058f0:	2201      	movs	r2, #1
 80058f2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80058f6:	480b      	ldr	r0, [pc, #44]	@ (8005924 <_ZN8MixinHAL22_ssd1306_transmit_dataEhh+0x54>)
 80058f8:	f002 f9fc 	bl	8007cf4 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi2, &_data, &rxData, 1, 1000);
 80058fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005900:	f10d 0217 	add.w	r2, sp, #23
 8005904:	9300      	str	r3, [sp, #0]
 8005906:	f10d 010f 	add.w	r1, sp, #15
 800590a:	2301      	movs	r3, #1
 800590c:	4806      	ldr	r0, [pc, #24]	@ (8005928 <_ZN8MixinHAL22_ssd1306_transmit_dataEhh+0x58>)
 800590e:	f002 fe0d 	bl	800852c <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8005912:	2201      	movs	r2, #1
 8005914:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005918:	4802      	ldr	r0, [pc, #8]	@ (8005924 <_ZN8MixinHAL22_ssd1306_transmit_dataEhh+0x54>)
 800591a:	f002 f9eb 	bl	8007cf4 <HAL_GPIO_WritePin>
}
 800591e:	b007      	add	sp, #28
 8005920:	f85d fb04 	ldr.w	pc, [sp], #4
 8005924:	40010800 	.word	0x40010800
 8005928:	20000668 	.word	0x20000668

0800592c <_ZN8MixinHAL14_ssd1306_resetEb>:
  if (_state) HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_SET);
 800592c:	460a      	mov	r2, r1
 800592e:	b101      	cbz	r1, 8005932 <_ZN8MixinHAL14_ssd1306_resetEb+0x6>
 8005930:	2201      	movs	r2, #1
  else HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 8005932:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005936:	4801      	ldr	r0, [pc, #4]	@ (800593c <_ZN8MixinHAL14_ssd1306_resetEb+0x10>)
 8005938:	f002 b9dc 	b.w	8007cf4 <HAL_GPIO_WritePin>
 800593c:	40010800 	.word	0x40010800

08005940 <_ZN8MixinHAL19_ssd1306_set_cursorEhh>:
void MixinHAL::_ssd1306_set_cursor(unsigned char _x, unsigned char _y) {
 8005940:	b510      	push	{r4, lr}
 8005942:	460c      	mov	r4, r1
  _ssd1306_transmit_cmd(0xB0 | _y);
 8005944:	f042 00b0 	orr.w	r0, r2, #176	@ 0xb0
 8005948:	f7ff ff7e 	bl	8005848 <_ZN8MixinHAL21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0x10 | ((_x & 0xF0) >> 4));
 800594c:	0920      	lsrs	r0, r4, #4
 800594e:	f040 0010 	orr.w	r0, r0, #16
 8005952:	f7ff ff79 	bl	8005848 <_ZN8MixinHAL21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0x00 | (_x & 0x0F));
 8005956:	f004 000f 	and.w	r0, r4, #15
}
 800595a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  _ssd1306_transmit_cmd(0x00 | (_x & 0x0F));
 800595e:	f7ff bf73 	b.w	8005848 <_ZN8MixinHAL21_ssd1306_transmit_cmdEh.constprop.0>

08005962 <_ZN8MixinHAL13_ssd1306_fillEh>:
void MixinHAL::_ssd1306_fill(unsigned char _data) {
 8005962:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005964:	4606      	mov	r6, r0
 8005966:	460f      	mov	r7, r1
 8005968:	2500      	movs	r5, #0
    _ssd1306_set_cursor(j, 0);
 800596a:	2200      	movs	r2, #0
 800596c:	4630      	mov	r0, r6
 800596e:	b2e9      	uxtb	r1, r5
 8005970:	f7ff ffe6 	bl	8005940 <_ZN8MixinHAL19_ssd1306_set_cursorEhh>
 8005974:	2480      	movs	r4, #128	@ 0x80
      _ssd1306_transmit_data(_data, 1);
 8005976:	2201      	movs	r2, #1
 8005978:	4639      	mov	r1, r7
 800597a:	4630      	mov	r0, r6
    for(i = 0; i < 128; i++) {
 800597c:	3c01      	subs	r4, #1
      _ssd1306_transmit_data(_data, 1);
 800597e:	f7ff ffa7 	bl	80058d0 <_ZN8MixinHAL22_ssd1306_transmit_dataEhh>
    for(i = 0; i < 128; i++) {
 8005982:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 8005986:	d1f6      	bne.n	8005976 <_ZN8MixinHAL13_ssd1306_fillEh+0x14>
  for (j = 0; j < 8; j++) {
 8005988:	3501      	adds	r5, #1
 800598a:	2d08      	cmp	r5, #8
 800598c:	d1ed      	bne.n	800596a <_ZN8MixinHAL13_ssd1306_fillEh+0x8>
}
 800598e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005990 <_ZN8MixinHAL13_ssd1306_initEv>:
void MixinHAL::_ssd1306_init() {
 8005990:	b510      	push	{r4, lr}
 8005992:	4604      	mov	r4, r0
  _ssd1306_fill(0x00);
 8005994:	2100      	movs	r1, #0
 8005996:	f7ff ffe4 	bl	8005962 <_ZN8MixinHAL13_ssd1306_fillEh>
  _ssd1306_reset(false);
 800599a:	2100      	movs	r1, #0
 800599c:	4620      	mov	r0, r4
 800599e:	f7ff ffc5 	bl	800592c <_ZN8MixinHAL14_ssd1306_resetEb>
  HAL_Delay(200);
 80059a2:	20c8      	movs	r0, #200	@ 0xc8
 80059a4:	f001 fce6 	bl	8007374 <HAL_Delay>
  if (_state) HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_SET);
 80059a8:	2201      	movs	r2, #1
 80059aa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80059ae:	4825      	ldr	r0, [pc, #148]	@ (8005a44 <_ZN8MixinHAL13_ssd1306_initEv+0xb4>)
 80059b0:	f002 f9a0 	bl	8007cf4 <HAL_GPIO_WritePin>
  _ssd1306_transmit_cmd(0xAE);
 80059b4:	20ae      	movs	r0, #174	@ 0xae
 80059b6:	f7ff ff47 	bl	8005848 <_ZN8MixinHAL21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0xD5);
 80059ba:	20d5      	movs	r0, #213	@ 0xd5
 80059bc:	f7ff ff44 	bl	8005848 <_ZN8MixinHAL21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0x80);
 80059c0:	2080      	movs	r0, #128	@ 0x80
 80059c2:	f7ff ff41 	bl	8005848 <_ZN8MixinHAL21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0xA8);
 80059c6:	20a8      	movs	r0, #168	@ 0xa8
 80059c8:	f7ff ff3e 	bl	8005848 <_ZN8MixinHAL21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0x3F);
 80059cc:	203f      	movs	r0, #63	@ 0x3f
 80059ce:	f7ff ff3b 	bl	8005848 <_ZN8MixinHAL21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0xD3);
 80059d2:	20d3      	movs	r0, #211	@ 0xd3
 80059d4:	f7ff ff38 	bl	8005848 <_ZN8MixinHAL21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0x00);
 80059d8:	2000      	movs	r0, #0
 80059da:	f7ff ff35 	bl	8005848 <_ZN8MixinHAL21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0x40);
 80059de:	2040      	movs	r0, #64	@ 0x40
 80059e0:	f7ff ff32 	bl	8005848 <_ZN8MixinHAL21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0xA1);
 80059e4:	20a1      	movs	r0, #161	@ 0xa1
 80059e6:	f7ff ff2f 	bl	8005848 <_ZN8MixinHAL21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0xC8);
 80059ea:	20c8      	movs	r0, #200	@ 0xc8
 80059ec:	f7ff ff2c 	bl	8005848 <_ZN8MixinHAL21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0xDA);
 80059f0:	20da      	movs	r0, #218	@ 0xda
 80059f2:	f7ff ff29 	bl	8005848 <_ZN8MixinHAL21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0x12);
 80059f6:	2012      	movs	r0, #18
 80059f8:	f7ff ff26 	bl	8005848 <_ZN8MixinHAL21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0x81);
 80059fc:	2081      	movs	r0, #129	@ 0x81
 80059fe:	f7ff ff23 	bl	8005848 <_ZN8MixinHAL21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0xCF);
 8005a02:	20cf      	movs	r0, #207	@ 0xcf
 8005a04:	f7ff ff20 	bl	8005848 <_ZN8MixinHAL21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0xD9);
 8005a08:	20d9      	movs	r0, #217	@ 0xd9
 8005a0a:	f7ff ff1d 	bl	8005848 <_ZN8MixinHAL21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0xF1);
 8005a0e:	20f1      	movs	r0, #241	@ 0xf1
 8005a10:	f7ff ff1a 	bl	8005848 <_ZN8MixinHAL21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0xDB);
 8005a14:	20db      	movs	r0, #219	@ 0xdb
 8005a16:	f7ff ff17 	bl	8005848 <_ZN8MixinHAL21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0x30);
 8005a1a:	2030      	movs	r0, #48	@ 0x30
 8005a1c:	f7ff ff14 	bl	8005848 <_ZN8MixinHAL21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0xA4);
 8005a20:	20a4      	movs	r0, #164	@ 0xa4
 8005a22:	f7ff ff11 	bl	8005848 <_ZN8MixinHAL21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0xA6);
 8005a26:	20a6      	movs	r0, #166	@ 0xa6
 8005a28:	f7ff ff0e 	bl	8005848 <_ZN8MixinHAL21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0x8D);
 8005a2c:	208d      	movs	r0, #141	@ 0x8d
 8005a2e:	f7ff ff0b 	bl	8005848 <_ZN8MixinHAL21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0x14);
 8005a32:	2014      	movs	r0, #20
 8005a34:	f7ff ff08 	bl	8005848 <_ZN8MixinHAL21_ssd1306_transmit_cmdEh.constprop.0>
}
 8005a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  _ssd1306_transmit_cmd(0xAF);
 8005a3c:	20af      	movs	r0, #175	@ 0xaf
 8005a3e:	f7ff bf03 	b.w	8005848 <_ZN8MixinHAL21_ssd1306_transmit_cmdEh.constprop.0>
 8005a42:	bf00      	nop
 8005a44:	40010800 	.word	0x40010800

08005a48 <_ZN8MixinHAL10_u8g2_initEv>:
void MixinHAL::_u8g2_init() {
 8005a48:	b510      	push	{r4, lr}
  u8g2_Setup_ssd1306_128x64_noname_f(&canvasBuffer,
 8005a4a:	f100 0414 	add.w	r4, r0, #20
 8005a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8005a8c <_ZN8MixinHAL10_u8g2_initEv+0x44>)
 8005a50:	4a0f      	ldr	r2, [pc, #60]	@ (8005a90 <_ZN8MixinHAL10_u8g2_initEv+0x48>)
 8005a52:	4620      	mov	r0, r4
 8005a54:	490f      	ldr	r1, [pc, #60]	@ (8005a94 <_ZN8MixinHAL10_u8g2_initEv+0x4c>)
 8005a56:	f000 fbaf 	bl	80061b8 <u8g2_Setup_ssd1306_128x64_noname_f>
  u8g2_InitDisplay(&canvasBuffer); // 根据所选的芯片进行初始化工作，初始化完成后，显示器处于关闭状态
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	f001 f9eb 	bl	8006e36 <u8x8_InitDisplay>
  u8g2_SetPowerSave(&canvasBuffer, 0); // 打开显示器
 8005a60:	2100      	movs	r1, #0
 8005a62:	4620      	mov	r0, r4
 8005a64:	f001 f9ef 	bl	8006e46 <u8x8_SetPowerSave>
  u8g2_ClearBuffer(&canvasBuffer);
 8005a68:	4620      	mov	r0, r4
 8005a6a:	f000 fa4d 	bl	8005f08 <u8g2_ClearBuffer>
  u8g2_SetFontMode(&canvasBuffer, 1); /*字体模式选择*/
 8005a6e:	4620      	mov	r0, r4
 8005a70:	2101      	movs	r1, #1
 8005a72:	f000 fdc8 	bl	8006606 <u8g2_SetFontMode>
  u8g2_SetFontDirection(&canvasBuffer, 0); /*字体方向选择*/
 8005a76:	4620      	mov	r0, r4
 8005a78:	2100      	movs	r1, #0
 8005a7a:	f000 fe83 	bl	8006784 <u8g2_SetFontDirection>
  u8g2_SetFont(&canvasBuffer, u8g2_font_myfont); /*字库选择*/
 8005a7e:	4620      	mov	r0, r4
}
 8005a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  u8g2_SetFont(&canvasBuffer, u8g2_font_myfont); /*字库选择*/
 8005a84:	4904      	ldr	r1, [pc, #16]	@ (8005a98 <_ZN8MixinHAL10_u8g2_initEv+0x50>)
 8005a86:	f000 be67 	b.w	8006758 <u8g2_SetFont>
 8005a8a:	bf00      	nop
 8005a8c:	08005821 	.word	0x08005821
 8005a90:	08005349 	.word	0x08005349
 8005a94:	0800c7a4 	.word	0x0800c7a4
 8005a98:	0800bcd7 	.word	0x0800bcd7

08005a9c <_ZN8MixinHAL4initEv>:
                                               U8X8_UNUSED unsigned char _msg,
                                               U8X8_UNUSED unsigned char _argInt,
                                               U8X8_UNUSED void* _argPtr);

public:
  inline void init() override {
 8005a9c:	b510      	push	{r4, lr}
 8005a9e:	4604      	mov	r4, r0
    _ssd1306_init();
 8005aa0:	f7ff ff76 	bl	8005990 <_ZN8MixinHAL13_ssd1306_initEv>
    _u8g2_init();
 8005aa4:	4620      	mov	r0, r4
  }
 8005aa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    _u8g2_init();
 8005aaa:	f7ff bfcd 	b.w	8005a48 <_ZN8MixinHAL10_u8g2_initEv>

08005aae <_ZN8MixinHAL6_delayEm>:
#include "components.h"
#include "main.h"

void MixinHAL::_delay(unsigned long _mill) {
  HAL_Delay(_mill);
 8005aae:	4608      	mov	r0, r1
 8005ab0:	f001 bc60 	b.w	8007374 <HAL_Delay>

08005ab4 <_ZN8MixinHAL7_millisEv>:
}

unsigned long MixinHAL::_millis() {
  return HAL_GetTick();
 8005ab4:	f001 bc58 	b.w	8007368 <HAL_GetTick>

08005ab8 <_ZN8MixinHAL8_getTickEv>:
}

unsigned long MixinHAL::_getTick() {
  return (uwTick * 1000 + (SysTick->LOAD - SysTick->VAL) / (SystemCoreClock/1000000U));
 8005ab8:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8005abc:	4b08      	ldr	r3, [pc, #32]	@ (8005ae0 <_ZN8MixinHAL8_getTickEv+0x28>)
 8005abe:	4809      	ldr	r0, [pc, #36]	@ (8005ae4 <_ZN8MixinHAL8_getTickEv+0x2c>)
 8005ac0:	6819      	ldr	r1, [r3, #0]
 8005ac2:	6953      	ldr	r3, [r2, #20]
 8005ac4:	6992      	ldr	r2, [r2, #24]
 8005ac6:	1a9b      	subs	r3, r3, r2
 8005ac8:	4a07      	ldr	r2, [pc, #28]	@ (8005ae8 <_ZN8MixinHAL8_getTickEv+0x30>)
 8005aca:	6812      	ldr	r2, [r2, #0]
 8005acc:	fbb2 f2f0 	udiv	r2, r2, r0
}
 8005ad0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
  return (uwTick * 1000 + (SysTick->LOAD - SysTick->VAL) / (SystemCoreClock/1000000U));
 8005ad4:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8005ad8:	fb00 3001 	mla	r0, r0, r1, r3
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	200006f0 	.word	0x200006f0
 8005ae4:	000f4240 	.word	0x000f4240
 8005ae8:	20000004 	.word	0x20000004

08005aec <_ZN8MixinHAL14_getRandomSeedEv>:

unsigned long MixinHAL::_getRandomSeed() {
 8005aec:	b510      	push	{r4, lr}
  static uint32_t seed = 0;
  HAL_ADC_Start(&hadc1);//开启ADC1
 8005aee:	480a      	ldr	r0, [pc, #40]	@ (8005b18 <_ZN8MixinHAL14_getRandomSeedEv+0x2c>)
 8005af0:	f001 fdb6 	bl	8007660 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 50);//表示等待转换完成
 8005af4:	2132      	movs	r1, #50	@ 0x32
 8005af6:	4808      	ldr	r0, [pc, #32]	@ (8005b18 <_ZN8MixinHAL14_getRandomSeedEv+0x2c>)
 8005af8:	f001 fc4e 	bl	8007398 <HAL_ADC_PollForConversion>
  if (HAL_IS_BIT_SET(HAL_ADC_GetState(&hadc1), HAL_ADC_STATE_REG_EOC)) {
 8005afc:	4806      	ldr	r0, [pc, #24]	@ (8005b18 <_ZN8MixinHAL14_getRandomSeedEv+0x2c>)
 8005afe:	f001 fd71 	bl	80075e4 <HAL_ADC_GetState>
 8005b02:	f410 7f00 	tst.w	r0, #512	@ 0x200
 8005b06:	4c05      	ldr	r4, [pc, #20]	@ (8005b1c <_ZN8MixinHAL14_getRandomSeedEv+0x30>)
 8005b08:	d003      	beq.n	8005b12 <_ZN8MixinHAL14_getRandomSeedEv+0x26>
    seed = HAL_ADC_GetValue(&hadc1);//读取ADC转换数据
 8005b0a:	4803      	ldr	r0, [pc, #12]	@ (8005b18 <_ZN8MixinHAL14_getRandomSeedEv+0x2c>)
 8005b0c:	f001 fce8 	bl	80074e0 <HAL_ADC_GetValue>
 8005b10:	6020      	str	r0, [r4, #0]
  }
  return seed;
}
 8005b12:	6820      	ldr	r0, [r4, #0]
 8005b14:	bd10      	pop	{r4, pc}
 8005b16:	bf00      	nop
 8005b18:	200006c0 	.word	0x200006c0
 8005b1c:	200001d8 	.word	0x200001d8

08005b20 <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8005b20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
  uint8_t ncolor = (color == 0 ? 1 : 0);
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8005b24:	18cf      	adds	r7, r1, r3
 8005b26:	1c53      	adds	r3, r2, #1
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	b2bf      	uxth	r7, r7
  uint8_t color = u8g2->draw_color;
 8005b2c:	f890 9092 	ldrb.w	r9, [r0, #146]	@ 0x92
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	463b      	mov	r3, r7
{
 8005b34:	4605      	mov	r5, r0
 8005b36:	460c      	mov	r4, r1
 8005b38:	4690      	mov	r8, r2
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8005b3a:	f000 fed4 	bl	80068e6 <u8g2_IsIntersection>
 8005b3e:	b150      	cbz	r0, 8005b56 <u8g2_DrawHXBM+0x36>
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8005b40:	fab9 fa89 	clz	sl, r9
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 8005b44:	2601      	movs	r6, #1
  while(len > 0) {
    if ( *b & mask ) {
      u8g2->draw_color = color;
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8005b46:	f04f 0b00 	mov.w	fp, #0
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8005b4a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
  while(len > 0) {
 8005b4e:	42a7      	cmp	r7, r4
 8005b50:	d104      	bne.n	8005b5c <u8g2_DrawHXBM+0x3c>
      mask = 1;
      b++;
    }
    len--;
  }
  u8g2->draw_color = color;
 8005b52:	f885 9092 	strb.w	r9, [r5, #146]	@ 0x92
}
 8005b56:	b003      	add	sp, #12
 8005b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( *b & mask ) {
 8005b5c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	421e      	tst	r6, r3
 8005b62:	d017      	beq.n	8005b94 <u8g2_DrawHXBM+0x74>
      u8g2->draw_color = color;
 8005b64:	f885 9092 	strb.w	r9, [r5, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8005b68:	f8cd b000 	str.w	fp, [sp]
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	4642      	mov	r2, r8
 8005b70:	4621      	mov	r1, r4
 8005b72:	4628      	mov	r0, r5
 8005b74:	f000 fe14 	bl	80067a0 <u8g2_DrawHVLine>
    mask <<= 1;
 8005b78:	0076      	lsls	r6, r6, #1
    if ( mask == 0 )
 8005b7a:	f016 06ff 	ands.w	r6, r6, #255	@ 0xff
      b++;
 8005b7e:	bf08      	it	eq
 8005b80:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
    x++;
 8005b82:	f104 0401 	add.w	r4, r4, #1
      b++;
 8005b86:	bf04      	itt	eq
 8005b88:	3301      	addeq	r3, #1
      mask = 1;
 8005b8a:	2601      	moveq	r6, #1
    x++;
 8005b8c:	b2a4      	uxth	r4, r4
      b++;
 8005b8e:	bf08      	it	eq
 8005b90:	930c      	streq	r3, [sp, #48]	@ 0x30
    len--;
 8005b92:	e7dc      	b.n	8005b4e <u8g2_DrawHXBM+0x2e>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 8005b94:	f895 3091 	ldrb.w	r3, [r5, #145]	@ 0x91
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1ed      	bne.n	8005b78 <u8g2_DrawHXBM+0x58>
      u8g2->draw_color = ncolor;
 8005b9c:	f885 a092 	strb.w	sl, [r5, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8005ba0:	9300      	str	r3, [sp, #0]
 8005ba2:	e7e3      	b.n	8005b6c <u8g2_DrawHXBM+0x4c>

08005ba4 <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 8005ba4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  u8g2_uint_t blen;
  blen = w;
  blen += 7;
  blen >>= 3;
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8005ba8:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
{
 8005bac:	461e      	mov	r6, r3
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8005bae:	4415      	add	r5, r2
 8005bb0:	b2ad      	uxth	r5, r5
 8005bb2:	440b      	add	r3, r1
 8005bb4:	9500      	str	r5, [sp, #0]
 8005bb6:	b29b      	uxth	r3, r3
{
 8005bb8:	4681      	mov	r9, r0
 8005bba:	460f      	mov	r7, r1
 8005bbc:	4614      	mov	r4, r2
 8005bbe:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8005bc2:	f000 fe90 	bl	80068e6 <u8g2_IsIntersection>
 8005bc6:	b128      	cbz	r0, 8005bd4 <u8g2_DrawXBM+0x30>
  blen += 7;
 8005bc8:	f106 0807 	add.w	r8, r6, #7
  blen >>= 3;
 8005bcc:	f3c8 08cc 	ubfx	r8, r8, #3, #13
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8005bd0:	42a5      	cmp	r5, r4
 8005bd2:	d102      	bne.n	8005bda <u8g2_DrawXBM+0x36>
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
    bitmap += blen;
    y++;
    h--;
  }
}
 8005bd4:	b002      	add	sp, #8
 8005bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 8005bda:	4622      	mov	r2, r4
 8005bdc:	f8cd a000 	str.w	sl, [sp]
 8005be0:	4633      	mov	r3, r6
 8005be2:	4639      	mov	r1, r7
 8005be4:	4648      	mov	r0, r9
    y++;
 8005be6:	3401      	adds	r4, #1
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 8005be8:	f7ff ff9a 	bl	8005b20 <u8g2_DrawHXBM>
    bitmap += blen;
 8005bec:	44c2      	add	sl, r8
    y++;
 8005bee:	b2a4      	uxth	r4, r4
    h--;
 8005bf0:	e7ee      	b.n	8005bd0 <u8g2_DrawXBM+0x2c>

08005bf2 <u8g2_DrawXBMP>:
  }
  u8g2->draw_color = color;
}


void u8g2_DrawXBMP(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
 8005bf2:	b410      	push	{r4}
 8005bf4:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 8005bf8:	9401      	str	r4, [sp, #4]
 8005bfa:	bc10      	pop	{r4}
 8005bfc:	f7ff bfd2 	b.w	8005ba4 <u8g2_DrawXBM>

08005c00 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8005c00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8005c04:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
{
 8005c08:	461f      	mov	r7, r3
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8005c0a:	4415      	add	r5, r2
 8005c0c:	b2ad      	uxth	r5, r5
 8005c0e:	18cb      	adds	r3, r1, r3
 8005c10:	9500      	str	r5, [sp, #0]
 8005c12:	b29b      	uxth	r3, r3
{
 8005c14:	4680      	mov	r8, r0
 8005c16:	460e      	mov	r6, r1
 8005c18:	4614      	mov	r4, r2
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8005c1a:	f000 fe64 	bl	80068e6 <u8g2_IsIntersection>
 8005c1e:	b118      	cbz	r0, 8005c28 <u8g2_DrawBox+0x28>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8005c20:	f04f 0900 	mov.w	r9, #0
  while( h != 0 )
 8005c24:	42a5      	cmp	r5, r4
 8005c26:	d102      	bne.n	8005c2e <u8g2_DrawBox+0x2e>
    y++;    
    h--;
  }
}
 8005c28:	b003      	add	sp, #12
 8005c2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8005c2e:	4622      	mov	r2, r4
 8005c30:	463b      	mov	r3, r7
 8005c32:	4631      	mov	r1, r6
 8005c34:	4640      	mov	r0, r8
 8005c36:	f8cd 9000 	str.w	r9, [sp]
    y++;    
 8005c3a:	3401      	adds	r4, #1
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8005c3c:	f000 fdb0 	bl	80067a0 <u8g2_DrawHVLine>
    y++;    
 8005c40:	b2a4      	uxth	r4, r4
    h--;
 8005c42:	e7ef      	b.n	8005c24 <u8g2_DrawBox+0x24>

08005c44 <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8005c44:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c48:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
  u8g2_uint_t xtmp = x;
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8005c4c:	eb01 0903 	add.w	r9, r1, r3
{
 8005c50:	4698      	mov	r8, r3
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8005c52:	1953      	adds	r3, r2, r5
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	fa1f f989 	uxth.w	r9, r9
 8005c5a:	9300      	str	r3, [sp, #0]
 8005c5c:	464b      	mov	r3, r9
{
 8005c5e:	4606      	mov	r6, r0
 8005c60:	460f      	mov	r7, r1
 8005c62:	4614      	mov	r4, r2
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8005c64:	f000 fe3f 	bl	80068e6 <u8g2_IsIntersection>
 8005c68:	b378      	cbz	r0, 8005cca <u8g2_DrawFrame+0x86>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	4622      	mov	r2, r4
 8005c6e:	9300      	str	r3, [sp, #0]
 8005c70:	4639      	mov	r1, r7
 8005c72:	4643      	mov	r3, r8
 8005c74:	4630      	mov	r0, r6
 8005c76:	f000 fd93 	bl	80067a0 <u8g2_DrawHVLine>
  if (h >= 2) {
 8005c7a:	2d01      	cmp	r5, #1
 8005c7c:	d925      	bls.n	8005cca <u8g2_DrawFrame+0x86>
    h-=2;
 8005c7e:	3d02      	subs	r5, #2
    y++;
 8005c80:	3401      	adds	r4, #1
    h-=2;
 8005c82:	b2ad      	uxth	r5, r5
    y++;
 8005c84:	b2a4      	uxth	r4, r4
    if (h > 0) {
 8005c86:	b1ad      	cbz	r5, 8005cb4 <u8g2_DrawFrame+0x70>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8005c88:	f04f 0a01 	mov.w	sl, #1
 8005c8c:	4622      	mov	r2, r4
 8005c8e:	462b      	mov	r3, r5
 8005c90:	4639      	mov	r1, r7
 8005c92:	4630      	mov	r0, r6
 8005c94:	f8cd a000 	str.w	sl, [sp]
 8005c98:	f000 fd82 	bl	80067a0 <u8g2_DrawHVLine>
      x+=w;
      x--;
 8005c9c:	f109 31ff 	add.w	r1, r9, #4294967295
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8005ca0:	4622      	mov	r2, r4
 8005ca2:	462b      	mov	r3, r5
 8005ca4:	4630      	mov	r0, r6
 8005ca6:	f8cd a000 	str.w	sl, [sp]
 8005caa:	b289      	uxth	r1, r1
 8005cac:	f000 fd78 	bl	80067a0 <u8g2_DrawHVLine>
      y+=h;
 8005cb0:	442c      	add	r4, r5
 8005cb2:	b2a4      	uxth	r4, r4
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	4622      	mov	r2, r4
 8005cb8:	930a      	str	r3, [sp, #40]	@ 0x28
 8005cba:	4639      	mov	r1, r7
 8005cbc:	4643      	mov	r3, r8
 8005cbe:	4630      	mov	r0, r6
  }
}
 8005cc0:	b002      	add	sp, #8
 8005cc2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8005cc6:	f000 bd6b 	b.w	80067a0 <u8g2_DrawHVLine>
}
 8005cca:	b002      	add	sp, #8
 8005ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005cd0 <u8g2_DrawRBox>:




void u8g2_DrawRBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
 8005cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cd4:	469a      	mov	sl, r3
 8005cd6:	b087      	sub	sp, #28
 8005cd8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
  u8g2_uint_t xl, yu;
  u8g2_uint_t yl, xr;

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8005cdc:	eb01 060a 	add.w	r6, r1, sl
 8005ce0:	18d5      	adds	r5, r2, r3
 8005ce2:	b2b6      	uxth	r6, r6
 8005ce4:	b2ad      	uxth	r5, r5
{
 8005ce6:	9304      	str	r3, [sp, #16]
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8005ce8:	9500      	str	r5, [sp, #0]
 8005cea:	4633      	mov	r3, r6
{
 8005cec:	4680      	mov	r8, r0
 8005cee:	4689      	mov	r9, r1
 8005cf0:	4693      	mov	fp, r2
 8005cf2:	f8bd 4044 	ldrh.w	r4, [sp, #68]	@ 0x44
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8005cf6:	f000 fdf6 	bl	80068e6 <u8g2_IsIntersection>
 8005cfa:	2800      	cmp	r0, #0
 8005cfc:	d05a      	beq.n	8005db4 <u8g2_DrawRBox+0xe4>
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
  xl += r;
  yu = y;
  yu += r;
 8005cfe:	eb0b 0304 	add.w	r3, fp, r4
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	9303      	str	r3, [sp, #12]
  yl = y;
  yl += h;
  yl -= r; 
  yl -= 1;

  u8g2_DrawDisc(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
 8005d06:	2302      	movs	r3, #2
  xl += r;
 8005d08:	eb09 0704 	add.w	r7, r9, r4
 8005d0c:	b2bf      	uxth	r7, r7
  u8g2_DrawDisc(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
 8005d0e:	4639      	mov	r1, r7
 8005d10:	4640      	mov	r0, r8
 8005d12:	9a03      	ldr	r2, [sp, #12]
 8005d14:	9300      	str	r3, [sp, #0]
 8005d16:	4623      	mov	r3, r4
 8005d18:	f000 fa05 	bl	8006126 <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
 8005d1c:	2301      	movs	r3, #1
  xr -= 1;
 8005d1e:	1b36      	subs	r6, r6, r4
 8005d20:	3e01      	subs	r6, #1
 8005d22:	b2b6      	uxth	r6, r6
  u8g2_DrawDisc(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
 8005d24:	4631      	mov	r1, r6
 8005d26:	4640      	mov	r0, r8
 8005d28:	9a03      	ldr	r2, [sp, #12]
 8005d2a:	9300      	str	r3, [sp, #0]
 8005d2c:	4623      	mov	r3, r4
 8005d2e:	f000 f9fa 	bl	8006126 <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
 8005d32:	2304      	movs	r3, #4
  yl -= 1;
 8005d34:	1b2d      	subs	r5, r5, r4
 8005d36:	3d01      	subs	r5, #1
 8005d38:	b2ad      	uxth	r5, r5
  u8g2_DrawDisc(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
 8005d3a:	462a      	mov	r2, r5
 8005d3c:	4639      	mov	r1, r7
 8005d3e:	4640      	mov	r0, r8
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	4623      	mov	r3, r4
 8005d44:	f000 f9ef 	bl	8006126 <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
 8005d48:	2308      	movs	r3, #8
 8005d4a:	4631      	mov	r1, r6
 8005d4c:	0066      	lsls	r6, r4, #1
 8005d4e:	9300      	str	r3, [sp, #0]
 8005d50:	462a      	mov	r2, r5
 8005d52:	4623      	mov	r3, r4
 8005d54:	4640      	mov	r0, r8
 8005d56:	b2b6      	uxth	r6, r6
 8005d58:	f000 f9e5 	bl	8006126 <u8g2_DrawDisc>
  {
    u8g2_uint_t ww, hh;

    ww = w;
    ww -= r;
    ww -= r;
 8005d5c:	ebaa 0306 	sub.w	r3, sl, r6
 8005d60:	b29b      	uxth	r3, r3
    xl++;
    yu++;
    
    if ( ww >= 3 )
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d913      	bls.n	8005d8e <u8g2_DrawRBox+0xbe>
    xl++;
 8005d66:	3701      	adds	r7, #1
 8005d68:	b2b9      	uxth	r1, r7
    {
      ww -= 2;
      u8g2_DrawBox(u8g2, xl, y, ww, r+1);
 8005d6a:	3401      	adds	r4, #1
      ww -= 2;
 8005d6c:	1e9f      	subs	r7, r3, #2
 8005d6e:	b2bf      	uxth	r7, r7
      u8g2_DrawBox(u8g2, xl, y, ww, r+1);
 8005d70:	b2a4      	uxth	r4, r4
 8005d72:	463b      	mov	r3, r7
 8005d74:	465a      	mov	r2, fp
 8005d76:	4640      	mov	r0, r8
 8005d78:	9400      	str	r4, [sp, #0]
 8005d7a:	9105      	str	r1, [sp, #20]
 8005d7c:	f7ff ff40 	bl	8005c00 <u8g2_DrawBox>
      u8g2_DrawBox(u8g2, xl, yl, ww, r+1);
 8005d80:	463b      	mov	r3, r7
 8005d82:	462a      	mov	r2, r5
 8005d84:	4640      	mov	r0, r8
 8005d86:	9905      	ldr	r1, [sp, #20]
 8005d88:	9400      	str	r4, [sp, #0]
 8005d8a:	f7ff ff39 	bl	8005c00 <u8g2_DrawBox>
    }
    
    hh = h;
    hh -= r;
    hh -= r;
 8005d8e:	9b04      	ldr	r3, [sp, #16]
 8005d90:	1b9b      	subs	r3, r3, r6
 8005d92:	b29b      	uxth	r3, r3
    //h--;
    if ( hh >= 3 )
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d90d      	bls.n	8005db4 <u8g2_DrawRBox+0xe4>
    {
      hh -= 2;
 8005d98:	3b02      	subs	r3, #2
      u8g2_DrawBox(u8g2, x, yu, w, hh);
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	9310      	str	r3, [sp, #64]	@ 0x40
 8005d9e:	4649      	mov	r1, r9
 8005da0:	4653      	mov	r3, sl
 8005da2:	4640      	mov	r0, r8
    yu++;
 8005da4:	9a03      	ldr	r2, [sp, #12]
 8005da6:	3201      	adds	r2, #1
      u8g2_DrawBox(u8g2, x, yu, w, hh);
 8005da8:	b292      	uxth	r2, r2
    }
  }
}
 8005daa:	b007      	add	sp, #28
 8005dac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      u8g2_DrawBox(u8g2, x, yu, w, hh);
 8005db0:	f7ff bf26 	b.w	8005c00 <u8g2_DrawBox>
}
 8005db4:	b007      	add	sp, #28
 8005db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005dba <u8g2_DrawRFrame>:


void u8g2_DrawRFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
 8005dba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	f8bd b038 	ldrh.w	fp, [sp, #56]	@ 0x38
 8005dc4:	469a      	mov	sl, r3
  u8g2_uint_t xl, yu;

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8005dc6:	eb02 050b 	add.w	r5, r2, fp
 8005dca:	18cb      	adds	r3, r1, r3
 8005dcc:	b2ad      	uxth	r5, r5
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	9500      	str	r5, [sp, #0]
{
 8005dd2:	4606      	mov	r6, r0
 8005dd4:	4688      	mov	r8, r1
 8005dd6:	4691      	mov	r9, r2
 8005dd8:	f8bd 403c 	ldrh.w	r4, [sp, #60]	@ 0x3c
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8005ddc:	9303      	str	r3, [sp, #12]
 8005dde:	f000 fd82 	bl	80068e6 <u8g2_IsIntersection>
 8005de2:	2800      	cmp	r0, #0
 8005de4:	d066      	beq.n	8005eb4 <u8g2_DrawRFrame+0xfa>
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
  xl += r;
  yu = y;
  yu += r;
 8005de6:	eb09 0204 	add.w	r2, r9, r4
 8005dea:	b293      	uxth	r3, r2
 8005dec:	9302      	str	r3, [sp, #8]
    u8g2_uint_t yl, xr;
      
    xr = x;
    xr += w;
    xr -= r;
    xr -= 1;
 8005dee:	9b03      	ldr	r3, [sp, #12]
  xl += r;
 8005df0:	eb08 0704 	add.w	r7, r8, r4
    xr -= 1;
 8005df4:	1b1b      	subs	r3, r3, r4
 8005df6:	3b01      	subs	r3, #1
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	9303      	str	r3, [sp, #12]
    yl = y;
    yl += h;
    yl -= r; 
    yl -= 1;

    u8g2_DrawCircle(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
 8005dfc:	2302      	movs	r3, #2
  xl += r;
 8005dfe:	b2bf      	uxth	r7, r7
    u8g2_DrawCircle(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
 8005e00:	4639      	mov	r1, r7
 8005e02:	4630      	mov	r0, r6
 8005e04:	9a02      	ldr	r2, [sp, #8]
 8005e06:	9300      	str	r3, [sp, #0]
 8005e08:	4623      	mov	r3, r4
 8005e0a:	f000 f949 	bl	80060a0 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
 8005e0e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005e12:	2301      	movs	r3, #1
 8005e14:	4630      	mov	r0, r6
 8005e16:	9300      	str	r3, [sp, #0]
 8005e18:	4623      	mov	r3, r4
 8005e1a:	f000 f941 	bl	80060a0 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
 8005e1e:	2304      	movs	r3, #4
    yl -= 1;
 8005e20:	1b2d      	subs	r5, r5, r4
 8005e22:	3d01      	subs	r5, #1
 8005e24:	b2ad      	uxth	r5, r5
    u8g2_DrawCircle(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
 8005e26:	462a      	mov	r2, r5
 8005e28:	4639      	mov	r1, r7
 8005e2a:	4630      	mov	r0, r6
 8005e2c:	9300      	str	r3, [sp, #0]
 8005e2e:	4623      	mov	r3, r4
 8005e30:	f000 f936 	bl	80060a0 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
 8005e34:	2308      	movs	r3, #8
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	4623      	mov	r3, r4
 8005e3a:	0064      	lsls	r4, r4, #1
 8005e3c:	b2a4      	uxth	r4, r4
 8005e3e:	462a      	mov	r2, r5
  {
    u8g2_uint_t ww, hh;

    ww = w;
    ww -= r;
    ww -= r;
 8005e40:	ebaa 0504 	sub.w	r5, sl, r4
    u8g2_DrawCircle(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
 8005e44:	4630      	mov	r0, r6
 8005e46:	9903      	ldr	r1, [sp, #12]
    ww -= r;
 8005e48:	b2ad      	uxth	r5, r5
    u8g2_DrawCircle(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
 8005e4a:	f000 f929 	bl	80060a0 <u8g2_DrawCircle>
    hh = h;
    hh -= r;
    hh -= r;
 8005e4e:	ebab 0404 	sub.w	r4, fp, r4
    
    xl++;
    yu++;
    
    if ( ww >= 3 )
 8005e52:	2d02      	cmp	r5, #2
    hh -= r;
 8005e54:	b2a4      	uxth	r4, r4
    if ( ww >= 3 )
 8005e56:	d913      	bls.n	8005e80 <u8g2_DrawRFrame+0xc6>
    xl++;
 8005e58:	3701      	adds	r7, #1
    {
      ww -= 2;
 8005e5a:	3d02      	subs	r5, #2
    xl++;
 8005e5c:	b2bf      	uxth	r7, r7
      ww -= 2;
 8005e5e:	b2ad      	uxth	r5, r5
      h--;
      u8g2_DrawHLine(u8g2, xl, y, ww);
 8005e60:	462b      	mov	r3, r5
 8005e62:	464a      	mov	r2, r9
 8005e64:	4639      	mov	r1, r7
 8005e66:	4630      	mov	r0, r6
      h--;
 8005e68:	f10b 3bff 	add.w	fp, fp, #4294967295
      u8g2_DrawHLine(u8g2, xl, y, ww);
 8005e6c:	f000 fd00 	bl	8006870 <u8g2_DrawHLine>
      u8g2_DrawHLine(u8g2, xl, y+h, ww);
 8005e70:	eb09 020b 	add.w	r2, r9, fp
 8005e74:	462b      	mov	r3, r5
 8005e76:	4639      	mov	r1, r7
 8005e78:	4630      	mov	r0, r6
 8005e7a:	b292      	uxth	r2, r2
 8005e7c:	f000 fcf8 	bl	8006870 <u8g2_DrawHLine>
    }
    
    if ( hh >= 3 )
 8005e80:	2c02      	cmp	r4, #2
 8005e82:	d917      	bls.n	8005eb4 <u8g2_DrawRFrame+0xfa>
    yu++;
 8005e84:	9d02      	ldr	r5, [sp, #8]
    {
      hh -= 2;
 8005e86:	3c02      	subs	r4, #2
    yu++;
 8005e88:	3501      	adds	r5, #1
 8005e8a:	b2ad      	uxth	r5, r5
      hh -= 2;
 8005e8c:	b2a4      	uxth	r4, r4
      w--;
      u8g2_DrawVLine(u8g2, x, yu, hh);
 8005e8e:	4623      	mov	r3, r4
 8005e90:	462a      	mov	r2, r5
 8005e92:	4641      	mov	r1, r8
 8005e94:	4630      	mov	r0, r6
 8005e96:	f000 fcf2 	bl	800687e <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x+w, yu, hh);
 8005e9a:	4623      	mov	r3, r4
 8005e9c:	462a      	mov	r2, r5
 8005e9e:	4630      	mov	r0, r6
      w--;
 8005ea0:	f10a 3aff 	add.w	sl, sl, #4294967295
      u8g2_DrawVLine(u8g2, x+w, yu, hh);
 8005ea4:	eb08 010a 	add.w	r1, r8, sl
 8005ea8:	b289      	uxth	r1, r1
    }
  }
}
 8005eaa:	b005      	add	sp, #20
 8005eac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      u8g2_DrawVLine(u8g2, x+w, yu, hh);
 8005eb0:	f000 bce5 	b.w	800687e <u8g2_DrawVLine>
}
 8005eb4:	b005      	add	sp, #20
 8005eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005eba <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8005eba:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005ebe:	4604      	mov	r4, r0
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
  dest_row = u8g2->tile_curr_row;
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8005ec0:	2600      	movs	r6, #0
 8005ec2:	6803      	ldr	r3, [r0, #0]
  src_max = u8g2->tile_buf_height;
 8005ec4:	f890 9038 	ldrb.w	r9, [r0, #56]	@ 0x38
  dest_row = u8g2->tile_curr_row;
 8005ec8:	f890 7039 	ldrb.w	r7, [r0, #57]	@ 0x39
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8005ecc:	f893 8011 	ldrb.w	r8, [r3, #17]
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8005ed0:	6823      	ldr	r3, [r4, #0]
  ptr = u8g2->tile_buf_ptr;
 8005ed2:	6b60      	ldr	r0, [r4, #52]	@ 0x34
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8005ed4:	7c1b      	ldrb	r3, [r3, #16]
 8005ed6:	b2f5      	uxtb	r5, r6
  offset *= 8;
 8005ed8:	fb06 f103 	mul.w	r1, r6, r3
 8005edc:	00c9      	lsls	r1, r1, #3
  ptr += offset;
 8005ede:	b289      	uxth	r1, r1
 8005ee0:	4408      	add	r0, r1
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8005ee2:	197a      	adds	r2, r7, r5
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
    src_row++;
    dest_row++;
  } while( src_row < src_max && dest_row < dest_max );
 8005ee4:	3501      	adds	r5, #1
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8005ee6:	9000      	str	r0, [sp, #0]
 8005ee8:	2100      	movs	r1, #0
 8005eea:	4620      	mov	r0, r4
 8005eec:	b2d2      	uxtb	r2, r2
  } while( src_row < src_max && dest_row < dest_max );
 8005eee:	b2ed      	uxtb	r5, r5
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8005ef0:	f000 ff89 	bl	8006e06 <u8x8_DrawTile>
  } while( src_row < src_max && dest_row < dest_max );
 8005ef4:	45a9      	cmp	r9, r5
 8005ef6:	d904      	bls.n	8005f02 <u8g2_send_buffer+0x48>
 8005ef8:	3601      	adds	r6, #1
 8005efa:	19bb      	adds	r3, r7, r6
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	4598      	cmp	r8, r3
 8005f00:	d8e6      	bhi.n	8005ed0 <u8g2_send_buffer+0x16>
}
 8005f02:	b003      	add	sp, #12
 8005f04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08005f08 <u8g2_ClearBuffer>:
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8005f08:	6803      	ldr	r3, [r0, #0]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8005f0a:	2100      	movs	r1, #0
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8005f0c:	7c1a      	ldrb	r2, [r3, #16]
  cnt *= u8g2->tile_buf_height;
 8005f0e:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8005f12:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8005f14:	435a      	muls	r2, r3
 8005f16:	00d2      	lsls	r2, r2, #3
 8005f18:	f004 b827 	b.w	8009f6a <memset>

08005f1c <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8005f1c:	b510      	push	{r4, lr}
 8005f1e:	4604      	mov	r4, r0
  u8g2_send_buffer(u8g2);
 8005f20:	f7ff ffcb 	bl	8005eba <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8005f24:	4620      	mov	r0, r4
}
 8005f26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8005f2a:	f000 bf94 	b.w	8006e56 <u8x8_RefreshDisplay>

08005f2e <u8g2_draw_circle_section>:
/* Circle */

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 8005f2e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f32:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8005f36:	4607      	mov	r7, r0
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 8005f38:	f019 0f01 	tst.w	r9, #1
{
 8005f3c:	460d      	mov	r5, r1
 8005f3e:	4616      	mov	r6, r2
 8005f40:	461c      	mov	r4, r3
 8005f42:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 8005f46:	d00e      	beq.n	8005f66 <u8g2_draw_circle_section+0x38>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 - y);
 8005f48:	1859      	adds	r1, r3, r1
 8005f4a:	eba8 0202 	sub.w	r2, r8, r2
 8005f4e:	b292      	uxth	r2, r2
 8005f50:	b289      	uxth	r1, r1
 8005f52:	f000 fc9b 	bl	800688c <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 - x);
 8005f56:	eba8 0205 	sub.w	r2, r8, r5
 8005f5a:	19a1      	adds	r1, r4, r6
 8005f5c:	4638      	mov	r0, r7
 8005f5e:	b292      	uxth	r2, r2
 8005f60:	b289      	uxth	r1, r1
 8005f62:	f000 fc93 	bl	800688c <u8g2_DrawPixel>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 8005f66:	f019 0f02 	tst.w	r9, #2
 8005f6a:	d00f      	beq.n	8005f8c <u8g2_draw_circle_section+0x5e>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 - y);
 8005f6c:	eba8 0206 	sub.w	r2, r8, r6
 8005f70:	1b61      	subs	r1, r4, r5
 8005f72:	4638      	mov	r0, r7
 8005f74:	b292      	uxth	r2, r2
 8005f76:	b289      	uxth	r1, r1
 8005f78:	f000 fc88 	bl	800688c <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 - x);
 8005f7c:	eba8 0205 	sub.w	r2, r8, r5
 8005f80:	1ba1      	subs	r1, r4, r6
 8005f82:	4638      	mov	r0, r7
 8005f84:	b292      	uxth	r2, r2
 8005f86:	b289      	uxth	r1, r1
 8005f88:	f000 fc80 	bl	800688c <u8g2_DrawPixel>
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 8005f8c:	f019 0f08 	tst.w	r9, #8
 8005f90:	d00f      	beq.n	8005fb2 <u8g2_draw_circle_section+0x84>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 + y);
 8005f92:	eb08 0206 	add.w	r2, r8, r6
 8005f96:	1961      	adds	r1, r4, r5
 8005f98:	4638      	mov	r0, r7
 8005f9a:	b292      	uxth	r2, r2
 8005f9c:	b289      	uxth	r1, r1
 8005f9e:	f000 fc75 	bl	800688c <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 + x);
 8005fa2:	eb05 0208 	add.w	r2, r5, r8
 8005fa6:	19a1      	adds	r1, r4, r6
 8005fa8:	4638      	mov	r0, r7
 8005faa:	b292      	uxth	r2, r2
 8005fac:	b289      	uxth	r1, r1
 8005fae:	f000 fc6d 	bl	800688c <u8g2_DrawPixel>
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 8005fb2:	f019 0f04 	tst.w	r9, #4
 8005fb6:	d010      	beq.n	8005fda <u8g2_draw_circle_section+0xac>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 + y);
 8005fb8:	1b61      	subs	r1, r4, r5
 8005fba:	eb08 0206 	add.w	r2, r8, r6
 8005fbe:	4638      	mov	r0, r7
 8005fc0:	b292      	uxth	r2, r2
 8005fc2:	b289      	uxth	r1, r1
 8005fc4:	f000 fc62 	bl	800688c <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 + x);
 8005fc8:	4445      	add	r5, r8
 8005fca:	1ba1      	subs	r1, r4, r6
 8005fcc:	4638      	mov	r0, r7
 8005fce:	b2aa      	uxth	r2, r5
 8005fd0:	b289      	uxth	r1, r1
    }
}
 8005fd2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      u8g2_DrawPixel(u8g2, x0 - y, y0 + x);
 8005fd6:	f000 bc59 	b.w	800688c <u8g2_DrawPixel>
}
 8005fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005fde <u8g2_draw_disc_section>:
/* Disk */

static void u8g2_draw_disc_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_disc_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 8005fde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fe2:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8005fe6:	4607      	mov	r7, r0
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 8005fe8:	f019 0f01 	tst.w	r9, #1
{
 8005fec:	460c      	mov	r4, r1
 8005fee:	4616      	mov	r6, r2
 8005ff0:	461d      	mov	r5, r3
 8005ff2:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 8005ff6:	d012      	beq.n	800601e <u8g2_draw_disc_section+0x40>
    {
      u8g2_DrawVLine(u8g2, x0+x, y0-y, y+1);
 8005ff8:	1c53      	adds	r3, r2, #1
 8005ffa:	1869      	adds	r1, r5, r1
 8005ffc:	eba8 0202 	sub.w	r2, r8, r2
 8006000:	b29b      	uxth	r3, r3
 8006002:	b292      	uxth	r2, r2
 8006004:	b289      	uxth	r1, r1
 8006006:	f000 fc3a 	bl	800687e <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0+y, y0-x, x+1);
 800600a:	1c63      	adds	r3, r4, #1
 800600c:	eba8 0204 	sub.w	r2, r8, r4
 8006010:	19a9      	adds	r1, r5, r6
 8006012:	4638      	mov	r0, r7
 8006014:	b29b      	uxth	r3, r3
 8006016:	b292      	uxth	r2, r2
 8006018:	b289      	uxth	r1, r1
 800601a:	f000 fc30 	bl	800687e <u8g2_DrawVLine>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 800601e:	f019 0f02 	tst.w	r9, #2
 8006022:	d013      	beq.n	800604c <u8g2_draw_disc_section+0x6e>
    {
      u8g2_DrawVLine(u8g2, x0-x, y0-y, y+1);
 8006024:	1c73      	adds	r3, r6, #1
 8006026:	eba8 0206 	sub.w	r2, r8, r6
 800602a:	1b29      	subs	r1, r5, r4
 800602c:	4638      	mov	r0, r7
 800602e:	b29b      	uxth	r3, r3
 8006030:	b292      	uxth	r2, r2
 8006032:	b289      	uxth	r1, r1
 8006034:	f000 fc23 	bl	800687e <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0-y, y0-x, x+1);
 8006038:	1c63      	adds	r3, r4, #1
 800603a:	eba8 0204 	sub.w	r2, r8, r4
 800603e:	1ba9      	subs	r1, r5, r6
 8006040:	4638      	mov	r0, r7
 8006042:	b29b      	uxth	r3, r3
 8006044:	b292      	uxth	r2, r2
 8006046:	b289      	uxth	r1, r1
 8006048:	f000 fc19 	bl	800687e <u8g2_DrawVLine>
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 800604c:	f019 0f08 	tst.w	r9, #8
 8006050:	d00f      	beq.n	8006072 <u8g2_draw_disc_section+0x94>
    {
      u8g2_DrawVLine(u8g2, x0+x, y0, y+1);
 8006052:	1c73      	adds	r3, r6, #1
 8006054:	1929      	adds	r1, r5, r4
 8006056:	4642      	mov	r2, r8
 8006058:	4638      	mov	r0, r7
 800605a:	b29b      	uxth	r3, r3
 800605c:	b289      	uxth	r1, r1
 800605e:	f000 fc0e 	bl	800687e <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0+y, y0, x+1);
 8006062:	1c63      	adds	r3, r4, #1
 8006064:	19a9      	adds	r1, r5, r6
 8006066:	4642      	mov	r2, r8
 8006068:	4638      	mov	r0, r7
 800606a:	b29b      	uxth	r3, r3
 800606c:	b289      	uxth	r1, r1
 800606e:	f000 fc06 	bl	800687e <u8g2_DrawVLine>
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 8006072:	f019 0f04 	tst.w	r9, #4
 8006076:	d011      	beq.n	800609c <u8g2_draw_disc_section+0xbe>
    {
      u8g2_DrawVLine(u8g2, x0-x, y0, y+1);
 8006078:	1b29      	subs	r1, r5, r4
 800607a:	1c73      	adds	r3, r6, #1
 800607c:	4642      	mov	r2, r8
 800607e:	4638      	mov	r0, r7
 8006080:	b29b      	uxth	r3, r3
 8006082:	b289      	uxth	r1, r1
 8006084:	f000 fbfb 	bl	800687e <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0-y, y0, x+1);
 8006088:	3401      	adds	r4, #1
 800608a:	1ba9      	subs	r1, r5, r6
 800608c:	4642      	mov	r2, r8
 800608e:	4638      	mov	r0, r7
 8006090:	b2a3      	uxth	r3, r4
 8006092:	b289      	uxth	r1, r1
    }
}
 8006094:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      u8g2_DrawVLine(u8g2, x0-y, y0, x+1);
 8006098:	f000 bbf1 	b.w	800687e <u8g2_DrawVLine>
}
 800609c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080060a0 <u8g2_DrawCircle>:
{
 80060a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060a4:	4691      	mov	r9, r2
 80060a6:	461c      	mov	r4, r3
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 80060a8:	f109 0501 	add.w	r5, r9, #1
 80060ac:	3301      	adds	r3, #1
 80060ae:	4425      	add	r5, r4
 80060b0:	440b      	add	r3, r1
{
 80060b2:	4688      	mov	r8, r1
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 80060b4:	1b12      	subs	r2, r2, r4
 80060b6:	1b09      	subs	r1, r1, r4
 80060b8:	b2ad      	uxth	r5, r5
 80060ba:	9500      	str	r5, [sp, #0]
 80060bc:	b29b      	uxth	r3, r3
 80060be:	b292      	uxth	r2, r2
 80060c0:	b289      	uxth	r1, r1
{
 80060c2:	4682      	mov	sl, r0
 80060c4:	f89d b030 	ldrb.w	fp, [sp, #48]	@ 0x30
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 80060c8:	f000 fc0d 	bl	80068e6 <u8g2_IsIntersection>
 80060cc:	b188      	cbz	r0, 80060f2 <u8g2_DrawCircle+0x52>
    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
 80060ce:	4643      	mov	r3, r8
 80060d0:	4622      	mov	r2, r4
 80060d2:	2100      	movs	r1, #0
 80060d4:	4650      	mov	r0, sl
 80060d6:	e9cd 9b00 	strd	r9, fp, [sp]
 80060da:	f7ff ff28 	bl	8005f2e <u8g2_draw_circle_section>
    x = 0;
 80060de:	2600      	movs	r6, #0
    ddF_y *= 2;
 80060e0:	ebc4 37c4 	rsb	r7, r4, r4, lsl #15
    f -= rad;
 80060e4:	f1c4 0501 	rsb	r5, r4, #1
    ddF_y *= 2;
 80060e8:	007f      	lsls	r7, r7, #1
    f -= rad;
 80060ea:	b22d      	sxth	r5, r5
    ddF_y *= 2;
 80060ec:	b23f      	sxth	r7, r7
    while ( x < y )
 80060ee:	42b4      	cmp	r4, r6
 80060f0:	d802      	bhi.n	80060f8 <u8g2_DrawCircle+0x58>
}
 80060f2:	b003      	add	sp, #12
 80060f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (f >= 0) 
 80060f8:	2d00      	cmp	r5, #0
 80060fa:	db05      	blt.n	8006108 <u8g2_DrawCircle+0x68>
        ddF_y += 2;
 80060fc:	1cbb      	adds	r3, r7, #2
        y--;
 80060fe:	3c01      	subs	r4, #1
        ddF_y += 2;
 8006100:	b21f      	sxth	r7, r3
        f += ddF_y;
 8006102:	442b      	add	r3, r5
        y--;
 8006104:	b2a4      	uxth	r4, r4
        f += ddF_y;
 8006106:	b21d      	sxth	r5, r3
      x++;
 8006108:	3601      	adds	r6, #1
 800610a:	b2b6      	uxth	r6, r6
      ddF_x += 2;
 800610c:	eb05 0546 	add.w	r5, r5, r6, lsl #1
      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
 8006110:	4643      	mov	r3, r8
 8006112:	4622      	mov	r2, r4
 8006114:	4631      	mov	r1, r6
 8006116:	4650      	mov	r0, sl
 8006118:	e9cd 9b00 	strd	r9, fp, [sp]
      f += ddF_x;
 800611c:	3501      	adds	r5, #1
 800611e:	b22d      	sxth	r5, r5
      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
 8006120:	f7ff ff05 	bl	8005f2e <u8g2_draw_circle_section>
 8006124:	e7e3      	b.n	80060ee <u8g2_DrawCircle+0x4e>

08006126 <u8g2_DrawDisc>:
    u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);    
  }
}

void u8g2_DrawDisc(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8006126:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800612a:	4691      	mov	r9, r2
 800612c:	461c      	mov	r4, r3
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 800612e:	f109 0501 	add.w	r5, r9, #1
 8006132:	3301      	adds	r3, #1
 8006134:	4425      	add	r5, r4
 8006136:	440b      	add	r3, r1
{
 8006138:	4688      	mov	r8, r1
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 800613a:	1b12      	subs	r2, r2, r4
 800613c:	1b09      	subs	r1, r1, r4
 800613e:	b2ad      	uxth	r5, r5
 8006140:	9500      	str	r5, [sp, #0]
 8006142:	b29b      	uxth	r3, r3
 8006144:	b292      	uxth	r2, r2
 8006146:	b289      	uxth	r1, r1
{
 8006148:	4682      	mov	sl, r0
 800614a:	f89d b030 	ldrb.w	fp, [sp, #48]	@ 0x30
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 800614e:	f000 fbca 	bl	80068e6 <u8g2_IsIntersection>
 8006152:	b188      	cbz	r0, 8006178 <u8g2_DrawDisc+0x52>
  u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);
 8006154:	4643      	mov	r3, r8
 8006156:	4622      	mov	r2, r4
 8006158:	2100      	movs	r1, #0
 800615a:	4650      	mov	r0, sl
 800615c:	e9cd 9b00 	strd	r9, fp, [sp]
 8006160:	f7ff ff3d 	bl	8005fde <u8g2_draw_disc_section>
  x = 0;
 8006164:	2600      	movs	r6, #0
  ddF_y *= 2;
 8006166:	ebc4 37c4 	rsb	r7, r4, r4, lsl #15
  f -= rad;
 800616a:	f1c4 0501 	rsb	r5, r4, #1
  ddF_y *= 2;
 800616e:	007f      	lsls	r7, r7, #1
  f -= rad;
 8006170:	b22d      	sxth	r5, r5
  ddF_y *= 2;
 8006172:	b23f      	sxth	r7, r7
  while ( x < y )
 8006174:	42b4      	cmp	r4, r6
 8006176:	d802      	bhi.n	800617e <u8g2_DrawDisc+0x58>
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  /* draw disc */
  u8g2_draw_disc(u8g2, x0, y0, rad, option);
}
 8006178:	b003      	add	sp, #12
 800617a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (f >= 0) 
 800617e:	2d00      	cmp	r5, #0
 8006180:	db05      	blt.n	800618e <u8g2_DrawDisc+0x68>
      ddF_y += 2;
 8006182:	1cbb      	adds	r3, r7, #2
      y--;
 8006184:	3c01      	subs	r4, #1
      ddF_y += 2;
 8006186:	b21f      	sxth	r7, r3
      f += ddF_y;
 8006188:	442b      	add	r3, r5
      y--;
 800618a:	b2a4      	uxth	r4, r4
      f += ddF_y;
 800618c:	b21d      	sxth	r5, r3
    x++;
 800618e:	3601      	adds	r6, #1
 8006190:	b2b6      	uxth	r6, r6
    ddF_x += 2;
 8006192:	eb05 0546 	add.w	r5, r5, r6, lsl #1
    u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);    
 8006196:	4643      	mov	r3, r8
 8006198:	4622      	mov	r2, r4
 800619a:	4631      	mov	r1, r6
 800619c:	4650      	mov	r0, sl
 800619e:	e9cd 9b00 	strd	r9, fp, [sp]
    f += ddF_x;
 80061a2:	3501      	adds	r5, #1
 80061a4:	b22d      	sxth	r5, r5
    u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);    
 80061a6:	f7ff ff1a 	bl	8005fde <u8g2_draw_disc_section>
 80061aa:	e7e3      	b.n	8006174 <u8g2_DrawDisc+0x4e>

080061ac <u8g2_m_16_8_f>:
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 80061ac:	2308      	movs	r3, #8
 80061ae:	7003      	strb	r3, [r0, #0]
  return buf;
  #endif
}
 80061b0:	4800      	ldr	r0, [pc, #0]	@ (80061b4 <u8g2_m_16_8_f+0x8>)
 80061b2:	4770      	bx	lr
 80061b4:	200001dc 	.word	0x200001dc

080061b8 <u8g2_Setup_ssd1306_128x64_noname_f>:

#include "u8g2.h"

/* ssd1306 f */
void u8g2_Setup_ssd1306_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80061b8:	b530      	push	{r4, r5, lr}
 80061ba:	b085      	sub	sp, #20
 80061bc:	460d      	mov	r5, r1
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 80061be:	9300      	str	r3, [sp, #0]
 80061c0:	4909      	ldr	r1, [pc, #36]	@ (80061e8 <u8g2_Setup_ssd1306_128x64_noname_f+0x30>)
 80061c2:	4613      	mov	r3, r2
 80061c4:	4a09      	ldr	r2, [pc, #36]	@ (80061ec <u8g2_Setup_ssd1306_128x64_noname_f+0x34>)
{
 80061c6:	4604      	mov	r4, r0
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 80061c8:	f000 fe6a 	bl	8006ea0 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 80061cc:	f10d 000f 	add.w	r0, sp, #15
 80061d0:	f7ff ffec 	bl	80061ac <u8g2_m_16_8_f>
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80061d4:	4b06      	ldr	r3, [pc, #24]	@ (80061f0 <u8g2_Setup_ssd1306_128x64_noname_f+0x38>)
  buf = u8g2_m_16_8_f(&tile_buf_height);
 80061d6:	4601      	mov	r1, r0
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80061d8:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80061dc:	4620      	mov	r0, r4
 80061de:	9500      	str	r5, [sp, #0]
 80061e0:	f000 fc50 	bl	8006a84 <u8g2_SetupBuffer>
 80061e4:	b005      	add	sp, #20
 80061e6:	bd30      	pop	{r4, r5, pc}
 80061e8:	08006d65 	.word	0x08006d65
 80061ec:	08006c43 	.word	0x08006c43
 80061f0:	08006917 	.word	0x08006917

080061f4 <u8g2_font_get_word>:
    font += offset;
    pos = u8x8_pgm_read( font );
    font++;
    pos <<= 8;
    pos += u8x8_pgm_read( font);
    return pos;
 80061f4:	5a40      	ldrh	r0, [r0, r1]
 80061f6:	ba40      	rev16	r0, r0
}
 80061f8:	b280      	uxth	r0, r0
 80061fa:	4770      	bx	lr

080061fc <u8g2_font_calc_vref_font>:
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
  return 0;
}
 80061fc:	2000      	movs	r0, #0
 80061fe:	4770      	bx	lr

08006200 <u8g2_read_font_info>:
{
 8006200:	460a      	mov	r2, r1
 8006202:	b508      	push	{r3, lr}
  return u8x8_pgm_read( font );  
 8006204:	7809      	ldrb	r1, [r1, #0]
{
 8006206:	4603      	mov	r3, r0
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8006208:	7001      	strb	r1, [r0, #0]
  return u8x8_pgm_read( font );  
 800620a:	7851      	ldrb	r1, [r2, #1]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 800620c:	7041      	strb	r1, [r0, #1]
  return u8x8_pgm_read( font );  
 800620e:	7891      	ldrb	r1, [r2, #2]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8006210:	7081      	strb	r1, [r0, #2]
  return u8x8_pgm_read( font );  
 8006212:	78d1      	ldrb	r1, [r2, #3]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8006214:	70c1      	strb	r1, [r0, #3]
  return u8x8_pgm_read( font );  
 8006216:	7911      	ldrb	r1, [r2, #4]
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8006218:	7101      	strb	r1, [r0, #4]
  return u8x8_pgm_read( font );  
 800621a:	7951      	ldrb	r1, [r2, #5]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 800621c:	7141      	strb	r1, [r0, #5]
  return u8x8_pgm_read( font );  
 800621e:	7991      	ldrb	r1, [r2, #6]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8006220:	7181      	strb	r1, [r0, #6]
  return u8x8_pgm_read( font );  
 8006222:	79d1      	ldrb	r1, [r2, #7]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8006224:	71c1      	strb	r1, [r0, #7]
  return u8x8_pgm_read( font );  
 8006226:	7a11      	ldrb	r1, [r2, #8]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8006228:	7201      	strb	r1, [r0, #8]
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 800622a:	7a51      	ldrb	r1, [r2, #9]
 800622c:	7241      	strb	r1, [r0, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 800622e:	7a91      	ldrb	r1, [r2, #10]
 8006230:	7281      	strb	r1, [r0, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8006232:	7ad1      	ldrb	r1, [r2, #11]
 8006234:	72c1      	strb	r1, [r0, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8006236:	7b11      	ldrb	r1, [r2, #12]
 8006238:	7301      	strb	r1, [r0, #12]
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 800623a:	7b51      	ldrb	r1, [r2, #13]
 800623c:	7341      	strb	r1, [r0, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 800623e:	7b91      	ldrb	r1, [r2, #14]
 8006240:	7381      	strb	r1, [r0, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8006242:	7bd1      	ldrb	r1, [r2, #15]
 8006244:	73c1      	strb	r1, [r0, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8006246:	7c11      	ldrb	r1, [r2, #16]
 8006248:	7401      	strb	r1, [r0, #16]
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800624a:	2111      	movs	r1, #17
 800624c:	4610      	mov	r0, r2
 800624e:	f7ff ffd1 	bl	80061f4 <u8g2_font_get_word>
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8006252:	2113      	movs	r1, #19
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8006254:	8258      	strh	r0, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8006256:	4610      	mov	r0, r2
 8006258:	f7ff ffcc 	bl	80061f4 <u8g2_font_get_word>
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800625c:	2115      	movs	r1, #21
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 800625e:	8298      	strh	r0, [r3, #20]
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8006260:	4610      	mov	r0, r2
 8006262:	f7ff ffc7 	bl	80061f4 <u8g2_font_get_word>
 8006266:	82d8      	strh	r0, [r3, #22]
}
 8006268:	bd08      	pop	{r3, pc}

0800626a <u8g2_font_decode_get_unsigned_bits>:
{
 800626a:	b570      	push	{r4, r5, r6, lr}
  uint8_t bit_pos = f->decode_bit_pos;
 800626c:	7b04      	ldrb	r4, [r0, #12]
  val = u8x8_pgm_read( f->decode_ptr );  
 800626e:	6803      	ldr	r3, [r0, #0]
  bit_pos_plus_cnt += cnt;
 8006270:	1862      	adds	r2, r4, r1
  val >>= bit_pos;
 8006272:	781d      	ldrb	r5, [r3, #0]
  bit_pos_plus_cnt += cnt;
 8006274:	b2d2      	uxtb	r2, r2
  if ( bit_pos_plus_cnt >= 8 )
 8006276:	2a07      	cmp	r2, #7
  val >>= bit_pos;
 8006278:	fa45 f504 	asr.w	r5, r5, r4
  if ( bit_pos_plus_cnt >= 8 )
 800627c:	d807      	bhi.n	800628e <u8g2_font_decode_get_unsigned_bits+0x24>
  val >>= bit_pos;
 800627e:	b2eb      	uxtb	r3, r5
  f->decode_bit_pos = bit_pos_plus_cnt;
 8006280:	7302      	strb	r2, [r0, #12]
  val &= (1U<<cnt)-1;
 8006282:	f04f 30ff 	mov.w	r0, #4294967295
 8006286:	4088      	lsls	r0, r1
}
 8006288:	ea23 0000 	bic.w	r0, r3, r0
 800628c:	bd70      	pop	{r4, r5, r6, pc}
    f->decode_ptr++;
 800628e:	1c5e      	adds	r6, r3, #1
 8006290:	6006      	str	r6, [r0, #0]
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8006292:	785b      	ldrb	r3, [r3, #1]
    s -= bit_pos;
 8006294:	f1c4 0408 	rsb	r4, r4, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8006298:	b2e4      	uxtb	r4, r4
 800629a:	40a3      	lsls	r3, r4
 800629c:	432b      	orrs	r3, r5
    bit_pos_plus_cnt -= 8;
 800629e:	3a08      	subs	r2, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80062a0:	b2db      	uxtb	r3, r3
    bit_pos_plus_cnt -= 8;
 80062a2:	b2d2      	uxtb	r2, r2
 80062a4:	e7ec      	b.n	8006280 <u8g2_font_decode_get_unsigned_bits+0x16>

080062a6 <u8g2_font_setup_decode>:
{
 80062a6:	b538      	push	{r3, r4, r5, lr}
  decode->decode_bit_pos = 0;
 80062a8:	2300      	movs	r3, #0
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80062aa:	f100 0560 	add.w	r5, r0, #96	@ 0x60
{
 80062ae:	4604      	mov	r4, r0
  decode->decode_bit_pos = 0;
 80062b0:	f880 306c 	strb.w	r3, [r0, #108]	@ 0x6c
  decode->decode_ptr = glyph_data;
 80062b4:	6601      	str	r1, [r0, #96]	@ 0x60
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 80062b6:	f890 1078 	ldrb.w	r1, [r0, #120]	@ 0x78
 80062ba:	4628      	mov	r0, r5
 80062bc:	f7ff ffd5 	bl	800626a <u8g2_font_decode_get_unsigned_bits>
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 80062c0:	f894 1079 	ldrb.w	r1, [r4, #121]	@ 0x79
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 80062c4:	f884 006a 	strb.w	r0, [r4, #106]	@ 0x6a
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 80062c8:	4628      	mov	r0, r5
 80062ca:	f7ff ffce 	bl	800626a <u8g2_font_decode_get_unsigned_bits>
  decode->fg_color = u8g2->draw_color;
 80062ce:	f894 3092 	ldrb.w	r3, [r4, #146]	@ 0x92
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 80062d2:	f884 006b 	strb.w	r0, [r4, #107]	@ 0x6b
  decode->fg_color = u8g2->draw_color;
 80062d6:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 80062da:	fab3 f383 	clz	r3, r3
 80062de:	095b      	lsrs	r3, r3, #5
 80062e0:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
}
 80062e4:	bd38      	pop	{r3, r4, r5, pc}

080062e6 <u8g2_font_decode_get_signed_bits>:
{
 80062e6:	b510      	push	{r4, lr}
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 80062e8:	f7ff ffbf 	bl	800626a <u8g2_font_decode_get_unsigned_bits>
  d <<= cnt;
 80062ec:	2301      	movs	r3, #1
  cnt--;
 80062ee:	1e4c      	subs	r4, r1, #1
  d <<= cnt;
 80062f0:	b2e4      	uxtb	r4, r4
 80062f2:	40a3      	lsls	r3, r4
  v -= d;
 80062f4:	1ac0      	subs	r0, r0, r3
}
 80062f6:	b240      	sxtb	r0, r0
 80062f8:	bd10      	pop	{r4, pc}

080062fa <u8g2_add_vector_y>:
  switch(dir)
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d005      	beq.n	800630a <u8g2_add_vector_y+0x10>
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d005      	beq.n	800630e <u8g2_add_vector_y+0x14>
 8006302:	b933      	cbnz	r3, 8006312 <u8g2_add_vector_y+0x18>
      dy += y;
 8006304:	4410      	add	r0, r2
      dy -= x;
 8006306:	b280      	uxth	r0, r0
}
 8006308:	4770      	bx	lr
      dy += x;
 800630a:	4408      	add	r0, r1
 800630c:	e7fb      	b.n	8006306 <u8g2_add_vector_y+0xc>
      dy -= y;
 800630e:	1a80      	subs	r0, r0, r2
 8006310:	e7f9      	b.n	8006306 <u8g2_add_vector_y+0xc>
      dy -= x;
 8006312:	1a40      	subs	r0, r0, r1
 8006314:	e7f7      	b.n	8006306 <u8g2_add_vector_y+0xc>

08006316 <u8g2_add_vector_x>:
  switch(dir)
 8006316:	2b01      	cmp	r3, #1
 8006318:	d005      	beq.n	8006326 <u8g2_add_vector_x+0x10>
 800631a:	2b02      	cmp	r3, #2
 800631c:	d005      	beq.n	800632a <u8g2_add_vector_x+0x14>
 800631e:	b933      	cbnz	r3, 800632e <u8g2_add_vector_x+0x18>
      dx += x;
 8006320:	4408      	add	r0, r1
      dx += y;
 8006322:	b280      	uxth	r0, r0
}
 8006324:	4770      	bx	lr
      dx -= y;
 8006326:	1a80      	subs	r0, r0, r2
 8006328:	e7fb      	b.n	8006322 <u8g2_add_vector_x+0xc>
      dx -= x;
 800632a:	1a40      	subs	r0, r0, r1
 800632c:	e7f9      	b.n	8006322 <u8g2_add_vector_x+0xc>
      dx += y;
 800632e:	4410      	add	r0, r2
 8006330:	e7f7      	b.n	8006322 <u8g2_add_vector_x+0xc>

08006332 <u8g2_font_decode_len>:
{
 8006332:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006336:	4604      	mov	r4, r0
 8006338:	460e      	mov	r6, r1
 800633a:	b087      	sub	sp, #28
  lx = decode->x;
 800633c:	f890 5068 	ldrb.w	r5, [r0, #104]	@ 0x68
  ly = decode->y;
 8006340:	f890 7069 	ldrb.w	r7, [r0, #105]	@ 0x69
{
 8006344:	9205      	str	r2, [sp, #20]
    rem = decode->glyph_width;
 8006346:	f894 a06a 	ldrb.w	sl, [r4, #106]	@ 0x6a
    y = decode->target_y;
 800634a:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
    rem -= lx;
 800634e:	ebaa 0805 	sub.w	r8, sl, r5
 8006352:	fa5f f888 	uxtb.w	r8, r8
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8006356:	fa4f f987 	sxtb.w	r9, r7
 800635a:	464a      	mov	r2, r9
 800635c:	4546      	cmp	r6, r8
 800635e:	b269      	sxtb	r1, r5
    y = decode->target_y;
 8006360:	9304      	str	r3, [sp, #16]
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8006362:	f8b4 0064 	ldrh.w	r0, [r4, #100]	@ 0x64
 8006366:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 800636a:	46b3      	mov	fp, r6
 800636c:	bf28      	it	cs
 800636e:	46c3      	movcs	fp, r8
 8006370:	f7ff ffd1 	bl	8006316 <u8g2_add_vector_x>
 8006374:	9003      	str	r0, [sp, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8006376:	9804      	ldr	r0, [sp, #16]
 8006378:	f7ff ffbf 	bl	80062fa <u8g2_add_vector_y>
    if ( is_foreground )
 800637c:	9905      	ldr	r1, [sp, #20]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 800637e:	4602      	mov	r2, r0
    if ( is_foreground )
 8006380:	b1a1      	cbz	r1, 80063ac <u8g2_font_decode_len+0x7a>
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8006382:	f894 106e 	ldrb.w	r1, [r4, #110]	@ 0x6e
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8006386:	f884 1092 	strb.w	r1, [r4, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 800638a:	4620      	mov	r0, r4
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	9903      	ldr	r1, [sp, #12]
 8006390:	465b      	mov	r3, fp
 8006392:	f000 fa05 	bl	80067a0 <u8g2_DrawHVLine>
    if ( cnt < rem )
 8006396:	4435      	add	r5, r6
 8006398:	4546      	cmp	r6, r8
 800639a:	b2ed      	uxtb	r5, r5
 800639c:	d30d      	bcc.n	80063ba <u8g2_font_decode_len+0x88>
    cnt -= rem;
 800639e:	eba5 050a 	sub.w	r5, r5, sl
    ly++;
 80063a2:	3701      	adds	r7, #1
    cnt -= rem;
 80063a4:	b2ee      	uxtb	r6, r5
    ly++;
 80063a6:	b2ff      	uxtb	r7, r7
    lx = 0;
 80063a8:	2500      	movs	r5, #0
    rem = decode->glyph_width;
 80063aa:	e7cc      	b.n	8006346 <u8g2_font_decode_len+0x14>
    else if ( decode->is_transparent == 0 )    
 80063ac:	f894 106d 	ldrb.w	r1, [r4, #109]	@ 0x6d
 80063b0:	2900      	cmp	r1, #0
 80063b2:	d1f0      	bne.n	8006396 <u8g2_font_decode_len+0x64>
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80063b4:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 80063b8:	e7e5      	b.n	8006386 <u8g2_font_decode_len+0x54>
  decode->x = lx;
 80063ba:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
  decode->y = ly;  
 80063be:	f884 9069 	strb.w	r9, [r4, #105]	@ 0x69
}
 80063c2:	b007      	add	sp, #28
 80063c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080063c8 <u8g2_font_decode_glyph>:
{
 80063c8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80063cc:	4604      	mov	r4, r0
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80063ce:	f100 0860 	add.w	r8, r0, #96	@ 0x60
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 80063d2:	f7ff ff68 	bl	80062a6 <u8g2_font_setup_decode>
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 80063d6:	f894 107a 	ldrb.w	r1, [r4, #122]	@ 0x7a
 80063da:	4640      	mov	r0, r8
  h = u8g2->font_decode.glyph_height;
 80063dc:	f994 706b 	ldrsb.w	r7, [r4, #107]	@ 0x6b
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 80063e0:	f7ff ff81 	bl	80062e6 <u8g2_font_decode_get_signed_bits>
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80063e4:	f894 107b 	ldrb.w	r1, [r4, #123]	@ 0x7b
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 80063e8:	4682      	mov	sl, r0
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80063ea:	4640      	mov	r0, r8
 80063ec:	f7ff ff7b 	bl	80062e6 <u8g2_font_decode_get_signed_bits>
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 80063f0:	f894 107c 	ldrb.w	r1, [r4, #124]	@ 0x7c
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80063f4:	4606      	mov	r6, r0
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 80063f6:	4640      	mov	r0, r8
 80063f8:	f7ff ff75 	bl	80062e6 <u8g2_font_decode_get_signed_bits>
  if ( decode->glyph_width > 0 )
 80063fc:	f994 506a 	ldrsb.w	r5, [r4, #106]	@ 0x6a
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8006400:	4681      	mov	r9, r0
  if ( decode->glyph_width > 0 )
 8006402:	2d00      	cmp	r5, #0
 8006404:	dd4a      	ble.n	800649c <u8g2_font_decode_glyph+0xd4>
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8006406:	19ba      	adds	r2, r7, r6
 8006408:	4252      	negs	r2, r2
 800640a:	b252      	sxtb	r2, r2
 800640c:	4651      	mov	r1, sl
 800640e:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8006412:	f8b4 0064 	ldrh.w	r0, [r4, #100]	@ 0x64
 8006416:	f7ff ff7e 	bl	8006316 <u8g2_add_vector_x>
 800641a:	f8a4 0064 	strh.w	r0, [r4, #100]	@ 0x64
 800641e:	4606      	mov	r6, r0
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8006420:	f8b4 0066 	ldrh.w	r0, [r4, #102]	@ 0x66
 8006424:	f7ff ff69 	bl	80062fa <u8g2_add_vector_y>
 8006428:	4602      	mov	r2, r0
 800642a:	f8a4 0066 	strh.w	r0, [r4, #102]	@ 0x66
      switch(decode->dir)
 800642e:	2b03      	cmp	r3, #3
 8006430:	d857      	bhi.n	80064e2 <u8g2_font_decode_glyph+0x11a>
 8006432:	e8df f003 	tbb	[pc, r3]
 8006436:	3702      	.short	0x3702
 8006438:	4d40      	.short	0x4d40
	    x1 += decode->glyph_width;
 800643a:	4435      	add	r5, r6
	    y1 += h;
 800643c:	19c1      	adds	r1, r0, r7
	    x1 += decode->glyph_width;
 800643e:	b2ab      	uxth	r3, r5
	    y1 += h;
 8006440:	b289      	uxth	r1, r1
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8006442:	9100      	str	r1, [sp, #0]
 8006444:	4620      	mov	r0, r4
 8006446:	4631      	mov	r1, r6
 8006448:	f000 fa4d 	bl	80068e6 <u8g2_IsIntersection>
 800644c:	b330      	cbz	r0, 800649c <u8g2_font_decode_glyph+0xd4>
    decode->x = 0;
 800644e:	2300      	movs	r3, #0
 8006450:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8006454:	f894 1076 	ldrb.w	r1, [r4, #118]	@ 0x76
 8006458:	4640      	mov	r0, r8
 800645a:	f7ff ff06 	bl	800626a <u8g2_font_decode_get_unsigned_bits>
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 800645e:	f894 1077 	ldrb.w	r1, [r4, #119]	@ 0x77
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8006462:	4606      	mov	r6, r0
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8006464:	4640      	mov	r0, r8
 8006466:	f7ff ff00 	bl	800626a <u8g2_font_decode_get_unsigned_bits>
 800646a:	4605      	mov	r5, r0
	u8g2_font_decode_len(u8g2, a, 0);
 800646c:	2200      	movs	r2, #0
 800646e:	4631      	mov	r1, r6
 8006470:	4620      	mov	r0, r4
 8006472:	f7ff ff5e 	bl	8006332 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8006476:	4629      	mov	r1, r5
 8006478:	4620      	mov	r0, r4
 800647a:	2201      	movs	r2, #1
 800647c:	f7ff ff59 	bl	8006332 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8006480:	2101      	movs	r1, #1
 8006482:	4640      	mov	r0, r8
 8006484:	f7ff fef1 	bl	800626a <u8g2_font_decode_get_unsigned_bits>
 8006488:	2800      	cmp	r0, #0
 800648a:	d1ef      	bne.n	800646c <u8g2_font_decode_glyph+0xa4>
      if ( decode->y >= h )
 800648c:	f994 3069 	ldrsb.w	r3, [r4, #105]	@ 0x69
 8006490:	42bb      	cmp	r3, r7
 8006492:	dbdf      	blt.n	8006454 <u8g2_font_decode_glyph+0x8c>
    u8g2->draw_color = decode->fg_color;
 8006494:	f894 306e 	ldrb.w	r3, [r4, #110]	@ 0x6e
 8006498:	f884 3092 	strb.w	r3, [r4, #146]	@ 0x92
}
 800649c:	4648      	mov	r0, r9
 800649e:	b002      	add	sp, #8
 80064a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80064a4:	f1c7 0001 	rsb	r0, r7, #1
	    x1++;
 80064a8:	1c73      	adds	r3, r6, #1
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80064aa:	4430      	add	r0, r6
	    y1 += decode->glyph_width;
 80064ac:	1951      	adds	r1, r2, r5
	    x1++;
 80064ae:	b29b      	uxth	r3, r3
	    y1 += decode->glyph_width;
 80064b0:	b289      	uxth	r1, r1
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80064b2:	b286      	uxth	r6, r0
	    break;
 80064b4:	e7c5      	b.n	8006442 <u8g2_font_decode_glyph+0x7a>
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80064b6:	f1c5 0501 	rsb	r5, r5, #1
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80064ba:	f1c7 0001 	rsb	r0, r7, #1
	    x1++;
 80064be:	1c73      	adds	r3, r6, #1
	    y1++;
 80064c0:	1c51      	adds	r1, r2, #1
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80064c2:	4435      	add	r5, r6
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80064c4:	4410      	add	r0, r2
	    x1++;
 80064c6:	b29b      	uxth	r3, r3
	    y1++;
 80064c8:	b289      	uxth	r1, r1
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80064ca:	b282      	uxth	r2, r0
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80064cc:	b2ae      	uxth	r6, r5
	    break;	  
 80064ce:	e7b8      	b.n	8006442 <u8g2_font_decode_glyph+0x7a>
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80064d0:	f1c5 0501 	rsb	r5, r5, #1
	    x1 += h;
 80064d4:	19f3      	adds	r3, r6, r7
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80064d6:	4405      	add	r5, r0
	    y1++;
 80064d8:	1c41      	adds	r1, r0, #1
	    x1 += h;
 80064da:	b29b      	uxth	r3, r3
	    y1++;
 80064dc:	b289      	uxth	r1, r1
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80064de:	b2aa      	uxth	r2, r5
	    break;	  
 80064e0:	e7af      	b.n	8006442 <u8g2_font_decode_glyph+0x7a>
      switch(decode->dir)
 80064e2:	4601      	mov	r1, r0
 80064e4:	4633      	mov	r3, r6
 80064e6:	e7ac      	b.n	8006442 <u8g2_font_decode_glyph+0x7a>

080064e8 <u8g2_font_get_glyph_data>:
  const uint8_t *font = u8g2->font;
 80064e8:	6d83      	ldr	r3, [r0, #88]	@ 0x58
  if ( encoding <= 255 )
 80064ea:	29ff      	cmp	r1, #255	@ 0xff
{
 80064ec:	460a      	mov	r2, r1
 80064ee:	b510      	push	{r4, lr}
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 80064f0:	f103 0317 	add.w	r3, r3, #23
  if ( encoding <= 255 )
 80064f4:	d812      	bhi.n	800651c <u8g2_font_get_glyph_data+0x34>
    if ( encoding >= 'a' )
 80064f6:	2960      	cmp	r1, #96	@ 0x60
 80064f8:	d909      	bls.n	800650e <u8g2_font_get_glyph_data+0x26>
      font += u8g2->font_info.start_pos_lower_a;
 80064fa:	f8b0 1088 	ldrh.w	r1, [r0, #136]	@ 0x88
      font += u8g2->font_info.start_pos_upper_A;
 80064fe:	440b      	add	r3, r1
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8006500:	7858      	ldrb	r0, [r3, #1]
 8006502:	b118      	cbz	r0, 800650c <u8g2_font_get_glyph_data+0x24>
      if ( u8x8_pgm_read( font ) == encoding )
 8006504:	7819      	ldrb	r1, [r3, #0]
 8006506:	4291      	cmp	r1, r2
 8006508:	d106      	bne.n	8006518 <u8g2_font_get_glyph_data+0x30>
	return font+2;	/* skip encoding and glyph size */
 800650a:	1c98      	adds	r0, r3, #2
}
 800650c:	bd10      	pop	{r4, pc}
    else if ( encoding >= 'A' )
 800650e:	2940      	cmp	r1, #64	@ 0x40
 8006510:	d9f6      	bls.n	8006500 <u8g2_font_get_glyph_data+0x18>
      font += u8g2->font_info.start_pos_upper_A;
 8006512:	f8b0 1086 	ldrh.w	r1, [r0, #134]	@ 0x86
 8006516:	e7f2      	b.n	80064fe <u8g2_font_get_glyph_data+0x16>
      font += u8x8_pgm_read( font + 1 );
 8006518:	4403      	add	r3, r0
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800651a:	e7f1      	b.n	8006500 <u8g2_font_get_glyph_data+0x18>
    font += u8g2->font_info.start_pos_unicode;
 800651c:	f8b0 108a 	ldrh.w	r1, [r0, #138]	@ 0x8a
 8006520:	440b      	add	r3, r1
    unicode_lookup_table = font; 
 8006522:	461c      	mov	r4, r3
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8006524:	2100      	movs	r1, #0
 8006526:	4620      	mov	r0, r4
 8006528:	f7ff fe64 	bl	80061f4 <u8g2_font_get_word>
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 800652c:	2102      	movs	r1, #2
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 800652e:	4403      	add	r3, r0
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8006530:	4620      	mov	r0, r4
 8006532:	f7ff fe5f 	bl	80061f4 <u8g2_font_get_word>
    } while( e < encoding );
 8006536:	4282      	cmp	r2, r0
      unicode_lookup_table+=4;
 8006538:	f104 0404 	add.w	r4, r4, #4
    } while( e < encoding );
 800653c:	d8f2      	bhi.n	8006524 <u8g2_font_get_glyph_data+0x3c>
      e |= u8x8_pgm_read( font + 1 );
 800653e:	8818      	ldrh	r0, [r3, #0]
 8006540:	ba41      	rev16	r1, r0
 8006542:	b289      	uxth	r1, r1
      if ( e == 0 )
 8006544:	2800      	cmp	r0, #0
 8006546:	d0e1      	beq.n	800650c <u8g2_font_get_glyph_data+0x24>
      if ( e == encoding )
 8006548:	428a      	cmp	r2, r1
 800654a:	d101      	bne.n	8006550 <u8g2_font_get_glyph_data+0x68>
	return font+3;	/* skip encoding and glyph size */
 800654c:	1cd8      	adds	r0, r3, #3
 800654e:	e7dd      	b.n	800650c <u8g2_font_get_glyph_data+0x24>
      font += u8x8_pgm_read( font + 2 );
 8006550:	7899      	ldrb	r1, [r3, #2]
 8006552:	440b      	add	r3, r1
      e = u8x8_pgm_read( font );
 8006554:	e7f3      	b.n	800653e <u8g2_font_get_glyph_data+0x56>

08006556 <u8g2_GetGlyphWidth>:
{
 8006556:	b538      	push	{r3, r4, r5, lr}
 8006558:	4604      	mov	r4, r0
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, requested_encoding);
 800655a:	f7ff ffc5 	bl	80064e8 <u8g2_font_get_glyph_data>
 800655e:	4601      	mov	r1, r0
  if ( glyph_data == NULL )
 8006560:	b1b8      	cbz	r0, 8006592 <u8g2_GetGlyphWidth+0x3c>
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 8006562:	f104 0560 	add.w	r5, r4, #96	@ 0x60
  u8g2_font_setup_decode(u8g2, glyph_data);
 8006566:	4620      	mov	r0, r4
 8006568:	f7ff fe9d 	bl	80062a6 <u8g2_font_setup_decode>
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 800656c:	f894 107a 	ldrb.w	r1, [r4, #122]	@ 0x7a
 8006570:	4628      	mov	r0, r5
 8006572:	f7ff feb8 	bl	80062e6 <u8g2_font_decode_get_signed_bits>
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
 8006576:	f894 107b 	ldrb.w	r1, [r4, #123]	@ 0x7b
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 800657a:	f884 0090 	strb.w	r0, [r4, #144]	@ 0x90
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
 800657e:	4628      	mov	r0, r5
 8006580:	f7ff feb1 	bl	80062e6 <u8g2_font_decode_get_signed_bits>
  return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 8006584:	4628      	mov	r0, r5
 8006586:	f894 107c 	ldrb.w	r1, [r4, #124]	@ 0x7c
}
 800658a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 800658e:	f7ff beaa 	b.w	80062e6 <u8g2_font_decode_get_signed_bits>
}
 8006592:	bd38      	pop	{r3, r4, r5, pc}

08006594 <u8g2_string_width>:


/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str)
{
 8006594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u8g2_uint_t  w, dx;
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
  int8_t initial_x_offset = -64;
#endif 
  
  u8g2->font_decode.glyph_width = 0;
 8006598:	2500      	movs	r5, #0
{
 800659a:	4688      	mov	r8, r1
  u8g2->font_decode.glyph_width = 0;
 800659c:	f880 506a 	strb.w	r5, [r0, #106]	@ 0x6a
{
 80065a0:	4606      	mov	r6, r0
  int8_t initial_x_offset = -64;
 80065a2:	f06f 073f 	mvn.w	r7, #63	@ 0x3f
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80065a6:	f000 fad4 	bl	8006b52 <u8x8_utf8_init>
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
 80065aa:	462c      	mov	r4, r5
  // printf("str=<%s>\n", str);
	
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
    if ( e == 0x0ffff )
 80065ac:	f64f 79ff 	movw	r9, #65535	@ 0xffff
      break;
    str++;
    if ( e != 0x0fffe )
 80065b0:	f64f 7afe 	movw	sl, #65534	@ 0xfffe
 80065b4:	f108 38ff 	add.w	r8, r8, #4294967295
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80065b8:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 80065bc:	4630      	mov	r0, r6
 80065be:	6873      	ldr	r3, [r6, #4]
 80065c0:	4798      	blx	r3
    if ( e == 0x0ffff )
 80065c2:	4548      	cmp	r0, r9
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80065c4:	4601      	mov	r1, r0
    if ( e == 0x0ffff )
 80065c6:	d00d      	beq.n	80065e4 <u8g2_string_width+0x50>
    if ( e != 0x0fffe )
 80065c8:	4550      	cmp	r0, sl
 80065ca:	d0f5      	beq.n	80065b8 <u8g2_string_width+0x24>
    {
      dx = u8g2_GetGlyphWidth(u8g2, e);		/* delta x value of the glyph */
 80065cc:	4630      	mov	r0, r6
 80065ce:	f7ff ffc2 	bl	8006556 <u8g2_GetGlyphWidth>
 80065d2:	b285      	uxth	r5, r0
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
      if ( initial_x_offset == -64 )
 80065d4:	f117 0f40 	cmn.w	r7, #64	@ 0x40
        initial_x_offset = u8g2->glyph_x_offset;
#endif 
      //printf("'%c' x=%d dx=%d w=%d io=%d ", e, u8g2->glyph_x_offset, dx, u8g2->font_decode.glyph_width, initial_x_offset);
      w += dx;
 80065d8:	442c      	add	r4, r5
        initial_x_offset = u8g2->glyph_x_offset;
 80065da:	bf08      	it	eq
 80065dc:	f996 7090 	ldrsbeq.w	r7, [r6, #144]	@ 0x90
      w += dx;
 80065e0:	b2a4      	uxth	r4, r4
 80065e2:	e7e9      	b.n	80065b8 <u8g2_string_width+0x24>
    }
  }
  //printf("\n");
  
  /* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
  if ( u8g2->font_decode.glyph_width != 0 )
 80065e4:	f996 206a 	ldrsb.w	r2, [r6, #106]	@ 0x6a
 80065e8:	b152      	cbz	r2, 8006600 <u8g2_string_width+0x6c>
  {
    //printf("string width adjust dx=%d glyph_width=%d x-offset=%d\n", dx, u8g2->font_decode.glyph_width, u8g2->glyph_x_offset);
    w -= dx;
    w += u8g2->font_decode.glyph_width;  /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
    /* issue #46: we have to add the x offset also */
    w += u8g2->glyph_x_offset;	/* this value is set as a side effect of u8g2_GetGlyphWidth() */
 80065ea:	f996 3090 	ldrsb.w	r3, [r6, #144]	@ 0x90
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
    /* https://github.com/olikraus/u8g2/issues/1561 */
    if ( initial_x_offset > 0 )
 80065ee:	2f00      	cmp	r7, #0
 80065f0:	4413      	add	r3, r2
 80065f2:	4423      	add	r3, r4
    w += u8g2->glyph_x_offset;	/* this value is set as a side effect of u8g2_GetGlyphWidth() */
 80065f4:	eba3 0305 	sub.w	r3, r3, r5
 80065f8:	b29c      	uxth	r4, r3
      w+=initial_x_offset;
 80065fa:	bfc4      	itt	gt
 80065fc:	193f      	addgt	r7, r7, r4
 80065fe:	b2bc      	uxthgt	r4, r7
#endif 
  }
  // printf("w=%d \n", w);
  
  return w;  
}
 8006600:	4620      	mov	r0, r4
 8006602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006606 <u8g2_SetFontMode>:
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 8006606:	f880 106d 	strb.w	r1, [r0, #109]	@ 0x6d
}
 800660a:	4770      	bx	lr

0800660c <u8g2_DrawGlyph>:
{
 800660c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800660e:	461f      	mov	r7, r3
  switch(u8g2->font_decode.dir)
 8006610:	f890 3070 	ldrb.w	r3, [r0, #112]	@ 0x70
{
 8006614:	4604      	mov	r4, r0
 8006616:	460e      	mov	r6, r1
 8006618:	4615      	mov	r5, r2
  switch(u8g2->font_decode.dir)
 800661a:	2b03      	cmp	r3, #3
 800661c:	d807      	bhi.n	800662e <u8g2_DrawGlyph+0x22>
 800661e:	e8df f003 	tbb	[pc, r3]
 8006622:	1502      	.short	0x1502
 8006624:	1e1a      	.short	0x1e1a
      y += u8g2->font_calc_vref(u8g2);
 8006626:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8006628:	4798      	blx	r3
 800662a:	4428      	add	r0, r5
      y -= u8g2->font_calc_vref(u8g2);
 800662c:	b285      	uxth	r5, r0
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 800662e:	4639      	mov	r1, r7
 8006630:	4620      	mov	r0, r4
  u8g2->font_decode.target_x = x;
 8006632:	f8a4 6064 	strh.w	r6, [r4, #100]	@ 0x64
  u8g2->font_decode.target_y = y;
 8006636:	f8a4 5066 	strh.w	r5, [r4, #102]	@ 0x66
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 800663a:	f7ff ff55 	bl	80064e8 <u8g2_font_get_glyph_data>
  if ( glyph_data != NULL )
 800663e:	4601      	mov	r1, r0
 8006640:	b118      	cbz	r0, 800664a <u8g2_DrawGlyph+0x3e>
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8006642:	4620      	mov	r0, r4
 8006644:	f7ff fec0 	bl	80063c8 <u8g2_font_decode_glyph>
 8006648:	b280      	uxth	r0, r0
}
 800664a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      x -= u8g2->font_calc_vref(u8g2);
 800664c:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800664e:	4798      	blx	r3
 8006650:	1a30      	subs	r0, r6, r0
      x += u8g2->font_calc_vref(u8g2);
 8006652:	b286      	uxth	r6, r0
      break;
 8006654:	e7eb      	b.n	800662e <u8g2_DrawGlyph+0x22>
      y -= u8g2->font_calc_vref(u8g2);
 8006656:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8006658:	4798      	blx	r3
 800665a:	1a28      	subs	r0, r5, r0
 800665c:	e7e6      	b.n	800662c <u8g2_DrawGlyph+0x20>
      x += u8g2->font_calc_vref(u8g2);
 800665e:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8006660:	4798      	blx	r3
 8006662:	4430      	add	r0, r6
 8006664:	e7f5      	b.n	8006652 <u8g2_DrawGlyph+0x46>

08006666 <u8g2_draw_string>:
{
 8006666:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800666a:	461e      	mov	r6, r3
 800666c:	4607      	mov	r7, r0
 800666e:	460c      	mov	r4, r1
 8006670:	4615      	mov	r5, r2
  sum = 0;
 8006672:	f04f 0a00 	mov.w	sl, #0
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8006676:	f000 fa6c 	bl	8006b52 <u8x8_utf8_init>
    if ( e == 0x0ffff )
 800667a:	f64f 78ff 	movw	r8, #65535	@ 0xffff
    if ( e != 0x0fffe )
 800667e:	f64f 79fe 	movw	r9, #65534	@ 0xfffe
 8006682:	3e01      	subs	r6, #1
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4638      	mov	r0, r7
 8006688:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800668c:	4798      	blx	r3
    if ( e == 0x0ffff )
 800668e:	4540      	cmp	r0, r8
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8006690:	4603      	mov	r3, r0
    if ( e == 0x0ffff )
 8006692:	d01b      	beq.n	80066cc <u8g2_draw_string+0x66>
    if ( e != 0x0fffe )
 8006694:	4548      	cmp	r0, r9
 8006696:	d0f5      	beq.n	8006684 <u8g2_draw_string+0x1e>
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8006698:	462a      	mov	r2, r5
 800669a:	4621      	mov	r1, r4
 800669c:	4638      	mov	r0, r7
 800669e:	f7ff ffb5 	bl	800660c <u8g2_DrawGlyph>
      switch(u8g2->font_decode.dir)
 80066a2:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80066a6:	2b03      	cmp	r3, #3
 80066a8:	d805      	bhi.n	80066b6 <u8g2_draw_string+0x50>
 80066aa:	e8df f003 	tbb	[pc, r3]
 80066ae:	0802      	.short	0x0802
 80066b0:	0d0b      	.short	0x0d0b
	  x += delta;
 80066b2:	4404      	add	r4, r0
	  x -= delta;
 80066b4:	b2a4      	uxth	r4, r4
      sum += delta;    
 80066b6:	4450      	add	r0, sl
 80066b8:	fa1f fa80 	uxth.w	sl, r0
 80066bc:	e7e2      	b.n	8006684 <u8g2_draw_string+0x1e>
	  y += delta;
 80066be:	4405      	add	r5, r0
	  y -= delta;
 80066c0:	b2ad      	uxth	r5, r5
	  break;
 80066c2:	e7f8      	b.n	80066b6 <u8g2_draw_string+0x50>
	  x -= delta;
 80066c4:	1a24      	subs	r4, r4, r0
 80066c6:	e7f5      	b.n	80066b4 <u8g2_draw_string+0x4e>
	  y -= delta;
 80066c8:	1a2d      	subs	r5, r5, r0
 80066ca:	e7f9      	b.n	80066c0 <u8g2_draw_string+0x5a>
}
 80066cc:	4650      	mov	r0, sl
 80066ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080066d4 <u8g2_DrawStr>:
{
 80066d4:	b410      	push	{r4}
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80066d6:	4c02      	ldr	r4, [pc, #8]	@ (80066e0 <u8g2_DrawStr+0xc>)
 80066d8:	6044      	str	r4, [r0, #4]
}
 80066da:	bc10      	pop	{r4}
  return u8g2_draw_string(u8g2, x, y, str);
 80066dc:	f7ff bfc3 	b.w	8006666 <u8g2_draw_string>
 80066e0:	08006ac7 	.word	0x08006ac7

080066e4 <u8g2_DrawUTF8>:
{
 80066e4:	b410      	push	{r4}
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 80066e6:	4c02      	ldr	r4, [pc, #8]	@ (80066f0 <u8g2_DrawUTF8+0xc>)
 80066e8:	6044      	str	r4, [r0, #4]
}
 80066ea:	bc10      	pop	{r4}
  return u8g2_draw_string(u8g2, x, y, str);
 80066ec:	f7ff bfbb 	b.w	8006666 <u8g2_draw_string>
 80066f0:	08006ad7 	.word	0x08006ad7

080066f4 <u8g2_UpdateRefHeight>:
  if ( u8g2->font == NULL )
 80066f4:	6d83      	ldr	r3, [r0, #88]	@ 0x58
{
 80066f6:	b510      	push	{r4, lr}
  if ( u8g2->font == NULL )
 80066f8:	b1cb      	cbz	r3, 800672e <u8g2_UpdateRefHeight+0x3a>
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80066fa:	f990 4081 	ldrsb.w	r4, [r0, #129]	@ 0x81
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80066fe:	f990 1082 	ldrsb.w	r1, [r0, #130]	@ 0x82
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8006702:	f890 308d 	ldrb.w	r3, [r0, #141]	@ 0x8d
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8006706:	f880 408e 	strb.w	r4, [r0, #142]	@ 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 800670a:	f880 108f 	strb.w	r1, [r0, #143]	@ 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 800670e:	b173      	cbz	r3, 800672e <u8g2_UpdateRefHeight+0x3a>
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8006710:	2b01      	cmp	r3, #1
 8006712:	d10d      	bne.n	8006730 <u8g2_UpdateRefHeight+0x3c>
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8006714:	f990 3083 	ldrsb.w	r3, [r0, #131]	@ 0x83
 8006718:	42a3      	cmp	r3, r4
 800671a:	bfb8      	it	lt
 800671c:	4623      	movlt	r3, r4
 800671e:	f880 308e 	strb.w	r3, [r0, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8006722:	f990 3084 	ldrsb.w	r3, [r0, #132]	@ 0x84
 8006726:	4299      	cmp	r1, r3
 8006728:	dd01      	ble.n	800672e <u8g2_UpdateRefHeight+0x3a>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 800672a:	f880 308f 	strb.w	r3, [r0, #143]	@ 0x8f
}
 800672e:	bd10      	pop	{r4, pc}
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8006730:	f990 2080 	ldrsb.w	r2, [r0, #128]	@ 0x80
 8006734:	f990 307e 	ldrsb.w	r3, [r0, #126]	@ 0x7e
 8006738:	4413      	add	r3, r2
 800673a:	429c      	cmp	r4, r3
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 800673c:	bfb8      	it	lt
 800673e:	f880 308e 	strblt.w	r3, [r0, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8006742:	4291      	cmp	r1, r2
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8006744:	bfc8      	it	gt
 8006746:	f880 208f 	strbgt.w	r2, [r0, #143]	@ 0x8f
 800674a:	e7f0      	b.n	800672e <u8g2_UpdateRefHeight+0x3a>

0800674c <u8g2_SetFontPosBaseline>:
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 800674c:	4b01      	ldr	r3, [pc, #4]	@ (8006754 <u8g2_SetFontPosBaseline+0x8>)
 800674e:	65c3      	str	r3, [r0, #92]	@ 0x5c
}
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	080061fd 	.word	0x080061fd

08006758 <u8g2_SetFont>:
  if ( u8g2->font != font )
 8006758:	6d82      	ldr	r2, [r0, #88]	@ 0x58
{
 800675a:	b510      	push	{r4, lr}
  if ( u8g2->font != font )
 800675c:	428a      	cmp	r2, r1
{
 800675e:	4604      	mov	r4, r0
  if ( u8g2->font != font )
 8006760:	d008      	beq.n	8006774 <u8g2_SetFont+0x1c>
    u8g2->font = font;
 8006762:	6581      	str	r1, [r0, #88]	@ 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8006764:	3074      	adds	r0, #116	@ 0x74
 8006766:	f7ff fd4b 	bl	8006200 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 800676a:	4620      	mov	r0, r4
}
 800676c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    u8g2_UpdateRefHeight(u8g2);
 8006770:	f7ff bfc0 	b.w	80066f4 <u8g2_UpdateRefHeight>
}
 8006774:	bd10      	pop	{r4, pc}
	...

08006778 <u8g2_GetUTF8Width>:
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_GetUTF8Width(u8g2_t *u8g2, const char *str)
{
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 8006778:	4b01      	ldr	r3, [pc, #4]	@ (8006780 <u8g2_GetUTF8Width+0x8>)
 800677a:	6043      	str	r3, [r0, #4]
  return u8g2_string_width(u8g2, str);
 800677c:	f7ff bf0a 	b.w	8006594 <u8g2_string_width>
 8006780:	08006ad7 	.word	0x08006ad7

08006784 <u8g2_SetFontDirection>:


void u8g2_SetFontDirection(u8g2_t *u8g2, uint8_t dir)
{
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = dir;
 8006784:	f880 1070 	strb.w	r1, [r0, #112]	@ 0x70
#endif
}
 8006788:	4770      	bx	lr

0800678a <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800678a:	b470      	push	{r4, r5, r6}

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 800678c:	8fc6      	ldrh	r6, [r0, #62]	@ 0x3e
{
 800678e:	f89d 500c 	ldrb.w	r5, [sp, #12]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8006792:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
  y -= u8g2->pixel_curr_row;
 8006794:	1b92      	subs	r2, r2, r6
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8006796:	46a4      	mov	ip, r4
 8006798:	9503      	str	r5, [sp, #12]
 800679a:	b292      	uxth	r2, r2
}
 800679c:	bc70      	pop	{r4, r5, r6}
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800679e:	4760      	bx	ip

080067a0 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80067a0:	b4f0      	push	{r4, r5, r6, r7}
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 80067a2:	f890 408c 	ldrb.w	r4, [r0, #140]	@ 0x8c
{
 80067a6:	f89d 5010 	ldrb.w	r5, [sp, #16]
  if ( u8g2->is_page_clip_window_intersection != 0 )
 80067aa:	2c00      	cmp	r4, #0
 80067ac:	d03a      	beq.n	8006824 <u8g2_DrawHVLine+0x84>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d038      	beq.n	8006824 <u8g2_DrawHVLine+0x84>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d004      	beq.n	80067c0 <u8g2_DrawHVLine+0x20>
      {
	if ( dir == 2 )
 80067b6:	2d02      	cmp	r5, #2
 80067b8:	d12b      	bne.n	8006812 <u8g2_DrawHVLine+0x72>
	{
	  x -= len;
	  x++;
 80067ba:	3101      	adds	r1, #1
 80067bc:	1ac9      	subs	r1, r1, r3
 80067be:	b289      	uxth	r1, r1
	}
      }
      dir &= 1;  
      
      /* clip against the user window */
      if ( dir == 0 )
 80067c0:	f015 0501 	ands.w	r5, r5, #1
 80067c4:	d130      	bne.n	8006828 <u8g2_DrawHVLine+0x88>
      {
	if ( y < u8g2->user_y0 )
 80067c6:	f8b0 404c 	ldrh.w	r4, [r0, #76]	@ 0x4c
 80067ca:	4294      	cmp	r4, r2
 80067cc:	d82a      	bhi.n	8006824 <u8g2_DrawHVLine+0x84>
	  return;
	if ( y >= u8g2->user_y1 )
 80067ce:	f8b0 404e 	ldrh.w	r4, [r0, #78]	@ 0x4e
 80067d2:	4294      	cmp	r4, r2
 80067d4:	d926      	bls.n	8006824 <u8g2_DrawHVLine+0x84>
  b += *len;
 80067d6:	440b      	add	r3, r1
 80067d8:	b29c      	uxth	r4, r3
  if ( a > b )
 80067da:	428c      	cmp	r4, r1
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80067dc:	f8b0 7048 	ldrh.w	r7, [r0, #72]	@ 0x48
 80067e0:	f8b0 604a 	ldrh.w	r6, [r0, #74]	@ 0x4a
  if ( a > b )
 80067e4:	d21c      	bcs.n	8006820 <u8g2_DrawHVLine+0x80>
    if ( a < d )
 80067e6:	428e      	cmp	r6, r1
 80067e8:	d919      	bls.n	800681e <u8g2_DrawHVLine+0x7e>
      b--;
 80067ea:	1e74      	subs	r4, r6, #1
 80067ec:	b2a4      	uxth	r4, r4
  if ( b <= c )
 80067ee:	42a7      	cmp	r7, r4
 80067f0:	d218      	bcs.n	8006824 <u8g2_DrawHVLine+0x84>
  if ( a < c )		
 80067f2:	42b9      	cmp	r1, r7
 80067f4:	bf38      	it	cc
 80067f6:	4639      	movcc	r1, r7
  b -= a;
 80067f8:	42a6      	cmp	r6, r4
 80067fa:	bf94      	ite	ls
 80067fc:	ebc1 0306 	rsbls	r3, r1, r6
 8006800:	ebc1 0304 	rsbhi	r3, r1, r4
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8006804:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8006806:	9504      	str	r5, [sp, #16]
 8006808:	68a4      	ldr	r4, [r4, #8]
  b -= a;
 800680a:	b29b      	uxth	r3, r3
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 800680c:	46a4      	mov	ip, r4
    }
}
 800680e:	bcf0      	pop	{r4, r5, r6, r7}
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8006810:	4760      	bx	ip
	else if ( dir == 3 )
 8006812:	2d03      	cmp	r5, #3
	  y++;
 8006814:	bf02      	ittt	eq
 8006816:	3201      	addeq	r2, #1
 8006818:	1ad2      	subeq	r2, r2, r3
 800681a:	b292      	uxtheq	r2, r2
 800681c:	e7d0      	b.n	80067c0 <u8g2_DrawHVLine+0x20>
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 800681e:	4639      	mov	r1, r7
  if ( a >= d )
 8006820:	428e      	cmp	r6, r1
 8006822:	d8e4      	bhi.n	80067ee <u8g2_DrawHVLine+0x4e>
}
 8006824:	bcf0      	pop	{r4, r5, r6, r7}
 8006826:	4770      	bx	lr
	if ( x < u8g2->user_x0 )
 8006828:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
 800682c:	428c      	cmp	r4, r1
 800682e:	d8f9      	bhi.n	8006824 <u8g2_DrawHVLine+0x84>
	if ( x >= u8g2->user_x1 )
 8006830:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
 8006834:	428c      	cmp	r4, r1
 8006836:	d9f5      	bls.n	8006824 <u8g2_DrawHVLine+0x84>
  b += *len;
 8006838:	4413      	add	r3, r2
 800683a:	b29c      	uxth	r4, r3
  if ( a > b )
 800683c:	4294      	cmp	r4, r2
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 800683e:	f8b0 704c 	ldrh.w	r7, [r0, #76]	@ 0x4c
 8006842:	f8b0 604e 	ldrh.w	r6, [r0, #78]	@ 0x4e
  if ( a > b )
 8006846:	d210      	bcs.n	800686a <u8g2_DrawHVLine+0xca>
    if ( a < d )
 8006848:	4296      	cmp	r6, r2
 800684a:	d90d      	bls.n	8006868 <u8g2_DrawHVLine+0xc8>
      b--;
 800684c:	1e74      	subs	r4, r6, #1
 800684e:	b2a4      	uxth	r4, r4
  if ( b <= c )
 8006850:	42a7      	cmp	r7, r4
 8006852:	d2e7      	bcs.n	8006824 <u8g2_DrawHVLine+0x84>
  if ( a < c )		
 8006854:	42ba      	cmp	r2, r7
 8006856:	bf38      	it	cc
 8006858:	463a      	movcc	r2, r7
  b -= a;
 800685a:	42a6      	cmp	r6, r4
 800685c:	bf94      	ite	ls
 800685e:	ebc2 0306 	rsbls	r3, r2, r6
 8006862:	ebc2 0304 	rsbhi	r3, r2, r4
 8006866:	e7cd      	b.n	8006804 <u8g2_DrawHVLine+0x64>
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8006868:	463a      	mov	r2, r7
  if ( a >= d )
 800686a:	4296      	cmp	r6, r2
 800686c:	d8f0      	bhi.n	8006850 <u8g2_DrawHVLine+0xb0>
 800686e:	e7d9      	b.n	8006824 <u8g2_DrawHVLine+0x84>

08006870 <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8006870:	b513      	push	{r0, r1, r4, lr}
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 8006872:	2400      	movs	r4, #0
 8006874:	9400      	str	r4, [sp, #0]
 8006876:	f7ff ff93 	bl	80067a0 <u8g2_DrawHVLine>
}
 800687a:	b002      	add	sp, #8
 800687c:	bd10      	pop	{r4, pc}

0800687e <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 800687e:	b513      	push	{r0, r1, r4, lr}
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 8006880:	2401      	movs	r4, #1
 8006882:	9400      	str	r4, [sp, #0]
 8006884:	f7ff ff8c 	bl	80067a0 <u8g2_DrawHVLine>
}
 8006888:	b002      	add	sp, #8
 800688a:	bd10      	pop	{r4, pc}

0800688c <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 800688c:	b573      	push	{r0, r1, r4, r5, r6, lr}
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 800688e:	f8b0 604c 	ldrh.w	r6, [r0, #76]	@ 0x4c
 8006892:	4296      	cmp	r6, r2
 8006894:	d810      	bhi.n	80068b8 <u8g2_DrawPixel+0x2c>
    return;
  if ( y >= u8g2->user_y1 )
 8006896:	f8b0 604e 	ldrh.w	r6, [r0, #78]	@ 0x4e
 800689a:	4296      	cmp	r6, r2
 800689c:	d90c      	bls.n	80068b8 <u8g2_DrawPixel+0x2c>
    return;
  if ( x < u8g2->user_x0 )
 800689e:	f8b0 5048 	ldrh.w	r5, [r0, #72]	@ 0x48
 80068a2:	428d      	cmp	r5, r1
 80068a4:	d808      	bhi.n	80068b8 <u8g2_DrawPixel+0x2c>
    return;
  if ( x >= u8g2->user_x1 )
 80068a6:	f8b0 304a 	ldrh.w	r3, [r0, #74]	@ 0x4a
 80068aa:	428b      	cmp	r3, r1
 80068ac:	d904      	bls.n	80068b8 <u8g2_DrawPixel+0x2c>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80068ae:	2300      	movs	r3, #0
 80068b0:	9300      	str	r3, [sp, #0]
 80068b2:	2301      	movs	r3, #1
 80068b4:	f7ff ff74 	bl	80067a0 <u8g2_DrawHVLine>
}
 80068b8:	b002      	add	sp, #8
 80068ba:	bd70      	pop	{r4, r5, r6, pc}

080068bc <u8g2_SetDrawColor>:
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
  if ( color >= 3 )
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 80068bc:	2903      	cmp	r1, #3
 80068be:	bf28      	it	cs
 80068c0:	2101      	movcs	r1, #1
 80068c2:	f880 1092 	strb.w	r1, [r0, #146]	@ 0x92
}
 80068c6:	4770      	bx	lr

080068c8 <u8g2_is_intersection_decision_tree>:
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
 80068c8:	428a      	cmp	r2, r1
 80068ca:	d206      	bcs.n	80068da <u8g2_is_intersection_decision_tree+0x12>
  {
    if ( v1 > a0 )	// v1 >= a0
 80068cc:	4283      	cmp	r3, r0
 80068ce:	d808      	bhi.n	80068e2 <u8g2_is_intersection_decision_tree+0x1a>
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 80068d0:	429a      	cmp	r2, r3
 80068d2:	bf94      	ite	ls
 80068d4:	2000      	movls	r0, #0
 80068d6:	2001      	movhi	r0, #1
 80068d8:	4770      	bx	lr
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 80068da:	4283      	cmp	r3, r0
 80068dc:	d8f8      	bhi.n	80068d0 <u8g2_is_intersection_decision_tree+0x8>
	return 0;
 80068de:	2000      	movs	r0, #0
 80068e0:	4770      	bx	lr
      return 1;
 80068e2:	2001      	movs	r0, #1
    else
    {
      return 0;
    }
  }
}
 80068e4:	4770      	bx	lr

080068e6 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 80068e6:	b570      	push	{r4, r5, r6, lr}
 80068e8:	4604      	mov	r4, r0
 80068ea:	460d      	mov	r5, r1
 80068ec:	461e      	mov	r6, r3
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 80068ee:	f8b0 104e 	ldrh.w	r1, [r0, #78]	@ 0x4e
 80068f2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80068f6:	f8b0 004c 	ldrh.w	r0, [r0, #76]	@ 0x4c
 80068fa:	f7ff ffe5 	bl	80068c8 <u8g2_is_intersection_decision_tree>
 80068fe:	b148      	cbz	r0, 8006914 <u8g2_IsIntersection+0x2e>
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8006900:	4633      	mov	r3, r6
 8006902:	462a      	mov	r2, r5
 8006904:	f8b4 104a 	ldrh.w	r1, [r4, #74]	@ 0x4a
 8006908:	f8b4 0048 	ldrh.w	r0, [r4, #72]	@ 0x48
}
 800690c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8006910:	f7ff bfda 	b.w	80068c8 <u8g2_is_intersection_decision_tree>
}
 8006914:	bd70      	pop	{r4, r5, r6, pc}

08006916 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8006916:	b5f0      	push	{r4, r5, r6, r7, lr}
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;
 8006918:	2401      	movs	r4, #1
{
 800691a:	468c      	mov	ip, r1

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
 800691c:	f890 1092 	ldrb.w	r1, [r0, #146]	@ 0x92
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8006920:	f002 0707 	and.w	r7, r2, #7
  mask <<= bit_pos;
 8006924:	40bc      	lsls	r4, r7
  if ( u8g2->draw_color <= 1 )
 8006926:	2901      	cmp	r1, #1
{
 8006928:	f89d 6014 	ldrb.w	r6, [sp, #20]
  mask <<= bit_pos;
 800692c:	b2e4      	uxtb	r4, r4
  if ( u8g2->draw_color <= 1 )
 800692e:	d816      	bhi.n	800695e <u8g2_ll_hvline_vertical_top_lsb+0x48>
    or_mask  = mask;
 8006930:	4625      	mov	r5, r4
  if ( u8g2->draw_color != 1 )
 8006932:	d100      	bne.n	8006936 <u8g2_ll_hvline_vertical_top_lsb+0x20>
  xor_mask = 0;
 8006934:	2400      	movs	r4, #0
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
 8006936:	f022 0107 	bic.w	r1, r2, #7
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800693a:	6802      	ldr	r2, [r0, #0]
 800693c:	7c12      	ldrb	r2, [r2, #16]
 800693e:	4351      	muls	r1, r2
  ptr = u8g2->tile_buf_ptr;
  ptr += offset;
  ptr += x;
 8006940:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  ptr += offset;
 8006942:	b289      	uxth	r1, r1
  ptr += x;
 8006944:	4461      	add	r1, ip
 8006946:	4411      	add	r1, r2
  
  if ( dir == 0 )
 8006948:	b95e      	cbnz	r6, 8006962 <u8g2_ll_hvline_vertical_top_lsb+0x4c>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 800694a:	780a      	ldrb	r2, [r1, #0]
	*ptr ^= xor_mask;
	ptr++;
	len--;
 800694c:	3b01      	subs	r3, #1
	*ptr |= or_mask;
 800694e:	432a      	orrs	r2, r5
	*ptr ^= xor_mask;
 8006950:	4062      	eors	r2, r4
	len--;
 8006952:	b29b      	uxth	r3, r3
	*ptr ^= xor_mask;
 8006954:	f801 2b01 	strb.w	r2, [r1], #1
      } while( len != 0 );
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1f6      	bne.n	800694a <u8g2_ll_hvline_vertical_top_lsb+0x34>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 800695c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  or_mask = 0;
 800695e:	2500      	movs	r5, #0
 8006960:	e7e9      	b.n	8006936 <u8g2_ll_hvline_vertical_top_lsb+0x20>
      *ptr |= or_mask;
 8006962:	780a      	ldrb	r2, [r1, #0]
      bit_pos++;
 8006964:	3701      	adds	r7, #1
      *ptr |= or_mask;
 8006966:	432a      	orrs	r2, r5
      *ptr ^= xor_mask;
 8006968:	4062      	eors	r2, r4
      len--;
 800696a:	3b01      	subs	r3, #1
      if ( bit_pos == 0 )
 800696c:	f017 0707 	ands.w	r7, r7, #7
      *ptr ^= xor_mask;
 8006970:	700a      	strb	r2, [r1, #0]
      len--;
 8006972:	b29b      	uxth	r3, r3
      if ( bit_pos == 0 )
 8006974:	d10a      	bne.n	800698c <u8g2_ll_hvline_vertical_top_lsb+0x76>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8006976:	8f42      	ldrh	r2, [r0, #58]	@ 0x3a
 8006978:	4411      	add	r1, r2
	if ( u8g2->draw_color <= 1 )
 800697a:	f890 2092 	ldrb.w	r2, [r0, #146]	@ 0x92
 800697e:	2a01      	cmp	r2, #1
 8006980:	d809      	bhi.n	8006996 <u8g2_ll_hvline_vertical_top_lsb+0x80>
	if ( u8g2->draw_color != 1 )
 8006982:	d10a      	bne.n	800699a <u8g2_ll_hvline_vertical_top_lsb+0x84>
	  or_mask  = 1;
 8006984:	4615      	mov	r5, r2
    } while( len != 0 );
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1eb      	bne.n	8006962 <u8g2_ll_hvline_vertical_top_lsb+0x4c>
 800698a:	e7e7      	b.n	800695c <u8g2_ll_hvline_vertical_top_lsb+0x46>
	or_mask <<= 1;
 800698c:	006d      	lsls	r5, r5, #1
	xor_mask <<= 1;
 800698e:	0064      	lsls	r4, r4, #1
	or_mask <<= 1;
 8006990:	b2ed      	uxtb	r5, r5
	xor_mask <<= 1;
 8006992:	b2e4      	uxtb	r4, r4
 8006994:	e7f7      	b.n	8006986 <u8g2_ll_hvline_vertical_top_lsb+0x70>
	  xor_mask = 1;
 8006996:	2401      	movs	r4, #1
 8006998:	e7f5      	b.n	8006986 <u8g2_ll_hvline_vertical_top_lsb+0x70>
 800699a:	2401      	movs	r4, #1
	  or_mask  = 1;
 800699c:	4625      	mov	r5, r4
 800699e:	e7f2      	b.n	8006986 <u8g2_ll_hvline_vertical_top_lsb+0x70>

080069a0 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 80069a0:	b570      	push	{r4, r5, r6, lr}
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 80069a2:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 80069a6:	6802      	ldr	r2, [r0, #0]
  t *= 8;
 80069a8:	00cb      	lsls	r3, r1, #3
  u8g2->pixel_buf_height = t;
 80069aa:	8783      	strh	r3, [r0, #60]	@ 0x3c
  
  t = display_info->tile_width;
 80069ac:	7c13      	ldrb	r3, [r2, #16]
    t = 31;
#endif
  t *= 8;
  u8g2->pixel_buf_width = t;
  
  t = u8g2->tile_curr_row;
 80069ae:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
  t *= 8;
 80069b2:	00db      	lsls	r3, r3, #3
  u8g2->pixel_buf_width = t;
 80069b4:	8743      	strh	r3, [r0, #58]	@ 0x3a
  t *= 8;
 80069b6:	00eb      	lsls	r3, r5, #3
  u8g2->pixel_curr_row = t;
 80069b8:	87c3      	strh	r3, [r0, #62]	@ 0x3e
  
  t = u8g2->tile_buf_height;
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80069ba:	7c54      	ldrb	r4, [r2, #17]
 80069bc:	194e      	adds	r6, r1, r5
 80069be:	42a6      	cmp	r6, r4
    t = display_info->tile_height - u8g2->tile_curr_row;
 80069c0:	bfc4      	itt	gt
 80069c2:	1b64      	subgt	r4, r4, r5
 80069c4:	b2a1      	uxthgt	r1, r4
  t *= 8;
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 80069c6:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
  u8g2->buf_y1 += t;
 80069ca:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80069ce:	f8a0 3042 	strh.w	r3, [r0, #66]	@ 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 80069d2:	8a93      	ldrh	r3, [r2, #20]
 80069d4:	f8a0 3044 	strh.w	r3, [r0, #68]	@ 0x44
  u8g2->height = display_info->pixel_height;
 80069d8:	8ad3      	ldrh	r3, [r2, #22]
 80069da:	f8a0 3046 	strh.w	r3, [r0, #70]	@ 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 80069de:	bd70      	pop	{r4, r5, r6, pc}

080069e0 <u8g2_update_dimension_r0>:
/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
  u8g2_update_dimension_common(u8g2);  
 80069e0:	f7ff bfde 	b.w	80069a0 <u8g2_update_dimension_common>

080069e4 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80069e4:	b410      	push	{r4}
 80069e6:	f89d 4004 	ldrb.w	r4, [sp, #4]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 80069ea:	9401      	str	r4, [sp, #4]
}
 80069ec:	bc10      	pop	{r4}
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 80069ee:	f7ff becc 	b.w	800678a <u8g2_draw_hv_line_2dir>

080069f2 <u8g2_apply_clip_window>:
{
 80069f2:	b513      	push	{r0, r1, r4, lr}
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80069f4:	f8b0 3056 	ldrh.w	r3, [r0, #86]	@ 0x56
{
 80069f8:	4604      	mov	r4, r0
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80069fa:	9300      	str	r3, [sp, #0]
 80069fc:	f8b0 3052 	ldrh.w	r3, [r0, #82]	@ 0x52
 8006a00:	f8b0 2054 	ldrh.w	r2, [r0, #84]	@ 0x54
 8006a04:	f8b0 1050 	ldrh.w	r1, [r0, #80]	@ 0x50
 8006a08:	f7ff ff6d 	bl	80068e6 <u8g2_IsIntersection>
 8006a0c:	b918      	cbnz	r0, 8006a16 <u8g2_apply_clip_window+0x24>
    u8g2->is_page_clip_window_intersection = 0;
 8006a0e:	f884 008c 	strb.w	r0, [r4, #140]	@ 0x8c
}
 8006a12:	b002      	add	sp, #8
 8006a14:	bd10      	pop	{r4, pc}
    u8g2->is_page_clip_window_intersection = 1;
 8006a16:	2301      	movs	r3, #1
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8006a18:	f8b4 2048 	ldrh.w	r2, [r4, #72]	@ 0x48
    u8g2->is_page_clip_window_intersection = 1;
 8006a1c:	f884 308c 	strb.w	r3, [r4, #140]	@ 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8006a20:	f8b4 3050 	ldrh.w	r3, [r4, #80]	@ 0x50
 8006a24:	429a      	cmp	r2, r3
      u8g2->user_x0 = u8g2->clip_x0;
 8006a26:	bf38      	it	cc
 8006a28:	f8a4 3048 	strhcc.w	r3, [r4, #72]	@ 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8006a2c:	f8b4 204a 	ldrh.w	r2, [r4, #74]	@ 0x4a
 8006a30:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 8006a34:	429a      	cmp	r2, r3
      u8g2->user_x1 = u8g2->clip_x1;
 8006a36:	bf88      	it	hi
 8006a38:	f8a4 304a 	strhhi.w	r3, [r4, #74]	@ 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8006a3c:	f8b4 204c 	ldrh.w	r2, [r4, #76]	@ 0x4c
 8006a40:	f8b4 3054 	ldrh.w	r3, [r4, #84]	@ 0x54
 8006a44:	429a      	cmp	r2, r3
      u8g2->user_y0 = u8g2->clip_y0;
 8006a46:	bf38      	it	cc
 8006a48:	f8a4 304c 	strhcc.w	r3, [r4, #76]	@ 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8006a4c:	f8b4 204e 	ldrh.w	r2, [r4, #78]	@ 0x4e
 8006a50:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 8006a54:	429a      	cmp	r2, r3
      u8g2->user_y1 = u8g2->clip_y1;
 8006a56:	bf88      	it	hi
 8006a58:	f8a4 304e 	strhhi.w	r3, [r4, #78]	@ 0x4e
}
 8006a5c:	e7d9      	b.n	8006a12 <u8g2_apply_clip_window+0x20>

08006a5e <u8g2_update_page_win_r0>:
  u8g2->user_x0 = 0;
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f8a0 2048 	strh.w	r2, [r0, #72]	@ 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8006a64:	f8b0 2044 	ldrh.w	r2, [r0, #68]	@ 0x44
 8006a68:	f8a0 204a 	strh.w	r2, [r0, #74]	@ 0x4a
  u8g2->user_y0 = u8g2->buf_y0;
 8006a6c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8006a6e:	64c2      	str	r2, [r0, #76]	@ 0x4c
  u8g2_apply_clip_window(u8g2);
 8006a70:	f7ff bfbf 	b.w	80069f2 <u8g2_apply_clip_window>

08006a74 <u8g2_SetMaxClipWindow>:
  u8g2->clip_x0 = 0;
 8006a74:	4a02      	ldr	r2, [pc, #8]	@ (8006a80 <u8g2_SetMaxClipWindow+0xc>)
  u8g2->cb->update_page_win(u8g2);
 8006a76:	6b03      	ldr	r3, [r0, #48]	@ 0x30
  u8g2->clip_y0 = 0;
 8006a78:	e9c0 2214 	strd	r2, r2, [r0, #80]	@ 0x50
  u8g2->cb->update_page_win(u8g2);
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	4718      	bx	r3
 8006a80:	ffff0000 	.word	0xffff0000

08006a84 <u8g2_SetupBuffer>:
{
 8006a84:	b570      	push	{r4, r5, r6, lr}
  u8g2->font = NULL;
 8006a86:	2500      	movs	r5, #0
  u8g2->ll_hvline = ll_hvline_cb;
 8006a88:	62c3      	str	r3, [r0, #44]	@ 0x2c
  u8g2->draw_color = 1;
 8006a8a:	f240 1301 	movw	r3, #257	@ 0x101
{
 8006a8e:	4604      	mov	r4, r0
 8006a90:	9e04      	ldr	r6, [sp, #16]
  u8g2->tile_buf_height = tile_buf_height;
 8006a92:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
  u8g2->tile_curr_row = 0;
 8006a96:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8006a9a:	f880 506d 	strb.w	r5, [r0, #109]	@ 0x6d
  u8g2->font_height_mode = 0; /* issue 2046 */
 8006a9e:	f880 508d 	strb.w	r5, [r0, #141]	@ 0x8d
  u8g2->bitmap_transparency = 0;
 8006aa2:	f880 5091 	strb.w	r5, [r0, #145]	@ 0x91
  u8g2->draw_color = 1;
 8006aa6:	f8a0 3092 	strh.w	r3, [r0, #146]	@ 0x92
  u8g2->tile_buf_ptr = buf;
 8006aaa:	6341      	str	r1, [r0, #52]	@ 0x34
  u8g2->cb->update_dimension(u8g2);
 8006aac:	6833      	ldr	r3, [r6, #0]
  u8g2->font = NULL;
 8006aae:	6585      	str	r5, [r0, #88]	@ 0x58
  u8g2->cb = u8g2_cb;
 8006ab0:	6306      	str	r6, [r0, #48]	@ 0x30
  u8g2->cb->update_dimension(u8g2);
 8006ab2:	4798      	blx	r3
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8006ab4:	4620      	mov	r0, r4
 8006ab6:	f7ff ffdd 	bl	8006a74 <u8g2_SetMaxClipWindow>
  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8006aba:	4620      	mov	r0, r4
 8006abc:	f7ff fe46 	bl	800674c <u8g2_SetFontPosBaseline>
  u8g2->font_decode.dir = 0;
 8006ac0:	f884 5070 	strb.w	r5, [r4, #112]	@ 0x70
}
 8006ac4:	bd70      	pop	{r4, r5, r6, pc}

08006ac6 <u8x8_ascii_next>:
}

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
    return 0x0ffff;	/* end of string detected*/
 8006ac6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8006aca:	b119      	cbz	r1, 8006ad4 <u8x8_ascii_next+0xe>
  return b;
 8006acc:	290a      	cmp	r1, #10
 8006ace:	bf18      	it	ne
 8006ad0:	4608      	movne	r0, r1
 8006ad2:	4770      	bx	lr
}
 8006ad4:	4770      	bx	lr

08006ad6 <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 8006ad6:	4603      	mov	r3, r0
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 8006ad8:	2900      	cmp	r1, #0
 8006ada:	d037      	beq.n	8006b4c <u8x8_utf8_next+0x76>
 8006adc:	290a      	cmp	r1, #10
 8006ade:	d035      	beq.n	8006b4c <u8x8_utf8_next+0x76>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
  if ( u8x8->utf8_state == 0 )
 8006ae0:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 8006ae4:	bb22      	cbnz	r2, 8006b30 <u8x8_utf8_next+0x5a>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 8006ae6:	29fb      	cmp	r1, #251	@ 0xfb
 8006ae8:	d908      	bls.n	8006afc <u8x8_utf8_next+0x26>
    {
      u8x8->utf8_state = 5;
      b &= 1;
 8006aea:	2205      	movs	r2, #5
 8006aec:	f001 0101 	and.w	r1, r1, #1
      u8x8->utf8_state = 5;
 8006af0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
    }
    u8x8->encoding = b;
 8006af4:	8419      	strh	r1, [r3, #32]
    return 0x0fffe;
 8006af6:	f64f 70fe 	movw	r0, #65534	@ 0xfffe
 8006afa:	4770      	bx	lr
    else if ( b >= 0xf8 )
 8006afc:	29f7      	cmp	r1, #247	@ 0xf7
 8006afe:	d903      	bls.n	8006b08 <u8x8_utf8_next+0x32>
      b &= 3;
 8006b00:	2204      	movs	r2, #4
 8006b02:	f001 0103 	and.w	r1, r1, #3
 8006b06:	e7f3      	b.n	8006af0 <u8x8_utf8_next+0x1a>
    else if ( b >= 0xf0 )
 8006b08:	29ef      	cmp	r1, #239	@ 0xef
 8006b0a:	d903      	bls.n	8006b14 <u8x8_utf8_next+0x3e>
      b &= 7;      
 8006b0c:	2203      	movs	r2, #3
 8006b0e:	f001 0107 	and.w	r1, r1, #7
 8006b12:	e7ed      	b.n	8006af0 <u8x8_utf8_next+0x1a>
    else if ( b >= 0xe0 )
 8006b14:	29df      	cmp	r1, #223	@ 0xdf
 8006b16:	d903      	bls.n	8006b20 <u8x8_utf8_next+0x4a>
      b &= 15;
 8006b18:	2202      	movs	r2, #2
 8006b1a:	f001 010f 	and.w	r1, r1, #15
 8006b1e:	e7e7      	b.n	8006af0 <u8x8_utf8_next+0x1a>
    else if ( b >= 0xc0 )
 8006b20:	29bf      	cmp	r1, #191	@ 0xbf
 8006b22:	d903      	bls.n	8006b2c <u8x8_utf8_next+0x56>
      b &= 0x01f;
 8006b24:	2201      	movs	r2, #1
 8006b26:	f001 011f 	and.w	r1, r1, #31
 8006b2a:	e7e1      	b.n	8006af0 <u8x8_utf8_next+0x1a>
      return b;
 8006b2c:	4608      	mov	r0, r1
 8006b2e:	4770      	bx	lr
  }
  else
  {
    u8x8->utf8_state--;
 8006b30:	3a01      	subs	r2, #1
 8006b32:	b2d2      	uxtb	r2, r2
 8006b34:	f880 2026 	strb.w	r2, [r0, #38]	@ 0x26
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 8006b38:	8c00      	ldrh	r0, [r0, #32]
    b &= 0x03f;
    u8x8->encoding |= b;
 8006b3a:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 8006b3e:	ea41 1180 	orr.w	r1, r1, r0, lsl #6
 8006b42:	b288      	uxth	r0, r1
 8006b44:	8418      	strh	r0, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 8006b46:	2a00      	cmp	r2, #0
 8006b48:	d1d5      	bne.n	8006af6 <u8x8_utf8_next+0x20>
      return 0x0fffe;	/* nothing to do yet */
  }
  return u8x8->encoding;
}
 8006b4a:	4770      	bx	lr
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 8006b4c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8006b50:	e7fb      	b.n	8006b4a <u8x8_utf8_next+0x74>

08006b52 <u8x8_utf8_init>:
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8006b52:	2300      	movs	r3, #0
 8006b54:	f880 3026 	strb.w	r3, [r0, #38]	@ 0x26
}
 8006b58:	4770      	bx	lr

08006b5a <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8006b5a:	b410      	push	{r4}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8006b5c:	6904      	ldr	r4, [r0, #16]
{
 8006b5e:	460a      	mov	r2, r1
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8006b60:	46a4      	mov	ip, r4
 8006b62:	2300      	movs	r3, #0
 8006b64:	2120      	movs	r1, #32
}
 8006b66:	bc10      	pop	{r4}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8006b68:	4760      	bx	ip

08006b6a <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8006b6a:	b410      	push	{r4}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8006b6c:	6904      	ldr	r4, [r0, #16]
{
 8006b6e:	4613      	mov	r3, r2
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8006b70:	46a4      	mov	ip, r4
 8006b72:	460a      	mov	r2, r1
}
 8006b74:	bc10      	pop	{r4}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8006b76:	2117      	movs	r1, #23
 8006b78:	4760      	bx	ip

08006b7a <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8006b7a:	b507      	push	{r0, r1, r2, lr}
 8006b7c:	f88d 1007 	strb.w	r1, [sp, #7]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8006b80:	f10d 0207 	add.w	r2, sp, #7
 8006b84:	2101      	movs	r1, #1
 8006b86:	f7ff fff0 	bl	8006b6a <u8x8_byte_SendBytes>
}
 8006b8a:	b003      	add	sp, #12
 8006b8c:	f85d fb04 	ldr.w	pc, [sp], #4

08006b90 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8006b90:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8006b92:	68c4      	ldr	r4, [r0, #12]
{
 8006b94:	460a      	mov	r2, r1
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8006b96:	46a4      	mov	ip, r4
 8006b98:	2300      	movs	r3, #0
 8006b9a:	2115      	movs	r1, #21
}
 8006b9c:	bc10      	pop	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8006b9e:	4760      	bx	ip

08006ba0 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8006ba0:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8006ba2:	68c4      	ldr	r4, [r0, #12]
{
 8006ba4:	460a      	mov	r2, r1
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8006ba6:	46a4      	mov	ip, r4
 8006ba8:	2300      	movs	r3, #0
 8006baa:	2116      	movs	r1, #22
}
 8006bac:	bc10      	pop	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8006bae:	4760      	bx	ip

08006bb0 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8006bb0:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8006bb2:	68c4      	ldr	r4, [r0, #12]
{
 8006bb4:	4613      	mov	r3, r2
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8006bb6:	46a4      	mov	ip, r4
 8006bb8:	460a      	mov	r2, r1
}
 8006bba:	bc10      	pop	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8006bbc:	2117      	movs	r1, #23
 8006bbe:	4760      	bx	ip

08006bc0 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8006bc0:	2300      	movs	r3, #0
{
 8006bc2:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8006bc4:	68c4      	ldr	r4, [r0, #12]
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	46a4      	mov	ip, r4
 8006bca:	2118      	movs	r1, #24
}
 8006bcc:	bc10      	pop	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8006bce:	4760      	bx	ip

08006bd0 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8006bd0:	2300      	movs	r3, #0
{
 8006bd2:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8006bd4:	68c4      	ldr	r4, [r0, #12]
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	46a4      	mov	ip, r4
 8006bda:	2119      	movs	r1, #25
}
 8006bdc:	bc10      	pop	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8006bde:	4760      	bx	ip

08006be0 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8006be0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006be2:	4605      	mov	r5, r0
 8006be4:	460c      	mov	r4, r1
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8006be6:	7821      	ldrb	r1, [r4, #0]
    data++;
    switch( cmd )
 8006be8:	2919      	cmp	r1, #25
 8006bea:	d80d      	bhi.n	8006c08 <u8x8_cad_SendSequence+0x28>
 8006bec:	2917      	cmp	r1, #23
 8006bee:	d819      	bhi.n	8006c24 <u8x8_cad_SendSequence+0x44>
 8006bf0:	d00e      	beq.n	8006c10 <u8x8_cad_SendSequence+0x30>
 8006bf2:	2914      	cmp	r1, #20
 8006bf4:	d90a      	bls.n	8006c0c <u8x8_cad_SendSequence+0x2c>
    {
      case U8X8_MSG_CAD_SEND_CMD:
      case U8X8_MSG_CAD_SEND_ARG:
	  v = *data;
 8006bf6:	7862      	ldrb	r2, [r4, #1]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	4628      	mov	r0, r5
 8006bfc:	68ee      	ldr	r6, [r5, #12]
	  v = *data;
 8006bfe:	f88d 2007 	strb.w	r2, [sp, #7]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8006c02:	47b0      	blx	r6
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
	  break;
      case 0x0fe:
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
 8006c04:	3402      	adds	r4, #2
	  break;
 8006c06:	e7ee      	b.n	8006be6 <u8x8_cad_SendSequence+0x6>
    switch( cmd )
 8006c08:	29fe      	cmp	r1, #254	@ 0xfe
 8006c0a:	d012      	beq.n	8006c32 <u8x8_cad_SendSequence+0x52>
      default:
	return;
    }
  }
}
 8006c0c:	b002      	add	sp, #8
 8006c0e:	bd70      	pop	{r4, r5, r6, pc}
	  v = *data;
 8006c10:	7863      	ldrb	r3, [r4, #1]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8006c12:	2101      	movs	r1, #1
 8006c14:	4628      	mov	r0, r5
 8006c16:	f10d 0207 	add.w	r2, sp, #7
	  v = *data;
 8006c1a:	f88d 3007 	strb.w	r3, [sp, #7]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8006c1e:	f7ff ffc7 	bl	8006bb0 <u8x8_cad_SendData>
	  data++;
 8006c22:	e7ef      	b.n	8006c04 <u8x8_cad_SendSequence+0x24>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8006c24:	2300      	movs	r3, #0
 8006c26:	4628      	mov	r0, r5
 8006c28:	461a      	mov	r2, r3
 8006c2a:	68ee      	ldr	r6, [r5, #12]
    data++;
 8006c2c:	3401      	adds	r4, #1
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8006c2e:	47b0      	blx	r6
	  break;
 8006c30:	e7d9      	b.n	8006be6 <u8x8_cad_SendSequence+0x6>
	  v = *data;
 8006c32:	7862      	ldrb	r2, [r4, #1]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8006c34:	2129      	movs	r1, #41	@ 0x29
 8006c36:	4628      	mov	r0, r5
	  v = *data;
 8006c38:	f88d 2007 	strb.w	r2, [sp, #7]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8006c3c:	f000 f913 	bl	8006e66 <u8x8_gpio_call>
 8006c40:	e7e0      	b.n	8006c04 <u8x8_cad_SendSequence+0x24>

08006c42 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8006c42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c46:	461f      	mov	r7, r3
  switch(msg)
 8006c48:	f1a1 0314 	sub.w	r3, r1, #20
{
 8006c4c:	4604      	mov	r4, r0
 8006c4e:	460d      	mov	r5, r1
 8006c50:	4616      	mov	r6, r2
  switch(msg)
 8006c52:	2b05      	cmp	r3, #5
 8006c54:	d81b      	bhi.n	8006c8e <u8x8_cad_001+0x4c>
 8006c56:	e8df f003 	tbb	[pc, r3]
 8006c5a:	0310      	.short	0x0310
 8006c5c:	10100d03 	.word	0x10100d03
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8006c60:	2100      	movs	r1, #0
 8006c62:	f7ff ff7a 	bl	8006b5a <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8006c66:	4631      	mov	r1, r6
 8006c68:	4620      	mov	r0, r4
 8006c6a:	f7ff ff86 	bl	8006b7a <u8x8_byte_SendByte>
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    default:
      return 0;
  }
  return 1;
 8006c6e:	2001      	movs	r0, #1
}
 8006c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      u8x8_byte_SetDC(u8x8, 1);
 8006c74:	2101      	movs	r1, #1
 8006c76:	f7ff ff70 	bl	8006b5a <u8x8_byte_SetDC>
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8006c7a:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8006c7e:	463b      	mov	r3, r7
 8006c80:	4632      	mov	r2, r6
 8006c82:	4629      	mov	r1, r5
 8006c84:	4620      	mov	r0, r4
 8006c86:	46f4      	mov	ip, lr
}
 8006c88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8006c8c:	4760      	bx	ip
  switch(msg)
 8006c8e:	2000      	movs	r0, #0
 8006c90:	e7ee      	b.n	8006c70 <u8x8_cad_001+0x2e>
	...

08006c94 <u8x8_d_ssd1306_sh1106_generic>:

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8006c94:	390b      	subs	r1, #11
{
 8006c96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c98:	4604      	mov	r4, r0
 8006c9a:	4615      	mov	r5, r2
 8006c9c:	461e      	mov	r6, r3
  switch(msg)
 8006c9e:	2904      	cmp	r1, #4
 8006ca0:	d855      	bhi.n	8006d4e <u8x8_d_ssd1306_sh1106_generic+0xba>
 8006ca2:	e8df f001 	tbb	[pc, r1]
 8006ca6:	5403      	.short	0x5403
 8006ca8:	1b0c      	.short	0x1b0c
 8006caa:	29          	.byte	0x29
 8006cab:	00          	.byte	0x00
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8006cac:	b92a      	cbnz	r2, 8006cba <u8x8_d_ssd1306_sh1106_generic+0x26>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 8006cae:	4929      	ldr	r1, [pc, #164]	@ (8006d54 <u8x8_d_ssd1306_sh1106_generic+0xc0>)
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	f7ff ff95 	bl	8006be0 <u8x8_cad_SendSequence>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
 8006cb6:	2001      	movs	r0, #1
}
 8006cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8006cba:	4927      	ldr	r1, [pc, #156]	@ (8006d58 <u8x8_d_ssd1306_sh1106_generic+0xc4>)
 8006cbc:	e7f8      	b.n	8006cb0 <u8x8_d_ssd1306_sh1106_generic+0x1c>
      if ( arg_int == 0 )
 8006cbe:	b93a      	cbnz	r2, 8006cd0 <u8x8_d_ssd1306_sh1106_generic+0x3c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 8006cc0:	4926      	ldr	r1, [pc, #152]	@ (8006d5c <u8x8_d_ssd1306_sh1106_generic+0xc8>)
 8006cc2:	f7ff ff8d 	bl	8006be0 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8006cc6:	6823      	ldr	r3, [r4, #0]
 8006cc8:	7c9b      	ldrb	r3, [r3, #18]
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8006cca:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 8006cce:	e7f2      	b.n	8006cb6 <u8x8_d_ssd1306_sh1106_generic+0x22>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 8006cd0:	4923      	ldr	r1, [pc, #140]	@ (8006d60 <u8x8_d_ssd1306_sh1106_generic+0xcc>)
 8006cd2:	f7ff ff85 	bl	8006be0 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8006cd6:	6823      	ldr	r3, [r4, #0]
 8006cd8:	7cdb      	ldrb	r3, [r3, #19]
 8006cda:	e7f6      	b.n	8006cca <u8x8_d_ssd1306_sh1106_generic+0x36>
      u8x8_cad_StartTransfer(u8x8);
 8006cdc:	f7ff ff70 	bl	8006bc0 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8006ce0:	2181      	movs	r1, #129	@ 0x81
 8006ce2:	4620      	mov	r0, r4
 8006ce4:	f7ff ff54 	bl	8006b90 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 8006ce8:	4629      	mov	r1, r5
 8006cea:	4620      	mov	r0, r4
 8006cec:	f7ff ff58 	bl	8006ba0 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8006cf0:	4620      	mov	r0, r4
 8006cf2:	f7ff ff6d 	bl	8006bd0 <u8x8_cad_EndTransfer>
      break;
 8006cf6:	e7de      	b.n	8006cb6 <u8x8_d_ssd1306_sh1106_generic+0x22>
      u8x8_cad_StartTransfer(u8x8);
 8006cf8:	f7ff ff62 	bl	8006bc0 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8006cfc:	7973      	ldrb	r3, [r6, #5]
      x += u8x8->x_offset;
 8006cfe:	f894 7022 	ldrb.w	r7, [r4, #34]	@ 0x22
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8006d02:	2140      	movs	r1, #64	@ 0x40
      x += u8x8->x_offset;
 8006d04:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
 8006d08:	f007 07ff 	and.w	r7, r7, #255	@ 0xff
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	f7ff ff3f 	bl	8006b90 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8006d12:	0939      	lsrs	r1, r7, #4
 8006d14:	f041 0110 	orr.w	r1, r1, #16
 8006d18:	4620      	mov	r0, r4
 8006d1a:	f7ff ff39 	bl	8006b90 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 8006d1e:	f007 010f 	and.w	r1, r7, #15
 8006d22:	4620      	mov	r0, r4
 8006d24:	f7ff ff3c 	bl	8006ba0 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 8006d28:	79b1      	ldrb	r1, [r6, #6]
 8006d2a:	4620      	mov	r0, r4
 8006d2c:	f041 01b0 	orr.w	r1, r1, #176	@ 0xb0
 8006d30:	f7ff ff36 	bl	8006ba0 <u8x8_cad_SendArg>
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8006d34:	7931      	ldrb	r1, [r6, #4]
 8006d36:	4620      	mov	r0, r4
 8006d38:	00c9      	lsls	r1, r1, #3
 8006d3a:	6832      	ldr	r2, [r6, #0]
 8006d3c:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
	arg_int--;
 8006d40:	3d01      	subs	r5, #1
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8006d42:	f7ff ff35 	bl	8006bb0 <u8x8_cad_SendData>
      } while( arg_int > 0 );
 8006d46:	f015 05ff 	ands.w	r5, r5, #255	@ 0xff
 8006d4a:	d1f3      	bne.n	8006d34 <u8x8_d_ssd1306_sh1106_generic+0xa0>
 8006d4c:	e7d0      	b.n	8006cf0 <u8x8_d_ssd1306_sh1106_generic+0x5c>
  switch(msg)
 8006d4e:	2000      	movs	r0, #0
 8006d50:	e7b2      	b.n	8006cb8 <u8x8_d_ssd1306_sh1106_generic+0x24>
 8006d52:	bf00      	nop
 8006d54:	0800c7db 	.word	0x0800c7db
 8006d58:	0800c7d6 	.word	0x0800c7d6
 8006d5c:	0800c7cf 	.word	0x0800c7cf
 8006d60:	0800c7c8 	.word	0x0800c7c8

08006d64 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8006d64:	b538      	push	{r3, r4, r5, lr}
 8006d66:	4604      	mov	r4, r0
 8006d68:	460d      	mov	r5, r1
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8006d6a:	f7ff ff93 	bl	8006c94 <u8x8_d_ssd1306_sh1106_generic>
 8006d6e:	b950      	cbnz	r0, 8006d86 <u8x8_d_ssd1306_128x64_noname+0x22>
    return 1;
  
  switch(msg)
 8006d70:	2d09      	cmp	r5, #9
 8006d72:	d00a      	beq.n	8006d8a <u8x8_d_ssd1306_128x64_noname+0x26>
 8006d74:	2d0a      	cmp	r5, #10
 8006d76:	d107      	bne.n	8006d88 <u8x8_d_ssd1306_128x64_noname+0x24>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8006d78:	4620      	mov	r0, r4
 8006d7a:	f000 f814 	bl	8006da6 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 8006d7e:	4620      	mov	r0, r4
 8006d80:	4904      	ldr	r1, [pc, #16]	@ (8006d94 <u8x8_d_ssd1306_128x64_noname+0x30>)
 8006d82:	f7ff ff2d 	bl	8006be0 <u8x8_cad_SendSequence>
    return 1;
 8006d86:	2001      	movs	r0, #1
      break;
    default:
      return 0;
  }
  return 1;
}
 8006d88:	bd38      	pop	{r3, r4, r5, pc}
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 8006d8a:	4620      	mov	r0, r4
 8006d8c:	4902      	ldr	r1, [pc, #8]	@ (8006d98 <u8x8_d_ssd1306_128x64_noname+0x34>)
 8006d8e:	f000 f805 	bl	8006d9c <u8x8_d_helper_display_setup_memory>
      break;
 8006d92:	e7f8      	b.n	8006d86 <u8x8_d_ssd1306_128x64_noname+0x22>
 8006d94:	0800c7e0 	.word	0x0800c7e0
 8006d98:	0800c7b0 	.word	0x0800c7b0

08006d9c <u8x8_d_helper_display_setup_memory>:
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8006d9c:	6001      	str	r1, [r0, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8006d9e:	7c8b      	ldrb	r3, [r1, #18]
 8006da0:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
}
 8006da4:	4770      	bx	lr

08006da6 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8006da6:	b538      	push	{r3, r4, r5, lr}
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8006da8:	2300      	movs	r3, #0
 8006daa:	2128      	movs	r1, #40	@ 0x28
 8006dac:	461a      	mov	r2, r3
 8006dae:	6945      	ldr	r5, [r0, #20]
{
 8006db0:	4604      	mov	r4, r0
      u8x8_gpio_Init(u8x8);
 8006db2:	47a8      	blx	r5
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8006db4:	2300      	movs	r3, #0
 8006db6:	2114      	movs	r1, #20
 8006db8:	461a      	mov	r2, r3
 8006dba:	4620      	mov	r0, r4
 8006dbc:	68e5      	ldr	r5, [r4, #12]
 8006dbe:	47a8      	blx	r5

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8006dc0:	4620      	mov	r0, r4
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	214b      	movs	r1, #75	@ 0x4b
 8006dc6:	f000 f84e 	bl	8006e66 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8006dca:	6823      	ldr	r3, [r4, #0]
 8006dcc:	4620      	mov	r0, r4
 8006dce:	791a      	ldrb	r2, [r3, #4]
 8006dd0:	2129      	movs	r1, #41	@ 0x29
 8006dd2:	f000 f848 	bl	8006e66 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	2200      	movs	r2, #0
 8006dda:	214b      	movs	r1, #75	@ 0x4b
 8006ddc:	f000 f843 	bl	8006e66 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8006de0:	6823      	ldr	r3, [r4, #0]
 8006de2:	4620      	mov	r0, r4
 8006de4:	791a      	ldrb	r2, [r3, #4]
 8006de6:	2129      	movs	r1, #41	@ 0x29
 8006de8:	f000 f83d 	bl	8006e66 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8006dec:	4620      	mov	r0, r4
 8006dee:	2201      	movs	r2, #1
 8006df0:	214b      	movs	r1, #75	@ 0x4b
 8006df2:	f000 f838 	bl	8006e66 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8006df6:	6823      	ldr	r3, [r4, #0]
 8006df8:	4620      	mov	r0, r4
 8006dfa:	795a      	ldrb	r2, [r3, #5]
 8006dfc:	2129      	movs	r1, #41	@ 0x29
}    
 8006dfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8006e02:	f000 b830 	b.w	8006e66 <u8x8_gpio_call>

08006e06 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8006e06:	b513      	push	{r0, r1, r4, lr}
  u8x8_tile_t tile;
  tile.x_pos = x;
  tile.y_pos = y;
  tile.cnt = cnt;
 8006e08:	f88d 3004 	strb.w	r3, [sp, #4]
  tile.tile_ptr = tile_ptr;
 8006e0c:	9b04      	ldr	r3, [sp, #16]
  tile.x_pos = x;
 8006e0e:	f88d 1005 	strb.w	r1, [sp, #5]
  tile.y_pos = y;
 8006e12:	f88d 2006 	strb.w	r2, [sp, #6]
  tile.tile_ptr = tile_ptr;
 8006e16:	9300      	str	r3, [sp, #0]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8006e18:	2201      	movs	r2, #1
 8006e1a:	466b      	mov	r3, sp
 8006e1c:	210f      	movs	r1, #15
 8006e1e:	6884      	ldr	r4, [r0, #8]
 8006e20:	47a0      	blx	r4
}
 8006e22:	b002      	add	sp, #8
 8006e24:	bd10      	pop	{r4, pc}

08006e26 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8006e26:	2300      	movs	r3, #0
{
 8006e28:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8006e2a:	6884      	ldr	r4, [r0, #8]
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	46a4      	mov	ip, r4
 8006e30:	2109      	movs	r1, #9
}
 8006e32:	bc10      	pop	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8006e34:	4760      	bx	ip

08006e36 <u8x8_InitDisplay>:
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8006e36:	2300      	movs	r3, #0
{
 8006e38:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8006e3a:	6884      	ldr	r4, [r0, #8]
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	46a4      	mov	ip, r4
 8006e40:	210a      	movs	r1, #10
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 8006e42:	bc10      	pop	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8006e44:	4760      	bx	ip

08006e46 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8006e46:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8006e48:	6884      	ldr	r4, [r0, #8]
{
 8006e4a:	460a      	mov	r2, r1
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8006e4c:	46a4      	mov	ip, r4
 8006e4e:	2300      	movs	r3, #0
 8006e50:	210b      	movs	r1, #11
}
 8006e52:	bc10      	pop	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8006e54:	4760      	bx	ip

08006e56 <u8x8_RefreshDisplay>:
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);
 8006e56:	2300      	movs	r3, #0
{
 8006e58:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);
 8006e5a:	6884      	ldr	r4, [r0, #8]
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	46a4      	mov	ip, r4
 8006e60:	2110      	movs	r1, #16
  //++FPS_Count;
}
 8006e62:	bc10      	pop	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);
 8006e64:	4760      	bx	ip

08006e66 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8006e66:	b410      	push	{r4}
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8006e68:	6944      	ldr	r4, [r0, #20]
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	46a4      	mov	ip, r4
}
 8006e6e:	bc10      	pop	{r4}
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8006e70:	4760      	bx	ip

08006e72 <u8x8_dummy_cb>:
/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
}
 8006e72:	2000      	movs	r0, #0
 8006e74:	4770      	bx	lr
	...

08006e78 <u8x8_SetupDefaults>:
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    u8x8->display_info = NULL;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	6003      	str	r3, [r0, #0]
    u8x8->display_cb = u8x8_dummy_cb;
    u8x8->cad_cb = u8x8_dummy_cb;
    u8x8->byte_cb = u8x8_dummy_cb;
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
    u8x8->is_font_inverse_mode = 0;
 8006e7c:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8006e80:	f880 3026 	strb.w	r3, [r0, #38]	@ 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8006e84:	6183      	str	r3, [r0, #24]
    u8x8->i2c_address = 255;
 8006e86:	23ff      	movs	r3, #255	@ 0xff
    u8x8->display_cb = u8x8_dummy_cb;
 8006e88:	4a04      	ldr	r2, [pc, #16]	@ (8006e9c <u8x8_SetupDefaults+0x24>)
    u8x8->i2c_address = 255;
 8006e8a:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    u8x8->cad_cb = u8x8_dummy_cb;
 8006e8e:	e9c0 2202 	strd	r2, r2, [r0, #8]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8006e92:	e9c0 2204 	strd	r2, r2, [r0, #16]
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8006e96:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8006e9a:	4770      	bx	lr
 8006e9c:	08006e73 	.word	0x08006e73

08006ea0 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8006ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ea2:	4616      	mov	r6, r2
 8006ea4:	461d      	mov	r5, r3
 8006ea6:	9f06      	ldr	r7, [sp, #24]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8006ea8:	f7ff ffe6 	bl	8006e78 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
  u8x8->cad_cb = cad_cb;
 8006eac:	e9c0 1602 	strd	r1, r6, [r0, #8]
  u8x8->byte_cb = byte_cb;
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8006eb0:	e9c0 5704 	strd	r5, r7, [r0, #16]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
}
 8006eb4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  u8x8_SetupMemory(u8x8);
 8006eb8:	f7ff bfb5 	b.w	8006e26 <u8x8_SetupMemory>

08006ebc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006ebc:	b510      	push	{r4, lr}
 8006ebe:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006ec0:	2214      	movs	r2, #20
 8006ec2:	2100      	movs	r1, #0
 8006ec4:	a80c      	add	r0, sp, #48	@ 0x30
 8006ec6:	f003 f850 	bl	8009f6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006eca:	2214      	movs	r2, #20
 8006ecc:	2100      	movs	r1, #0
 8006ece:	eb0d 0002 	add.w	r0, sp, r2
 8006ed2:	f003 f84a 	bl	8009f6a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006ed6:	2210      	movs	r2, #16
 8006ed8:	2100      	movs	r1, #0
 8006eda:	a801      	add	r0, sp, #4
 8006edc:	f003 f845 	bl	8009f6a <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006ee0:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006ee2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006ee6:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006ee8:	e9cd 4311 	strd	r4, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006eec:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006ef0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006ef4:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006ef6:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006ef8:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006efa:	f000 ff01 	bl	8007d00 <HAL_RCC_OscConfig>
 8006efe:	b108      	cbz	r0, 8006f04 <SystemClock_Config+0x48>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006f00:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006f02:	e7fe      	b.n	8006f02 <SystemClock_Config+0x46>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006f04:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006f06:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006f0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006f0e:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006f10:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006f14:	4621      	mov	r1, r4
 8006f16:	a805      	add	r0, sp, #20
 8006f18:	f001 f8b4 	bl	8008084 <HAL_RCC_ClockConfig>
 8006f1c:	b108      	cbz	r0, 8006f22 <SystemClock_Config+0x66>
 8006f1e:	b672      	cpsid	i
  while (1)
 8006f20:	e7fe      	b.n	8006f20 <SystemClock_Config+0x64>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8006f22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006f26:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8006f28:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8006f2a:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006f2c:	f001 f956 	bl	80081dc <HAL_RCCEx_PeriphCLKConfig>
 8006f30:	b108      	cbz	r0, 8006f36 <SystemClock_Config+0x7a>
 8006f32:	b672      	cpsid	i
  while (1)
 8006f34:	e7fe      	b.n	8006f34 <SystemClock_Config+0x78>
}
 8006f36:	b014      	add	sp, #80	@ 0x50
 8006f38:	bd10      	pop	{r4, pc}
	...

08006f3c <main>:
{
 8006f3c:	b500      	push	{lr}
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006f3e:	4d60      	ldr	r5, [pc, #384]	@ (80070c0 <main+0x184>)
{
 8006f40:	b08b      	sub	sp, #44	@ 0x2c
  HAL_Init();
 8006f42:	f000 f9f3 	bl	800732c <HAL_Init>
  SystemClock_Config();
 8006f46:	f7ff ffb9 	bl	8006ebc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f4a:	2210      	movs	r2, #16
 8006f4c:	2100      	movs	r1, #0
 8006f4e:	a806      	add	r0, sp, #24
 8006f50:	f003 f80b 	bl	8009f6a <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006f54:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOA, OLED_CS_Pin|OLED_DC_Pin|OLED_RST_Pin, GPIO_PIN_RESET);
 8006f56:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006f58:	f043 0320 	orr.w	r3, r3, #32
 8006f5c:	61ab      	str	r3, [r5, #24]
 8006f5e:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOA, OLED_CS_Pin|OLED_DC_Pin|OLED_RST_Pin, GPIO_PIN_RESET);
 8006f60:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006f64:	f003 0320 	and.w	r3, r3, #32
 8006f68:	9301      	str	r3, [sp, #4]
 8006f6a:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f6c:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOA, OLED_CS_Pin|OLED_DC_Pin|OLED_RST_Pin, GPIO_PIN_RESET);
 8006f6e:	4855      	ldr	r0, [pc, #340]	@ (80070c4 <main+0x188>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f70:	f043 0304 	orr.w	r3, r3, #4
 8006f74:	61ab      	str	r3, [r5, #24]
 8006f76:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006f78:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f7a:	f003 0304 	and.w	r3, r3, #4
 8006f7e:	9302      	str	r3, [sp, #8]
 8006f80:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f82:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006f84:	2601      	movs	r6, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f86:	f043 0308 	orr.w	r3, r3, #8
 8006f8a:	61ab      	str	r3, [r5, #24]
 8006f8c:	69ab      	ldr	r3, [r5, #24]
 8006f8e:	f003 0308 	and.w	r3, r3, #8
 8006f92:	9303      	str	r3, [sp, #12]
 8006f94:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, OLED_CS_Pin|OLED_DC_Pin|OLED_RST_Pin, GPIO_PIN_RESET);
 8006f96:	f000 fead 	bl	8007cf4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006f9a:	2350      	movs	r3, #80	@ 0x50
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f9c:	4849      	ldr	r0, [pc, #292]	@ (80070c4 <main+0x188>)
 8006f9e:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006fa0:	e9cd 3406 	strd	r3, r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006fa4:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fa6:	f000 fdc7 	bl	8007b38 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = KEY3_Pin|KEY4_Pin;
 8006faa:	f240 4301 	movw	r3, #1025	@ 0x401
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006fae:	4846      	ldr	r0, [pc, #280]	@ (80070c8 <main+0x18c>)
 8006fb0:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006fb2:	e9cd 3406 	strd	r3, r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006fb6:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006fb8:	f000 fdbe 	bl	8007b38 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OLED_CS_Pin|OLED_DC_Pin|OLED_RST_Pin;
 8006fbc:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006fc0:	e9cd 3606 	strd	r3, r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fc4:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fc6:	483f      	ldr	r0, [pc, #252]	@ (80070c4 <main+0x188>)
 8006fc8:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fca:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fcc:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fce:	f000 fdb3 	bl	8007b38 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006fd2:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8006fd4:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006fd6:	4333      	orrs	r3, r6
 8006fd8:	616b      	str	r3, [r5, #20]
 8006fda:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8006fdc:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006fde:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8006fe0:	200f      	movs	r0, #15
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006fe2:	9300      	str	r3, [sp, #0]
 8006fe4:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8006fe6:	f000 fc53 	bl	8007890 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8006fea:	200f      	movs	r0, #15
 8006fec:	f000 fc80 	bl	80078f0 <HAL_NVIC_EnableIRQ>
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006ff0:	f44f 7382 	mov.w	r3, #260	@ 0x104
  hspi2.Instance = SPI2;
 8006ff4:	4835      	ldr	r0, [pc, #212]	@ (80070cc <main+0x190>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006ff6:	4936      	ldr	r1, [pc, #216]	@ (80070d0 <main+0x194>)
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006ff8:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006ffc:	e9c0 1300 	strd	r1, r3, [r0]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8007000:	f44f 7300 	mov.w	r3, #512	@ 0x200
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007004:	e9c0 3406 	strd	r3, r4, [r0, #24]
  hspi2.Init.CRCPolynomial = 10;
 8007008:	230a      	movs	r3, #10
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800700a:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800700e:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007012:	6284      	str	r4, [r0, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8007014:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007016:	f001 fa31 	bl	800847c <HAL_SPI_Init>
 800701a:	b108      	cbz	r0, 8007020 <main+0xe4>
 800701c:	b672      	cpsid	i
  while (1)
 800701e:	e7fe      	b.n	800701e <main+0xe2>
  hadc1.Instance = ADC1;
 8007020:	4c2c      	ldr	r4, [pc, #176]	@ (80070d4 <main+0x198>)
 8007022:	4b2d      	ldr	r3, [pc, #180]	@ (80070d8 <main+0x19c>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8007024:	e9cd 0006 	strd	r0, r0, [sp, #24]
  hadc1.Instance = ADC1;
 8007028:	6023      	str	r3, [r4, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800702a:	f44f 2360 	mov.w	r3, #917504	@ 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 800702e:	9008      	str	r0, [sp, #32]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8007030:	60a0      	str	r0, [r4, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8007032:	7320      	strb	r0, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007034:	7520      	strb	r0, [r4, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007036:	6060      	str	r0, [r4, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007038:	4620      	mov	r0, r4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800703a:	61e3      	str	r3, [r4, #28]
  hadc1.Init.NbrOfConversion = 1;
 800703c:	6126      	str	r6, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800703e:	f000 fb97 	bl	8007770 <HAL_ADC_Init>
 8007042:	b108      	cbz	r0, 8007048 <main+0x10c>
 8007044:	b672      	cpsid	i
  while (1)
 8007046:	e7fe      	b.n	8007046 <main+0x10a>
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8007048:	9008      	str	r0, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800704a:	a906      	add	r1, sp, #24
 800704c:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800704e:	e9cd 6606 	strd	r6, r6, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007052:	f000 fa49 	bl	80074e8 <HAL_ADC_ConfigChannel>
 8007056:	4605      	mov	r5, r0
 8007058:	b108      	cbz	r0, 800705e <main+0x122>
 800705a:	b672      	cpsid	i
  while (1)
 800705c:	e7fe      	b.n	800705c <main+0x120>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800705e:	2210      	movs	r2, #16
 8007060:	4601      	mov	r1, r0
 8007062:	a806      	add	r0, sp, #24
 8007064:	f002 ff81 	bl	8009f6a <memset>
  htim2.Init.Prescaler = 72-1;
 8007068:	2347      	movs	r3, #71	@ 0x47
 800706a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  htim2.Instance = TIM2;
 800706e:	4c1b      	ldr	r4, [pc, #108]	@ (80070dc <main+0x1a0>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007070:	e9cd 5504 	strd	r5, r5, [sp, #16]
  htim2.Init.Prescaler = 72-1;
 8007074:	e9c4 2300 	strd	r2, r3, [r4]
  htim2.Init.Period = 5000;
 8007078:	f241 3388 	movw	r3, #5000	@ 0x1388
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800707c:	4620      	mov	r0, r4
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800707e:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007082:	60a5      	str	r5, [r4, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007084:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007086:	f001 fd13 	bl	8008ab0 <HAL_TIM_Base_Init>
 800708a:	b108      	cbz	r0, 8007090 <main+0x154>
 800708c:	b672      	cpsid	i
  while (1)
 800708e:	e7fe      	b.n	800708e <main+0x152>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007090:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007094:	4620      	mov	r0, r4
 8007096:	a906      	add	r1, sp, #24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007098:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800709a:	f001 fd3f 	bl	8008b1c <HAL_TIM_ConfigClockSource>
 800709e:	b108      	cbz	r0, 80070a4 <main+0x168>
 80070a0:	b672      	cpsid	i
  while (1)
 80070a2:	e7fe      	b.n	80070a2 <main+0x166>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80070a4:	e9cd 0004 	strd	r0, r0, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80070a8:	a904      	add	r1, sp, #16
 80070aa:	4620      	mov	r0, r4
 80070ac:	f001 fdd0 	bl	8008c50 <HAL_TIMEx_MasterConfigSynchronization>
 80070b0:	b108      	cbz	r0, 80070b6 <main+0x17a>
 80070b2:	b672      	cpsid	i
  while (1)
 80070b4:	e7fe      	b.n	80070b4 <main+0x178>
  astraCoreInit();
 80070b6:	f7f9 ffcd 	bl	8001054 <astraCoreInit>
    astraCoreUpdate();
 80070ba:	f7fa f98b 	bl	80013d4 <astraCoreUpdate>
  while (1)
 80070be:	e7fc      	b.n	80070ba <main+0x17e>
 80070c0:	40021000 	.word	0x40021000
 80070c4:	40010800 	.word	0x40010800
 80070c8:	40010c00 	.word	0x40010c00
 80070cc:	20000668 	.word	0x20000668
 80070d0:	40003800 	.word	0x40003800
 80070d4:	200006c0 	.word	0x200006c0
 80070d8:	40012400 	.word	0x40012400
 80070dc:	200005dc 	.word	0x200005dc

080070e0 <Error_Handler>:
 80070e0:	b672      	cpsid	i
  while (1)
 80070e2:	e7fe      	b.n	80070e2 <Error_Handler+0x2>

080070e4 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80070e4:	4b0e      	ldr	r3, [pc, #56]	@ (8007120 <HAL_MspInit+0x3c>)
{
 80070e6:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80070e8:	699a      	ldr	r2, [r3, #24]
 80070ea:	f042 0201 	orr.w	r2, r2, #1
 80070ee:	619a      	str	r2, [r3, #24]
 80070f0:	699a      	ldr	r2, [r3, #24]
 80070f2:	f002 0201 	and.w	r2, r2, #1
 80070f6:	9200      	str	r2, [sp, #0]
 80070f8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80070fa:	69da      	ldr	r2, [r3, #28]
 80070fc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8007100:	61da      	str	r2, [r3, #28]
 8007102:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007104:	4a07      	ldr	r2, [pc, #28]	@ (8007124 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8007106:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800710a:	9301      	str	r3, [sp, #4]
 800710c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800710e:	6853      	ldr	r3, [r2, #4]
 8007110:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8007114:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007118:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800711a:	b002      	add	sp, #8
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	40021000 	.word	0x40021000
 8007124:	40010000 	.word	0x40010000

08007128 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007128:	b510      	push	{r4, lr}
 800712a:	4604      	mov	r4, r0
 800712c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800712e:	2210      	movs	r2, #16
 8007130:	2100      	movs	r1, #0
 8007132:	a802      	add	r0, sp, #8
 8007134:	f002 ff19 	bl	8009f6a <memset>
  if(hadc->Instance==ADC1)
 8007138:	6822      	ldr	r2, [r4, #0]
 800713a:	4b10      	ldr	r3, [pc, #64]	@ (800717c <HAL_ADC_MspInit+0x54>)
 800713c:	429a      	cmp	r2, r3
 800713e:	d11b      	bne.n	8007178 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007140:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
 8007144:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007146:	480e      	ldr	r0, [pc, #56]	@ (8007180 <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007148:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800714c:	619a      	str	r2, [r3, #24]
 800714e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007150:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007152:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8007156:	9200      	str	r2, [sp, #0]
 8007158:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800715a:	699a      	ldr	r2, [r3, #24]
 800715c:	f042 0204 	orr.w	r2, r2, #4
 8007160:	619a      	str	r2, [r3, #24]
 8007162:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007164:	2202      	movs	r2, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007166:	f003 0304 	and.w	r3, r3, #4
 800716a:	9301      	str	r3, [sp, #4]
 800716c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800716e:	2303      	movs	r3, #3
 8007170:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007174:	f000 fce0 	bl	8007b38 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8007178:	b006      	add	sp, #24
 800717a:	bd10      	pop	{r4, pc}
 800717c:	40012400 	.word	0x40012400
 8007180:	40010800 	.word	0x40010800

08007184 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007184:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007186:	2710      	movs	r7, #16
{
 8007188:	4606      	mov	r6, r0
 800718a:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800718c:	463a      	mov	r2, r7
 800718e:	2100      	movs	r1, #0
 8007190:	a802      	add	r0, sp, #8
 8007192:	f002 feea 	bl	8009f6a <memset>
  if(hspi->Instance==SPI2)
 8007196:	6832      	ldr	r2, [r6, #0]
 8007198:	4b20      	ldr	r3, [pc, #128]	@ (800721c <HAL_SPI_MspInit+0x98>)
 800719a:	429a      	cmp	r2, r3
 800719c:	d13b      	bne.n	8007216 <HAL_SPI_MspInit+0x92>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800719e:	f503 33ec 	add.w	r3, r3, #120832	@ 0x1d800
 80071a2:	69da      	ldr	r2, [r3, #28]
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = OLED_SCK_Pin|OLED_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071a4:	481e      	ldr	r0, [pc, #120]	@ (8007220 <HAL_SPI_MspInit+0x9c>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80071a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80071aa:	61da      	str	r2, [r3, #28]
 80071ac:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071ae:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI2_CLK_ENABLE();
 80071b0:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80071b4:	9200      	str	r2, [sp, #0]
 80071b6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80071b8:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80071ba:	2500      	movs	r5, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80071bc:	f042 0208 	orr.w	r2, r2, #8
 80071c0:	619a      	str	r2, [r3, #24]
 80071c2:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071c4:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80071c8:	f003 0308 	and.w	r3, r3, #8
 80071cc:	9301      	str	r3, [sp, #4]
 80071ce:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071d0:	2302      	movs	r3, #2
 80071d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80071d6:	2303      	movs	r3, #3
 80071d8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071da:	f000 fcad 	bl	8007b38 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80071de:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071e2:	480f      	ldr	r0, [pc, #60]	@ (8007220 <HAL_SPI_MspInit+0x9c>)
 80071e4:	a902      	add	r1, sp, #8

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80071e6:	4c0f      	ldr	r4, [pc, #60]	@ (8007224 <HAL_SPI_MspInit+0xa0>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80071e8:	e9cd 3502 	strd	r3, r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071ec:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071ee:	f000 fca3 	bl	8007b38 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80071f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007228 <HAL_SPI_MspInit+0xa4>)
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80071f4:	4620      	mov	r0, r4
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80071f6:	e9c4 3700 	strd	r3, r7, [r4]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80071fa:	2380      	movs	r3, #128	@ 0x80
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80071fc:	e9c4 5505 	strd	r5, r5, [r4, #20]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007200:	e9c4 3503 	strd	r3, r5, [r4, #12]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007204:	60a5      	str	r5, [r4, #8]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007206:	61e5      	str	r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8007208:	f000 fb94 	bl	8007934 <HAL_DMA_Init>
 800720c:	b108      	cbz	r0, 8007212 <HAL_SPI_MspInit+0x8e>
    {
      Error_Handler();
 800720e:	f7ff ff67 	bl	80070e0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8007212:	64b4      	str	r4, [r6, #72]	@ 0x48
 8007214:	6266      	str	r6, [r4, #36]	@ 0x24

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8007216:	b007      	add	sp, #28
 8007218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800721a:	bf00      	nop
 800721c:	40003800 	.word	0x40003800
 8007220:	40010c00 	.word	0x40010c00
 8007224:	20000624 	.word	0x20000624
 8007228:	40020058 	.word	0x40020058

0800722c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 800722c:	6803      	ldr	r3, [r0, #0]
{
 800722e:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 8007230:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007234:	d115      	bne.n	8007262 <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007236:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 800723a:	69da      	ldr	r2, [r3, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800723c:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 800723e:	f042 0201 	orr.w	r2, r2, #1
 8007242:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007244:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007246:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007248:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 800724a:	f003 0301 	and.w	r3, r3, #1
 800724e:	9301      	str	r3, [sp, #4]
 8007250:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007252:	f000 fb1d 	bl	8007890 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007256:	201c      	movs	r0, #28

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8007258:	b003      	add	sp, #12
 800725a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800725e:	f000 bb47 	b.w	80078f0 <HAL_NVIC_EnableIRQ>
}
 8007262:	b003      	add	sp, #12
 8007264:	f85d fb04 	ldr.w	pc, [sp], #4

08007268 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007268:	e7fe      	b.n	8007268 <NMI_Handler>

0800726a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800726a:	e7fe      	b.n	800726a <HardFault_Handler>

0800726c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800726c:	e7fe      	b.n	800726c <MemManage_Handler>

0800726e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800726e:	e7fe      	b.n	800726e <BusFault_Handler>

08007270 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007270:	e7fe      	b.n	8007270 <UsageFault_Handler>

08007272 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007272:	4770      	bx	lr

08007274 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8007274:	4770      	bx	lr

08007276 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8007276:	4770      	bx	lr

08007278 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007278:	f000 b86a 	b.w	8007350 <HAL_IncTick>

0800727c <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800727c:	4801      	ldr	r0, [pc, #4]	@ (8007284 <DMA1_Channel5_IRQHandler+0x8>)
 800727e:	f000 bbc7 	b.w	8007a10 <HAL_DMA_IRQHandler>
 8007282:	bf00      	nop
 8007284:	20000624 	.word	0x20000624

08007288 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007288:	4801      	ldr	r0, [pc, #4]	@ (8007290 <TIM2_IRQHandler+0x8>)
 800728a:	f001 bb3d 	b.w	8008908 <HAL_TIM_IRQHandler>
 800728e:	bf00      	nop
 8007290:	200005dc 	.word	0x200005dc

08007294 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007294:	4770      	bx	lr
	...

08007298 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007298:	f7ff fffc 	bl	8007294 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800729c:	480b      	ldr	r0, [pc, #44]	@ (80072cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800729e:	490c      	ldr	r1, [pc, #48]	@ (80072d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80072a0:	4a0c      	ldr	r2, [pc, #48]	@ (80072d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80072a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80072a4:	e002      	b.n	80072ac <LoopCopyDataInit>

080072a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80072a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80072a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80072aa:	3304      	adds	r3, #4

080072ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80072ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80072ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80072b0:	d3f9      	bcc.n	80072a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80072b2:	4a09      	ldr	r2, [pc, #36]	@ (80072d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80072b4:	4c09      	ldr	r4, [pc, #36]	@ (80072dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80072b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80072b8:	e001      	b.n	80072be <LoopFillZerobss>

080072ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80072ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80072bc:	3204      	adds	r2, #4

080072be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80072be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80072c0:	d3fb      	bcc.n	80072ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80072c2:	f002 fef5 	bl	800a0b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80072c6:	f7ff fe39 	bl	8006f3c <main>
  bx lr
 80072ca:	4770      	bx	lr
  ldr r0, =_sdata
 80072cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80072d0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80072d4:	0800caf8 	.word	0x0800caf8
  ldr r2, =_sbss
 80072d8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80072dc:	200008d8 	.word	0x200008d8

080072e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80072e0:	e7fe      	b.n	80072e0 <ADC1_2_IRQHandler>
	...

080072e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80072e4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80072e6:	4b0e      	ldr	r3, [pc, #56]	@ (8007320 <HAL_InitTick+0x3c>)
{
 80072e8:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80072ea:	781a      	ldrb	r2, [r3, #0]
 80072ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80072f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80072f4:	4a0b      	ldr	r2, [pc, #44]	@ (8007324 <HAL_InitTick+0x40>)
 80072f6:	6810      	ldr	r0, [r2, #0]
 80072f8:	fbb0 f0f3 	udiv	r0, r0, r3
 80072fc:	f000 fb06 	bl	800790c <HAL_SYSTICK_Config>
 8007300:	4604      	mov	r4, r0
 8007302:	b958      	cbnz	r0, 800731c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007304:	2d0f      	cmp	r5, #15
 8007306:	d809      	bhi.n	800731c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007308:	4602      	mov	r2, r0
 800730a:	4629      	mov	r1, r5
 800730c:	f04f 30ff 	mov.w	r0, #4294967295
 8007310:	f000 fabe 	bl	8007890 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007314:	4620      	mov	r0, r4
 8007316:	4b04      	ldr	r3, [pc, #16]	@ (8007328 <HAL_InitTick+0x44>)
 8007318:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800731a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800731c:	2001      	movs	r0, #1
 800731e:	e7fc      	b.n	800731a <HAL_InitTick+0x36>
 8007320:	20000008 	.word	0x20000008
 8007324:	20000004 	.word	0x20000004
 8007328:	2000000c 	.word	0x2000000c

0800732c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800732c:	4a07      	ldr	r2, [pc, #28]	@ (800734c <HAL_Init+0x20>)
{
 800732e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007330:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007332:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007334:	f043 0310 	orr.w	r3, r3, #16
 8007338:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800733a:	f000 fa97 	bl	800786c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800733e:	200f      	movs	r0, #15
 8007340:	f7ff ffd0 	bl	80072e4 <HAL_InitTick>
  HAL_MspInit();
 8007344:	f7ff fece 	bl	80070e4 <HAL_MspInit>
}
 8007348:	2000      	movs	r0, #0
 800734a:	bd08      	pop	{r3, pc}
 800734c:	40022000 	.word	0x40022000

08007350 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8007350:	4a03      	ldr	r2, [pc, #12]	@ (8007360 <HAL_IncTick+0x10>)
 8007352:	4b04      	ldr	r3, [pc, #16]	@ (8007364 <HAL_IncTick+0x14>)
 8007354:	6811      	ldr	r1, [r2, #0]
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	440b      	add	r3, r1
 800735a:	6013      	str	r3, [r2, #0]
}
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	200006f0 	.word	0x200006f0
 8007364:	20000008 	.word	0x20000008

08007368 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007368:	4b01      	ldr	r3, [pc, #4]	@ (8007370 <HAL_GetTick+0x8>)
 800736a:	6818      	ldr	r0, [r3, #0]
}
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop
 8007370:	200006f0 	.word	0x200006f0

08007374 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007374:	b538      	push	{r3, r4, r5, lr}
 8007376:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007378:	f7ff fff6 	bl	8007368 <HAL_GetTick>
 800737c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800737e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8007380:	bf1e      	ittt	ne
 8007382:	4b04      	ldrne	r3, [pc, #16]	@ (8007394 <HAL_Delay+0x20>)
 8007384:	781b      	ldrbne	r3, [r3, #0]
 8007386:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007388:	f7ff ffee 	bl	8007368 <HAL_GetTick>
 800738c:	1b43      	subs	r3, r0, r5
 800738e:	42a3      	cmp	r3, r4
 8007390:	d3fa      	bcc.n	8007388 <HAL_Delay+0x14>
  {
  }
}
 8007392:	bd38      	pop	{r3, r4, r5, pc}
 8007394:	20000008 	.word	0x20000008

08007398 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8007398:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800739a:	2600      	movs	r6, #0
{
 800739c:	4604      	mov	r4, r0
 800739e:	460d      	mov	r5, r1
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80073a0:	9601      	str	r6, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80073a2:	f7ff ffe1 	bl	8007368 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80073a6:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80073a8:	4607      	mov	r7, r0
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80073aa:	689a      	ldr	r2, [r3, #8]
 80073ac:	05d1      	lsls	r1, r2, #23
 80073ae:	d508      	bpl.n	80073c2 <HAL_ADC_PollForConversion+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
    
    return HAL_ERROR;
 80073b0:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80073b2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    __HAL_UNLOCK(hadc);
 80073b4:	f884 6024 	strb.w	r6, [r4, #36]	@ 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80073b8:	f043 0320 	orr.w	r3, r3, #32
 80073bc:	62a3      	str	r3, [r4, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 80073be:	b003      	add	sp, #12
 80073c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80073c2:	685a      	ldr	r2, [r3, #4]
 80073c4:	05d2      	lsls	r2, r2, #23
 80073c6:	d403      	bmi.n	80073d0 <HAL_ADC_PollForConversion+0x38>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80073c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80073ca:	f413 0f70 	tst.w	r3, #15728640	@ 0xf00000
 80073ce:	d03d      	beq.n	800744c <HAL_ADC_PollForConversion+0xb4>
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80073d0:	4b3d      	ldr	r3, [pc, #244]	@ (80074c8 <HAL_ADC_PollForConversion+0x130>)
 80073d2:	2002      	movs	r0, #2
 80073d4:	681e      	ldr	r6, [r3, #0]
 80073d6:	f000 ff7b 	bl	80082d0 <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80073da:	6823      	ldr	r3, [r4, #0]
 80073dc:	4a3b      	ldr	r2, [pc, #236]	@ (80074cc <HAL_ADC_PollForConversion+0x134>)
 80073de:	6919      	ldr	r1, [r3, #16]
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80073e0:	fbb6 f6f0 	udiv	r6, r6, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80073e4:	4211      	tst	r1, r2
 80073e6:	4a3a      	ldr	r2, [pc, #232]	@ (80074d0 <HAL_ADC_PollForConversion+0x138>)
 80073e8:	d151      	bne.n	800748e <HAL_ADC_PollForConversion+0xf6>
 80073ea:	68d8      	ldr	r0, [r3, #12]
 80073ec:	4939      	ldr	r1, [pc, #228]	@ (80074d4 <HAL_ADC_PollForConversion+0x13c>)
 80073ee:	4208      	tst	r0, r1
 80073f0:	d14d      	bne.n	800748e <HAL_ADC_PollForConversion+0xf6>
 80073f2:	6919      	ldr	r1, [r3, #16]
 80073f4:	4211      	tst	r1, r2
 80073f6:	d15b      	bne.n	80074b0 <HAL_ADC_PollForConversion+0x118>
 80073f8:	68da      	ldr	r2, [r3, #12]
 80073fa:	4b37      	ldr	r3, [pc, #220]	@ (80074d8 <HAL_ADC_PollForConversion+0x140>)
 80073fc:	421a      	tst	r2, r3
 80073fe:	bf14      	ite	ne
 8007400:	2329      	movne	r3, #41	@ 0x29
 8007402:	2314      	moveq	r3, #20
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8007404:	435e      	muls	r6, r3
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8007406:	9b01      	ldr	r3, [sp, #4]
 8007408:	42b3      	cmp	r3, r6
 800740a:	d223      	bcs.n	8007454 <HAL_ADC_PollForConversion+0xbc>
      if(Timeout != HAL_MAX_DELAY)
 800740c:	1c6a      	adds	r2, r5, #1
 800740e:	d004      	beq.n	800741a <HAL_ADC_PollForConversion+0x82>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8007410:	2d00      	cmp	r5, #0
 8007412:	d153      	bne.n	80074bc <HAL_ADC_PollForConversion+0x124>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8007414:	9b01      	ldr	r3, [sp, #4]
 8007416:	42b3      	cmp	r3, r6
 8007418:	d30a      	bcc.n	8007430 <HAL_ADC_PollForConversion+0x98>
      Conversion_Timeout_CPU_cycles ++;
 800741a:	9b01      	ldr	r3, [sp, #4]
 800741c:	3301      	adds	r3, #1
 800741e:	9301      	str	r3, [sp, #4]
 8007420:	e7f1      	b.n	8007406 <HAL_ADC_PollForConversion+0x6e>
      if(Timeout != HAL_MAX_DELAY)
 8007422:	1c6e      	adds	r6, r5, #1
 8007424:	d013      	beq.n	800744e <HAL_ADC_PollForConversion+0xb6>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8007426:	b965      	cbnz	r5, 8007442 <HAL_ADC_PollForConversion+0xaa>
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8007428:	6823      	ldr	r3, [r4, #0]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	0798      	lsls	r0, r3, #30
 800742e:	d40d      	bmi.n	800744c <HAL_ADC_PollForConversion+0xb4>
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8007430:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
            return HAL_TIMEOUT;
 8007432:	2003      	movs	r0, #3
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8007434:	f043 0304 	orr.w	r3, r3, #4
 8007438:	62a3      	str	r3, [r4, #40]	@ 0x28
            __HAL_UNLOCK(hadc);
 800743a:	2300      	movs	r3, #0
 800743c:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 8007440:	e7bd      	b.n	80073be <HAL_ADC_PollForConversion+0x26>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8007442:	f7ff ff91 	bl	8007368 <HAL_GetTick>
 8007446:	1bc0      	subs	r0, r0, r7
 8007448:	42a8      	cmp	r0, r5
 800744a:	d8ed      	bhi.n	8007428 <HAL_ADC_PollForConversion+0x90>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800744c:	6822      	ldr	r2, [r4, #0]
 800744e:	6813      	ldr	r3, [r2, #0]
 8007450:	0799      	lsls	r1, r3, #30
 8007452:	d5e6      	bpl.n	8007422 <HAL_ADC_PollForConversion+0x8a>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007454:	f06f 0312 	mvn.w	r3, #18
 8007458:	6822      	ldr	r2, [r4, #0]
 800745a:	6013      	str	r3, [r2, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800745c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800745e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007462:	62a3      	str	r3, [r4, #40]	@ 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007464:	6893      	ldr	r3, [r2, #8]
 8007466:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800746a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800746e:	d10c      	bne.n	800748a <HAL_ADC_PollForConversion+0xf2>
 8007470:	7b23      	ldrb	r3, [r4, #12]
 8007472:	b953      	cbnz	r3, 800748a <HAL_ADC_PollForConversion+0xf2>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007474:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007476:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800747a:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800747c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800747e:	04db      	lsls	r3, r3, #19
 8007480:	d403      	bmi.n	800748a <HAL_ADC_PollForConversion+0xf2>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007482:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007484:	f043 0301 	orr.w	r3, r3, #1
 8007488:	62a3      	str	r3, [r4, #40]	@ 0x28
  return HAL_OK;
 800748a:	2000      	movs	r0, #0
 800748c:	e797      	b.n	80073be <HAL_ADC_PollForConversion+0x26>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800748e:	6919      	ldr	r1, [r3, #16]
 8007490:	4211      	tst	r1, r2
 8007492:	d103      	bne.n	800749c <HAL_ADC_PollForConversion+0x104>
 8007494:	68d9      	ldr	r1, [r3, #12]
 8007496:	4a10      	ldr	r2, [pc, #64]	@ (80074d8 <HAL_ADC_PollForConversion+0x140>)
 8007498:	4211      	tst	r1, r2
 800749a:	d00b      	beq.n	80074b4 <HAL_ADC_PollForConversion+0x11c>
 800749c:	6919      	ldr	r1, [r3, #16]
 800749e:	4a0f      	ldr	r2, [pc, #60]	@ (80074dc <HAL_ADC_PollForConversion+0x144>)
 80074a0:	4211      	tst	r1, r2
 80074a2:	d109      	bne.n	80074b8 <HAL_ADC_PollForConversion+0x120>
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	4213      	tst	r3, r2
 80074a8:	bf14      	ite	ne
 80074aa:	23fc      	movne	r3, #252	@ 0xfc
 80074ac:	2354      	moveq	r3, #84	@ 0x54
 80074ae:	e7a9      	b.n	8007404 <HAL_ADC_PollForConversion+0x6c>
 80074b0:	2329      	movs	r3, #41	@ 0x29
 80074b2:	e7a7      	b.n	8007404 <HAL_ADC_PollForConversion+0x6c>
 80074b4:	2354      	movs	r3, #84	@ 0x54
 80074b6:	e7a5      	b.n	8007404 <HAL_ADC_PollForConversion+0x6c>
 80074b8:	23fc      	movs	r3, #252	@ 0xfc
 80074ba:	e7a3      	b.n	8007404 <HAL_ADC_PollForConversion+0x6c>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80074bc:	f7ff ff54 	bl	8007368 <HAL_GetTick>
 80074c0:	1bc0      	subs	r0, r0, r7
 80074c2:	42a8      	cmp	r0, r5
 80074c4:	d8a6      	bhi.n	8007414 <HAL_ADC_PollForConversion+0x7c>
 80074c6:	e7a8      	b.n	800741a <HAL_ADC_PollForConversion+0x82>
 80074c8:	20000004 	.word	0x20000004
 80074cc:	24924924 	.word	0x24924924
 80074d0:	12492492 	.word	0x12492492
 80074d4:	00924924 	.word	0x00924924
 80074d8:	00492492 	.word	0x00492492
 80074dc:	00249249 	.word	0x00249249

080074e0 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80074e0:	6803      	ldr	r3, [r0, #0]
 80074e2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
}
 80074e4:	4770      	bx	lr
	...

080074e8 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80074e8:	2300      	movs	r3, #0
{ 
 80074ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80074ec:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80074ee:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{ 
 80074f2:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d06c      	beq.n	80075d2 <HAL_ADC_ConfigChannel+0xea>
 80074f8:	2301      	movs	r3, #1
 80074fa:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80074fe:	684d      	ldr	r5, [r1, #4]
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8007500:	6802      	ldr	r2, [r0, #0]
  if (sConfig->Rank < 7U)
 8007502:	2d06      	cmp	r5, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8007504:	6808      	ldr	r0, [r1, #0]
 8007506:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  if (sConfig->Rank < 7U)
 800750a:	d822      	bhi.n	8007552 <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800750c:	261f      	movs	r6, #31
 800750e:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 8007510:	3b05      	subs	r3, #5
 8007512:	409e      	lsls	r6, r3
 8007514:	ea25 0506 	bic.w	r5, r5, r6
 8007518:	fa00 f303 	lsl.w	r3, r0, r3
 800751c:	432b      	orrs	r3, r5
 800751e:	6353      	str	r3, [r2, #52]	@ 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8007520:	2809      	cmp	r0, #9
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8007522:	688b      	ldr	r3, [r1, #8]
 8007524:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8007528:	f04f 0107 	mov.w	r1, #7
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800752c:	d929      	bls.n	8007582 <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800752e:	68d6      	ldr	r6, [r2, #12]
 8007530:	3d1e      	subs	r5, #30
 8007532:	40a9      	lsls	r1, r5
 8007534:	ea26 0101 	bic.w	r1, r6, r1
 8007538:	40ab      	lsls	r3, r5
 800753a:	430b      	orrs	r3, r1
 800753c:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800753e:	f1a0 0310 	sub.w	r3, r0, #16
 8007542:	2b01      	cmp	r3, #1
 8007544:	d925      	bls.n	8007592 <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007546:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007548:	2300      	movs	r3, #0
 800754a:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 800754e:	b002      	add	sp, #8
 8007550:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8007552:	2d0c      	cmp	r5, #12
 8007554:	f04f 051f 	mov.w	r5, #31
 8007558:	d809      	bhi.n	800756e <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800755a:	6b16      	ldr	r6, [r2, #48]	@ 0x30
 800755c:	3b23      	subs	r3, #35	@ 0x23
 800755e:	409d      	lsls	r5, r3
 8007560:	ea26 0505 	bic.w	r5, r6, r5
 8007564:	fa00 f303 	lsl.w	r3, r0, r3
 8007568:	432b      	orrs	r3, r5
 800756a:	6313      	str	r3, [r2, #48]	@ 0x30
 800756c:	e7d8      	b.n	8007520 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800756e:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
 8007570:	3b41      	subs	r3, #65	@ 0x41
 8007572:	409d      	lsls	r5, r3
 8007574:	ea26 0505 	bic.w	r5, r6, r5
 8007578:	fa00 f303 	lsl.w	r3, r0, r3
 800757c:	432b      	orrs	r3, r5
 800757e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007580:	e7ce      	b.n	8007520 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8007582:	6910      	ldr	r0, [r2, #16]
 8007584:	40a9      	lsls	r1, r5
 8007586:	ea20 0101 	bic.w	r1, r0, r1
 800758a:	40ab      	lsls	r3, r5
 800758c:	430b      	orrs	r3, r1
 800758e:	6113      	str	r3, [r2, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007590:	e7d9      	b.n	8007546 <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 8007592:	4b11      	ldr	r3, [pc, #68]	@ (80075d8 <HAL_ADC_ConfigChannel+0xf0>)
 8007594:	429a      	cmp	r2, r3
 8007596:	d116      	bne.n	80075c6 <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8007598:	6893      	ldr	r3, [r2, #8]
 800759a:	021b      	lsls	r3, r3, #8
 800759c:	d4d3      	bmi.n	8007546 <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800759e:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80075a0:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80075a2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80075a6:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80075a8:	d1cd      	bne.n	8007546 <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80075aa:	4b0c      	ldr	r3, [pc, #48]	@ (80075dc <HAL_ADC_ConfigChannel+0xf4>)
 80075ac:	4a0c      	ldr	r2, [pc, #48]	@ (80075e0 <HAL_ADC_ConfigChannel+0xf8>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80075b4:	220a      	movs	r2, #10
 80075b6:	4353      	muls	r3, r2
            wait_loop_index--;
 80075b8:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80075ba:	9b01      	ldr	r3, [sp, #4]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d0c2      	beq.n	8007546 <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 80075c0:	9b01      	ldr	r3, [sp, #4]
 80075c2:	3b01      	subs	r3, #1
 80075c4:	e7f8      	b.n	80075b8 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80075c6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 80075c8:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80075ca:	f043 0320 	orr.w	r3, r3, #32
 80075ce:	62a3      	str	r3, [r4, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 80075d0:	e7ba      	b.n	8007548 <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 80075d2:	2002      	movs	r0, #2
 80075d4:	e7bb      	b.n	800754e <HAL_ADC_ConfigChannel+0x66>
 80075d6:	bf00      	nop
 80075d8:	40012400 	.word	0x40012400
 80075dc:	20000004 	.word	0x20000004
 80075e0:	000f4240 	.word	0x000f4240

080075e4 <HAL_ADC_GetState>:
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
  /* Return ADC state */
  return hadc->State;
 80075e4:	6a80      	ldr	r0, [r0, #40]	@ 0x28
}
 80075e6:	4770      	bx	lr

080075e8 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 80075e8:	2300      	movs	r3, #0
{
 80075ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 80075ec:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80075ee:	6803      	ldr	r3, [r0, #0]
{
 80075f0:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80075f2:	689a      	ldr	r2, [r3, #8]
 80075f4:	07d2      	lsls	r2, r2, #31
 80075f6:	d502      	bpl.n	80075fe <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80075f8:	2000      	movs	r0, #0
}
 80075fa:	b003      	add	sp, #12
 80075fc:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 80075fe:	689a      	ldr	r2, [r3, #8]
 8007600:	f042 0201 	orr.w	r2, r2, #1
 8007604:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007606:	4b14      	ldr	r3, [pc, #80]	@ (8007658 <ADC_Enable+0x70>)
 8007608:	4a14      	ldr	r2, [pc, #80]	@ (800765c <ADC_Enable+0x74>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8007610:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8007612:	9b01      	ldr	r3, [sp, #4]
 8007614:	b9e3      	cbnz	r3, 8007650 <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 8007616:	f7ff fea7 	bl	8007368 <HAL_GetTick>
 800761a:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 800761c:	6823      	ldr	r3, [r4, #0]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	07db      	lsls	r3, r3, #31
 8007622:	d4e9      	bmi.n	80075f8 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007624:	f7ff fea0 	bl	8007368 <HAL_GetTick>
 8007628:	1b40      	subs	r0, r0, r5
 800762a:	2802      	cmp	r0, #2
 800762c:	d9f6      	bls.n	800761c <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 800762e:	6823      	ldr	r3, [r4, #0]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	f013 0301 	ands.w	r3, r3, #1
 8007636:	d1f1      	bne.n	800761c <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007638:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
          return HAL_ERROR;
 800763a:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800763c:	f042 0210 	orr.w	r2, r2, #16
 8007640:	62a2      	str	r2, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007642:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
          __HAL_UNLOCK(hadc);
 8007644:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007648:	f042 0201 	orr.w	r2, r2, #1
 800764c:	62e2      	str	r2, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 800764e:	e7d4      	b.n	80075fa <ADC_Enable+0x12>
      wait_loop_index--;
 8007650:	9b01      	ldr	r3, [sp, #4]
 8007652:	3b01      	subs	r3, #1
 8007654:	e7dc      	b.n	8007610 <ADC_Enable+0x28>
 8007656:	bf00      	nop
 8007658:	20000004 	.word	0x20000004
 800765c:	000f4240 	.word	0x000f4240

08007660 <HAL_ADC_Start>:
{
 8007660:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8007662:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 8007666:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8007668:	2b01      	cmp	r3, #1
 800766a:	d054      	beq.n	8007716 <HAL_ADC_Start+0xb6>
 800766c:	2301      	movs	r3, #1
 800766e:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8007672:	f7ff ffb9 	bl	80075e8 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8007676:	2800      	cmp	r0, #0
 8007678:	d149      	bne.n	800770e <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 800767a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800767c:	4a27      	ldr	r2, [pc, #156]	@ (800771c <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 800767e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007682:	f023 0301 	bic.w	r3, r3, #1
 8007686:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800768a:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800768c:	6823      	ldr	r3, [r4, #0]
 800768e:	4293      	cmp	r3, r2
 8007690:	d104      	bne.n	800769c <HAL_ADC_Start+0x3c>
 8007692:	4923      	ldr	r1, [pc, #140]	@ (8007720 <HAL_ADC_Start+0xc0>)
 8007694:	684a      	ldr	r2, [r1, #4]
 8007696:	f412 2f70 	tst.w	r2, #983040	@ 0xf0000
 800769a:	d12e      	bne.n	80076fa <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800769c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800769e:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80076a2:	62a2      	str	r2, [r4, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80076a4:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80076a6:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80076a8:	bf41      	itttt	mi
 80076aa:	6aa2      	ldrmi	r2, [r4, #40]	@ 0x28
 80076ac:	f422 5240 	bicmi.w	r2, r2, #12288	@ 0x3000
 80076b0:	f442 5280 	orrmi.w	r2, r2, #4096	@ 0x1000
 80076b4:	62a2      	strmi	r2, [r4, #40]	@ 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80076b6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80076b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80076bc:	bf1c      	itt	ne
 80076be:	6ae2      	ldrne	r2, [r4, #44]	@ 0x2c
 80076c0:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80076c4:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_UNLOCK(hadc);
 80076c6:	2200      	movs	r2, #0
 80076c8:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80076cc:	f06f 0202 	mvn.w	r2, #2
 80076d0:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80076d2:	689a      	ldr	r2, [r3, #8]
 80076d4:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 80076d8:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 80076dc:	d113      	bne.n	8007706 <HAL_ADC_Start+0xa6>
 80076de:	4a0f      	ldr	r2, [pc, #60]	@ (800771c <HAL_ADC_Start+0xbc>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d105      	bne.n	80076f0 <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80076e4:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 80076e8:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80076ea:	f412 2f70 	tst.w	r2, #983040	@ 0xf0000
 80076ee:	d10a      	bne.n	8007706 <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80076f0:	689a      	ldr	r2, [r3, #8]
 80076f2:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80076f6:	609a      	str	r2, [r3, #8]
}
 80076f8:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80076fa:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80076fc:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8007700:	62a2      	str	r2, [r4, #40]	@ 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8007702:	684a      	ldr	r2, [r1, #4]
 8007704:	e7cf      	b.n	80076a6 <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8007706:	689a      	ldr	r2, [r3, #8]
 8007708:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800770c:	e7f3      	b.n	80076f6 <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 800770e:	2300      	movs	r3, #0
 8007710:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 8007714:	e7f0      	b.n	80076f8 <HAL_ADC_Start+0x98>
  __HAL_LOCK(hadc);
 8007716:	2002      	movs	r0, #2
 8007718:	e7ee      	b.n	80076f8 <HAL_ADC_Start+0x98>
 800771a:	bf00      	nop
 800771c:	40012800 	.word	0x40012800
 8007720:	40012400 	.word	0x40012400

08007724 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8007724:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8007726:	6803      	ldr	r3, [r0, #0]
{
 8007728:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800772a:	689a      	ldr	r2, [r3, #8]
 800772c:	07d1      	lsls	r1, r2, #31
 800772e:	d401      	bmi.n	8007734 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8007730:	2000      	movs	r0, #0
}
 8007732:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8007734:	689a      	ldr	r2, [r3, #8]
 8007736:	f022 0201 	bic.w	r2, r2, #1
 800773a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800773c:	f7ff fe14 	bl	8007368 <HAL_GetTick>
 8007740:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8007742:	6823      	ldr	r3, [r4, #0]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	07db      	lsls	r3, r3, #31
 8007748:	d5f2      	bpl.n	8007730 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800774a:	f7ff fe0d 	bl	8007368 <HAL_GetTick>
 800774e:	1b40      	subs	r0, r0, r5
 8007750:	2802      	cmp	r0, #2
 8007752:	d9f6      	bls.n	8007742 <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8007754:	6823      	ldr	r3, [r4, #0]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	07da      	lsls	r2, r3, #31
 800775a:	d5f2      	bpl.n	8007742 <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800775c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
          return HAL_ERROR;
 800775e:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007760:	f043 0310 	orr.w	r3, r3, #16
 8007764:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007766:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007768:	f043 0301 	orr.w	r3, r3, #1
 800776c:	62e3      	str	r3, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 800776e:	e7e0      	b.n	8007732 <ADC_ConversionStop_Disable+0xe>

08007770 <HAL_ADC_Init>:
{
 8007770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 8007772:	4604      	mov	r4, r0
 8007774:	2800      	cmp	r0, #0
 8007776:	d06d      	beq.n	8007854 <HAL_ADC_Init+0xe4>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007778:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800777a:	b923      	cbnz	r3, 8007786 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 800777c:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800777e:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    HAL_ADC_MspInit(hadc);
 8007782:	f7ff fcd1 	bl	8007128 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8007786:	4620      	mov	r0, r4
 8007788:	f7ff ffcc 	bl	8007724 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800778c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800778e:	f013 0310 	ands.w	r3, r3, #16
 8007792:	d161      	bne.n	8007858 <HAL_ADC_Init+0xe8>
 8007794:	2800      	cmp	r0, #0
 8007796:	d15f      	bne.n	8007858 <HAL_ADC_Init+0xe8>
    ADC_STATE_CLR_SET(hadc->State,
 8007798:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800779a:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800779c:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 80077a0:	f022 0202 	bic.w	r2, r2, #2
 80077a4:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80077a8:	69e5      	ldr	r5, [r4, #28]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80077aa:	68a6      	ldr	r6, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 80077ac:	62a2      	str	r2, [r4, #40]	@ 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80077ae:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80077b0:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80077b2:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80077b6:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80077ba:	d036      	beq.n	800782a <HAL_ADC_Init+0xba>
 80077bc:	1e77      	subs	r7, r6, #1
 80077be:	427d      	negs	r5, r7
 80077c0:	417d      	adcs	r5, r7
 80077c2:	022d      	lsls	r5, r5, #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80077c4:	7d27      	ldrb	r7, [r4, #20]
 80077c6:	2f01      	cmp	r7, #1
 80077c8:	d106      	bne.n	80077d8 <HAL_ADC_Init+0x68>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80077ca:	bb82      	cbnz	r2, 800782e <HAL_ADC_Init+0xbe>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80077cc:	69a2      	ldr	r2, [r4, #24]
 80077ce:	3a01      	subs	r2, #1
 80077d0:	ea45 3242 	orr.w	r2, r5, r2, lsl #13
 80077d4:	f442 6500 	orr.w	r5, r2, #2048	@ 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80077d8:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80077da:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80077de:	6857      	ldr	r7, [r2, #4]
 80077e0:	f427 4769 	bic.w	r7, r7, #59648	@ 0xe900
 80077e4:	ea45 0507 	orr.w	r5, r5, r7
 80077e8:	6055      	str	r5, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80077ea:	6897      	ldr	r7, [r2, #8]
 80077ec:	4d1d      	ldr	r5, [pc, #116]	@ (8007864 <HAL_ADC_Init+0xf4>)
 80077ee:	ea05 0507 	and.w	r5, r5, r7
 80077f2:	ea45 0501 	orr.w	r5, r5, r1
 80077f6:	6095      	str	r5, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80077f8:	d001      	beq.n	80077fe <HAL_ADC_Init+0x8e>
 80077fa:	2e01      	cmp	r6, #1
 80077fc:	d102      	bne.n	8007804 <HAL_ADC_Init+0x94>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80077fe:	6923      	ldr	r3, [r4, #16]
 8007800:	3b01      	subs	r3, #1
 8007802:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8007804:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 8007806:	f425 0570 	bic.w	r5, r5, #15728640	@ 0xf00000
 800780a:	432b      	orrs	r3, r5
 800780c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800780e:	6892      	ldr	r2, [r2, #8]
 8007810:	4b15      	ldr	r3, [pc, #84]	@ (8007868 <HAL_ADC_Init+0xf8>)
 8007812:	4013      	ands	r3, r2
 8007814:	4299      	cmp	r1, r3
 8007816:	d113      	bne.n	8007840 <HAL_ADC_Init+0xd0>
      ADC_CLEAR_ERRORCODE(hadc);
 8007818:	2300      	movs	r3, #0
 800781a:	62e3      	str	r3, [r4, #44]	@ 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 800781c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800781e:	f023 0303 	bic.w	r3, r3, #3
 8007822:	f043 0301 	orr.w	r3, r3, #1
 8007826:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8007828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800782a:	4635      	mov	r5, r6
 800782c:	e7ca      	b.n	80077c4 <HAL_ADC_Init+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800782e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8007830:	f042 0220 	orr.w	r2, r2, #32
 8007834:	62a2      	str	r2, [r4, #40]	@ 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007836:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007838:	f042 0201 	orr.w	r2, r2, #1
 800783c:	62e2      	str	r2, [r4, #44]	@ 0x2c
 800783e:	e7cb      	b.n	80077d8 <HAL_ADC_Init+0x68>
      ADC_STATE_CLR_SET(hadc->State,
 8007840:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007842:	f023 0312 	bic.w	r3, r3, #18
 8007846:	f043 0310 	orr.w	r3, r3, #16
 800784a:	62a3      	str	r3, [r4, #40]	@ 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800784c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800784e:	f043 0301 	orr.w	r3, r3, #1
 8007852:	62e3      	str	r3, [r4, #44]	@ 0x2c
    return HAL_ERROR;
 8007854:	2001      	movs	r0, #1
 8007856:	e7e7      	b.n	8007828 <HAL_ADC_Init+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007858:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800785a:	f043 0310 	orr.w	r3, r3, #16
 800785e:	62a3      	str	r3, [r4, #40]	@ 0x28
    tmp_hal_status = HAL_ERROR;
 8007860:	e7f8      	b.n	8007854 <HAL_ADC_Init+0xe4>
 8007862:	bf00      	nop
 8007864:	ffe1f7fd 	.word	0xffe1f7fd
 8007868:	ff1f0efe 	.word	0xff1f0efe

0800786c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800786c:	4907      	ldr	r1, [pc, #28]	@ (800788c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800786e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007870:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007872:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007876:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800787a:	0412      	lsls	r2, r2, #16
 800787c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800787e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007880:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007884:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8007888:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800788a:	4770      	bx	lr
 800788c:	e000ed00 	.word	0xe000ed00

08007890 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007890:	4b15      	ldr	r3, [pc, #84]	@ (80078e8 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007892:	b530      	push	{r4, r5, lr}
 8007894:	68dc      	ldr	r4, [r3, #12]
 8007896:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800789a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800789e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80078a0:	2b04      	cmp	r3, #4
 80078a2:	bf28      	it	cs
 80078a4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80078a6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80078a8:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80078ac:	bf94      	ite	ls
 80078ae:	2400      	movls	r4, #0
 80078b0:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80078b2:	fa05 f303 	lsl.w	r3, r5, r3
 80078b6:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80078ba:	40a5      	lsls	r5, r4
 80078bc:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80078c0:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 80078c2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80078c4:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078c8:	bfac      	ite	ge
 80078ca:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078ce:	4a07      	ldrlt	r2, [pc, #28]	@ (80078ec <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078d0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	bfab      	itete	ge
 80078d8:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078dc:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078e0:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078e4:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80078e6:	bd30      	pop	{r4, r5, pc}
 80078e8:	e000ed00 	.word	0xe000ed00
 80078ec:	e000ed14 	.word	0xe000ed14

080078f0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80078f0:	2800      	cmp	r0, #0
 80078f2:	db07      	blt.n	8007904 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80078f4:	2301      	movs	r3, #1
 80078f6:	0941      	lsrs	r1, r0, #5
 80078f8:	4a03      	ldr	r2, [pc, #12]	@ (8007908 <HAL_NVIC_EnableIRQ+0x18>)
 80078fa:	f000 001f 	and.w	r0, r0, #31
 80078fe:	4083      	lsls	r3, r0
 8007900:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	e000e100 	.word	0xe000e100

0800790c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800790c:	3801      	subs	r0, #1
 800790e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8007912:	d20b      	bcs.n	800792c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007914:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007918:	21f0      	movs	r1, #240	@ 0xf0
 800791a:	4a05      	ldr	r2, [pc, #20]	@ (8007930 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800791c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800791e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007922:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007924:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007926:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007928:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800792a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800792c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800792e:	4770      	bx	lr
 8007930:	e000ed00 	.word	0xe000ed00

08007934 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007934:	4603      	mov	r3, r0
{
 8007936:	b510      	push	{r4, lr}
  if(hdma == NULL)
 8007938:	b340      	cbz	r0, 800798c <HAL_DMA_Init+0x58>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800793a:	2114      	movs	r1, #20
 800793c:	6800      	ldr	r0, [r0, #0]
 800793e:	4a14      	ldr	r2, [pc, #80]	@ (8007990 <HAL_DMA_Init+0x5c>)
 8007940:	4402      	add	r2, r0
 8007942:	fbb2 f2f1 	udiv	r2, r2, r1
 8007946:	0092      	lsls	r2, r2, #2
 8007948:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800794a:	4a12      	ldr	r2, [pc, #72]	@ (8007994 <HAL_DMA_Init+0x60>)
 800794c:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800794e:	2202      	movs	r2, #2
 8007950:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007954:	e9d3 2401 	ldrd	r2, r4, [r3, #4]
 8007958:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800795a:	68dc      	ldr	r4, [r3, #12]
  tmp = hdma->Instance->CCR;
 800795c:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800795e:	4322      	orrs	r2, r4
 8007960:	691c      	ldr	r4, [r3, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8007962:	f421 517f 	bic.w	r1, r1, #16320	@ 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007966:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007968:	695c      	ldr	r4, [r3, #20]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800796a:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800796e:	4322      	orrs	r2, r4
 8007970:	699c      	ldr	r4, [r3, #24]
 8007972:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8007974:	69dc      	ldr	r4, [r3, #28]
 8007976:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 8007978:	430a      	orrs	r2, r1

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800797a:	6002      	str	r2, [r0, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800797c:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800797e:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007980:	6398      	str	r0, [r3, #56]	@ 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007982:	f883 0020 	strb.w	r0, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8007986:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  return HAL_OK;
}
 800798a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800798c:	2001      	movs	r0, #1
 800798e:	e7fc      	b.n	800798a <HAL_DMA_Init+0x56>
 8007990:	bffdfff8 	.word	0xbffdfff8
 8007994:	40020000 	.word	0x40020000

08007998 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007998:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800799a:	f890 4020 	ldrb.w	r4, [r0, #32]
 800799e:	2c01      	cmp	r4, #1
 80079a0:	d034      	beq.n	8007a0c <HAL_DMA_Start_IT+0x74>
 80079a2:	2401      	movs	r4, #1
 80079a4:	f880 4020 	strb.w	r4, [r0, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80079a8:	f890 4021 	ldrb.w	r4, [r0, #33]	@ 0x21
 80079ac:	2c01      	cmp	r4, #1
 80079ae:	b2e5      	uxtb	r5, r4
 80079b0:	f04f 0400 	mov.w	r4, #0
 80079b4:	d128      	bne.n	8007a08 <HAL_DMA_Start_IT+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80079b6:	2602      	movs	r6, #2
 80079b8:	f880 6021 	strb.w	r6, [r0, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80079bc:	6384      	str	r4, [r0, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80079be:	6804      	ldr	r4, [r0, #0]
 80079c0:	6826      	ldr	r6, [r4, #0]
 80079c2:	f026 0601 	bic.w	r6, r6, #1
 80079c6:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80079c8:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	@ 0x3c
 80079cc:	40bd      	lsls	r5, r7
 80079ce:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80079d0:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80079d2:	6843      	ldr	r3, [r0, #4]
 80079d4:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 80079d6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80079d8:	bf0b      	itete	eq
 80079da:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80079dc:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80079de:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80079e0:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 80079e2:	b14b      	cbz	r3, 80079f8 <HAL_DMA_Start_IT+0x60>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80079e4:	6823      	ldr	r3, [r4, #0]
 80079e6:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 80079ea:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80079ec:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80079ee:	6823      	ldr	r3, [r4, #0]
 80079f0:	f043 0301 	orr.w	r3, r3, #1
 80079f4:	6023      	str	r3, [r4, #0]
}
 80079f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80079f8:	6823      	ldr	r3, [r4, #0]
 80079fa:	f023 0304 	bic.w	r3, r3, #4
 80079fe:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007a00:	6823      	ldr	r3, [r4, #0]
 8007a02:	f043 030a 	orr.w	r3, r3, #10
 8007a06:	e7f0      	b.n	80079ea <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 8007a08:	f880 4020 	strb.w	r4, [r0, #32]
  __HAL_LOCK(hdma);
 8007a0c:	2002      	movs	r0, #2
 8007a0e:	e7f2      	b.n	80079f6 <HAL_DMA_Start_IT+0x5e>

08007a10 <HAL_DMA_IRQHandler>:
{
 8007a10:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8007a12:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007a14:	6bc6      	ldr	r6, [r0, #60]	@ 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8007a16:	6c02      	ldr	r2, [r0, #64]	@ 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007a18:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8007a1a:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8007a1c:	4095      	lsls	r5, r2
 8007a1e:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8007a20:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8007a22:	d032      	beq.n	8007a8a <HAL_DMA_IRQHandler+0x7a>
 8007a24:	074d      	lsls	r5, r1, #29
 8007a26:	d530      	bpl.n	8007a8a <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007a2c:	bf5e      	ittt	pl
 8007a2e:	681a      	ldrpl	r2, [r3, #0]
 8007a30:	f022 0204 	bicpl.w	r2, r2, #4
 8007a34:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007a36:	4a3e      	ldr	r2, [pc, #248]	@ (8007b30 <HAL_DMA_IRQHandler+0x120>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d019      	beq.n	8007a70 <HAL_DMA_IRQHandler+0x60>
 8007a3c:	3214      	adds	r2, #20
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d018      	beq.n	8007a74 <HAL_DMA_IRQHandler+0x64>
 8007a42:	3214      	adds	r2, #20
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d017      	beq.n	8007a78 <HAL_DMA_IRQHandler+0x68>
 8007a48:	3214      	adds	r2, #20
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d017      	beq.n	8007a7e <HAL_DMA_IRQHandler+0x6e>
 8007a4e:	3214      	adds	r2, #20
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d017      	beq.n	8007a84 <HAL_DMA_IRQHandler+0x74>
 8007a54:	3214      	adds	r2, #20
 8007a56:	4293      	cmp	r3, r2
 8007a58:	bf14      	ite	ne
 8007a5a:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
 8007a5e:	f44f 0380 	moveq.w	r3, #4194304	@ 0x400000
 8007a62:	4a34      	ldr	r2, [pc, #208]	@ (8007b34 <HAL_DMA_IRQHandler+0x124>)
 8007a64:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8007a66:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    if (hdma->XferErrorCallback != NULL)
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d05e      	beq.n	8007b2a <HAL_DMA_IRQHandler+0x11a>
}
 8007a6c:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8007a6e:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007a70:	2304      	movs	r3, #4
 8007a72:	e7f6      	b.n	8007a62 <HAL_DMA_IRQHandler+0x52>
 8007a74:	2340      	movs	r3, #64	@ 0x40
 8007a76:	e7f4      	b.n	8007a62 <HAL_DMA_IRQHandler+0x52>
 8007a78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a7c:	e7f1      	b.n	8007a62 <HAL_DMA_IRQHandler+0x52>
 8007a7e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007a82:	e7ee      	b.n	8007a62 <HAL_DMA_IRQHandler+0x52>
 8007a84:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8007a88:	e7eb      	b.n	8007a62 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8007a8a:	2502      	movs	r5, #2
 8007a8c:	4095      	lsls	r5, r2
 8007a8e:	4225      	tst	r5, r4
 8007a90:	d035      	beq.n	8007afe <HAL_DMA_IRQHandler+0xee>
 8007a92:	078d      	lsls	r5, r1, #30
 8007a94:	d533      	bpl.n	8007afe <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	0694      	lsls	r4, r2, #26
 8007a9a:	d406      	bmi.n	8007aaa <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	f022 020a 	bic.w	r2, r2, #10
 8007aa2:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	f880 2021 	strb.w	r2, [r0, #33]	@ 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007aaa:	4a21      	ldr	r2, [pc, #132]	@ (8007b30 <HAL_DMA_IRQHandler+0x120>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d019      	beq.n	8007ae4 <HAL_DMA_IRQHandler+0xd4>
 8007ab0:	3214      	adds	r2, #20
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d018      	beq.n	8007ae8 <HAL_DMA_IRQHandler+0xd8>
 8007ab6:	3214      	adds	r2, #20
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d017      	beq.n	8007aec <HAL_DMA_IRQHandler+0xdc>
 8007abc:	3214      	adds	r2, #20
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d017      	beq.n	8007af2 <HAL_DMA_IRQHandler+0xe2>
 8007ac2:	3214      	adds	r2, #20
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d017      	beq.n	8007af8 <HAL_DMA_IRQHandler+0xe8>
 8007ac8:	3214      	adds	r2, #20
 8007aca:	4293      	cmp	r3, r2
 8007acc:	bf14      	ite	ne
 8007ace:	f04f 7300 	movne.w	r3, #33554432	@ 0x2000000
 8007ad2:	f44f 1300 	moveq.w	r3, #2097152	@ 0x200000
 8007ad6:	4a17      	ldr	r2, [pc, #92]	@ (8007b34 <HAL_DMA_IRQHandler+0x124>)
 8007ad8:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8007ada:	2300      	movs	r3, #0
 8007adc:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8007ae0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007ae2:	e7c1      	b.n	8007a68 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007ae4:	2302      	movs	r3, #2
 8007ae6:	e7f6      	b.n	8007ad6 <HAL_DMA_IRQHandler+0xc6>
 8007ae8:	2320      	movs	r3, #32
 8007aea:	e7f4      	b.n	8007ad6 <HAL_DMA_IRQHandler+0xc6>
 8007aec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007af0:	e7f1      	b.n	8007ad6 <HAL_DMA_IRQHandler+0xc6>
 8007af2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007af6:	e7ee      	b.n	8007ad6 <HAL_DMA_IRQHandler+0xc6>
 8007af8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007afc:	e7eb      	b.n	8007ad6 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8007afe:	2508      	movs	r5, #8
 8007b00:	4095      	lsls	r5, r2
 8007b02:	4225      	tst	r5, r4
 8007b04:	d011      	beq.n	8007b2a <HAL_DMA_IRQHandler+0x11a>
 8007b06:	0709      	lsls	r1, r1, #28
 8007b08:	d50f      	bpl.n	8007b2a <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b0a:	6819      	ldr	r1, [r3, #0]
 8007b0c:	f021 010e 	bic.w	r1, r1, #14
 8007b10:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007b12:	2301      	movs	r3, #1
 8007b14:	fa03 f202 	lsl.w	r2, r3, r2
 8007b18:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007b1a:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8007b1c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8007b20:	2300      	movs	r3, #0
 8007b22:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8007b26:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8007b28:	e79e      	b.n	8007a68 <HAL_DMA_IRQHandler+0x58>
}
 8007b2a:	bc70      	pop	{r4, r5, r6}
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop
 8007b30:	40020008 	.word	0x40020008
 8007b34:	40020000 	.word	0x40020000

08007b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007b38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007b3c:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8007b3e:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007b40:	f8df c188 	ldr.w	ip, [pc, #392]	@ 8007ccc <HAL_GPIO_Init+0x194>
 8007b44:	4b62      	ldr	r3, [pc, #392]	@ (8007cd0 <HAL_GPIO_Init+0x198>)
      switch (GPIO_Init->Mode)
 8007b46:	f8df e18c 	ldr.w	lr, [pc, #396]	@ 8007cd4 <HAL_GPIO_Init+0x19c>
 8007b4a:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 8007cd8 <HAL_GPIO_Init+0x1a0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007b4e:	680a      	ldr	r2, [r1, #0]
 8007b50:	fa32 f506 	lsrs.w	r5, r2, r6
 8007b54:	d102      	bne.n	8007b5c <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 8007b56:	b003      	add	sp, #12
 8007b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8007b5c:	2701      	movs	r7, #1
 8007b5e:	40b7      	lsls	r7, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007b60:	ea02 0507 	and.w	r5, r2, r7
    if (iocurrent == ioposition)
 8007b64:	ea37 0202 	bics.w	r2, r7, r2
 8007b68:	d17a      	bne.n	8007c60 <HAL_GPIO_Init+0x128>
      switch (GPIO_Init->Mode)
 8007b6a:	684a      	ldr	r2, [r1, #4]
 8007b6c:	2a03      	cmp	r2, #3
 8007b6e:	d807      	bhi.n	8007b80 <HAL_GPIO_Init+0x48>
 8007b70:	3a01      	subs	r2, #1
 8007b72:	2a02      	cmp	r2, #2
 8007b74:	f200 8083 	bhi.w	8007c7e <HAL_GPIO_Init+0x146>
 8007b78:	e8df f002 	tbb	[pc, r2]
 8007b7c:	9792      	.short	0x9792
 8007b7e:	9d          	.byte	0x9d
 8007b7f:	00          	.byte	0x00
 8007b80:	2a12      	cmp	r2, #18
 8007b82:	f000 8095 	beq.w	8007cb0 <HAL_GPIO_Init+0x178>
 8007b86:	d86d      	bhi.n	8007c64 <HAL_GPIO_Init+0x12c>
 8007b88:	2a11      	cmp	r2, #17
 8007b8a:	f000 808b 	beq.w	8007ca4 <HAL_GPIO_Init+0x16c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007b8e:	2dff      	cmp	r5, #255	@ 0xff
 8007b90:	bf98      	it	ls
 8007b92:	4681      	movls	r9, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007b94:	f04f 0b0f 	mov.w	fp, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007b98:	bf88      	it	hi
 8007b9a:	f100 0904 	addhi.w	r9, r0, #4
 8007b9e:	ea4f 0286 	mov.w	r2, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007ba2:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007ba6:	bf88      	it	hi
 8007ba8:	3a20      	subhi	r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007baa:	fa0b fa02 	lsl.w	sl, fp, r2
 8007bae:	ea27 070a 	bic.w	r7, r7, sl
 8007bb2:	fa04 f202 	lsl.w	r2, r4, r2
 8007bb6:	4317      	orrs	r7, r2
 8007bb8:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007bbc:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8007bc0:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 8007bc4:	d04c      	beq.n	8007c60 <HAL_GPIO_Init+0x128>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007bc6:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8007bca:	f026 0703 	bic.w	r7, r6, #3
 8007bce:	f042 0201 	orr.w	r2, r2, #1
 8007bd2:	f8cc 2018 	str.w	r2, [ip, #24]
 8007bd6:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8007bda:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8007bde:	f002 0201 	and.w	r2, r2, #1
 8007be2:	9201      	str	r2, [sp, #4]
 8007be4:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007be8:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007bec:	9a01      	ldr	r2, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007bee:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8007bf2:	68ba      	ldr	r2, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007bf4:	fa0b fb0a 	lsl.w	fp, fp, sl
 8007bf8:	ea22 0b0b 	bic.w	fp, r2, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007bfc:	4a37      	ldr	r2, [pc, #220]	@ (8007cdc <HAL_GPIO_Init+0x1a4>)
 8007bfe:	4290      	cmp	r0, r2
 8007c00:	d05d      	beq.n	8007cbe <HAL_GPIO_Init+0x186>
 8007c02:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007c06:	4290      	cmp	r0, r2
 8007c08:	d05b      	beq.n	8007cc2 <HAL_GPIO_Init+0x18a>
 8007c0a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007c0e:	4290      	cmp	r0, r2
 8007c10:	d059      	beq.n	8007cc6 <HAL_GPIO_Init+0x18e>
 8007c12:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007c16:	4290      	cmp	r0, r2
 8007c18:	bf14      	ite	ne
 8007c1a:	2204      	movne	r2, #4
 8007c1c:	2203      	moveq	r2, #3
 8007c1e:	fa02 f20a 	lsl.w	r2, r2, sl
 8007c22:	ea42 020b 	orr.w	r2, r2, fp
        AFIO->EXTICR[position >> 2u] = temp;
 8007c26:	60ba      	str	r2, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8007c28:	689a      	ldr	r2, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007c2a:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8007c2e:	bf14      	ite	ne
 8007c30:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007c32:	43aa      	biceq	r2, r5
 8007c34:	609a      	str	r2, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8007c36:	68da      	ldr	r2, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007c38:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8007c3c:	bf14      	ite	ne
 8007c3e:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007c40:	43aa      	biceq	r2, r5
 8007c42:	60da      	str	r2, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8007c44:	685a      	ldr	r2, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007c46:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8007c4a:	bf14      	ite	ne
 8007c4c:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007c4e:	43aa      	biceq	r2, r5
 8007c50:	605a      	str	r2, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8007c52:	681a      	ldr	r2, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007c54:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8007c58:	bf14      	ite	ne
 8007c5a:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007c5c:	43aa      	biceq	r2, r5
 8007c5e:	601a      	str	r2, [r3, #0]
	position++;
 8007c60:	3601      	adds	r6, #1
 8007c62:	e774      	b.n	8007b4e <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 8007c64:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 8007ce0 <HAL_GPIO_Init+0x1a8>
 8007c68:	454a      	cmp	r2, r9
 8007c6a:	d008      	beq.n	8007c7e <HAL_GPIO_Init+0x146>
 8007c6c:	d810      	bhi.n	8007c90 <HAL_GPIO_Init+0x158>
 8007c6e:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 8007c72:	454a      	cmp	r2, r9
 8007c74:	d003      	beq.n	8007c7e <HAL_GPIO_Init+0x146>
 8007c76:	4572      	cmp	r2, lr
 8007c78:	d001      	beq.n	8007c7e <HAL_GPIO_Init+0x146>
 8007c7a:	4542      	cmp	r2, r8
 8007c7c:	d187      	bne.n	8007b8e <HAL_GPIO_Init+0x56>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007c7e:	688a      	ldr	r2, [r1, #8]
 8007c80:	b1da      	cbz	r2, 8007cba <HAL_GPIO_Init+0x182>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007c82:	2a01      	cmp	r2, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007c84:	f04f 0408 	mov.w	r4, #8
            GPIOx->BSRR = ioposition;
 8007c88:	bf0c      	ite	eq
 8007c8a:	6107      	streq	r7, [r0, #16]
            GPIOx->BRR = ioposition;
 8007c8c:	6147      	strne	r7, [r0, #20]
 8007c8e:	e77e      	b.n	8007b8e <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8007c90:	f8df 9050 	ldr.w	r9, [pc, #80]	@ 8007ce4 <HAL_GPIO_Init+0x1ac>
 8007c94:	454a      	cmp	r2, r9
 8007c96:	d0f2      	beq.n	8007c7e <HAL_GPIO_Init+0x146>
 8007c98:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 8007c9c:	454a      	cmp	r2, r9
 8007c9e:	e7ed      	b.n	8007c7c <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007ca0:	68cc      	ldr	r4, [r1, #12]
          break;
 8007ca2:	e774      	b.n	8007b8e <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007ca4:	68cc      	ldr	r4, [r1, #12]
 8007ca6:	3404      	adds	r4, #4
          break;
 8007ca8:	e771      	b.n	8007b8e <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007caa:	68cc      	ldr	r4, [r1, #12]
 8007cac:	3408      	adds	r4, #8
          break;
 8007cae:	e76e      	b.n	8007b8e <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007cb0:	68cc      	ldr	r4, [r1, #12]
 8007cb2:	340c      	adds	r4, #12
          break;
 8007cb4:	e76b      	b.n	8007b8e <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8007cb6:	2400      	movs	r4, #0
 8007cb8:	e769      	b.n	8007b8e <HAL_GPIO_Init+0x56>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007cba:	2404      	movs	r4, #4
 8007cbc:	e767      	b.n	8007b8e <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	e7ad      	b.n	8007c1e <HAL_GPIO_Init+0xe6>
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	e7ab      	b.n	8007c1e <HAL_GPIO_Init+0xe6>
 8007cc6:	2202      	movs	r2, #2
 8007cc8:	e7a9      	b.n	8007c1e <HAL_GPIO_Init+0xe6>
 8007cca:	bf00      	nop
 8007ccc:	40021000 	.word	0x40021000
 8007cd0:	40010400 	.word	0x40010400
 8007cd4:	10210000 	.word	0x10210000
 8007cd8:	10110000 	.word	0x10110000
 8007cdc:	40010800 	.word	0x40010800
 8007ce0:	10220000 	.word	0x10220000
 8007ce4:	10310000 	.word	0x10310000

08007ce8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007ce8:	6883      	ldr	r3, [r0, #8]
 8007cea:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8007cec:	bf14      	ite	ne
 8007cee:	2001      	movne	r0, #1
 8007cf0:	2000      	moveq	r0, #0
 8007cf2:	4770      	bx	lr

08007cf4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007cf4:	b10a      	cbz	r2, 8007cfa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007cf6:	6101      	str	r1, [r0, #16]
  }
}
 8007cf8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007cfa:	0409      	lsls	r1, r1, #16
 8007cfc:	e7fb      	b.n	8007cf6 <HAL_GPIO_WritePin+0x2>
	...

08007d00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007d04:	4605      	mov	r5, r0
 8007d06:	b338      	cbz	r0, 8007d58 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d08:	6803      	ldr	r3, [r0, #0]
 8007d0a:	07db      	lsls	r3, r3, #31
 8007d0c:	d410      	bmi.n	8007d30 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d0e:	682b      	ldr	r3, [r5, #0]
 8007d10:	079f      	lsls	r7, r3, #30
 8007d12:	d45e      	bmi.n	8007dd2 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d14:	682b      	ldr	r3, [r5, #0]
 8007d16:	0719      	lsls	r1, r3, #28
 8007d18:	f100 8095 	bmi.w	8007e46 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d1c:	682b      	ldr	r3, [r5, #0]
 8007d1e:	075a      	lsls	r2, r3, #29
 8007d20:	f100 80c1 	bmi.w	8007ea6 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d24:	69eb      	ldr	r3, [r5, #28]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	f040 812c 	bne.w	8007f84 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8007d2c:	2000      	movs	r0, #0
 8007d2e:	e029      	b.n	8007d84 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007d30:	4c90      	ldr	r4, [pc, #576]	@ (8007f74 <HAL_RCC_OscConfig+0x274>)
 8007d32:	6863      	ldr	r3, [r4, #4]
 8007d34:	f003 030c 	and.w	r3, r3, #12
 8007d38:	2b04      	cmp	r3, #4
 8007d3a:	d007      	beq.n	8007d4c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007d3c:	6863      	ldr	r3, [r4, #4]
 8007d3e:	f003 030c 	and.w	r3, r3, #12
 8007d42:	2b08      	cmp	r3, #8
 8007d44:	d10a      	bne.n	8007d5c <HAL_RCC_OscConfig+0x5c>
 8007d46:	6863      	ldr	r3, [r4, #4]
 8007d48:	03de      	lsls	r6, r3, #15
 8007d4a:	d507      	bpl.n	8007d5c <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d4c:	6823      	ldr	r3, [r4, #0]
 8007d4e:	039c      	lsls	r4, r3, #14
 8007d50:	d5dd      	bpl.n	8007d0e <HAL_RCC_OscConfig+0xe>
 8007d52:	686b      	ldr	r3, [r5, #4]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d1da      	bne.n	8007d0e <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8007d58:	2001      	movs	r0, #1
 8007d5a:	e013      	b.n	8007d84 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d5c:	686b      	ldr	r3, [r5, #4]
 8007d5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d62:	d112      	bne.n	8007d8a <HAL_RCC_OscConfig+0x8a>
 8007d64:	6823      	ldr	r3, [r4, #0]
 8007d66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d6a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8007d6c:	f7ff fafc 	bl	8007368 <HAL_GetTick>
 8007d70:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d72:	6823      	ldr	r3, [r4, #0]
 8007d74:	0398      	lsls	r0, r3, #14
 8007d76:	d4ca      	bmi.n	8007d0e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d78:	f7ff faf6 	bl	8007368 <HAL_GetTick>
 8007d7c:	1b80      	subs	r0, r0, r6
 8007d7e:	2864      	cmp	r0, #100	@ 0x64
 8007d80:	d9f7      	bls.n	8007d72 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8007d82:	2003      	movs	r0, #3
}
 8007d84:	b002      	add	sp, #8
 8007d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d8a:	b99b      	cbnz	r3, 8007db4 <HAL_RCC_OscConfig+0xb4>
 8007d8c:	6823      	ldr	r3, [r4, #0]
 8007d8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d92:	6023      	str	r3, [r4, #0]
 8007d94:	6823      	ldr	r3, [r4, #0]
 8007d96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007d9a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8007d9c:	f7ff fae4 	bl	8007368 <HAL_GetTick>
 8007da0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007da2:	6823      	ldr	r3, [r4, #0]
 8007da4:	0399      	lsls	r1, r3, #14
 8007da6:	d5b2      	bpl.n	8007d0e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007da8:	f7ff fade 	bl	8007368 <HAL_GetTick>
 8007dac:	1b80      	subs	r0, r0, r6
 8007dae:	2864      	cmp	r0, #100	@ 0x64
 8007db0:	d9f7      	bls.n	8007da2 <HAL_RCC_OscConfig+0xa2>
 8007db2:	e7e6      	b.n	8007d82 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007db4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007db8:	6823      	ldr	r3, [r4, #0]
 8007dba:	d103      	bne.n	8007dc4 <HAL_RCC_OscConfig+0xc4>
 8007dbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007dc0:	6023      	str	r3, [r4, #0]
 8007dc2:	e7cf      	b.n	8007d64 <HAL_RCC_OscConfig+0x64>
 8007dc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007dc8:	6023      	str	r3, [r4, #0]
 8007dca:	6823      	ldr	r3, [r4, #0]
 8007dcc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007dd0:	e7cb      	b.n	8007d6a <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007dd2:	4c68      	ldr	r4, [pc, #416]	@ (8007f74 <HAL_RCC_OscConfig+0x274>)
 8007dd4:	6863      	ldr	r3, [r4, #4]
 8007dd6:	f013 0f0c 	tst.w	r3, #12
 8007dda:	d007      	beq.n	8007dec <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007ddc:	6863      	ldr	r3, [r4, #4]
 8007dde:	f003 030c 	and.w	r3, r3, #12
 8007de2:	2b08      	cmp	r3, #8
 8007de4:	d110      	bne.n	8007e08 <HAL_RCC_OscConfig+0x108>
 8007de6:	6863      	ldr	r3, [r4, #4]
 8007de8:	03da      	lsls	r2, r3, #15
 8007dea:	d40d      	bmi.n	8007e08 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007dec:	6823      	ldr	r3, [r4, #0]
 8007dee:	079b      	lsls	r3, r3, #30
 8007df0:	d502      	bpl.n	8007df8 <HAL_RCC_OscConfig+0xf8>
 8007df2:	692b      	ldr	r3, [r5, #16]
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d1af      	bne.n	8007d58 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007df8:	6823      	ldr	r3, [r4, #0]
 8007dfa:	696a      	ldr	r2, [r5, #20]
 8007dfc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007e00:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8007e04:	6023      	str	r3, [r4, #0]
 8007e06:	e785      	b.n	8007d14 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007e08:	692a      	ldr	r2, [r5, #16]
 8007e0a:	4b5b      	ldr	r3, [pc, #364]	@ (8007f78 <HAL_RCC_OscConfig+0x278>)
 8007e0c:	b16a      	cbz	r2, 8007e2a <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8007e0e:	2201      	movs	r2, #1
 8007e10:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007e12:	f7ff faa9 	bl	8007368 <HAL_GetTick>
 8007e16:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e18:	6823      	ldr	r3, [r4, #0]
 8007e1a:	079f      	lsls	r7, r3, #30
 8007e1c:	d4ec      	bmi.n	8007df8 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e1e:	f7ff faa3 	bl	8007368 <HAL_GetTick>
 8007e22:	1b80      	subs	r0, r0, r6
 8007e24:	2802      	cmp	r0, #2
 8007e26:	d9f7      	bls.n	8007e18 <HAL_RCC_OscConfig+0x118>
 8007e28:	e7ab      	b.n	8007d82 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8007e2a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007e2c:	f7ff fa9c 	bl	8007368 <HAL_GetTick>
 8007e30:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e32:	6823      	ldr	r3, [r4, #0]
 8007e34:	0798      	lsls	r0, r3, #30
 8007e36:	f57f af6d 	bpl.w	8007d14 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e3a:	f7ff fa95 	bl	8007368 <HAL_GetTick>
 8007e3e:	1b80      	subs	r0, r0, r6
 8007e40:	2802      	cmp	r0, #2
 8007e42:	d9f6      	bls.n	8007e32 <HAL_RCC_OscConfig+0x132>
 8007e44:	e79d      	b.n	8007d82 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007e46:	69aa      	ldr	r2, [r5, #24]
 8007e48:	4e4a      	ldr	r6, [pc, #296]	@ (8007f74 <HAL_RCC_OscConfig+0x274>)
 8007e4a:	4b4b      	ldr	r3, [pc, #300]	@ (8007f78 <HAL_RCC_OscConfig+0x278>)
 8007e4c:	b1e2      	cbz	r2, 8007e88 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8007e54:	f7ff fa88 	bl	8007368 <HAL_GetTick>
 8007e58:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e5a:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8007e5c:	079b      	lsls	r3, r3, #30
 8007e5e:	d50d      	bpl.n	8007e7c <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007e60:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8007e64:	4b45      	ldr	r3, [pc, #276]	@ (8007f7c <HAL_RCC_OscConfig+0x27c>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e6c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8007e6e:	bf00      	nop
  }
  while (Delay --);
 8007e70:	9b01      	ldr	r3, [sp, #4]
 8007e72:	1e5a      	subs	r2, r3, #1
 8007e74:	9201      	str	r2, [sp, #4]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1f9      	bne.n	8007e6e <HAL_RCC_OscConfig+0x16e>
 8007e7a:	e74f      	b.n	8007d1c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e7c:	f7ff fa74 	bl	8007368 <HAL_GetTick>
 8007e80:	1b00      	subs	r0, r0, r4
 8007e82:	2802      	cmp	r0, #2
 8007e84:	d9e9      	bls.n	8007e5a <HAL_RCC_OscConfig+0x15a>
 8007e86:	e77c      	b.n	8007d82 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8007e88:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8007e8c:	f7ff fa6c 	bl	8007368 <HAL_GetTick>
 8007e90:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e92:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8007e94:	079f      	lsls	r7, r3, #30
 8007e96:	f57f af41 	bpl.w	8007d1c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e9a:	f7ff fa65 	bl	8007368 <HAL_GetTick>
 8007e9e:	1b00      	subs	r0, r0, r4
 8007ea0:	2802      	cmp	r0, #2
 8007ea2:	d9f6      	bls.n	8007e92 <HAL_RCC_OscConfig+0x192>
 8007ea4:	e76d      	b.n	8007d82 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007ea6:	4c33      	ldr	r4, [pc, #204]	@ (8007f74 <HAL_RCC_OscConfig+0x274>)
 8007ea8:	69e3      	ldr	r3, [r4, #28]
 8007eaa:	00d8      	lsls	r0, r3, #3
 8007eac:	d424      	bmi.n	8007ef8 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8007eae:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8007eb0:	69e3      	ldr	r3, [r4, #28]
 8007eb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007eb6:	61e3      	str	r3, [r4, #28]
 8007eb8:	69e3      	ldr	r3, [r4, #28]
 8007eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ebe:	9300      	str	r3, [sp, #0]
 8007ec0:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ec2:	4e2f      	ldr	r6, [pc, #188]	@ (8007f80 <HAL_RCC_OscConfig+0x280>)
 8007ec4:	6833      	ldr	r3, [r6, #0]
 8007ec6:	05d9      	lsls	r1, r3, #23
 8007ec8:	d518      	bpl.n	8007efc <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007eca:	68eb      	ldr	r3, [r5, #12]
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d126      	bne.n	8007f1e <HAL_RCC_OscConfig+0x21e>
 8007ed0:	6a23      	ldr	r3, [r4, #32]
 8007ed2:	f043 0301 	orr.w	r3, r3, #1
 8007ed6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8007ed8:	f7ff fa46 	bl	8007368 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007edc:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8007ee0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ee2:	6a23      	ldr	r3, [r4, #32]
 8007ee4:	079b      	lsls	r3, r3, #30
 8007ee6:	d53f      	bpl.n	8007f68 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8007ee8:	2f00      	cmp	r7, #0
 8007eea:	f43f af1b 	beq.w	8007d24 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007eee:	69e3      	ldr	r3, [r4, #28]
 8007ef0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ef4:	61e3      	str	r3, [r4, #28]
 8007ef6:	e715      	b.n	8007d24 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8007ef8:	2700      	movs	r7, #0
 8007efa:	e7e2      	b.n	8007ec2 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007efc:	6833      	ldr	r3, [r6, #0]
 8007efe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f02:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8007f04:	f7ff fa30 	bl	8007368 <HAL_GetTick>
 8007f08:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f0a:	6833      	ldr	r3, [r6, #0]
 8007f0c:	05da      	lsls	r2, r3, #23
 8007f0e:	d4dc      	bmi.n	8007eca <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f10:	f7ff fa2a 	bl	8007368 <HAL_GetTick>
 8007f14:	eba0 0008 	sub.w	r0, r0, r8
 8007f18:	2864      	cmp	r0, #100	@ 0x64
 8007f1a:	d9f6      	bls.n	8007f0a <HAL_RCC_OscConfig+0x20a>
 8007f1c:	e731      	b.n	8007d82 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f1e:	b9ab      	cbnz	r3, 8007f4c <HAL_RCC_OscConfig+0x24c>
 8007f20:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f22:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f26:	f023 0301 	bic.w	r3, r3, #1
 8007f2a:	6223      	str	r3, [r4, #32]
 8007f2c:	6a23      	ldr	r3, [r4, #32]
 8007f2e:	f023 0304 	bic.w	r3, r3, #4
 8007f32:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8007f34:	f7ff fa18 	bl	8007368 <HAL_GetTick>
 8007f38:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f3a:	6a23      	ldr	r3, [r4, #32]
 8007f3c:	0798      	lsls	r0, r3, #30
 8007f3e:	d5d3      	bpl.n	8007ee8 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f40:	f7ff fa12 	bl	8007368 <HAL_GetTick>
 8007f44:	1b80      	subs	r0, r0, r6
 8007f46:	4540      	cmp	r0, r8
 8007f48:	d9f7      	bls.n	8007f3a <HAL_RCC_OscConfig+0x23a>
 8007f4a:	e71a      	b.n	8007d82 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f4c:	2b05      	cmp	r3, #5
 8007f4e:	6a23      	ldr	r3, [r4, #32]
 8007f50:	d103      	bne.n	8007f5a <HAL_RCC_OscConfig+0x25a>
 8007f52:	f043 0304 	orr.w	r3, r3, #4
 8007f56:	6223      	str	r3, [r4, #32]
 8007f58:	e7ba      	b.n	8007ed0 <HAL_RCC_OscConfig+0x1d0>
 8007f5a:	f023 0301 	bic.w	r3, r3, #1
 8007f5e:	6223      	str	r3, [r4, #32]
 8007f60:	6a23      	ldr	r3, [r4, #32]
 8007f62:	f023 0304 	bic.w	r3, r3, #4
 8007f66:	e7b6      	b.n	8007ed6 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f68:	f7ff f9fe 	bl	8007368 <HAL_GetTick>
 8007f6c:	1b80      	subs	r0, r0, r6
 8007f6e:	4540      	cmp	r0, r8
 8007f70:	d9b7      	bls.n	8007ee2 <HAL_RCC_OscConfig+0x1e2>
 8007f72:	e706      	b.n	8007d82 <HAL_RCC_OscConfig+0x82>
 8007f74:	40021000 	.word	0x40021000
 8007f78:	42420000 	.word	0x42420000
 8007f7c:	20000004 	.word	0x20000004
 8007f80:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007f84:	4c2a      	ldr	r4, [pc, #168]	@ (8008030 <HAL_RCC_OscConfig+0x330>)
 8007f86:	6862      	ldr	r2, [r4, #4]
 8007f88:	f002 020c 	and.w	r2, r2, #12
 8007f8c:	2a08      	cmp	r2, #8
 8007f8e:	d03e      	beq.n	800800e <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f90:	2200      	movs	r2, #0
 8007f92:	2b02      	cmp	r3, #2
 8007f94:	4b27      	ldr	r3, [pc, #156]	@ (8008034 <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 8007f96:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f98:	d12c      	bne.n	8007ff4 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8007f9a:	f7ff f9e5 	bl	8007368 <HAL_GetTick>
 8007f9e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007fa0:	6823      	ldr	r3, [r4, #0]
 8007fa2:	0199      	lsls	r1, r3, #6
 8007fa4:	d420      	bmi.n	8007fe8 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007fa6:	6a2b      	ldr	r3, [r5, #32]
 8007fa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fac:	d105      	bne.n	8007fba <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007fae:	6862      	ldr	r2, [r4, #4]
 8007fb0:	68a9      	ldr	r1, [r5, #8]
 8007fb2:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007fb6:	430a      	orrs	r2, r1
 8007fb8:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007fba:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8007fbc:	6862      	ldr	r2, [r4, #4]
 8007fbe:	430b      	orrs	r3, r1
 8007fc0:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8007fc4:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8007fc6:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007fc8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8007fca:	4b1a      	ldr	r3, [pc, #104]	@ (8008034 <HAL_RCC_OscConfig+0x334>)
 8007fcc:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8007fce:	f7ff f9cb 	bl	8007368 <HAL_GetTick>
 8007fd2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007fd4:	6823      	ldr	r3, [r4, #0]
 8007fd6:	019a      	lsls	r2, r3, #6
 8007fd8:	f53f aea8 	bmi.w	8007d2c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fdc:	f7ff f9c4 	bl	8007368 <HAL_GetTick>
 8007fe0:	1b40      	subs	r0, r0, r5
 8007fe2:	2802      	cmp	r0, #2
 8007fe4:	d9f6      	bls.n	8007fd4 <HAL_RCC_OscConfig+0x2d4>
 8007fe6:	e6cc      	b.n	8007d82 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fe8:	f7ff f9be 	bl	8007368 <HAL_GetTick>
 8007fec:	1b80      	subs	r0, r0, r6
 8007fee:	2802      	cmp	r0, #2
 8007ff0:	d9d6      	bls.n	8007fa0 <HAL_RCC_OscConfig+0x2a0>
 8007ff2:	e6c6      	b.n	8007d82 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8007ff4:	f7ff f9b8 	bl	8007368 <HAL_GetTick>
 8007ff8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007ffa:	6823      	ldr	r3, [r4, #0]
 8007ffc:	019b      	lsls	r3, r3, #6
 8007ffe:	f57f ae95 	bpl.w	8007d2c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008002:	f7ff f9b1 	bl	8007368 <HAL_GetTick>
 8008006:	1b40      	subs	r0, r0, r5
 8008008:	2802      	cmp	r0, #2
 800800a:	d9f6      	bls.n	8007ffa <HAL_RCC_OscConfig+0x2fa>
 800800c:	e6b9      	b.n	8007d82 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800800e:	2b01      	cmp	r3, #1
 8008010:	f43f aea2 	beq.w	8007d58 <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 8008014:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008016:	6a2b      	ldr	r3, [r5, #32]
 8008018:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 800801c:	429a      	cmp	r2, r3
 800801e:	f47f ae9b 	bne.w	8007d58 <HAL_RCC_OscConfig+0x58>
 8008022:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008024:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008028:	1ac0      	subs	r0, r0, r3
 800802a:	bf18      	it	ne
 800802c:	2001      	movne	r0, #1
 800802e:	e6a9      	b.n	8007d84 <HAL_RCC_OscConfig+0x84>
 8008030:	40021000 	.word	0x40021000
 8008034:	42420000 	.word	0x42420000

08008038 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8008038:	4a0d      	ldr	r2, [pc, #52]	@ (8008070 <HAL_RCC_GetSysClockFreq+0x38>)
 800803a:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800803c:	f003 010c 	and.w	r1, r3, #12
 8008040:	2908      	cmp	r1, #8
 8008042:	d112      	bne.n	800806a <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008044:	480b      	ldr	r0, [pc, #44]	@ (8008074 <HAL_RCC_GetSysClockFreq+0x3c>)
 8008046:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800804a:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800804c:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800804e:	d509      	bpl.n	8008064 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008050:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008052:	4a09      	ldr	r2, [pc, #36]	@ (8008078 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008054:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008058:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800805a:	4a08      	ldr	r2, [pc, #32]	@ (800807c <HAL_RCC_GetSysClockFreq+0x44>)
 800805c:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800805e:	fbb0 f0f3 	udiv	r0, r0, r3
 8008062:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008064:	4b06      	ldr	r3, [pc, #24]	@ (8008080 <HAL_RCC_GetSysClockFreq+0x48>)
 8008066:	4358      	muls	r0, r3
 8008068:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800806a:	4803      	ldr	r0, [pc, #12]	@ (8008078 <HAL_RCC_GetSysClockFreq+0x40>)
}
 800806c:	4770      	bx	lr
 800806e:	bf00      	nop
 8008070:	40021000 	.word	0x40021000
 8008074:	0800c82f 	.word	0x0800c82f
 8008078:	007a1200 	.word	0x007a1200
 800807c:	0800c82d 	.word	0x0800c82d
 8008080:	003d0900 	.word	0x003d0900

08008084 <HAL_RCC_ClockConfig>:
{
 8008084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008088:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800808a:	4604      	mov	r4, r0
 800808c:	b910      	cbnz	r0, 8008094 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800808e:	2001      	movs	r0, #1
}
 8008090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008094:	4a44      	ldr	r2, [pc, #272]	@ (80081a8 <HAL_RCC_ClockConfig+0x124>)
 8008096:	6813      	ldr	r3, [r2, #0]
 8008098:	f003 0307 	and.w	r3, r3, #7
 800809c:	428b      	cmp	r3, r1
 800809e:	d328      	bcc.n	80080f2 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080a0:	6821      	ldr	r1, [r4, #0]
 80080a2:	078e      	lsls	r6, r1, #30
 80080a4:	d430      	bmi.n	8008108 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80080a6:	07ca      	lsls	r2, r1, #31
 80080a8:	d443      	bmi.n	8008132 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80080aa:	4a3f      	ldr	r2, [pc, #252]	@ (80081a8 <HAL_RCC_ClockConfig+0x124>)
 80080ac:	6813      	ldr	r3, [r2, #0]
 80080ae:	f003 0307 	and.w	r3, r3, #7
 80080b2:	42ab      	cmp	r3, r5
 80080b4:	d865      	bhi.n	8008182 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080b6:	6822      	ldr	r2, [r4, #0]
 80080b8:	4d3c      	ldr	r5, [pc, #240]	@ (80081ac <HAL_RCC_ClockConfig+0x128>)
 80080ba:	f012 0f04 	tst.w	r2, #4
 80080be:	d16c      	bne.n	800819a <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080c0:	0713      	lsls	r3, r2, #28
 80080c2:	d506      	bpl.n	80080d2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80080c4:	686b      	ldr	r3, [r5, #4]
 80080c6:	6922      	ldr	r2, [r4, #16]
 80080c8:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80080cc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80080d0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80080d2:	f7ff ffb1 	bl	8008038 <HAL_RCC_GetSysClockFreq>
 80080d6:	686b      	ldr	r3, [r5, #4]
 80080d8:	4a35      	ldr	r2, [pc, #212]	@ (80081b0 <HAL_RCC_ClockConfig+0x12c>)
 80080da:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80080de:	5cd3      	ldrb	r3, [r2, r3]
 80080e0:	40d8      	lsrs	r0, r3
 80080e2:	4b34      	ldr	r3, [pc, #208]	@ (80081b4 <HAL_RCC_ClockConfig+0x130>)
 80080e4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80080e6:	4b34      	ldr	r3, [pc, #208]	@ (80081b8 <HAL_RCC_ClockConfig+0x134>)
 80080e8:	6818      	ldr	r0, [r3, #0]
 80080ea:	f7ff f8fb 	bl	80072e4 <HAL_InitTick>
  return HAL_OK;
 80080ee:	2000      	movs	r0, #0
 80080f0:	e7ce      	b.n	8008090 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080f2:	6813      	ldr	r3, [r2, #0]
 80080f4:	f023 0307 	bic.w	r3, r3, #7
 80080f8:	430b      	orrs	r3, r1
 80080fa:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80080fc:	6813      	ldr	r3, [r2, #0]
 80080fe:	f003 0307 	and.w	r3, r3, #7
 8008102:	428b      	cmp	r3, r1
 8008104:	d1c3      	bne.n	800808e <HAL_RCC_ClockConfig+0xa>
 8008106:	e7cb      	b.n	80080a0 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008108:	4b28      	ldr	r3, [pc, #160]	@ (80081ac <HAL_RCC_ClockConfig+0x128>)
 800810a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800810e:	bf1e      	ittt	ne
 8008110:	685a      	ldrne	r2, [r3, #4]
 8008112:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 8008116:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008118:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800811a:	bf42      	ittt	mi
 800811c:	685a      	ldrmi	r2, [r3, #4]
 800811e:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 8008122:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008124:	685a      	ldr	r2, [r3, #4]
 8008126:	68a0      	ldr	r0, [r4, #8]
 8008128:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800812c:	4302      	orrs	r2, r0
 800812e:	605a      	str	r2, [r3, #4]
 8008130:	e7b9      	b.n	80080a6 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008132:	6862      	ldr	r2, [r4, #4]
 8008134:	4e1d      	ldr	r6, [pc, #116]	@ (80081ac <HAL_RCC_ClockConfig+0x128>)
 8008136:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008138:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800813a:	d11a      	bne.n	8008172 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800813c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008140:	d0a5      	beq.n	800808e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008142:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008144:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008148:	f023 0303 	bic.w	r3, r3, #3
 800814c:	4313      	orrs	r3, r2
 800814e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8008150:	f7ff f90a 	bl	8007368 <HAL_GetTick>
 8008154:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008156:	6873      	ldr	r3, [r6, #4]
 8008158:	6862      	ldr	r2, [r4, #4]
 800815a:	f003 030c 	and.w	r3, r3, #12
 800815e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8008162:	d0a2      	beq.n	80080aa <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008164:	f7ff f900 	bl	8007368 <HAL_GetTick>
 8008168:	1bc0      	subs	r0, r0, r7
 800816a:	4540      	cmp	r0, r8
 800816c:	d9f3      	bls.n	8008156 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 800816e:	2003      	movs	r0, #3
 8008170:	e78e      	b.n	8008090 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008172:	2a02      	cmp	r2, #2
 8008174:	d102      	bne.n	800817c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008176:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800817a:	e7e1      	b.n	8008140 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800817c:	f013 0f02 	tst.w	r3, #2
 8008180:	e7de      	b.n	8008140 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008182:	6813      	ldr	r3, [r2, #0]
 8008184:	f023 0307 	bic.w	r3, r3, #7
 8008188:	432b      	orrs	r3, r5
 800818a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800818c:	6813      	ldr	r3, [r2, #0]
 800818e:	f003 0307 	and.w	r3, r3, #7
 8008192:	42ab      	cmp	r3, r5
 8008194:	f47f af7b 	bne.w	800808e <HAL_RCC_ClockConfig+0xa>
 8008198:	e78d      	b.n	80080b6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800819a:	686b      	ldr	r3, [r5, #4]
 800819c:	68e1      	ldr	r1, [r4, #12]
 800819e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80081a2:	430b      	orrs	r3, r1
 80081a4:	606b      	str	r3, [r5, #4]
 80081a6:	e78b      	b.n	80080c0 <HAL_RCC_ClockConfig+0x3c>
 80081a8:	40022000 	.word	0x40022000
 80081ac:	40021000 	.word	0x40021000
 80081b0:	0800c81d 	.word	0x0800c81d
 80081b4:	20000004 	.word	0x20000004
 80081b8:	2000000c 	.word	0x2000000c

080081bc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80081bc:	4b04      	ldr	r3, [pc, #16]	@ (80081d0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80081be:	4a05      	ldr	r2, [pc, #20]	@ (80081d4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80081c6:	5cd3      	ldrb	r3, [r2, r3]
 80081c8:	4a03      	ldr	r2, [pc, #12]	@ (80081d8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80081ca:	6810      	ldr	r0, [r2, #0]
}
 80081cc:	40d8      	lsrs	r0, r3
 80081ce:	4770      	bx	lr
 80081d0:	40021000 	.word	0x40021000
 80081d4:	0800c815 	.word	0x0800c815
 80081d8:	20000004 	.word	0x20000004

080081dc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80081dc:	6803      	ldr	r3, [r0, #0]
{
 80081de:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80081e2:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80081e4:	07d8      	lsls	r0, r3, #31
 80081e6:	d521      	bpl.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80081e8:	4c36      	ldr	r4, [pc, #216]	@ (80082c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80081ea:	69e3      	ldr	r3, [r4, #28]
 80081ec:	00d9      	lsls	r1, r3, #3
 80081ee:	d42b      	bmi.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80081f0:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80081f2:	69e3      	ldr	r3, [r4, #28]
 80081f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80081f8:	61e3      	str	r3, [r4, #28]
 80081fa:	69e3      	ldr	r3, [r4, #28]
 80081fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008200:	9301      	str	r3, [sp, #4]
 8008202:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008204:	4f30      	ldr	r7, [pc, #192]	@ (80082c8 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	05da      	lsls	r2, r3, #23
 800820a:	d51f      	bpl.n	800824c <HAL_RCCEx_PeriphCLKConfig+0x70>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800820c:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800820e:	686a      	ldr	r2, [r5, #4]
 8008210:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8008214:	d12e      	bne.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008216:	6a23      	ldr	r3, [r4, #32]
 8008218:	686a      	ldr	r2, [r5, #4]
 800821a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800821e:	4313      	orrs	r3, r2
 8008220:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008222:	b11e      	cbz	r6, 800822c <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008224:	69e3      	ldr	r3, [r4, #28]
 8008226:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800822a:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800822c:	682a      	ldr	r2, [r5, #0]
 800822e:	0791      	lsls	r1, r2, #30
 8008230:	d506      	bpl.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008232:	4924      	ldr	r1, [pc, #144]	@ (80082c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008234:	68a8      	ldr	r0, [r5, #8]
 8008236:	684b      	ldr	r3, [r1, #4]
 8008238:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800823c:	4303      	orrs	r3, r0
 800823e:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008240:	06d3      	lsls	r3, r2, #27
 8008242:	d436      	bmi.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8008244:	2000      	movs	r0, #0
 8008246:	e012      	b.n	800826e <HAL_RCCEx_PeriphCLKConfig+0x92>
    FlagStatus pwrclkchanged = RESET;
 8008248:	2600      	movs	r6, #0
 800824a:	e7db      	b.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008252:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8008254:	f7ff f888 	bl	8007368 <HAL_GetTick>
 8008258:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	05db      	lsls	r3, r3, #23
 800825e:	d4d5      	bmi.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008260:	f7ff f882 	bl	8007368 <HAL_GetTick>
 8008264:	eba0 0008 	sub.w	r0, r0, r8
 8008268:	2864      	cmp	r0, #100	@ 0x64
 800826a:	d9f6      	bls.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x7e>
          return HAL_TIMEOUT;
 800826c:	2003      	movs	r0, #3
}
 800826e:	b002      	add	sp, #8
 8008270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008274:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8008278:	429a      	cmp	r2, r3
 800827a:	d0cc      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 800827c:	2001      	movs	r0, #1
 800827e:	4a13      	ldr	r2, [pc, #76]	@ (80082cc <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008280:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8008282:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008286:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008288:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800828c:	07df      	lsls	r7, r3, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 800828e:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      RCC->BDCR = temp_reg;
 8008292:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008294:	d5bf      	bpl.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 8008296:	f7ff f867 	bl	8007368 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800829a:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 800829e:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082a0:	6a23      	ldr	r3, [r4, #32]
 80082a2:	0798      	lsls	r0, r3, #30
 80082a4:	d4b7      	bmi.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082a6:	f7ff f85f 	bl	8007368 <HAL_GetTick>
 80082aa:	1bc0      	subs	r0, r0, r7
 80082ac:	4540      	cmp	r0, r8
 80082ae:	d9f7      	bls.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 80082b0:	e7dc      	b.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x90>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80082b2:	4a04      	ldr	r2, [pc, #16]	@ (80082c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80082b4:	68e9      	ldr	r1, [r5, #12]
 80082b6:	6853      	ldr	r3, [r2, #4]
 80082b8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80082bc:	430b      	orrs	r3, r1
 80082be:	6053      	str	r3, [r2, #4]
 80082c0:	e7c0      	b.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80082c2:	bf00      	nop
 80082c4:	40021000 	.word	0x40021000
 80082c8:	40007000 	.word	0x40007000
 80082cc:	42420000 	.word	0x42420000

080082d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80082d0:	2802      	cmp	r0, #2
{
 80082d2:	b508      	push	{r3, lr}
  switch (PeriphClk)
 80082d4:	d044      	beq.n	8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 80082d6:	2810      	cmp	r0, #16
 80082d8:	d003      	beq.n	80082e2 <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 80082da:	2801      	cmp	r0, #1
 80082dc:	d022      	beq.n	8008324 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
  uint32_t temp_reg = 0U, frequency = 0U;
 80082de:	2000      	movs	r0, #0
    default:
    {
      break;
    }
  }
  return (frequency);
 80082e0:	e034      	b.n	800834c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      temp_reg = RCC->CFGR;
 80082e2:	4b25      	ldr	r3, [pc, #148]	@ (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80082e4:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80082e6:	6818      	ldr	r0, [r3, #0]
 80082e8:	f010 7080 	ands.w	r0, r0, #16777216	@ 0x1000000
 80082ec:	d02e      	beq.n	800834c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80082ee:	f3c2 4183 	ubfx	r1, r2, #18, #4
 80082f2:	4822      	ldr	r0, [pc, #136]	@ (800837c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80082f4:	03d2      	lsls	r2, r2, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80082f6:	bf48      	it	mi
 80082f8:	685a      	ldrmi	r2, [r3, #4]
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80082fa:	5c40      	ldrb	r0, [r0, r1]
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80082fc:	bf41      	itttt	mi
 80082fe:	4920      	ldrmi	r1, [pc, #128]	@ (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008300:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8008304:	5c89      	ldrbmi	r1, [r1, r2]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8008306:	4a1f      	ldrmi	r2, [pc, #124]	@ (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8008308:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800830a:	bf4c      	ite	mi
 800830c:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008310:	4a1d      	ldrpl	r2, [pc, #116]	@ (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8008312:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008314:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8008318:	d418      	bmi.n	800834c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
          frequency = (pllclk * 2) / 3;
 800831a:	2303      	movs	r3, #3
 800831c:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800831e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8008322:	e013      	b.n	800834c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8008324:	f240 3102 	movw	r1, #770	@ 0x302
      temp_reg = RCC->BDCR;
 8008328:	4a13      	ldr	r2, [pc, #76]	@ (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800832a:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800832c:	4019      	ands	r1, r3
 800832e:	f5b1 7f81 	cmp.w	r1, #258	@ 0x102
 8008332:	d01e      	beq.n	8008372 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8008334:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008338:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800833c:	d107      	bne.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
        frequency = LSI_VALUE;
 800833e:	f649 4340 	movw	r3, #40000	@ 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8008342:	6a50      	ldr	r0, [r2, #36]	@ 0x24
        frequency = LSI_VALUE;
 8008344:	f010 0002 	ands.w	r0, r0, #2
        frequency = HSE_VALUE / 128U;
 8008348:	bf18      	it	ne
 800834a:	4618      	movne	r0, r3
}
 800834c:	bd08      	pop	{r3, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800834e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008352:	d1c4      	bne.n	80082de <HAL_RCCEx_GetPeriphCLKFreq+0xe>
 8008354:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8008356:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800835a:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 800835e:	e7f3      	b.n	8008348 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8008360:	f7ff ff2c 	bl	80081bc <HAL_RCC_GetPCLK2Freq>
 8008364:	4b04      	ldr	r3, [pc, #16]	@ (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	f3c3 3381 	ubfx	r3, r3, #14, #2
 800836c:	3301      	adds	r3, #1
 800836e:	005b      	lsls	r3, r3, #1
 8008370:	e7d5      	b.n	800831e <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
        frequency = LSE_VALUE;
 8008372:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8008376:	e7e9      	b.n	800834c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8008378:	40021000 	.word	0x40021000
 800837c:	0800c841 	.word	0x0800c841
 8008380:	0800c83f 	.word	0x0800c83f
 8008384:	007a1200 	.word	0x007a1200
 8008388:	003d0900 	.word	0x003d0900

0800838c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800838c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8008390:	461f      	mov	r7, r3
 8008392:	4689      	mov	r9, r1
 8008394:	4690      	mov	r8, r2
 8008396:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008398:	f7fe ffe6 	bl	8007368 <HAL_GetTick>
 800839c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800839e:	443d      	add	r5, r7
 80083a0:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 80083a2:	f7fe ffe1 	bl	8007368 <HAL_GetTick>
 80083a6:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80083a8:	4b25      	ldr	r3, [pc, #148]	@ (8008440 <SPI_WaitFlagStateUntilTimeout+0xb4>)
 80083aa:	681e      	ldr	r6, [r3, #0]
 80083ac:	f3c6 36cb 	ubfx	r6, r6, #15, #12
 80083b0:	436e      	muls	r6, r5
 80083b2:	9601      	str	r6, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80083b4:	6822      	ldr	r2, [r4, #0]
 80083b6:	6893      	ldr	r3, [r2, #8]
 80083b8:	ea39 0303 	bics.w	r3, r9, r3
 80083bc:	bf0c      	ite	eq
 80083be:	2301      	moveq	r3, #1
 80083c0:	2300      	movne	r3, #0
 80083c2:	4543      	cmp	r3, r8
 80083c4:	d101      	bne.n	80083ca <SPI_WaitFlagStateUntilTimeout+0x3e>
      }
      count--;
    }
  }

  return HAL_OK;
 80083c6:	2000      	movs	r0, #0
 80083c8:	e02e      	b.n	8008428 <SPI_WaitFlagStateUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 80083ca:	1c7b      	adds	r3, r7, #1
 80083cc:	d0f3      	beq.n	80083b6 <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80083ce:	f7fe ffcb 	bl	8007368 <HAL_GetTick>
 80083d2:	eba0 000a 	sub.w	r0, r0, sl
 80083d6:	42a8      	cmp	r0, r5
 80083d8:	d329      	bcc.n	800842e <SPI_WaitFlagStateUntilTimeout+0xa2>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80083da:	6823      	ldr	r3, [r4, #0]
 80083dc:	685a      	ldr	r2, [r3, #4]
 80083de:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80083e2:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083e4:	6862      	ldr	r2, [r4, #4]
 80083e6:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80083ea:	d10a      	bne.n	8008402 <SPI_WaitFlagStateUntilTimeout+0x76>
 80083ec:	68a2      	ldr	r2, [r4, #8]
 80083ee:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80083f2:	d002      	beq.n	80083fa <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80083f4:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80083f8:	d103      	bne.n	8008402 <SPI_WaitFlagStateUntilTimeout+0x76>
          __HAL_SPI_DISABLE(hspi);
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008400:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008402:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8008404:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8008408:	d107      	bne.n	800841a <SPI_WaitFlagStateUntilTimeout+0x8e>
          SPI_RESET_CRC(hspi);
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008410:	601a      	str	r2, [r3, #0]
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008418:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800841a:	2301      	movs	r3, #1
 800841c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008420:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8008422:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8008424:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8008428:	b002      	add	sp, #8
 800842a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (count == 0U)
 800842e:	9a01      	ldr	r2, [sp, #4]
      count--;
 8008430:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 8008432:	2a00      	cmp	r2, #0
      count--;
 8008434:	f103 33ff 	add.w	r3, r3, #4294967295
 8008438:	bf08      	it	eq
 800843a:	4615      	moveq	r5, r2
 800843c:	9301      	str	r3, [sp, #4]
 800843e:	e7b9      	b.n	80083b4 <SPI_WaitFlagStateUntilTimeout+0x28>
 8008440:	20000004 	.word	0x20000004

08008444 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008444:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008446:	460b      	mov	r3, r1
 8008448:	9200      	str	r2, [sp, #0]
{
 800844a:	460d      	mov	r5, r1
 800844c:	4616      	mov	r6, r2
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800844e:	2102      	movs	r1, #2
 8008450:	2201      	movs	r2, #1
{
 8008452:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008454:	f7ff ff9a 	bl	800838c <SPI_WaitFlagStateUntilTimeout>
 8008458:	4602      	mov	r2, r0
 800845a:	b128      	cbz	r0, 8008468 <SPI_EndRxTxTransaction+0x24>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800845c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 800845e:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008460:	f043 0320 	orr.w	r3, r3, #32
 8008464:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008466:	e007      	b.n	8008478 <SPI_EndRxTxTransaction+0x34>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008468:	462b      	mov	r3, r5
 800846a:	2180      	movs	r1, #128	@ 0x80
 800846c:	4620      	mov	r0, r4
 800846e:	9600      	str	r6, [sp, #0]
 8008470:	f7ff ff8c 	bl	800838c <SPI_WaitFlagStateUntilTimeout>
 8008474:	2800      	cmp	r0, #0
 8008476:	d1f1      	bne.n	800845c <SPI_EndRxTxTransaction+0x18>
  }
  return HAL_OK;
}
 8008478:	b002      	add	sp, #8
 800847a:	bd70      	pop	{r4, r5, r6, pc}

0800847c <HAL_SPI_Init>:
{
 800847c:	b510      	push	{r4, lr}
  if (hspi == NULL)
 800847e:	4604      	mov	r4, r0
 8008480:	2800      	cmp	r0, #0
 8008482:	d051      	beq.n	8008528 <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008484:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8008486:	2b00      	cmp	r3, #0
 8008488:	d14a      	bne.n	8008520 <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800848a:	6842      	ldr	r2, [r0, #4]
 800848c:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8008490:	d000      	beq.n	8008494 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008492:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008494:	2300      	movs	r3, #0
 8008496:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8008498:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 800849c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80084a0:	b923      	cbnz	r3, 80084ac <HAL_SPI_Init+0x30>
    HAL_SPI_MspInit(hspi);
 80084a2:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80084a4:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 80084a8:	f7fe fe6c 	bl	8007184 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80084ac:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80084ae:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80084b0:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 80084b4:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80084b6:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 80084b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084bc:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80084be:	6863      	ldr	r3, [r4, #4]
 80084c0:	f400 4004 	and.w	r0, r0, #33792	@ 0x8400
 80084c4:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 80084c8:	4303      	orrs	r3, r0
 80084ca:	68e0      	ldr	r0, [r4, #12]
 80084cc:	69a1      	ldr	r1, [r4, #24]
 80084ce:	f400 6000 	and.w	r0, r0, #2048	@ 0x800
 80084d2:	4303      	orrs	r3, r0
 80084d4:	6920      	ldr	r0, [r4, #16]
 80084d6:	f000 0002 	and.w	r0, r0, #2
 80084da:	4303      	orrs	r3, r0
 80084dc:	6960      	ldr	r0, [r4, #20]
 80084de:	f000 0001 	and.w	r0, r0, #1
 80084e2:	4303      	orrs	r3, r0
 80084e4:	f401 7000 	and.w	r0, r1, #512	@ 0x200
 80084e8:	4303      	orrs	r3, r0
 80084ea:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80084ec:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80084ee:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 80084f2:	4303      	orrs	r3, r0
 80084f4:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80084f6:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80084fa:	f000 0080 	and.w	r0, r0, #128	@ 0x80
 80084fe:	4303      	orrs	r3, r0
 8008500:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8008502:	f400 5000 	and.w	r0, r0, #8192	@ 0x2000
 8008506:	4303      	orrs	r3, r0
 8008508:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800850a:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800850c:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800850e:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008510:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008514:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8008516:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008518:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800851a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 800851e:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008520:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008522:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008526:	e7b5      	b.n	8008494 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8008528:	2001      	movs	r0, #1
 800852a:	e7f8      	b.n	800851e <HAL_SPI_Init+0xa2>

0800852c <HAL_SPI_TransmitReceive>:
{
 800852c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008530:	4604      	mov	r4, r0
 8008532:	460d      	mov	r5, r1
 8008534:	4691      	mov	r9, r2
 8008536:	461e      	mov	r6, r3
 8008538:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  tickstart = HAL_GetTick();
 800853c:	f7fe ff14 	bl	8007368 <HAL_GetTick>
  tmp_state           = hspi->State;
 8008540:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tickstart = HAL_GetTick();
 8008544:	4607      	mov	r7, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008546:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 8008548:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 800854a:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800854c:	d00a      	beq.n	8008564 <HAL_SPI_TransmitReceive+0x38>
 800854e:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8008552:	f040 80e5 	bne.w	8008720 <HAL_SPI_TransmitReceive+0x1f4>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8008556:	68a3      	ldr	r3, [r4, #8]
 8008558:	2b00      	cmp	r3, #0
 800855a:	f040 80e1 	bne.w	8008720 <HAL_SPI_TransmitReceive+0x1f4>
 800855e:	2904      	cmp	r1, #4
 8008560:	f040 80de 	bne.w	8008720 <HAL_SPI_TransmitReceive+0x1f4>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008564:	2d00      	cmp	r5, #0
 8008566:	d04b      	beq.n	8008600 <HAL_SPI_TransmitReceive+0xd4>
 8008568:	f1b9 0f00 	cmp.w	r9, #0
 800856c:	d048      	beq.n	8008600 <HAL_SPI_TransmitReceive+0xd4>
 800856e:	2e00      	cmp	r6, #0
 8008570:	d046      	beq.n	8008600 <HAL_SPI_TransmitReceive+0xd4>
  __HAL_LOCK(hspi);
 8008572:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8008576:	2b01      	cmp	r3, #1
 8008578:	f000 80d2 	beq.w	8008720 <HAL_SPI_TransmitReceive+0x1f4>
 800857c:	2301      	movs	r3, #1
 800857e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008582:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008586:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800858a:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800858c:	bf1c      	itt	ne
 800858e:	2305      	movne	r3, #5
 8008590:	f884 3051 	strbne.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008594:	2300      	movs	r3, #0
 8008596:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->TxISR       = NULL;
 8008598:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800859c:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 800859e:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxXferCount = Size;
 80085a0:	86e6      	strh	r6, [r4, #54]	@ 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80085a2:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 80085a4:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80085a6:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 80085a8:	bf58      	it	pl
 80085aa:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80085ac:	6325      	str	r5, [r4, #48]	@ 0x30
    __HAL_SPI_ENABLE(hspi);
 80085ae:	bf58      	it	pl
 80085b0:	f041 0140 	orrpl.w	r1, r1, #64	@ 0x40
  hspi->TxXferSize  = Size;
 80085b4:	86a6      	strh	r6, [r4, #52]	@ 0x34
    __HAL_SPI_ENABLE(hspi);
 80085b6:	bf58      	it	pl
 80085b8:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80085ba:	68e1      	ldr	r1, [r4, #12]
 80085bc:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80085c0:	d155      	bne.n	800866e <HAL_SPI_TransmitReceive+0x142>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80085c2:	b10a      	cbz	r2, 80085c8 <HAL_SPI_TransmitReceive+0x9c>
 80085c4:	2e01      	cmp	r6, #1
 80085c6:	d107      	bne.n	80085d8 <HAL_SPI_TransmitReceive+0xac>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80085c8:	f835 2b02 	ldrh.w	r2, [r5], #2
 80085cc:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80085ce:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80085d0:	6325      	str	r5, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80085d2:	3b01      	subs	r3, #1
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 80085d8:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085da:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80085dc:	b29b      	uxth	r3, r3
 80085de:	b98b      	cbnz	r3, 8008604 <HAL_SPI_TransmitReceive+0xd8>
 80085e0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	b973      	cbnz	r3, 8008604 <HAL_SPI_TransmitReceive+0xd8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80085e6:	463a      	mov	r2, r7
 80085e8:	4641      	mov	r1, r8
 80085ea:	4620      	mov	r0, r4
 80085ec:	f7ff ff2a 	bl	8008444 <SPI_EndRxTxTransaction>
 80085f0:	2800      	cmp	r0, #0
 80085f2:	f000 8081 	beq.w	80086f8 <HAL_SPI_TransmitReceive+0x1cc>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80085f6:	2320      	movs	r3, #32
 80085f8:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80085fa:	2300      	movs	r3, #0
 80085fc:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 8008600:	2001      	movs	r0, #1
 8008602:	e031      	b.n	8008668 <HAL_SPI_TransmitReceive+0x13c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008604:	6821      	ldr	r1, [r4, #0]
 8008606:	688b      	ldr	r3, [r1, #8]
 8008608:	079a      	lsls	r2, r3, #30
 800860a:	d50d      	bpl.n	8008628 <HAL_SPI_TransmitReceive+0xfc>
 800860c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800860e:	b29b      	uxth	r3, r3
 8008610:	b153      	cbz	r3, 8008628 <HAL_SPI_TransmitReceive+0xfc>
 8008612:	b145      	cbz	r5, 8008626 <HAL_SPI_TransmitReceive+0xfa>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008614:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008616:	f833 2b02 	ldrh.w	r2, [r3], #2
 800861a:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800861c:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 800861e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8008620:	3b01      	subs	r3, #1
 8008622:	b29b      	uxth	r3, r3
 8008624:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8008626:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008628:	688a      	ldr	r2, [r1, #8]
 800862a:	f012 0201 	ands.w	r2, r2, #1
 800862e:	d00c      	beq.n	800864a <HAL_SPI_TransmitReceive+0x11e>
 8008630:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8008632:	b29b      	uxth	r3, r3
 8008634:	b14b      	cbz	r3, 800864a <HAL_SPI_TransmitReceive+0x11e>
        txallowed = 1U;
 8008636:	4615      	mov	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008638:	68c9      	ldr	r1, [r1, #12]
 800863a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800863c:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008640:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8008642:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8008644:	3b01      	subs	r3, #1
 8008646:	b29b      	uxth	r3, r3
 8008648:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800864a:	f7fe fe8d 	bl	8007368 <HAL_GetTick>
 800864e:	1bc0      	subs	r0, r0, r7
 8008650:	4540      	cmp	r0, r8
 8008652:	d3c2      	bcc.n	80085da <HAL_SPI_TransmitReceive+0xae>
 8008654:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008658:	d0bf      	beq.n	80085da <HAL_SPI_TransmitReceive+0xae>
        hspi->State = HAL_SPI_STATE_READY;
 800865a:	2301      	movs	r3, #1
 800865c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008660:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8008662:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8008664:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8008668:	b003      	add	sp, #12
 800866a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800866e:	b10a      	cbz	r2, 8008674 <HAL_SPI_TransmitReceive+0x148>
 8008670:	2e01      	cmp	r6, #1
 8008672:	d108      	bne.n	8008686 <HAL_SPI_TransmitReceive+0x15a>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008674:	782a      	ldrb	r2, [r5, #0]
 8008676:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008678:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800867a:	3301      	adds	r3, #1
 800867c:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 800867e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8008680:	3b01      	subs	r3, #1
 8008682:	b29b      	uxth	r3, r3
 8008684:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8008686:	2501      	movs	r5, #1
 8008688:	e02d      	b.n	80086e6 <HAL_SPI_TransmitReceive+0x1ba>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800868a:	6822      	ldr	r2, [r4, #0]
 800868c:	6893      	ldr	r3, [r2, #8]
 800868e:	079b      	lsls	r3, r3, #30
 8008690:	d50e      	bpl.n	80086b0 <HAL_SPI_TransmitReceive+0x184>
 8008692:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8008694:	b29b      	uxth	r3, r3
 8008696:	b15b      	cbz	r3, 80086b0 <HAL_SPI_TransmitReceive+0x184>
 8008698:	b14d      	cbz	r5, 80086ae <HAL_SPI_TransmitReceive+0x182>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800869a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 80086a0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80086a2:	3301      	adds	r3, #1
 80086a4:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80086a6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80086a8:	3b01      	subs	r3, #1
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 80086ae:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80086b0:	6822      	ldr	r2, [r4, #0]
 80086b2:	6891      	ldr	r1, [r2, #8]
 80086b4:	f011 0101 	ands.w	r1, r1, #1
 80086b8:	d00d      	beq.n	80086d6 <HAL_SPI_TransmitReceive+0x1aa>
 80086ba:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80086bc:	b29b      	uxth	r3, r3
 80086be:	b153      	cbz	r3, 80086d6 <HAL_SPI_TransmitReceive+0x1aa>
        txallowed = 1U;
 80086c0:	460d      	mov	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80086c2:	68d2      	ldr	r2, [r2, #12]
 80086c4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80086c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80086c8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80086ca:	3301      	adds	r3, #1
 80086cc:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80086ce:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80086d0:	3b01      	subs	r3, #1
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80086d6:	f7fe fe47 	bl	8007368 <HAL_GetTick>
 80086da:	1bc0      	subs	r0, r0, r7
 80086dc:	4540      	cmp	r0, r8
 80086de:	d302      	bcc.n	80086e6 <HAL_SPI_TransmitReceive+0x1ba>
 80086e0:	f1b8 3fff 	cmp.w	r8, #4294967295
 80086e4:	d1b9      	bne.n	800865a <HAL_SPI_TransmitReceive+0x12e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80086e6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d1cd      	bne.n	800868a <HAL_SPI_TransmitReceive+0x15e>
 80086ee:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d1c9      	bne.n	800868a <HAL_SPI_TransmitReceive+0x15e>
 80086f6:	e776      	b.n	80085e6 <HAL_SPI_TransmitReceive+0xba>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80086f8:	68a3      	ldr	r3, [r4, #8]
 80086fa:	b933      	cbnz	r3, 800870a <HAL_SPI_TransmitReceive+0x1de>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80086fc:	9301      	str	r3, [sp, #4]
 80086fe:	6823      	ldr	r3, [r4, #0]
 8008700:	68da      	ldr	r2, [r3, #12]
 8008702:	9201      	str	r2, [sp, #4]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	9301      	str	r3, [sp, #4]
 8008708:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800870a:	2301      	movs	r3, #1
 800870c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8008710:	2300      	movs	r3, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008712:	6d60      	ldr	r0, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hspi);
 8008714:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008718:	1ac0      	subs	r0, r0, r3
 800871a:	bf18      	it	ne
 800871c:	2001      	movne	r0, #1
 800871e:	e7a3      	b.n	8008668 <HAL_SPI_TransmitReceive+0x13c>
    return HAL_BUSY;
 8008720:	2002      	movs	r0, #2
 8008722:	e7a1      	b.n	8008668 <HAL_SPI_TransmitReceive+0x13c>

08008724 <HAL_SPI_Transmit_DMA>:
{
 8008724:	b570      	push	{r4, r5, r6, lr}
  if (hspi->State != HAL_SPI_STATE_READY)
 8008726:	f890 3051 	ldrb.w	r3, [r0, #81]	@ 0x51
{
 800872a:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800872c:	2b01      	cmp	r3, #1
 800872e:	b2dd      	uxtb	r5, r3
 8008730:	d14e      	bne.n	80087d0 <HAL_SPI_Transmit_DMA+0xac>
  if ((pData == NULL) || (Size == 0U))
 8008732:	2900      	cmp	r1, #0
 8008734:	d036      	beq.n	80087a4 <HAL_SPI_Transmit_DMA+0x80>
 8008736:	2a00      	cmp	r2, #0
 8008738:	d034      	beq.n	80087a4 <HAL_SPI_Transmit_DMA+0x80>
  __HAL_LOCK(hspi);
 800873a:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 800873e:	2b01      	cmp	r3, #1
 8008740:	d046      	beq.n	80087d0 <HAL_SPI_Transmit_DMA+0xac>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008742:	2303      	movs	r3, #3
 8008744:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008748:	2300      	movs	r3, #0
 800874a:	6543      	str	r3, [r0, #84]	@ 0x54
  hspi->RxISR       = NULL;
 800874c:	e9c0 3310 	strd	r3, r3, [r0, #64]	@ 0x40
  hspi->TxXferCount = Size;
 8008750:	86c2      	strh	r2, [r0, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008752:	6383      	str	r3, [r0, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8008754:	8783      	strh	r3, [r0, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8008756:	87c3      	strh	r3, [r0, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008758:	6883      	ldr	r3, [r0, #8]
  hspi->TxXferSize  = Size;
 800875a:	8682      	strh	r2, [r0, #52]	@ 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800875c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
    __HAL_SPI_DISABLE(hspi);
 8008760:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hspi);
 8008762:	f880 5050 	strb.w	r5, [r0, #80]	@ 0x50
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008766:	6301      	str	r1, [r0, #48]	@ 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008768:	d107      	bne.n	800877a <HAL_SPI_Transmit_DMA+0x56>
    __HAL_SPI_DISABLE(hspi);
 800876a:	6813      	ldr	r3, [r2, #0]
 800876c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008770:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8008772:	6813      	ldr	r3, [r2, #0]
 8008774:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008778:	6013      	str	r3, [r2, #0]
  hspi->hdmatx->XferAbortCallback = NULL;
 800877a:	2600      	movs	r6, #0
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800877c:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 800877e:	4b15      	ldr	r3, [pc, #84]	@ (80087d4 <HAL_SPI_Transmit_DMA+0xb0>)
  hspi->hdmatx->XferAbortCallback = NULL;
 8008780:	6346      	str	r6, [r0, #52]	@ 0x34
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008782:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008784:	4b14      	ldr	r3, [pc, #80]	@ (80087d8 <HAL_SPI_Transmit_DMA+0xb4>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008786:	320c      	adds	r2, #12
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008788:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800878a:	4b14      	ldr	r3, [pc, #80]	@ (80087dc <HAL_SPI_Transmit_DMA+0xb8>)
 800878c:	6303      	str	r3, [r0, #48]	@ 0x30
                                 hspi->TxXferCount))
 800878e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008790:	b29b      	uxth	r3, r3
 8008792:	f7ff f901 	bl	8007998 <HAL_DMA_Start_IT>
 8008796:	b138      	cbz	r0, 80087a8 <HAL_SPI_Transmit_DMA+0x84>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008798:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800879a:	f884 6050 	strb.w	r6, [r4, #80]	@ 0x50
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800879e:	f043 0310 	orr.w	r3, r3, #16
 80087a2:	6563      	str	r3, [r4, #84]	@ 0x54
}
 80087a4:	4628      	mov	r0, r5
 80087a6:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_UNLOCK(hspi);
 80087a8:	2500      	movs	r5, #0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80087aa:	6823      	ldr	r3, [r4, #0]
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80087b0:	bf5e      	ittt	pl
 80087b2:	681a      	ldrpl	r2, [r3, #0]
 80087b4:	f042 0240 	orrpl.w	r2, r2, #64	@ 0x40
 80087b8:	601a      	strpl	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 80087ba:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80087be:	685a      	ldr	r2, [r3, #4]
 80087c0:	f042 0220 	orr.w	r2, r2, #32
 80087c4:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80087c6:	685a      	ldr	r2, [r3, #4]
 80087c8:	f042 0202 	orr.w	r2, r2, #2
 80087cc:	605a      	str	r2, [r3, #4]
  return HAL_OK;
 80087ce:	e7e9      	b.n	80087a4 <HAL_SPI_Transmit_DMA+0x80>
    return HAL_BUSY;
 80087d0:	2502      	movs	r5, #2
 80087d2:	e7e7      	b.n	80087a4 <HAL_SPI_Transmit_DMA+0x80>
 80087d4:	080087e5 	.word	0x080087e5
 80087d8:	08008813 	.word	0x08008813
 80087dc:	080087f1 	.word	0x080087f1

080087e0 <HAL_SPI_TxCpltCallback>:
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
 80087e0:	4770      	bx	lr

080087e2 <HAL_SPI_TxHalfCpltCallback>:
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
 80087e2:	4770      	bx	lr

080087e4 <SPI_DMAHalfTransmitCplt>:
{
 80087e4:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 80087e6:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80087e8:	f7ff fffb 	bl	80087e2 <HAL_SPI_TxHalfCpltCallback>
}
 80087ec:	bd08      	pop	{r3, pc}

080087ee <HAL_SPI_ErrorCallback>:
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
 80087ee:	4770      	bx	lr

080087f0 <SPI_DMAError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80087f0:	6a40      	ldr	r0, [r0, #36]	@ 0x24
{
 80087f2:	b508      	push	{r3, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80087f4:	6802      	ldr	r2, [r0, #0]
 80087f6:	6853      	ldr	r3, [r2, #4]
 80087f8:	f023 0303 	bic.w	r3, r3, #3
 80087fc:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80087fe:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008800:	f043 0310 	orr.w	r3, r3, #16
 8008804:	6543      	str	r3, [r0, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8008806:	2301      	movs	r3, #1
 8008808:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
  HAL_SPI_ErrorCallback(hspi);
 800880c:	f7ff ffef 	bl	80087ee <HAL_SPI_ErrorCallback>
}
 8008810:	bd08      	pop	{r3, pc}

08008812 <SPI_DMATransmitCplt>:
{
 8008812:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008814:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008816:	6a44      	ldr	r4, [r0, #36]	@ 0x24
  tickstart = HAL_GetTick();
 8008818:	f7fe fda6 	bl	8007368 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800881c:	682b      	ldr	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800881e:	4602      	mov	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	069b      	lsls	r3, r3, #26
 8008824:	d426      	bmi.n	8008874 <SPI_DMATransmitCplt+0x62>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008826:	6823      	ldr	r3, [r4, #0]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008828:	4620      	mov	r0, r4
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800882a:	6859      	ldr	r1, [r3, #4]
 800882c:	f021 0120 	bic.w	r1, r1, #32
 8008830:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008832:	6859      	ldr	r1, [r3, #4]
 8008834:	f021 0102 	bic.w	r1, r1, #2
 8008838:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800883a:	2164      	movs	r1, #100	@ 0x64
 800883c:	f7ff fe02 	bl	8008444 <SPI_EndRxTxTransaction>
 8008840:	b118      	cbz	r0, 800884a <SPI_DMATransmitCplt+0x38>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008842:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008844:	f043 0320 	orr.w	r3, r3, #32
 8008848:	6563      	str	r3, [r4, #84]	@ 0x54
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800884a:	68a3      	ldr	r3, [r4, #8]
 800884c:	b933      	cbnz	r3, 800885c <SPI_DMATransmitCplt+0x4a>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800884e:	9301      	str	r3, [sp, #4]
 8008850:	6823      	ldr	r3, [r4, #0]
 8008852:	68da      	ldr	r2, [r3, #12]
 8008854:	9201      	str	r2, [sp, #4]
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	9301      	str	r3, [sp, #4]
 800885a:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 800885c:	2300      	movs	r3, #0
 800885e:	86e3      	strh	r3, [r4, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8008860:	2301      	movs	r3, #1
 8008862:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008866:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008868:	b123      	cbz	r3, 8008874 <SPI_DMATransmitCplt+0x62>
      HAL_SPI_ErrorCallback(hspi);
 800886a:	4620      	mov	r0, r4
 800886c:	f7ff ffbf 	bl	80087ee <HAL_SPI_ErrorCallback>
}
 8008870:	b003      	add	sp, #12
 8008872:	bd30      	pop	{r4, r5, pc}
  HAL_SPI_TxCpltCallback(hspi);
 8008874:	4620      	mov	r0, r4
 8008876:	f7ff ffb3 	bl	80087e0 <HAL_SPI_TxCpltCallback>
 800887a:	e7f9      	b.n	8008870 <SPI_DMATransmitCplt+0x5e>

0800887c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800887c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8008880:	2b01      	cmp	r3, #1
 8008882:	d120      	bne.n	80088c6 <HAL_TIM_Base_Start_IT+0x4a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008884:	2302      	movs	r3, #2
 8008886:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800888a:	6803      	ldr	r3, [r0, #0]
 800888c:	68da      	ldr	r2, [r3, #12]
 800888e:	f042 0201 	orr.w	r2, r2, #1
 8008892:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008894:	4a0d      	ldr	r2, [pc, #52]	@ (80088cc <HAL_TIM_Base_Start_IT+0x50>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d00a      	beq.n	80088b0 <HAL_TIM_Base_Start_IT+0x34>
 800889a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800889e:	d007      	beq.n	80088b0 <HAL_TIM_Base_Start_IT+0x34>
 80088a0:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d003      	beq.n	80088b0 <HAL_TIM_Base_Start_IT+0x34>
 80088a8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d104      	bne.n	80088ba <HAL_TIM_Base_Start_IT+0x3e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088b0:	689a      	ldr	r2, [r3, #8]
 80088b2:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088b6:	2a06      	cmp	r2, #6
 80088b8:	d003      	beq.n	80088c2 <HAL_TIM_Base_Start_IT+0x46>
    {
      __HAL_TIM_ENABLE(htim);
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	f042 0201 	orr.w	r2, r2, #1
 80088c0:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 80088c2:	2000      	movs	r0, #0
 80088c4:	4770      	bx	lr
    return HAL_ERROR;
 80088c6:	2001      	movs	r0, #1
}
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop
 80088cc:	40012c00 	.word	0x40012c00

080088d0 <HAL_TIM_Base_Stop_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80088d0:	6803      	ldr	r3, [r0, #0]
 80088d2:	68da      	ldr	r2, [r3, #12]
 80088d4:	f022 0201 	bic.w	r2, r2, #1
 80088d8:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80088da:	f241 1211 	movw	r2, #4369	@ 0x1111
 80088de:	6a19      	ldr	r1, [r3, #32]
 80088e0:	4211      	tst	r1, r2
 80088e2:	d108      	bne.n	80088f6 <HAL_TIM_Base_Stop_IT+0x26>
 80088e4:	f240 4244 	movw	r2, #1092	@ 0x444
 80088e8:	6a19      	ldr	r1, [r3, #32]
 80088ea:	4211      	tst	r1, r2
 80088ec:	bf02      	ittt	eq
 80088ee:	681a      	ldreq	r2, [r3, #0]
 80088f0:	f022 0201 	biceq.w	r2, r2, #1
 80088f4:	601a      	streq	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80088f6:	2301      	movs	r3, #1
 80088f8:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
}
 80088fc:	2000      	movs	r0, #0
 80088fe:	4770      	bx	lr

08008900 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8008900:	4770      	bx	lr

08008902 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8008902:	4770      	bx	lr

08008904 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8008904:	4770      	bx	lr

08008906 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8008906:	4770      	bx	lr

08008908 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8008908:	6803      	ldr	r3, [r0, #0]
{
 800890a:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 800890c:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800890e:	691e      	ldr	r6, [r3, #16]
{
 8008910:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008912:	07b1      	lsls	r1, r6, #30
 8008914:	d50d      	bpl.n	8008932 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008916:	07aa      	lsls	r2, r5, #30
 8008918:	d50b      	bpl.n	8008932 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800891a:	f06f 0202 	mvn.w	r2, #2
 800891e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008920:	2201      	movs	r2, #1
 8008922:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008924:	699b      	ldr	r3, [r3, #24]
 8008926:	079b      	lsls	r3, r3, #30
 8008928:	d069      	beq.n	80089fe <HAL_TIM_IRQHandler+0xf6>
          HAL_TIM_IC_CaptureCallback(htim);
 800892a:	f7ff ffea 	bl	8008902 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800892e:	2300      	movs	r3, #0
 8008930:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008932:	0771      	lsls	r1, r6, #29
 8008934:	d510      	bpl.n	8008958 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008936:	076a      	lsls	r2, r5, #29
 8008938:	d50e      	bpl.n	8008958 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800893a:	f06f 0204 	mvn.w	r2, #4
 800893e:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 8008940:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008942:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008944:	2202      	movs	r2, #2
 8008946:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008948:	699b      	ldr	r3, [r3, #24]
 800894a:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800894e:	d05c      	beq.n	8008a0a <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8008950:	f7ff ffd7 	bl	8008902 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008954:	2300      	movs	r3, #0
 8008956:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008958:	0733      	lsls	r3, r6, #28
 800895a:	d50f      	bpl.n	800897c <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800895c:	0728      	lsls	r0, r5, #28
 800895e:	d50d      	bpl.n	800897c <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008960:	f06f 0208 	mvn.w	r2, #8
 8008964:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 8008966:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800896a:	2204      	movs	r2, #4
 800896c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800896e:	69db      	ldr	r3, [r3, #28]
 8008970:	0799      	lsls	r1, r3, #30
 8008972:	d050      	beq.n	8008a16 <HAL_TIM_IRQHandler+0x10e>
        HAL_TIM_IC_CaptureCallback(htim);
 8008974:	f7ff ffc5 	bl	8008902 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008978:	2300      	movs	r3, #0
 800897a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800897c:	06f2      	lsls	r2, r6, #27
 800897e:	d510      	bpl.n	80089a2 <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008980:	06eb      	lsls	r3, r5, #27
 8008982:	d50e      	bpl.n	80089a2 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008984:	f06f 0210 	mvn.w	r2, #16
 8008988:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 800898a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800898c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800898e:	2208      	movs	r2, #8
 8008990:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008992:	69db      	ldr	r3, [r3, #28]
 8008994:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8008998:	d043      	beq.n	8008a22 <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 800899a:	f7ff ffb2 	bl	8008902 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800899e:	2300      	movs	r3, #0
 80089a0:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80089a2:	07f0      	lsls	r0, r6, #31
 80089a4:	d508      	bpl.n	80089b8 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80089a6:	07e9      	lsls	r1, r5, #31
 80089a8:	d506      	bpl.n	80089b8 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80089aa:	f06f 0201 	mvn.w	r2, #1
 80089ae:	6823      	ldr	r3, [r4, #0]
      HAL_TIM_PeriodElapsedCallback(htim);
 80089b0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80089b2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80089b4:	f7f9 f83c 	bl	8001a30 <HAL_TIM_PeriodElapsedCallback>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80089b8:	0632      	lsls	r2, r6, #24
 80089ba:	d508      	bpl.n	80089ce <HAL_TIM_IRQHandler+0xc6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80089bc:	062b      	lsls	r3, r5, #24
 80089be:	d506      	bpl.n	80089ce <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80089c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80089c4:	6823      	ldr	r3, [r4, #0]
      HAL_TIMEx_BreakCallback(htim);
 80089c6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80089c8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80089ca:	f000 f970 	bl	8008cae <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80089ce:	0670      	lsls	r0, r6, #25
 80089d0:	d508      	bpl.n	80089e4 <HAL_TIM_IRQHandler+0xdc>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80089d2:	0669      	lsls	r1, r5, #25
 80089d4:	d506      	bpl.n	80089e4 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80089d6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80089da:	6823      	ldr	r3, [r4, #0]
      HAL_TIM_TriggerCallback(htim);
 80089dc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80089de:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80089e0:	f7ff ff91 	bl	8008906 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80089e4:	06b2      	lsls	r2, r6, #26
 80089e6:	d522      	bpl.n	8008a2e <HAL_TIM_IRQHandler+0x126>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80089e8:	06ab      	lsls	r3, r5, #26
 80089ea:	d520      	bpl.n	8008a2e <HAL_TIM_IRQHandler+0x126>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80089ec:	f06f 0220 	mvn.w	r2, #32
 80089f0:	6823      	ldr	r3, [r4, #0]
      HAL_TIMEx_CommutCallback(htim);
 80089f2:	4620      	mov	r0, r4
}
 80089f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80089f8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80089fa:	f000 b957 	b.w	8008cac <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80089fe:	f7ff ff7f 	bl	8008900 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a02:	4620      	mov	r0, r4
 8008a04:	f7ff ff7e 	bl	8008904 <HAL_TIM_PWM_PulseFinishedCallback>
 8008a08:	e791      	b.n	800892e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a0a:	f7ff ff79 	bl	8008900 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a0e:	4620      	mov	r0, r4
 8008a10:	f7ff ff78 	bl	8008904 <HAL_TIM_PWM_PulseFinishedCallback>
 8008a14:	e79e      	b.n	8008954 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a16:	f7ff ff73 	bl	8008900 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a1a:	4620      	mov	r0, r4
 8008a1c:	f7ff ff72 	bl	8008904 <HAL_TIM_PWM_PulseFinishedCallback>
 8008a20:	e7aa      	b.n	8008978 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a22:	f7ff ff6d 	bl	8008900 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a26:	4620      	mov	r0, r4
 8008a28:	f7ff ff6c 	bl	8008904 <HAL_TIM_PWM_PulseFinishedCallback>
 8008a2c:	e7b7      	b.n	800899e <HAL_TIM_IRQHandler+0x96>
}
 8008a2e:	bd70      	pop	{r4, r5, r6, pc}

08008a30 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a30:	4a1e      	ldr	r2, [pc, #120]	@ (8008aac <TIM_Base_SetConfig+0x7c>)
  tmpcr1 = TIMx->CR1;
 8008a32:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a34:	4290      	cmp	r0, r2
 8008a36:	d00a      	beq.n	8008a4e <TIM_Base_SetConfig+0x1e>
 8008a38:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8008a3c:	d007      	beq.n	8008a4e <TIM_Base_SetConfig+0x1e>
 8008a3e:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8008a42:	4290      	cmp	r0, r2
 8008a44:	d003      	beq.n	8008a4e <TIM_Base_SetConfig+0x1e>
 8008a46:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008a4a:	4290      	cmp	r0, r2
 8008a4c:	d115      	bne.n	8008a7a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8008a4e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8008a54:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a56:	4a15      	ldr	r2, [pc, #84]	@ (8008aac <TIM_Base_SetConfig+0x7c>)
 8008a58:	4290      	cmp	r0, r2
 8008a5a:	d00a      	beq.n	8008a72 <TIM_Base_SetConfig+0x42>
 8008a5c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8008a60:	d007      	beq.n	8008a72 <TIM_Base_SetConfig+0x42>
 8008a62:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8008a66:	4290      	cmp	r0, r2
 8008a68:	d003      	beq.n	8008a72 <TIM_Base_SetConfig+0x42>
 8008a6a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008a6e:	4290      	cmp	r0, r2
 8008a70:	d103      	bne.n	8008a7a <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a72:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a78:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a7a:	694a      	ldr	r2, [r1, #20]
 8008a7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a80:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8008a82:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a84:	688b      	ldr	r3, [r1, #8]
 8008a86:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a88:	680b      	ldr	r3, [r1, #0]
 8008a8a:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a8c:	4b07      	ldr	r3, [pc, #28]	@ (8008aac <TIM_Base_SetConfig+0x7c>)
 8008a8e:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a90:	bf04      	itt	eq
 8008a92:	690b      	ldreq	r3, [r1, #16]
 8008a94:	6303      	streq	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a96:	2301      	movs	r3, #1
 8008a98:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008a9a:	6903      	ldr	r3, [r0, #16]
 8008a9c:	07db      	lsls	r3, r3, #31
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008a9e:	bf42      	ittt	mi
 8008aa0:	6903      	ldrmi	r3, [r0, #16]
 8008aa2:	f023 0301 	bicmi.w	r3, r3, #1
 8008aa6:	6103      	strmi	r3, [r0, #16]
  }
}
 8008aa8:	4770      	bx	lr
 8008aaa:	bf00      	nop
 8008aac:	40012c00 	.word	0x40012c00

08008ab0 <HAL_TIM_Base_Init>:
{
 8008ab0:	b510      	push	{r4, lr}
  if (htim == NULL)
 8008ab2:	4604      	mov	r4, r0
 8008ab4:	b330      	cbz	r0, 8008b04 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8008ab6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8008aba:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008abe:	b91b      	cbnz	r3, 8008ac8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8008ac0:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8008ac4:	f7fe fbb2 	bl	800722c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8008ac8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008aca:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8008acc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ad0:	1d21      	adds	r1, r4, #4
 8008ad2:	f7ff ffad 	bl	8008a30 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ad6:	2301      	movs	r3, #1
  return HAL_OK;
 8008ad8:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ada:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ade:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8008ae2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8008ae6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8008aea:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008aee:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008af2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008af6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8008afa:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8008afe:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8008b02:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008b04:	2001      	movs	r0, #1
 8008b06:	e7fc      	b.n	8008b02 <HAL_TIM_Base_Init+0x52>

08008b08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008b08:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008b0a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b0c:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b0e:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b12:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8008b16:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b18:	6082      	str	r2, [r0, #8]
}
 8008b1a:	bd10      	pop	{r4, pc}

08008b1c <HAL_TIM_ConfigClockSource>:
{
 8008b1c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8008b1e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8008b22:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	f04f 0002 	mov.w	r0, #2
 8008b2a:	f000 808e 	beq.w	8008c4a <HAL_TIM_ConfigClockSource+0x12e>
 8008b2e:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8008b30:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8008b34:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8008b36:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8008b3a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b3c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008b40:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8008b44:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8008b46:	680b      	ldr	r3, [r1, #0]
 8008b48:	2b60      	cmp	r3, #96	@ 0x60
 8008b4a:	d04f      	beq.n	8008bec <HAL_TIM_ConfigClockSource+0xd0>
 8008b4c:	d832      	bhi.n	8008bb4 <HAL_TIM_ConfigClockSource+0x98>
 8008b4e:	2b40      	cmp	r3, #64	@ 0x40
 8008b50:	d064      	beq.n	8008c1c <HAL_TIM_ConfigClockSource+0x100>
 8008b52:	d816      	bhi.n	8008b82 <HAL_TIM_ConfigClockSource+0x66>
 8008b54:	2b20      	cmp	r3, #32
 8008b56:	d00d      	beq.n	8008b74 <HAL_TIM_ConfigClockSource+0x58>
 8008b58:	d80a      	bhi.n	8008b70 <HAL_TIM_ConfigClockSource+0x54>
 8008b5a:	f033 0110 	bics.w	r1, r3, #16
 8008b5e:	d009      	beq.n	8008b74 <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 8008b60:	2301      	movs	r3, #1
 8008b62:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8008b66:	2300      	movs	r3, #0
 8008b68:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8008b6c:	4610      	mov	r0, r2
 8008b6e:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8008b70:	2b30      	cmp	r3, #48	@ 0x30
 8008b72:	d1f5      	bne.n	8008b60 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 8008b74:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b76:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8008b80:	e028      	b.n	8008bd4 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 8008b82:	2b50      	cmp	r3, #80	@ 0x50
 8008b84:	d1ec      	bne.n	8008b60 <HAL_TIM_ConfigClockSource+0x44>
                               sClockSourceConfig->ClockPolarity,
 8008b86:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8008b88:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8008b8a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b8c:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b8e:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b92:	f023 0301 	bic.w	r3, r3, #1
 8008b96:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b98:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8008b9a:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b9c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ba0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8008ba4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8008ba6:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8008ba8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008bae:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8008bb2:	e00f      	b.n	8008bd4 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 8008bb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bb8:	d00d      	beq.n	8008bd6 <HAL_TIM_ConfigClockSource+0xba>
 8008bba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008bbe:	d00c      	beq.n	8008bda <HAL_TIM_ConfigClockSource+0xbe>
 8008bc0:	2b70      	cmp	r3, #112	@ 0x70
 8008bc2:	d1cd      	bne.n	8008b60 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8008bc4:	68cb      	ldr	r3, [r1, #12]
 8008bc6:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8008bca:	f7ff ff9d 	bl	8008b08 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008bce:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008bd0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8008bd4:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	e7c2      	b.n	8008b60 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8008bda:	68cb      	ldr	r3, [r1, #12]
 8008bdc:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8008be0:	f7ff ff92 	bl	8008b08 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008be4:	6883      	ldr	r3, [r0, #8]
 8008be6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008bea:	e7f3      	b.n	8008bd4 <HAL_TIM_ConfigClockSource+0xb8>
  tmpccer = TIMx->CCER;
 8008bec:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bee:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8008bf0:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bf2:	f022 0210 	bic.w	r2, r2, #16
                               sClockSourceConfig->ClockFilter);
 8008bf6:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bf8:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bfa:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008bfc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c00:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c04:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c08:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8008c0c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8008c0e:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8008c10:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c16:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8008c1a:	e7db      	b.n	8008bd4 <HAL_TIM_ConfigClockSource+0xb8>
                               sClockSourceConfig->ClockPolarity,
 8008c1c:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8008c1e:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8008c20:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c22:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c24:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c28:	f023 0301 	bic.w	r3, r3, #1
 8008c2c:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c2e:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8008c30:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c36:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8008c3a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8008c3c:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8008c3e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c44:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8008c48:	e7c4      	b.n	8008bd4 <HAL_TIM_ConfigClockSource+0xb8>
  __HAL_LOCK(htim);
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	e78e      	b.n	8008b6c <HAL_TIM_ConfigClockSource+0x50>
	...

08008c50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c50:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c52:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8008c56:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	f04f 0002 	mov.w	r0, #2
 8008c5e:	d022      	beq.n	8008ca6 <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c60:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8008c62:	f882 003d 	strb.w	r0, [r2, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 8008c66:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c68:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c6a:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c6e:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8008c70:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c72:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c74:	4c0c      	ldr	r4, [pc, #48]	@ (8008ca8 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8008c76:	42a3      	cmp	r3, r4
 8008c78:	d00a      	beq.n	8008c90 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8008c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c7e:	d007      	beq.n	8008c90 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8008c80:	f5a4 3494 	sub.w	r4, r4, #75776	@ 0x12800
 8008c84:	42a3      	cmp	r3, r4
 8008c86:	d003      	beq.n	8008c90 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8008c88:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8008c8c:	42a3      	cmp	r3, r4
 8008c8e:	d104      	bne.n	8008c9a <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c90:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c92:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c96:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c98:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c9a:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8008c9c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8008c9e:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8008ca2:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 8008ca6:	bd30      	pop	{r4, r5, pc}
 8008ca8:	40012c00 	.word	0x40012c00

08008cac <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8008cac:	4770      	bx	lr

08008cae <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8008cae:	4770      	bx	lr

08008cb0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8008cb0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008cb2:	2400      	movs	r4, #0
 8008cb4:	2310      	movs	r3, #16
 8008cb6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008cba:	6803      	ldr	r3, [r0, #0]
 8008cbc:	4615      	mov	r5, r2
 8008cbe:	699e      	ldr	r6, [r3, #24]
 8008cc0:	e9cd 4400 	strd	r4, r4, [sp]
 8008cc4:	466b      	mov	r3, sp
 8008cc6:	6812      	ldr	r2, [r2, #0]
 8008cc8:	47b0      	blx	r6
 8008cca:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008cce:	f003 0306 	and.w	r3, r3, #6
 8008cd2:	2b06      	cmp	r3, #6
 8008cd4:	bf09      	itett	eq
 8008cd6:	2001      	moveq	r0, #1
 8008cd8:	4620      	movne	r0, r4
 8008cda:	9b00      	ldreq	r3, [sp, #0]
 8008cdc:	602b      	streq	r3, [r5, #0]
 8008cde:	b004      	add	sp, #16
 8008ce0:	bd70      	pop	{r4, r5, r6, pc}

08008ce2 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8008ce2:	9800      	ldr	r0, [sp, #0]
 8008ce4:	4290      	cmp	r0, r2
 8008ce6:	bf0c      	ite	eq
 8008ce8:	2006      	moveq	r0, #6
 8008cea:	2001      	movne	r0, #1
 8008cec:	4770      	bx	lr
	...

08008cf0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8008cf0:	b510      	push	{r4, lr}
 8008cf2:	4604      	mov	r4, r0
 8008cf4:	4b02      	ldr	r3, [pc, #8]	@ (8008d00 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8008cf6:	6003      	str	r3, [r0, #0]
 8008cf8:	f000 f947 	bl	8008f8a <_ZNSt9type_infoD1Ev>
 8008cfc:	4620      	mov	r0, r4
 8008cfe:	bd10      	pop	{r4, pc}
 8008d00:	0800c888 	.word	0x0800c888

08008d04 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8008d04:	b510      	push	{r4, lr}
 8008d06:	4604      	mov	r4, r0
 8008d08:	f7ff fff2 	bl	8008cf0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8008d0c:	4620      	mov	r0, r4
 8008d0e:	2108      	movs	r1, #8
 8008d10:	f000 f842 	bl	8008d98 <_ZdlPvj>
 8008d14:	4620      	mov	r0, r4
 8008d16:	bd10      	pop	{r4, pc}

08008d18 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8008d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d1c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8008d20:	461f      	mov	r7, r3
 8008d22:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8008d26:	4598      	cmp	r8, r3
 8008d28:	4606      	mov	r6, r0
 8008d2a:	4615      	mov	r5, r2
 8008d2c:	d107      	bne.n	8008d3e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8008d2e:	9907      	ldr	r1, [sp, #28]
 8008d30:	f000 f92e 	bl	8008f90 <_ZNKSt9type_info7__equalERKS_>
 8008d34:	b118      	cbz	r0, 8008d3e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8008d36:	7165      	strb	r5, [r4, #5]
 8008d38:	2000      	movs	r0, #0
 8008d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d3e:	4639      	mov	r1, r7
 8008d40:	4630      	mov	r0, r6
 8008d42:	f000 f925 	bl	8008f90 <_ZNKSt9type_info7__equalERKS_>
 8008d46:	2800      	cmp	r0, #0
 8008d48:	d0f6      	beq.n	8008d38 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	f8c4 8000 	str.w	r8, [r4]
 8008d50:	7125      	strb	r5, [r4, #4]
 8008d52:	71a3      	strb	r3, [r4, #6]
 8008d54:	e7f0      	b.n	8008d38 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

08008d56 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8008d56:	b538      	push	{r3, r4, r5, lr}
 8008d58:	4615      	mov	r5, r2
 8008d5a:	461c      	mov	r4, r3
 8008d5c:	f000 f918 	bl	8008f90 <_ZNKSt9type_info7__equalERKS_>
 8008d60:	b120      	cbz	r0, 8008d6c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8008d62:	2308      	movs	r3, #8
 8008d64:	60e3      	str	r3, [r4, #12]
 8008d66:	2306      	movs	r3, #6
 8008d68:	6025      	str	r5, [r4, #0]
 8008d6a:	7123      	strb	r3, [r4, #4]
 8008d6c:	bd38      	pop	{r3, r4, r5, pc}

08008d6e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8008d6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d72:	4605      	mov	r5, r0
 8008d74:	460c      	mov	r4, r1
 8008d76:	4616      	mov	r6, r2
 8008d78:	461f      	mov	r7, r3
 8008d7a:	f000 f909 	bl	8008f90 <_ZNKSt9type_info7__equalERKS_>
 8008d7e:	b948      	cbnz	r0, 8008d94 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8008d80:	2f03      	cmp	r7, #3
 8008d82:	d807      	bhi.n	8008d94 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8008d84:	6823      	ldr	r3, [r4, #0]
 8008d86:	4632      	mov	r2, r6
 8008d88:	4629      	mov	r1, r5
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d90:	695b      	ldr	r3, [r3, #20]
 8008d92:	4718      	bx	r3
 8008d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008d98 <_ZdlPvj>:
 8008d98:	f000 bd11 	b.w	80097be <_ZdlPv>

08008d9c <__dynamic_cast>:
 8008d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008da0:	460f      	mov	r7, r1
 8008da2:	4616      	mov	r6, r2
 8008da4:	461d      	mov	r5, r3
 8008da6:	4604      	mov	r4, r0
 8008da8:	b088      	sub	sp, #32
 8008daa:	b918      	cbnz	r0, 8008db4 <__dynamic_cast+0x18>
 8008dac:	2000      	movs	r0, #0
 8008dae:	b008      	add	sp, #32
 8008db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008db4:	6802      	ldr	r2, [r0, #0]
 8008db6:	f852 3c08 	ldr.w	r3, [r2, #-8]
 8008dba:	f852 cc04 	ldr.w	ip, [r2, #-4]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	e9cd 2205 	strd	r2, r2, [sp, #20]
 8008dc4:	2210      	movs	r2, #16
 8008dc6:	18c1      	adds	r1, r0, r3
 8008dc8:	58c3      	ldr	r3, [r0, r3]
 8008dca:	9207      	str	r2, [sp, #28]
 8008dcc:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008dd0:	4560      	cmp	r0, ip
 8008dd2:	d1eb      	bne.n	8008dac <__dynamic_cast+0x10>
 8008dd4:	aa05      	add	r2, sp, #20
 8008dd6:	6803      	ldr	r3, [r0, #0]
 8008dd8:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8008ddc:	e9cd 1700 	strd	r1, r7, [sp]
 8008de0:	2206      	movs	r2, #6
 8008de2:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8008de6:	4629      	mov	r1, r5
 8008de8:	4633      	mov	r3, r6
 8008dea:	47c0      	blx	r8
 8008dec:	9805      	ldr	r0, [sp, #20]
 8008dee:	2800      	cmp	r0, #0
 8008df0:	d0dc      	beq.n	8008dac <__dynamic_cast+0x10>
 8008df2:	f89d 101a 	ldrb.w	r1, [sp, #26]
 8008df6:	f001 0306 	and.w	r3, r1, #6
 8008dfa:	2b06      	cmp	r3, #6
 8008dfc:	d0d7      	beq.n	8008dae <__dynamic_cast+0x12>
 8008dfe:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8008e02:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8008e06:	401a      	ands	r2, r3
 8008e08:	f002 0206 	and.w	r2, r2, #6
 8008e0c:	2a06      	cmp	r2, #6
 8008e0e:	d0ce      	beq.n	8008dae <__dynamic_cast+0x12>
 8008e10:	f003 0305 	and.w	r3, r3, #5
 8008e14:	2b04      	cmp	r3, #4
 8008e16:	d0c9      	beq.n	8008dac <__dynamic_cast+0x10>
 8008e18:	2900      	cmp	r1, #0
 8008e1a:	d1c7      	bne.n	8008dac <__dynamic_cast+0x10>
 8008e1c:	2d00      	cmp	r5, #0
 8008e1e:	db04      	blt.n	8008e2a <__dynamic_cast+0x8e>
 8008e20:	4428      	add	r0, r5
 8008e22:	4284      	cmp	r4, r0
 8008e24:	d1c2      	bne.n	8008dac <__dynamic_cast+0x10>
 8008e26:	9805      	ldr	r0, [sp, #20]
 8008e28:	e7c1      	b.n	8008dae <__dynamic_cast+0x12>
 8008e2a:	1cab      	adds	r3, r5, #2
 8008e2c:	d0be      	beq.n	8008dac <__dynamic_cast+0x10>
 8008e2e:	6833      	ldr	r3, [r6, #0]
 8008e30:	9400      	str	r4, [sp, #0]
 8008e32:	4602      	mov	r2, r0
 8008e34:	6a1c      	ldr	r4, [r3, #32]
 8008e36:	4629      	mov	r1, r5
 8008e38:	463b      	mov	r3, r7
 8008e3a:	4630      	mov	r0, r6
 8008e3c:	47a0      	blx	r4
 8008e3e:	f000 0006 	and.w	r0, r0, #6
 8008e42:	2806      	cmp	r0, #6
 8008e44:	e7ee      	b.n	8008e24 <__dynamic_cast+0x88>

08008e46 <__cxa_guard_acquire>:
 8008e46:	6802      	ldr	r2, [r0, #0]
 8008e48:	4603      	mov	r3, r0
 8008e4a:	07d2      	lsls	r2, r2, #31
 8008e4c:	d405      	bmi.n	8008e5a <__cxa_guard_acquire+0x14>
 8008e4e:	7842      	ldrb	r2, [r0, #1]
 8008e50:	b102      	cbz	r2, 8008e54 <__cxa_guard_acquire+0xe>
 8008e52:	deff      	udf	#255	@ 0xff
 8008e54:	2001      	movs	r0, #1
 8008e56:	7058      	strb	r0, [r3, #1]
 8008e58:	4770      	bx	lr
 8008e5a:	2000      	movs	r0, #0
 8008e5c:	4770      	bx	lr

08008e5e <__cxa_guard_release>:
 8008e5e:	2301      	movs	r3, #1
 8008e60:	6003      	str	r3, [r0, #0]
 8008e62:	4770      	bx	lr

08008e64 <_Znwj>:
 8008e64:	2801      	cmp	r0, #1
 8008e66:	bf38      	it	cc
 8008e68:	2001      	movcc	r0, #1
 8008e6a:	b510      	push	{r4, lr}
 8008e6c:	4604      	mov	r4, r0
 8008e6e:	4620      	mov	r0, r4
 8008e70:	f000 fe22 	bl	8009ab8 <malloc>
 8008e74:	b100      	cbz	r0, 8008e78 <_Znwj+0x14>
 8008e76:	bd10      	pop	{r4, pc}
 8008e78:	f000 fca4 	bl	80097c4 <_ZSt15get_new_handlerv>
 8008e7c:	b908      	cbnz	r0, 8008e82 <_Znwj+0x1e>
 8008e7e:	f000 fe0d 	bl	8009a9c <abort>
 8008e82:	4780      	blx	r0
 8008e84:	e7f3      	b.n	8008e6e <_Znwj+0xa>
	...

08008e88 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8008e88:	b510      	push	{r4, lr}
 8008e8a:	4604      	mov	r4, r0
 8008e8c:	4b02      	ldr	r3, [pc, #8]	@ (8008e98 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8008e8e:	6003      	str	r3, [r0, #0]
 8008e90:	f7ff ff2e 	bl	8008cf0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8008e94:	4620      	mov	r0, r4
 8008e96:	bd10      	pop	{r4, pc}
 8008e98:	0800c8e8 	.word	0x0800c8e8

08008e9c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8008e9c:	b510      	push	{r4, lr}
 8008e9e:	4604      	mov	r4, r0
 8008ea0:	f7ff fff2 	bl	8008e88 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8008ea4:	4620      	mov	r0, r4
 8008ea6:	210c      	movs	r1, #12
 8008ea8:	f7ff ff76 	bl	8008d98 <_ZdlPvj>
 8008eac:	4620      	mov	r0, r4
 8008eae:	bd10      	pop	{r4, pc}

08008eb0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8008eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eb4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8008eb8:	4606      	mov	r6, r0
 8008eba:	4590      	cmp	r8, r2
 8008ebc:	460f      	mov	r7, r1
 8008ebe:	4615      	mov	r5, r2
 8008ec0:	461c      	mov	r4, r3
 8008ec2:	d00b      	beq.n	8008edc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 8008ec4:	68b0      	ldr	r0, [r6, #8]
 8008ec6:	462a      	mov	r2, r5
 8008ec8:	6803      	ldr	r3, [r0, #0]
 8008eca:	f8cd 8018 	str.w	r8, [sp, #24]
 8008ece:	6a1e      	ldr	r6, [r3, #32]
 8008ed0:	4639      	mov	r1, r7
 8008ed2:	4623      	mov	r3, r4
 8008ed4:	46b4      	mov	ip, r6
 8008ed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008eda:	4760      	bx	ip
 8008edc:	4619      	mov	r1, r3
 8008ede:	f000 f857 	bl	8008f90 <_ZNKSt9type_info7__equalERKS_>
 8008ee2:	2800      	cmp	r0, #0
 8008ee4:	d0ee      	beq.n	8008ec4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 8008ee6:	2006      	movs	r0, #6
 8008ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008eec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8008eec:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ef0:	460d      	mov	r5, r1
 8008ef2:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	@ 0x28
 8008ef6:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	@ 0x30
 8008efa:	4619      	mov	r1, r3
 8008efc:	4681      	mov	r9, r0
 8008efe:	4617      	mov	r7, r2
 8008f00:	4698      	mov	r8, r3
 8008f02:	f000 f845 	bl	8008f90 <_ZNKSt9type_info7__equalERKS_>
 8008f06:	b190      	cbz	r0, 8008f2e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8008f08:	2d00      	cmp	r5, #0
 8008f0a:	6034      	str	r4, [r6, #0]
 8008f0c:	7137      	strb	r7, [r6, #4]
 8008f0e:	db09      	blt.n	8008f24 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8008f10:	442c      	add	r4, r5
 8008f12:	45a2      	cmp	sl, r4
 8008f14:	bf14      	ite	ne
 8008f16:	2401      	movne	r4, #1
 8008f18:	2406      	moveq	r4, #6
 8008f1a:	71b4      	strb	r4, [r6, #6]
 8008f1c:	2000      	movs	r0, #0
 8008f1e:	b001      	add	sp, #4
 8008f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f24:	3502      	adds	r5, #2
 8008f26:	d1f9      	bne.n	8008f1c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8008f28:	2301      	movs	r3, #1
 8008f2a:	71b3      	strb	r3, [r6, #6]
 8008f2c:	e7f6      	b.n	8008f1c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8008f2e:	4554      	cmp	r4, sl
 8008f30:	d106      	bne.n	8008f40 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8008f32:	4659      	mov	r1, fp
 8008f34:	4648      	mov	r0, r9
 8008f36:	f000 f82b 	bl	8008f90 <_ZNKSt9type_info7__equalERKS_>
 8008f3a:	b108      	cbz	r0, 8008f40 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8008f3c:	7177      	strb	r7, [r6, #5]
 8008f3e:	e7ed      	b.n	8008f1c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8008f40:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8008f44:	463a      	mov	r2, r7
 8008f46:	6803      	ldr	r3, [r0, #0]
 8008f48:	e9cd a60c 	strd	sl, r6, [sp, #48]	@ 0x30
 8008f4c:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	@ 0x28
 8008f50:	69dc      	ldr	r4, [r3, #28]
 8008f52:	4629      	mov	r1, r5
 8008f54:	4643      	mov	r3, r8
 8008f56:	46a4      	mov	ip, r4
 8008f58:	b001      	add	sp, #4
 8008f5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f5e:	4760      	bx	ip

08008f60 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8008f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f64:	4607      	mov	r7, r0
 8008f66:	460c      	mov	r4, r1
 8008f68:	4615      	mov	r5, r2
 8008f6a:	461e      	mov	r6, r3
 8008f6c:	f7ff fef3 	bl	8008d56 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8008f70:	b948      	cbnz	r0, 8008f86 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8008f72:	68b8      	ldr	r0, [r7, #8]
 8008f74:	462a      	mov	r2, r5
 8008f76:	6803      	ldr	r3, [r0, #0]
 8008f78:	4621      	mov	r1, r4
 8008f7a:	699f      	ldr	r7, [r3, #24]
 8008f7c:	4633      	mov	r3, r6
 8008f7e:	46bc      	mov	ip, r7
 8008f80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f84:	4760      	bx	ip
 8008f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008f8a <_ZNSt9type_infoD1Ev>:
 8008f8a:	4770      	bx	lr

08008f8c <_ZNKSt9type_info14__is_pointer_pEv>:
 8008f8c:	2000      	movs	r0, #0
 8008f8e:	4770      	bx	lr

08008f90 <_ZNKSt9type_info7__equalERKS_>:
 8008f90:	4281      	cmp	r1, r0
 8008f92:	b508      	push	{r3, lr}
 8008f94:	d00e      	beq.n	8008fb4 <_ZNKSt9type_info7__equalERKS_+0x24>
 8008f96:	6840      	ldr	r0, [r0, #4]
 8008f98:	7803      	ldrb	r3, [r0, #0]
 8008f9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f9c:	d00c      	beq.n	8008fb8 <_ZNKSt9type_info7__equalERKS_+0x28>
 8008f9e:	6849      	ldr	r1, [r1, #4]
 8008fa0:	780b      	ldrb	r3, [r1, #0]
 8008fa2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008fa4:	bf08      	it	eq
 8008fa6:	3101      	addeq	r1, #1
 8008fa8:	f7f7 f8d2 	bl	8000150 <strcmp>
 8008fac:	fab0 f080 	clz	r0, r0
 8008fb0:	0940      	lsrs	r0, r0, #5
 8008fb2:	bd08      	pop	{r3, pc}
 8008fb4:	2001      	movs	r0, #1
 8008fb6:	e7fc      	b.n	8008fb2 <_ZNKSt9type_info7__equalERKS_+0x22>
 8008fb8:	2000      	movs	r0, #0
 8008fba:	e7fa      	b.n	8008fb2 <_ZNKSt9type_info7__equalERKS_+0x22>

08008fbc <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
 8008fbc:	b510      	push	{r4, lr}
 8008fbe:	4604      	mov	r4, r0
 8008fc0:	4b02      	ldr	r3, [pc, #8]	@ (8008fcc <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev+0x10>)
 8008fc2:	6003      	str	r3, [r0, #0]
 8008fc4:	f7ff fe94 	bl	8008cf0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8008fc8:	4620      	mov	r0, r4
 8008fca:	bd10      	pop	{r4, pc}
 8008fcc:	0800c960 	.word	0x0800c960

08008fd0 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
 8008fd0:	b510      	push	{r4, lr}
 8008fd2:	4604      	mov	r4, r0
 8008fd4:	f7ff fff2 	bl	8008fbc <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>
 8008fd8:	4620      	mov	r0, r4
 8008fda:	2118      	movs	r1, #24
 8008fdc:	f7ff fedc 	bl	8008d98 <_ZdlPvj>
 8008fe0:	4620      	mov	r0, r4
 8008fe2:	bd10      	pop	{r4, pc}

08008fe4 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8008fe4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fe8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008fec:	4604      	mov	r4, r0
 8008fee:	4552      	cmp	r2, sl
 8008ff0:	4688      	mov	r8, r1
 8008ff2:	4616      	mov	r6, r2
 8008ff4:	4699      	mov	r9, r3
 8008ff6:	d005      	beq.n	8009004 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x20>
 8008ff8:	68e7      	ldr	r7, [r4, #12]
 8008ffa:	eb04 04c7 	add.w	r4, r4, r7, lsl #3
 8008ffe:	b947      	cbnz	r7, 8009012 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2e>
 8009000:	2001      	movs	r0, #1
 8009002:	e022      	b.n	800904a <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x66>
 8009004:	4619      	mov	r1, r3
 8009006:	f7ff ffc3 	bl	8008f90 <_ZNKSt9type_info7__equalERKS_>
 800900a:	2800      	cmp	r0, #0
 800900c:	d0f4      	beq.n	8008ff8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 800900e:	2006      	movs	r0, #6
 8009010:	e01b      	b.n	800904a <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x66>
 8009012:	68e5      	ldr	r5, [r4, #12]
 8009014:	07ab      	lsls	r3, r5, #30
 8009016:	d51b      	bpl.n	8009050 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 8009018:	122a      	asrs	r2, r5, #8
 800901a:	f015 0501 	ands.w	r5, r5, #1
 800901e:	d004      	beq.n	800902a <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x46>
 8009020:	f118 0f03 	cmn.w	r8, #3
 8009024:	d014      	beq.n	8009050 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 8009026:	6833      	ldr	r3, [r6, #0]
 8009028:	589a      	ldr	r2, [r3, r2]
 800902a:	68a0      	ldr	r0, [r4, #8]
 800902c:	4641      	mov	r1, r8
 800902e:	6803      	ldr	r3, [r0, #0]
 8009030:	f8cd a000 	str.w	sl, [sp]
 8009034:	f8d3 b020 	ldr.w	fp, [r3, #32]
 8009038:	4432      	add	r2, r6
 800903a:	464b      	mov	r3, r9
 800903c:	47d8      	blx	fp
 800903e:	2803      	cmp	r0, #3
 8009040:	d906      	bls.n	8009050 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 8009042:	b115      	cbz	r5, 800904a <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x66>
 8009044:	f040 0001 	orr.w	r0, r0, #1
 8009048:	b2c0      	uxtb	r0, r0
 800904a:	b003      	add	sp, #12
 800904c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009050:	3f01      	subs	r7, #1
 8009052:	3c08      	subs	r4, #8
 8009054:	e7d3      	b.n	8008ffe <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1a>

08009056 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>:
 8009056:	b4f0      	push	{r4, r5, r6, r7}
 8009058:	1e0d      	subs	r5, r1, #0
 800905a:	4616      	mov	r6, r2
 800905c:	9c04      	ldr	r4, [sp, #16]
 800905e:	db06      	blt.n	800906e <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x18>
 8009060:	442e      	add	r6, r5
 8009062:	42b4      	cmp	r4, r6
 8009064:	bf14      	ite	ne
 8009066:	2001      	movne	r0, #1
 8009068:	2006      	moveq	r0, #6
 800906a:	bcf0      	pop	{r4, r5, r6, r7}
 800906c:	4770      	bx	lr
 800906e:	3502      	adds	r5, #2
 8009070:	d005      	beq.n	800907e <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x28>
 8009072:	6805      	ldr	r5, [r0, #0]
 8009074:	9404      	str	r4, [sp, #16]
 8009076:	6a2c      	ldr	r4, [r5, #32]
 8009078:	46a4      	mov	ip, r4
 800907a:	bcf0      	pop	{r4, r5, r6, r7}
 800907c:	4760      	bx	ip
 800907e:	2001      	movs	r0, #1
 8009080:	e7f3      	b.n	800906a <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x14>

08009082 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8009082:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009086:	b091      	sub	sp, #68	@ 0x44
 8009088:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
 800908a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800908e:	68a3      	ldr	r3, [r4, #8]
 8009090:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009092:	06db      	lsls	r3, r3, #27
 8009094:	bf48      	it	mi
 8009096:	6883      	ldrmi	r3, [r0, #8]
 8009098:	4681      	mov	r9, r0
 800909a:	bf48      	it	mi
 800909c:	60a3      	strmi	r3, [r4, #8]
 800909e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80090a0:	460f      	mov	r7, r1
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d108      	bne.n	80090b8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x36>
 80090a6:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80090a8:	f7ff ff72 	bl	8008f90 <_ZNKSt9type_info7__equalERKS_>
 80090ac:	b120      	cbz	r0, 80090b8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x36>
 80090ae:	9b05      	ldr	r3, [sp, #20]
 80090b0:	7163      	strb	r3, [r4, #5]
 80090b2:	f04f 0800 	mov.w	r8, #0
 80090b6:	e088      	b.n	80091ca <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x148>
 80090b8:	4648      	mov	r0, r9
 80090ba:	9906      	ldr	r1, [sp, #24]
 80090bc:	f7ff ff68 	bl	8008f90 <_ZNKSt9type_info7__equalERKS_>
 80090c0:	b198      	cbz	r0, 80090ea <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x68>
 80090c2:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80090c4:	2f00      	cmp	r7, #0
 80090c6:	6023      	str	r3, [r4, #0]
 80090c8:	9b05      	ldr	r3, [sp, #20]
 80090ca:	7123      	strb	r3, [r4, #4]
 80090cc:	db08      	blt.n	80090e0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e>
 80090ce:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80090d0:	441f      	add	r7, r3
 80090d2:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80090d4:	42bb      	cmp	r3, r7
 80090d6:	bf14      	ite	ne
 80090d8:	2701      	movne	r7, #1
 80090da:	2706      	moveq	r7, #6
 80090dc:	71a7      	strb	r7, [r4, #6]
 80090de:	e7e8      	b.n	80090b2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80090e0:	3702      	adds	r7, #2
 80090e2:	d1e6      	bne.n	80090b2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80090e4:	2301      	movs	r3, #1
 80090e6:	71a3      	strb	r3, [r4, #6]
 80090e8:	e7e3      	b.n	80090b2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80090ea:	2f00      	cmp	r7, #0
 80090ec:	bfa8      	it	ge
 80090ee:	9b1c      	ldrge	r3, [sp, #112]	@ 0x70
 80090f0:	f04f 0c02 	mov.w	ip, #2
 80090f4:	bfa4      	itt	ge
 80090f6:	1bdb      	subge	r3, r3, r7
 80090f8:	9307      	strge	r3, [sp, #28]
 80090fa:	f04f 0301 	mov.w	r3, #1
 80090fe:	f04f 0800 	mov.w	r8, #0
 8009102:	e9cd c308 	strd	ip, r3, [sp, #32]
 8009106:	9b05      	ldr	r3, [sp, #20]
 8009108:	bfb8      	it	lt
 800910a:	9007      	strlt	r0, [sp, #28]
 800910c:	f043 0301 	orr.w	r3, r3, #1
 8009110:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8009114:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009116:	f8d9 a00c 	ldr.w	sl, [r9, #12]
 800911a:	eb09 0bca 	add.w	fp, r9, sl, lsl #3
 800911e:	f1ba 0f00 	cmp.w	sl, #0
 8009122:	d109      	bne.n	8009138 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb6>
 8009124:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009126:	2b00      	cmp	r3, #0
 8009128:	d04f      	beq.n	80091ca <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x148>
 800912a:	9b08      	ldr	r3, [sp, #32]
 800912c:	2b01      	cmp	r3, #1
 800912e:	d04c      	beq.n	80091ca <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x148>
 8009130:	2301      	movs	r3, #1
 8009132:	e9cd 3a08 	strd	r3, sl, [sp, #32]
 8009136:	e7ee      	b.n	8009116 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x94>
 8009138:	2300      	movs	r3, #0
 800913a:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
 800913e:	f8db 300c 	ldr.w	r3, [fp, #12]
 8009142:	68a5      	ldr	r5, [r4, #8]
 8009144:	07de      	lsls	r6, r3, #31
 8009146:	bf48      	it	mi
 8009148:	981a      	ldrmi	r0, [sp, #104]	@ 0x68
 800914a:	ea4f 2123 	mov.w	r1, r3, asr #8
 800914e:	bf48      	it	mi
 8009150:	6800      	ldrmi	r0, [r0, #0]
 8009152:	950f      	str	r5, [sp, #60]	@ 0x3c
 8009154:	bf48      	it	mi
 8009156:	5841      	ldrmi	r1, [r0, r1]
 8009158:	981a      	ldr	r0, [sp, #104]	@ 0x68
 800915a:	bf48      	it	mi
 800915c:	9a0b      	ldrmi	r2, [sp, #44]	@ 0x2c
 800915e:	4401      	add	r1, r0
 8009160:	9807      	ldr	r0, [sp, #28]
 8009162:	bf58      	it	pl
 8009164:	9a05      	ldrpl	r2, [sp, #20]
 8009166:	b138      	cbz	r0, 8009178 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xf6>
 8009168:	4288      	cmp	r0, r1
 800916a:	bf2c      	ite	cs
 800916c:	2000      	movcs	r0, #0
 800916e:	2001      	movcc	r0, #1
 8009170:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8009172:	42b0      	cmp	r0, r6
 8009174:	f000 80b3 	beq.w	80092de <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x25c>
 8009178:	0798      	lsls	r0, r3, #30
 800917a:	d406      	bmi.n	800918a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x108>
 800917c:	1cbb      	adds	r3, r7, #2
 800917e:	d102      	bne.n	8009186 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x104>
 8009180:	07ae      	lsls	r6, r5, #30
 8009182:	f000 80ae 	beq.w	80092e2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x260>
 8009186:	f002 02fd 	and.w	r2, r2, #253	@ 0xfd
 800918a:	f8db 0008 	ldr.w	r0, [fp, #8]
 800918e:	ad0d      	add	r5, sp, #52	@ 0x34
 8009190:	6803      	ldr	r3, [r0, #0]
 8009192:	9503      	str	r5, [sp, #12]
 8009194:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 8009196:	9502      	str	r5, [sp, #8]
 8009198:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800919a:	e9cd 1500 	strd	r1, r5, [sp]
 800919e:	4639      	mov	r1, r7
 80091a0:	69dd      	ldr	r5, [r3, #28]
 80091a2:	9b06      	ldr	r3, [sp, #24]
 80091a4:	47a8      	blx	r5
 80091a6:	7963      	ldrb	r3, [r4, #5]
 80091a8:	f89d 2039 	ldrb.w	r2, [sp, #57]	@ 0x39
 80091ac:	f89d 503a 	ldrb.w	r5, [sp, #58]	@ 0x3a
 80091b0:	4313      	orrs	r3, r2
 80091b2:	2d06      	cmp	r5, #6
 80091b4:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80091b6:	7163      	strb	r3, [r4, #5]
 80091b8:	d001      	beq.n	80091be <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x13c>
 80091ba:	2d02      	cmp	r5, #2
 80091bc:	d109      	bne.n	80091d2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x150>
 80091be:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
 80091c2:	6021      	str	r1, [r4, #0]
 80091c4:	7123      	strb	r3, [r4, #4]
 80091c6:	71a5      	strb	r5, [r4, #6]
 80091c8:	4680      	mov	r8, r0
 80091ca:	4640      	mov	r0, r8
 80091cc:	b011      	add	sp, #68	@ 0x44
 80091ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091d2:	6822      	ldr	r2, [r4, #0]
 80091d4:	f1b8 0f00 	cmp.w	r8, #0
 80091d8:	d113      	bne.n	8009202 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x180>
 80091da:	b9a2      	cbnz	r2, 8009206 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x184>
 80091dc:	f89d 2038 	ldrb.w	r2, [sp, #56]	@ 0x38
 80091e0:	6021      	str	r1, [r4, #0]
 80091e2:	7122      	strb	r2, [r4, #4]
 80091e4:	b121      	cbz	r1, 80091f0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x16e>
 80091e6:	b11b      	cbz	r3, 80091f0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x16e>
 80091e8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80091ec:	07dd      	lsls	r5, r3, #31
 80091ee:	d5eb      	bpl.n	80091c8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x146>
 80091f0:	7963      	ldrb	r3, [r4, #5]
 80091f2:	2b04      	cmp	r3, #4
 80091f4:	d0e8      	beq.n	80091c8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x146>
 80091f6:	4680      	mov	r8, r0
 80091f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80091fc:	f1ab 0b08 	sub.w	fp, fp, #8
 8009200:	e78d      	b.n	800911e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x9c>
 8009202:	2a00      	cmp	r2, #0
 8009204:	d037      	beq.n	8009276 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f4>
 8009206:	428a      	cmp	r2, r1
 8009208:	d106      	bne.n	8009218 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x196>
 800920a:	7923      	ldrb	r3, [r4, #4]
 800920c:	f89d 2038 	ldrb.w	r2, [sp, #56]	@ 0x38
 8009210:	4313      	orrs	r3, r2
 8009212:	7123      	strb	r3, [r4, #4]
 8009214:	4640      	mov	r0, r8
 8009216:	e7eb      	b.n	80091f0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x16e>
 8009218:	b909      	cbnz	r1, 800921e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x19c>
 800921a:	2800      	cmp	r0, #0
 800921c:	d0fa      	beq.n	8009214 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x192>
 800921e:	2b03      	cmp	r3, #3
 8009220:	79a6      	ldrb	r6, [r4, #6]
 8009222:	d904      	bls.n	800922e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1ac>
 8009224:	07d9      	lsls	r1, r3, #31
 8009226:	d529      	bpl.n	800927c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fa>
 8009228:	68a3      	ldr	r3, [r4, #8]
 800922a:	079b      	lsls	r3, r3, #30
 800922c:	d526      	bpl.n	800927c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fa>
 800922e:	b97e      	cbnz	r6, 8009250 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1ce>
 8009230:	2d03      	cmp	r5, #3
 8009232:	d905      	bls.n	8009240 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1be>
 8009234:	07ee      	lsls	r6, r5, #31
 8009236:	d541      	bpl.n	80092bc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x23a>
 8009238:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800923c:	0798      	lsls	r0, r3, #30
 800923e:	d53d      	bpl.n	80092bc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x23a>
 8009240:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8009242:	4639      	mov	r1, r7
 8009244:	9300      	str	r3, [sp, #0]
 8009246:	9806      	ldr	r0, [sp, #24]
 8009248:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800924a:	f7ff ff04 	bl	8009056 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 800924e:	4606      	mov	r6, r0
 8009250:	b9e5      	cbnz	r5, 800928c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x20a>
 8009252:	2e03      	cmp	r6, #3
 8009254:	d905      	bls.n	8009262 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1e0>
 8009256:	07f1      	lsls	r1, r6, #31
 8009258:	d532      	bpl.n	80092c0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x23e>
 800925a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800925e:	079a      	lsls	r2, r3, #30
 8009260:	d52e      	bpl.n	80092c0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x23e>
 8009262:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8009264:	4639      	mov	r1, r7
 8009266:	9300      	str	r3, [sp, #0]
 8009268:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800926a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800926c:	9806      	ldr	r0, [sp, #24]
 800926e:	f7ff fef2 	bl	8009056 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 8009272:	4605      	mov	r5, r0
 8009274:	e00a      	b.n	800928c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x20a>
 8009276:	2900      	cmp	r1, #0
 8009278:	d1d1      	bne.n	800921e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x19c>
 800927a:	e7cb      	b.n	8009214 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x192>
 800927c:	2e01      	cmp	r6, #1
 800927e:	bf38      	it	cc
 8009280:	2601      	movcc	r6, #1
 8009282:	2d01      	cmp	r5, #1
 8009284:	bf38      	it	cc
 8009286:	2501      	movcc	r5, #1
 8009288:	b2f6      	uxtb	r6, r6
 800928a:	b2ed      	uxtb	r5, r5
 800928c:	ea85 0306 	eor.w	r3, r5, r6
 8009290:	b2db      	uxtb	r3, r3
 8009292:	2b03      	cmp	r3, #3
 8009294:	d916      	bls.n	80092c4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x242>
 8009296:	2d03      	cmp	r5, #3
 8009298:	bf81      	itttt	hi
 800929a:	462e      	movhi	r6, r5
 800929c:	9b0d      	ldrhi	r3, [sp, #52]	@ 0x34
 800929e:	2000      	movhi	r0, #0
 80092a0:	6023      	strhi	r3, [r4, #0]
 80092a2:	bf8a      	itet	hi
 80092a4:	f89d 3038 	ldrbhi.w	r3, [sp, #56]	@ 0x38
 80092a8:	4640      	movls	r0, r8
 80092aa:	7123      	strbhi	r3, [r4, #4]
 80092ac:	07b3      	lsls	r3, r6, #30
 80092ae:	71a6      	strb	r6, [r4, #6]
 80092b0:	d402      	bmi.n	80092b8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x236>
 80092b2:	f016 0601 	ands.w	r6, r6, #1
 80092b6:	d19b      	bne.n	80091f0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x16e>
 80092b8:	2000      	movs	r0, #0
 80092ba:	e785      	b.n	80091c8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x146>
 80092bc:	2601      	movs	r6, #1
 80092be:	e7e5      	b.n	800928c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x20a>
 80092c0:	2501      	movs	r5, #1
 80092c2:	e7e3      	b.n	800928c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x20a>
 80092c4:	2300      	movs	r3, #0
 80092c6:	4035      	ands	r5, r6
 80092c8:	b2ed      	uxtb	r5, r5
 80092ca:	2d03      	cmp	r5, #3
 80092cc:	6023      	str	r3, [r4, #0]
 80092ce:	d903      	bls.n	80092d8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x256>
 80092d0:	2302      	movs	r3, #2
 80092d2:	2001      	movs	r0, #1
 80092d4:	71a3      	strb	r3, [r4, #6]
 80092d6:	e777      	b.n	80091c8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x146>
 80092d8:	2001      	movs	r0, #1
 80092da:	71a0      	strb	r0, [r4, #6]
 80092dc:	e788      	b.n	80091f0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x16e>
 80092de:	2301      	movs	r3, #1
 80092e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80092e2:	4640      	mov	r0, r8
 80092e4:	e787      	b.n	80091f6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x174>

080092e6 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80092e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ea:	b089      	sub	sp, #36	@ 0x24
 80092ec:	4605      	mov	r5, r0
 80092ee:	4616      	mov	r6, r2
 80092f0:	461c      	mov	r4, r3
 80092f2:	9102      	str	r1, [sp, #8]
 80092f4:	f7ff fd2f 	bl	8008d56 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80092f8:	2800      	cmp	r0, #0
 80092fa:	d160      	bne.n	80093be <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd8>
 80092fc:	f04f 0a00 	mov.w	sl, #0
 8009300:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8009304:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8009308:	f019 0f10 	tst.w	r9, #16
 800930c:	bf18      	it	ne
 800930e:	f8d5 9008 	ldrne.w	r9, [r5, #8]
 8009312:	eb05 07c8 	add.w	r7, r5, r8, lsl #3
 8009316:	f009 0301 	and.w	r3, r9, #1
 800931a:	9303      	str	r3, [sp, #12]
 800931c:	f10d 0b10 	add.w	fp, sp, #16
 8009320:	f1b8 0f00 	cmp.w	r8, #0
 8009324:	d104      	bne.n	8009330 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x4a>
 8009326:	7920      	ldrb	r0, [r4, #4]
 8009328:	3800      	subs	r0, #0
 800932a:	bf18      	it	ne
 800932c:	2001      	movne	r0, #1
 800932e:	e047      	b.n	80093c0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xda>
 8009330:	68fa      	ldr	r2, [r7, #12]
 8009332:	e9cd 9a06 	strd	r9, sl, [sp, #24]
 8009336:	f002 0301 	and.w	r3, r2, #1
 800933a:	9300      	str	r3, [sp, #0]
 800933c:	f002 0302 	and.w	r3, r2, #2
 8009340:	9301      	str	r3, [sp, #4]
 8009342:	9b03      	ldr	r3, [sp, #12]
 8009344:	f002 0102 	and.w	r1, r2, #2
 8009348:	430b      	orrs	r3, r1
 800934a:	f8cd a010 	str.w	sl, [sp, #16]
 800934e:	f88d a014 	strb.w	sl, [sp, #20]
 8009352:	d103      	bne.n	800935c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x76>
 8009354:	f108 38ff 	add.w	r8, r8, #4294967295
 8009358:	3f08      	subs	r7, #8
 800935a:	e7e1      	b.n	8009320 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x3a>
 800935c:	2e00      	cmp	r6, #0
 800935e:	d032      	beq.n	80093c6 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xe0>
 8009360:	9b00      	ldr	r3, [sp, #0]
 8009362:	1212      	asrs	r2, r2, #8
 8009364:	b10b      	cbz	r3, 800936a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x84>
 8009366:	6833      	ldr	r3, [r6, #0]
 8009368:	589a      	ldr	r2, [r3, r2]
 800936a:	4432      	add	r2, r6
 800936c:	68b8      	ldr	r0, [r7, #8]
 800936e:	9902      	ldr	r1, [sp, #8]
 8009370:	6803      	ldr	r3, [r0, #0]
 8009372:	699b      	ldr	r3, [r3, #24]
 8009374:	469c      	mov	ip, r3
 8009376:	465b      	mov	r3, fp
 8009378:	47e0      	blx	ip
 800937a:	2800      	cmp	r0, #0
 800937c:	d0ea      	beq.n	8009354 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x6e>
 800937e:	9b07      	ldr	r3, [sp, #28]
 8009380:	2b08      	cmp	r3, #8
 8009382:	d103      	bne.n	800938c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xa6>
 8009384:	9b00      	ldr	r3, [sp, #0]
 8009386:	b10b      	cbz	r3, 800938c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xa6>
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	9307      	str	r3, [sp, #28]
 800938c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8009390:	2b03      	cmp	r3, #3
 8009392:	d905      	bls.n	80093a0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xba>
 8009394:	9a01      	ldr	r2, [sp, #4]
 8009396:	b91a      	cbnz	r2, 80093a0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xba>
 8009398:	f023 0302 	bic.w	r3, r3, #2
 800939c:	f88d 3014 	strb.w	r3, [sp, #20]
 80093a0:	68e1      	ldr	r1, [r4, #12]
 80093a2:	b9c1      	cbnz	r1, 80093d6 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf0>
 80093a4:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 80093a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80093ac:	7923      	ldrb	r3, [r4, #4]
 80093ae:	2b03      	cmp	r3, #3
 80093b0:	d905      	bls.n	80093be <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd8>
 80093b2:	079a      	lsls	r2, r3, #30
 80093b4:	d509      	bpl.n	80093ca <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xe4>
 80093b6:	68ab      	ldr	r3, [r5, #8]
 80093b8:	f013 0f01 	tst.w	r3, #1
 80093bc:	d1ca      	bne.n	8009354 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x6e>
 80093be:	2001      	movs	r0, #1
 80093c0:	b009      	add	sp, #36	@ 0x24
 80093c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093c6:	4632      	mov	r2, r6
 80093c8:	e7d0      	b.n	800936c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x86>
 80093ca:	07db      	lsls	r3, r3, #31
 80093cc:	d5f7      	bpl.n	80093be <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd8>
 80093ce:	68ab      	ldr	r3, [r5, #8]
 80093d0:	f013 0f02 	tst.w	r3, #2
 80093d4:	e7f2      	b.n	80093bc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd6>
 80093d6:	6823      	ldr	r3, [r4, #0]
 80093d8:	9a04      	ldr	r2, [sp, #16]
 80093da:	4293      	cmp	r3, r2
 80093dc:	d004      	beq.n	80093e8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x102>
 80093de:	2300      	movs	r3, #0
 80093e0:	6023      	str	r3, [r4, #0]
 80093e2:	2302      	movs	r3, #2
 80093e4:	7123      	strb	r3, [r4, #4]
 80093e6:	e7ea      	b.n	80093be <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd8>
 80093e8:	b12b      	cbz	r3, 80093f6 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x110>
 80093ea:	7923      	ldrb	r3, [r4, #4]
 80093ec:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80093f0:	4313      	orrs	r3, r2
 80093f2:	7123      	strb	r3, [r4, #4]
 80093f4:	e7ae      	b.n	8009354 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x6e>
 80093f6:	9807      	ldr	r0, [sp, #28]
 80093f8:	2808      	cmp	r0, #8
 80093fa:	d0f2      	beq.n	80093e2 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xfc>
 80093fc:	2908      	cmp	r1, #8
 80093fe:	d0f0      	beq.n	80093e2 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xfc>
 8009400:	f7ff fdc6 	bl	8008f90 <_ZNKSt9type_info7__equalERKS_>
 8009404:	2800      	cmp	r0, #0
 8009406:	d1f0      	bne.n	80093ea <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x104>
 8009408:	e7eb      	b.n	80093e2 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xfc>

0800940a <_ZSt17__throw_bad_allocv>:
 800940a:	b508      	push	{r3, lr}
 800940c:	f000 fb46 	bl	8009a9c <abort>

08009410 <_ZSt28__throw_bad_array_new_lengthv>:
 8009410:	b508      	push	{r3, lr}
 8009412:	f000 fb43 	bl	8009a9c <abort>

08009416 <_ZSt19__throw_logic_errorPKc>:
 8009416:	b508      	push	{r3, lr}
 8009418:	f000 fb40 	bl	8009a9c <abort>

0800941c <_ZSt20__throw_length_errorPKc>:
 800941c:	b508      	push	{r3, lr}
 800941e:	f000 fb3d 	bl	8009a9c <abort>

08009422 <_ZSt24__throw_out_of_range_fmtPKcz>:
 8009422:	b40f      	push	{r0, r1, r2, r3}
 8009424:	b508      	push	{r3, lr}
 8009426:	f000 fb39 	bl	8009a9c <abort>

0800942a <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800942a:	b10a      	cbz	r2, 8009430 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 800942c:	f000 be75 	b.w	800a11a <memcpy>
 8009430:	4770      	bx	lr

08009432 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 8009432:	b10a      	cbz	r2, 8009438 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 8009434:	f000 bd6f 	b.w	8009f16 <memcmp>
 8009438:	4610      	mov	r0, r2
 800943a:	4770      	bx	lr

0800943c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 800943c:	f850 3b08 	ldr.w	r3, [r0], #8
 8009440:	1a1b      	subs	r3, r3, r0
 8009442:	4258      	negs	r0, r3
 8009444:	4158      	adcs	r0, r3
 8009446:	4770      	bx	lr

08009448 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8009448:	b508      	push	{r3, lr}
 800944a:	680b      	ldr	r3, [r1, #0]
 800944c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009450:	d302      	bcc.n	8009458 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8009452:	480d      	ldr	r0, [pc, #52]	@ (8009488 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8009454:	f7ff ffe2 	bl	800941c <_ZSt20__throw_length_errorPKc>
 8009458:	4293      	cmp	r3, r2
 800945a:	d90b      	bls.n	8009474 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800945c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8009460:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8009464:	d206      	bcs.n	8009474 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8009466:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800946a:	bf2a      	itet	cs
 800946c:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 8009470:	6008      	strcc	r0, [r1, #0]
 8009472:	600b      	strcs	r3, [r1, #0]
 8009474:	6808      	ldr	r0, [r1, #0]
 8009476:	3001      	adds	r0, #1
 8009478:	d501      	bpl.n	800947e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800947a:	f7ff ffc6 	bl	800940a <_ZSt17__throw_bad_allocv>
 800947e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009482:	f7ff bcef 	b.w	8008e64 <_Znwj>
 8009486:	bf00      	nop
 8009488:	0800c984 	.word	0x0800c984

0800948c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800948c:	b510      	push	{r4, lr}
 800948e:	4604      	mov	r4, r0
 8009490:	f7ff ffd4 	bl	800943c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8009494:	b920      	cbnz	r0, 80094a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 8009496:	6820      	ldr	r0, [r4, #0]
 8009498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800949c:	f000 b98f 	b.w	80097be <_ZdlPv>
 80094a0:	bd10      	pop	{r4, pc}
	...

080094a4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 80094a4:	b508      	push	{r3, lr}
 80094a6:	4603      	mov	r3, r0
 80094a8:	4608      	mov	r0, r1
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	4611      	mov	r1, r2
 80094ae:	4298      	cmp	r0, r3
 80094b0:	d903      	bls.n	80094ba <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
 80094b2:	4602      	mov	r2, r0
 80094b4:	4801      	ldr	r0, [pc, #4]	@ (80094bc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 80094b6:	f7ff ffb4 	bl	8009422 <_ZSt24__throw_out_of_range_fmtPKcz>
 80094ba:	bd08      	pop	{r3, pc}
 80094bc:	0800c99c 	.word	0x0800c99c

080094c0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 80094c0:	6840      	ldr	r0, [r0, #4]
 80094c2:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 80094c6:	3901      	subs	r1, #1
 80094c8:	1a09      	subs	r1, r1, r0
 80094ca:	4291      	cmp	r1, r2
 80094cc:	b508      	push	{r3, lr}
 80094ce:	d202      	bcs.n	80094d6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 80094d0:	4618      	mov	r0, r3
 80094d2:	f7ff ffa3 	bl	800941c <_ZSt20__throw_length_errorPKc>
 80094d6:	bd08      	pop	{r3, pc}

080094d8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 80094d8:	6803      	ldr	r3, [r0, #0]
 80094da:	428b      	cmp	r3, r1
 80094dc:	d806      	bhi.n	80094ec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 80094de:	6842      	ldr	r2, [r0, #4]
 80094e0:	4413      	add	r3, r2
 80094e2:	4299      	cmp	r1, r3
 80094e4:	bf94      	ite	ls
 80094e6:	2000      	movls	r0, #0
 80094e8:	2001      	movhi	r0, #1
 80094ea:	4770      	bx	lr
 80094ec:	2001      	movs	r0, #1
 80094ee:	4770      	bx	lr

080094f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80094f0:	2a01      	cmp	r2, #1
 80094f2:	b410      	push	{r4}
 80094f4:	d103      	bne.n	80094fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xe>
 80094f6:	780a      	ldrb	r2, [r1, #0]
 80094f8:	bc10      	pop	{r4}
 80094fa:	7002      	strb	r2, [r0, #0]
 80094fc:	4770      	bx	lr
 80094fe:	bc10      	pop	{r4}
 8009500:	f7ff bf93 	b.w	800942a <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08009504 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8009504:	2a01      	cmp	r2, #1
 8009506:	b430      	push	{r4, r5}
 8009508:	d103      	bne.n	8009512 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 800950a:	780b      	ldrb	r3, [r1, #0]
 800950c:	7003      	strb	r3, [r0, #0]
 800950e:	bc30      	pop	{r4, r5}
 8009510:	4770      	bx	lr
 8009512:	2a00      	cmp	r2, #0
 8009514:	d0fb      	beq.n	800950e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8009516:	bc30      	pop	{r4, r5}
 8009518:	f000 bd0d 	b.w	8009f36 <memmove>

0800951c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 800951c:	460b      	mov	r3, r1
 800951e:	2b01      	cmp	r3, #1
 8009520:	b410      	push	{r4}
 8009522:	4611      	mov	r1, r2
 8009524:	4604      	mov	r4, r0
 8009526:	d102      	bne.n	800952e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x12>
 8009528:	7022      	strb	r2, [r4, #0]
 800952a:	bc10      	pop	{r4}
 800952c:	4770      	bx	lr
 800952e:	2b00      	cmp	r3, #0
 8009530:	d0fb      	beq.n	800952a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 8009532:	461a      	mov	r2, r3
 8009534:	bc10      	pop	{r4}
 8009536:	f000 bd18 	b.w	8009f6a <memset>

0800953a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>:
 800953a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800953c:	290f      	cmp	r1, #15
 800953e:	4604      	mov	r4, r0
 8009540:	4615      	mov	r5, r2
 8009542:	9101      	str	r1, [sp, #4]
 8009544:	d906      	bls.n	8009554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x1a>
 8009546:	2200      	movs	r2, #0
 8009548:	a901      	add	r1, sp, #4
 800954a:	f7ff ff7d 	bl	8009448 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800954e:	9b01      	ldr	r3, [sp, #4]
 8009550:	6020      	str	r0, [r4, #0]
 8009552:	60a3      	str	r3, [r4, #8]
 8009554:	9901      	ldr	r1, [sp, #4]
 8009556:	b119      	cbz	r1, 8009560 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x26>
 8009558:	462a      	mov	r2, r5
 800955a:	6820      	ldr	r0, [r4, #0]
 800955c:	f7ff ffde 	bl	800951c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 8009560:	2100      	movs	r1, #0
 8009562:	9b01      	ldr	r3, [sp, #4]
 8009564:	6822      	ldr	r2, [r4, #0]
 8009566:	6063      	str	r3, [r4, #4]
 8009568:	54d1      	strb	r1, [r2, r3]
 800956a:	b003      	add	sp, #12
 800956c:	bd30      	pop	{r4, r5, pc}

0800956e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 800956e:	b508      	push	{r3, lr}
 8009570:	1a52      	subs	r2, r2, r1
 8009572:	f7ff ffbd 	bl	80094f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009576:	bd08      	pop	{r3, pc}

08009578 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8009578:	b508      	push	{r3, lr}
 800957a:	1a52      	subs	r2, r2, r1
 800957c:	f7ff ffb8 	bl	80094f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009580:	bd08      	pop	{r3, pc}

08009582 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 8009582:	b510      	push	{r4, lr}
 8009584:	4604      	mov	r4, r0
 8009586:	f7ff ff59 	bl	800943c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 800958a:	b908      	cbnz	r0, 8009590 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 800958c:	68a0      	ldr	r0, [r4, #8]
 800958e:	bd10      	pop	{r4, pc}
 8009590:	200f      	movs	r0, #15
 8009592:	e7fc      	b.n	800958e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

08009594 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 8009594:	4288      	cmp	r0, r1
 8009596:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009598:	4604      	mov	r4, r0
 800959a:	460e      	mov	r6, r1
 800959c:	d01d      	beq.n	80095da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x46>
 800959e:	684d      	ldr	r5, [r1, #4]
 80095a0:	f7ff ffef 	bl	8009582 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 80095a4:	42a8      	cmp	r0, r5
 80095a6:	4602      	mov	r2, r0
 80095a8:	d211      	bcs.n	80095ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x3a>
 80095aa:	a901      	add	r1, sp, #4
 80095ac:	4620      	mov	r0, r4
 80095ae:	9501      	str	r5, [sp, #4]
 80095b0:	f7ff ff4a 	bl	8009448 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80095b4:	4607      	mov	r7, r0
 80095b6:	4620      	mov	r0, r4
 80095b8:	f7ff ff68 	bl	800948c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80095bc:	9b01      	ldr	r3, [sp, #4]
 80095be:	6027      	str	r7, [r4, #0]
 80095c0:	60a3      	str	r3, [r4, #8]
 80095c2:	462a      	mov	r2, r5
 80095c4:	6831      	ldr	r1, [r6, #0]
 80095c6:	6820      	ldr	r0, [r4, #0]
 80095c8:	f7ff ff92 	bl	80094f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80095cc:	e001      	b.n	80095d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x3e>
 80095ce:	2d00      	cmp	r5, #0
 80095d0:	d1f7      	bne.n	80095c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x2e>
 80095d2:	2200      	movs	r2, #0
 80095d4:	6823      	ldr	r3, [r4, #0]
 80095d6:	6065      	str	r5, [r4, #4]
 80095d8:	555a      	strb	r2, [r3, r5]
 80095da:	b003      	add	sp, #12
 80095dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080095de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80095de:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80095e2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80095e4:	461f      	mov	r7, r3
 80095e6:	6843      	ldr	r3, [r0, #4]
 80095e8:	eb01 0802 	add.w	r8, r1, r2
 80095ec:	1ab2      	subs	r2, r6, r2
 80095ee:	441a      	add	r2, r3
 80095f0:	4604      	mov	r4, r0
 80095f2:	460d      	mov	r5, r1
 80095f4:	eba3 0908 	sub.w	r9, r3, r8
 80095f8:	9201      	str	r2, [sp, #4]
 80095fa:	f7ff ffc2 	bl	8009582 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 80095fe:	a901      	add	r1, sp, #4
 8009600:	4602      	mov	r2, r0
 8009602:	4620      	mov	r0, r4
 8009604:	f7ff ff20 	bl	8009448 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8009608:	4682      	mov	sl, r0
 800960a:	b11d      	cbz	r5, 8009614 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x36>
 800960c:	462a      	mov	r2, r5
 800960e:	6821      	ldr	r1, [r4, #0]
 8009610:	f7ff ff6e 	bl	80094f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009614:	b137      	cbz	r7, 8009624 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 8009616:	b12e      	cbz	r6, 8009624 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 8009618:	4632      	mov	r2, r6
 800961a:	4639      	mov	r1, r7
 800961c:	eb0a 0005 	add.w	r0, sl, r5
 8009620:	f7ff ff66 	bl	80094f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009624:	f1b9 0f00 	cmp.w	r9, #0
 8009628:	d007      	beq.n	800963a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x5c>
 800962a:	6821      	ldr	r1, [r4, #0]
 800962c:	4435      	add	r5, r6
 800962e:	464a      	mov	r2, r9
 8009630:	4441      	add	r1, r8
 8009632:	eb0a 0005 	add.w	r0, sl, r5
 8009636:	f7ff ff5b 	bl	80094f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800963a:	4620      	mov	r0, r4
 800963c:	f7ff ff26 	bl	800948c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8009640:	9b01      	ldr	r3, [sp, #4]
 8009642:	f8c4 a000 	str.w	sl, [r4]
 8009646:	60a3      	str	r3, [r4, #8]
 8009648:	b002      	add	sp, #8
 800964a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08009650 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 8009650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009654:	4614      	mov	r4, r2
 8009656:	4680      	mov	r8, r0
 8009658:	b085      	sub	sp, #20
 800965a:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 800965c:	4689      	mov	r9, r1
 800965e:	462a      	mov	r2, r5
 8009660:	4621      	mov	r1, r4
 8009662:	461f      	mov	r7, r3
 8009664:	4b37      	ldr	r3, [pc, #220]	@ (8009744 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf4>)
 8009666:	f7ff ff2b 	bl	80094c0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800966a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800966e:	4640      	mov	r0, r8
 8009670:	eba5 0b04 	sub.w	fp, r5, r4
 8009674:	eb03 0a0b 	add.w	sl, r3, fp
 8009678:	9303      	str	r3, [sp, #12]
 800967a:	f7ff ff82 	bl	8009582 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 800967e:	4550      	cmp	r0, sl
 8009680:	d354      	bcc.n	800972c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xdc>
 8009682:	f8d8 6000 	ldr.w	r6, [r8]
 8009686:	9b03      	ldr	r3, [sp, #12]
 8009688:	444e      	add	r6, r9
 800968a:	4639      	mov	r1, r7
 800968c:	44a1      	add	r9, r4
 800968e:	4640      	mov	r0, r8
 8009690:	eba3 0909 	sub.w	r9, r3, r9
 8009694:	f7ff ff20 	bl	80094d8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 8009698:	b180      	cbz	r0, 80096bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6c>
 800969a:	f1b9 0f00 	cmp.w	r9, #0
 800969e:	d006      	beq.n	80096ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5e>
 80096a0:	42ac      	cmp	r4, r5
 80096a2:	d004      	beq.n	80096ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5e>
 80096a4:	464a      	mov	r2, r9
 80096a6:	1931      	adds	r1, r6, r4
 80096a8:	1970      	adds	r0, r6, r5
 80096aa:	f7ff ff2b 	bl	8009504 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80096ae:	b315      	cbz	r5, 80096f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 80096b0:	462a      	mov	r2, r5
 80096b2:	4639      	mov	r1, r7
 80096b4:	4630      	mov	r0, r6
 80096b6:	f7ff ff1b 	bl	80094f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80096ba:	e01c      	b.n	80096f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 80096bc:	b135      	cbz	r5, 80096cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7c>
 80096be:	42ac      	cmp	r4, r5
 80096c0:	d33c      	bcc.n	800973c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xec>
 80096c2:	462a      	mov	r2, r5
 80096c4:	4639      	mov	r1, r7
 80096c6:	4630      	mov	r0, r6
 80096c8:	f7ff ff1c 	bl	8009504 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80096cc:	f1b9 0f00 	cmp.w	r9, #0
 80096d0:	d011      	beq.n	80096f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 80096d2:	42ac      	cmp	r4, r5
 80096d4:	d00f      	beq.n	80096f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 80096d6:	464a      	mov	r2, r9
 80096d8:	1931      	adds	r1, r6, r4
 80096da:	1970      	adds	r0, r6, r5
 80096dc:	f7ff ff12 	bl	8009504 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80096e0:	42ac      	cmp	r4, r5
 80096e2:	d208      	bcs.n	80096f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 80096e4:	4434      	add	r4, r6
 80096e6:	197b      	adds	r3, r7, r5
 80096e8:	429c      	cmp	r4, r3
 80096ea:	d30f      	bcc.n	800970c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbc>
 80096ec:	462a      	mov	r2, r5
 80096ee:	4639      	mov	r1, r7
 80096f0:	4630      	mov	r0, r6
 80096f2:	f7ff ff07 	bl	8009504 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80096f6:	2200      	movs	r2, #0
 80096f8:	4640      	mov	r0, r8
 80096fa:	f8d8 3000 	ldr.w	r3, [r8]
 80096fe:	f8c8 a004 	str.w	sl, [r8, #4]
 8009702:	f803 200a 	strb.w	r2, [r3, sl]
 8009706:	b005      	add	sp, #20
 8009708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800970c:	42bc      	cmp	r4, r7
 800970e:	d803      	bhi.n	8009718 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc8>
 8009710:	462a      	mov	r2, r5
 8009712:	eb07 010b 	add.w	r1, r7, fp
 8009716:	e7cd      	b.n	80096b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x64>
 8009718:	1be4      	subs	r4, r4, r7
 800971a:	4622      	mov	r2, r4
 800971c:	4639      	mov	r1, r7
 800971e:	4630      	mov	r0, r6
 8009720:	f7ff fef0 	bl	8009504 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8009724:	1b2a      	subs	r2, r5, r4
 8009726:	1971      	adds	r1, r6, r5
 8009728:	1930      	adds	r0, r6, r4
 800972a:	e7c4      	b.n	80096b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 800972c:	463b      	mov	r3, r7
 800972e:	4622      	mov	r2, r4
 8009730:	4649      	mov	r1, r9
 8009732:	4640      	mov	r0, r8
 8009734:	9500      	str	r5, [sp, #0]
 8009736:	f7ff ff52 	bl	80095de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800973a:	e7dc      	b.n	80096f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 800973c:	f1b9 0f00 	cmp.w	r9, #0
 8009740:	d0d0      	beq.n	80096e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x94>
 8009742:	e7c8      	b.n	80096d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x86>
 8009744:	0800c9e9 	.word	0x0800c9e9

08009748 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>:
 8009748:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800974a:	4604      	mov	r4, r0
 800974c:	460f      	mov	r7, r1
 800974e:	4615      	mov	r5, r2
 8009750:	4a08      	ldr	r2, [pc, #32]	@ (8009774 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj+0x2c>)
 8009752:	461e      	mov	r6, r3
 8009754:	f7ff fea6 	bl	80094a4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8009758:	6862      	ldr	r2, [r4, #4]
 800975a:	9b08      	ldr	r3, [sp, #32]
 800975c:	1bd2      	subs	r2, r2, r7
 800975e:	42aa      	cmp	r2, r5
 8009760:	4601      	mov	r1, r0
 8009762:	9300      	str	r3, [sp, #0]
 8009764:	bf28      	it	cs
 8009766:	462a      	movcs	r2, r5
 8009768:	4633      	mov	r3, r6
 800976a:	4620      	mov	r0, r4
 800976c:	f7ff ff70 	bl	8009650 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8009770:	b003      	add	sp, #12
 8009772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009774:	0800c9d3 	.word	0x0800c9d3

08009778 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>:
 8009778:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800977a:	4605      	mov	r5, r0
 800977c:	4610      	mov	r0, r2
 800977e:	4614      	mov	r4, r2
 8009780:	460e      	mov	r6, r1
 8009782:	f7f6 fcef 	bl	8000164 <strlen>
 8009786:	4623      	mov	r3, r4
 8009788:	9000      	str	r0, [sp, #0]
 800978a:	2200      	movs	r2, #0
 800978c:	4631      	mov	r1, r6
 800978e:	4628      	mov	r0, r5
 8009790:	f7ff ffda 	bl	8009748 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 8009794:	b002      	add	sp, #8
 8009796:	bd70      	pop	{r4, r5, r6, pc}

08009798 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
 8009798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800979a:	6847      	ldr	r7, [r0, #4]
 800979c:	4605      	mov	r5, r0
 800979e:	4608      	mov	r0, r1
 80097a0:	460e      	mov	r6, r1
 80097a2:	f7f6 fcdf 	bl	8000164 <strlen>
 80097a6:	4287      	cmp	r7, r0
 80097a8:	4604      	mov	r4, r0
 80097aa:	463a      	mov	r2, r7
 80097ac:	4631      	mov	r1, r6
 80097ae:	bf28      	it	cs
 80097b0:	4602      	movcs	r2, r0
 80097b2:	6828      	ldr	r0, [r5, #0]
 80097b4:	f7ff fe3d 	bl	8009432 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 80097b8:	b900      	cbnz	r0, 80097bc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
 80097ba:	1b38      	subs	r0, r7, r4
 80097bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080097be <_ZdlPv>:
 80097be:	f000 b983 	b.w	8009ac8 <free>
	...

080097c4 <_ZSt15get_new_handlerv>:
 80097c4:	4b02      	ldr	r3, [pc, #8]	@ (80097d0 <_ZSt15get_new_handlerv+0xc>)
 80097c6:	6818      	ldr	r0, [r3, #0]
 80097c8:	f3bf 8f5b 	dmb	ish
 80097cc:	4770      	bx	lr
 80097ce:	bf00      	nop
 80097d0:	200006f4 	.word	0x200006f4
 80097d4:	00000000 	.word	0x00000000

080097d8 <ceil>:
 80097d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097dc:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80097e0:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 80097e4:	2e13      	cmp	r6, #19
 80097e6:	4602      	mov	r2, r0
 80097e8:	460b      	mov	r3, r1
 80097ea:	460c      	mov	r4, r1
 80097ec:	4605      	mov	r5, r0
 80097ee:	4680      	mov	r8, r0
 80097f0:	dc2f      	bgt.n	8009852 <ceil+0x7a>
 80097f2:	2e00      	cmp	r6, #0
 80097f4:	da11      	bge.n	800981a <ceil+0x42>
 80097f6:	a332      	add	r3, pc, #200	@ (adr r3, 80098c0 <ceil+0xe8>)
 80097f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097fc:	f7f6 fdea 	bl	80003d4 <__adddf3>
 8009800:	2200      	movs	r2, #0
 8009802:	2300      	movs	r3, #0
 8009804:	f7f7 f81a 	bl	800083c <__aeabi_dcmpgt>
 8009808:	b120      	cbz	r0, 8009814 <ceil+0x3c>
 800980a:	2c00      	cmp	r4, #0
 800980c:	db51      	blt.n	80098b2 <ceil+0xda>
 800980e:	4325      	orrs	r5, r4
 8009810:	d153      	bne.n	80098ba <ceil+0xe2>
 8009812:	462c      	mov	r4, r5
 8009814:	4623      	mov	r3, r4
 8009816:	462a      	mov	r2, r5
 8009818:	e024      	b.n	8009864 <ceil+0x8c>
 800981a:	4f2b      	ldr	r7, [pc, #172]	@ (80098c8 <ceil+0xf0>)
 800981c:	4137      	asrs	r7, r6
 800981e:	ea01 0c07 	and.w	ip, r1, r7
 8009822:	ea5c 0c00 	orrs.w	ip, ip, r0
 8009826:	d01d      	beq.n	8009864 <ceil+0x8c>
 8009828:	a325      	add	r3, pc, #148	@ (adr r3, 80098c0 <ceil+0xe8>)
 800982a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982e:	f7f6 fdd1 	bl	80003d4 <__adddf3>
 8009832:	2200      	movs	r2, #0
 8009834:	2300      	movs	r3, #0
 8009836:	f7f7 f801 	bl	800083c <__aeabi_dcmpgt>
 800983a:	2800      	cmp	r0, #0
 800983c:	d0ea      	beq.n	8009814 <ceil+0x3c>
 800983e:	2c00      	cmp	r4, #0
 8009840:	bfc2      	ittt	gt
 8009842:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 8009846:	4133      	asrgt	r3, r6
 8009848:	18e4      	addgt	r4, r4, r3
 800984a:	2500      	movs	r5, #0
 800984c:	ea24 0407 	bic.w	r4, r4, r7
 8009850:	e7e0      	b.n	8009814 <ceil+0x3c>
 8009852:	2e33      	cmp	r6, #51	@ 0x33
 8009854:	dd0a      	ble.n	800986c <ceil+0x94>
 8009856:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800985a:	d103      	bne.n	8009864 <ceil+0x8c>
 800985c:	f7f6 fdba 	bl	80003d4 <__adddf3>
 8009860:	4602      	mov	r2, r0
 8009862:	460b      	mov	r3, r1
 8009864:	4610      	mov	r0, r2
 8009866:	4619      	mov	r1, r3
 8009868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800986c:	f04f 3cff 	mov.w	ip, #4294967295
 8009870:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8009874:	fa2c f707 	lsr.w	r7, ip, r7
 8009878:	4238      	tst	r0, r7
 800987a:	d0f3      	beq.n	8009864 <ceil+0x8c>
 800987c:	a310      	add	r3, pc, #64	@ (adr r3, 80098c0 <ceil+0xe8>)
 800987e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009882:	f7f6 fda7 	bl	80003d4 <__adddf3>
 8009886:	2200      	movs	r2, #0
 8009888:	2300      	movs	r3, #0
 800988a:	f7f6 ffd7 	bl	800083c <__aeabi_dcmpgt>
 800988e:	2800      	cmp	r0, #0
 8009890:	d0c0      	beq.n	8009814 <ceil+0x3c>
 8009892:	2c00      	cmp	r4, #0
 8009894:	dd0a      	ble.n	80098ac <ceil+0xd4>
 8009896:	2e14      	cmp	r6, #20
 8009898:	d101      	bne.n	800989e <ceil+0xc6>
 800989a:	3401      	adds	r4, #1
 800989c:	e006      	b.n	80098ac <ceil+0xd4>
 800989e:	2301      	movs	r3, #1
 80098a0:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80098a4:	40b3      	lsls	r3, r6
 80098a6:	441d      	add	r5, r3
 80098a8:	45a8      	cmp	r8, r5
 80098aa:	d8f6      	bhi.n	800989a <ceil+0xc2>
 80098ac:	ea25 0507 	bic.w	r5, r5, r7
 80098b0:	e7b0      	b.n	8009814 <ceil+0x3c>
 80098b2:	2500      	movs	r5, #0
 80098b4:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 80098b8:	e7ac      	b.n	8009814 <ceil+0x3c>
 80098ba:	2500      	movs	r5, #0
 80098bc:	4c03      	ldr	r4, [pc, #12]	@ (80098cc <ceil+0xf4>)
 80098be:	e7a9      	b.n	8009814 <ceil+0x3c>
 80098c0:	8800759c 	.word	0x8800759c
 80098c4:	7e37e43c 	.word	0x7e37e43c
 80098c8:	000fffff 	.word	0x000fffff
 80098cc:	3ff00000 	.word	0x3ff00000

080098d0 <floor>:
 80098d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098d4:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80098d8:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 80098dc:	2e13      	cmp	r6, #19
 80098de:	4602      	mov	r2, r0
 80098e0:	460b      	mov	r3, r1
 80098e2:	460c      	mov	r4, r1
 80098e4:	4605      	mov	r5, r0
 80098e6:	4680      	mov	r8, r0
 80098e8:	dc35      	bgt.n	8009956 <floor+0x86>
 80098ea:	2e00      	cmp	r6, #0
 80098ec:	da17      	bge.n	800991e <floor+0x4e>
 80098ee:	a334      	add	r3, pc, #208	@ (adr r3, 80099c0 <floor+0xf0>)
 80098f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f4:	f7f6 fd6e 	bl	80003d4 <__adddf3>
 80098f8:	2200      	movs	r2, #0
 80098fa:	2300      	movs	r3, #0
 80098fc:	f7f6 ff9e 	bl	800083c <__aeabi_dcmpgt>
 8009900:	b150      	cbz	r0, 8009918 <floor+0x48>
 8009902:	2c00      	cmp	r4, #0
 8009904:	da57      	bge.n	80099b6 <floor+0xe6>
 8009906:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800990a:	432c      	orrs	r4, r5
 800990c:	2500      	movs	r5, #0
 800990e:	42ac      	cmp	r4, r5
 8009910:	4c2d      	ldr	r4, [pc, #180]	@ (80099c8 <floor+0xf8>)
 8009912:	bf08      	it	eq
 8009914:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8009918:	4623      	mov	r3, r4
 800991a:	462a      	mov	r2, r5
 800991c:	e024      	b.n	8009968 <floor+0x98>
 800991e:	4f2b      	ldr	r7, [pc, #172]	@ (80099cc <floor+0xfc>)
 8009920:	4137      	asrs	r7, r6
 8009922:	ea01 0c07 	and.w	ip, r1, r7
 8009926:	ea5c 0c00 	orrs.w	ip, ip, r0
 800992a:	d01d      	beq.n	8009968 <floor+0x98>
 800992c:	a324      	add	r3, pc, #144	@ (adr r3, 80099c0 <floor+0xf0>)
 800992e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009932:	f7f6 fd4f 	bl	80003d4 <__adddf3>
 8009936:	2200      	movs	r2, #0
 8009938:	2300      	movs	r3, #0
 800993a:	f7f6 ff7f 	bl	800083c <__aeabi_dcmpgt>
 800993e:	2800      	cmp	r0, #0
 8009940:	d0ea      	beq.n	8009918 <floor+0x48>
 8009942:	2c00      	cmp	r4, #0
 8009944:	bfbe      	ittt	lt
 8009946:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800994a:	4133      	asrlt	r3, r6
 800994c:	18e4      	addlt	r4, r4, r3
 800994e:	2500      	movs	r5, #0
 8009950:	ea24 0407 	bic.w	r4, r4, r7
 8009954:	e7e0      	b.n	8009918 <floor+0x48>
 8009956:	2e33      	cmp	r6, #51	@ 0x33
 8009958:	dd0a      	ble.n	8009970 <floor+0xa0>
 800995a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800995e:	d103      	bne.n	8009968 <floor+0x98>
 8009960:	f7f6 fd38 	bl	80003d4 <__adddf3>
 8009964:	4602      	mov	r2, r0
 8009966:	460b      	mov	r3, r1
 8009968:	4610      	mov	r0, r2
 800996a:	4619      	mov	r1, r3
 800996c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009970:	f04f 3cff 	mov.w	ip, #4294967295
 8009974:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8009978:	fa2c f707 	lsr.w	r7, ip, r7
 800997c:	4207      	tst	r7, r0
 800997e:	d0f3      	beq.n	8009968 <floor+0x98>
 8009980:	a30f      	add	r3, pc, #60	@ (adr r3, 80099c0 <floor+0xf0>)
 8009982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009986:	f7f6 fd25 	bl	80003d4 <__adddf3>
 800998a:	2200      	movs	r2, #0
 800998c:	2300      	movs	r3, #0
 800998e:	f7f6 ff55 	bl	800083c <__aeabi_dcmpgt>
 8009992:	2800      	cmp	r0, #0
 8009994:	d0c0      	beq.n	8009918 <floor+0x48>
 8009996:	2c00      	cmp	r4, #0
 8009998:	da0a      	bge.n	80099b0 <floor+0xe0>
 800999a:	2e14      	cmp	r6, #20
 800999c:	d101      	bne.n	80099a2 <floor+0xd2>
 800999e:	3401      	adds	r4, #1
 80099a0:	e006      	b.n	80099b0 <floor+0xe0>
 80099a2:	2301      	movs	r3, #1
 80099a4:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80099a8:	40b3      	lsls	r3, r6
 80099aa:	441d      	add	r5, r3
 80099ac:	4545      	cmp	r5, r8
 80099ae:	d3f6      	bcc.n	800999e <floor+0xce>
 80099b0:	ea25 0507 	bic.w	r5, r5, r7
 80099b4:	e7b0      	b.n	8009918 <floor+0x48>
 80099b6:	2500      	movs	r5, #0
 80099b8:	462c      	mov	r4, r5
 80099ba:	e7ad      	b.n	8009918 <floor+0x48>
 80099bc:	f3af 8000 	nop.w
 80099c0:	8800759c 	.word	0x8800759c
 80099c4:	7e37e43c 	.word	0x7e37e43c
 80099c8:	bff00000 	.word	0xbff00000
 80099cc:	000fffff 	.word	0x000fffff

080099d0 <floorf>:
 80099d0:	b570      	push	{r4, r5, r6, lr}
 80099d2:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 80099d6:	3d7f      	subs	r5, #127	@ 0x7f
 80099d8:	2d16      	cmp	r5, #22
 80099da:	4601      	mov	r1, r0
 80099dc:	4604      	mov	r4, r0
 80099de:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 80099e2:	dc26      	bgt.n	8009a32 <floorf+0x62>
 80099e4:	2d00      	cmp	r5, #0
 80099e6:	da0f      	bge.n	8009a08 <floorf+0x38>
 80099e8:	4917      	ldr	r1, [pc, #92]	@ (8009a48 <floorf+0x78>)
 80099ea:	f7f6 ffa7 	bl	800093c <__addsf3>
 80099ee:	2100      	movs	r1, #0
 80099f0:	f7f7 fa68 	bl	8000ec4 <__aeabi_fcmpgt>
 80099f4:	b130      	cbz	r0, 8009a04 <floorf+0x34>
 80099f6:	2c00      	cmp	r4, #0
 80099f8:	da23      	bge.n	8009a42 <floorf+0x72>
 80099fa:	2e00      	cmp	r6, #0
 80099fc:	4c13      	ldr	r4, [pc, #76]	@ (8009a4c <floorf+0x7c>)
 80099fe:	bf08      	it	eq
 8009a00:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8009a04:	4621      	mov	r1, r4
 8009a06:	e01a      	b.n	8009a3e <floorf+0x6e>
 8009a08:	4e11      	ldr	r6, [pc, #68]	@ (8009a50 <floorf+0x80>)
 8009a0a:	412e      	asrs	r6, r5
 8009a0c:	4230      	tst	r0, r6
 8009a0e:	d016      	beq.n	8009a3e <floorf+0x6e>
 8009a10:	490d      	ldr	r1, [pc, #52]	@ (8009a48 <floorf+0x78>)
 8009a12:	f7f6 ff93 	bl	800093c <__addsf3>
 8009a16:	2100      	movs	r1, #0
 8009a18:	f7f7 fa54 	bl	8000ec4 <__aeabi_fcmpgt>
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	d0f1      	beq.n	8009a04 <floorf+0x34>
 8009a20:	2c00      	cmp	r4, #0
 8009a22:	bfbe      	ittt	lt
 8009a24:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 8009a28:	412b      	asrlt	r3, r5
 8009a2a:	18e4      	addlt	r4, r4, r3
 8009a2c:	ea24 0406 	bic.w	r4, r4, r6
 8009a30:	e7e8      	b.n	8009a04 <floorf+0x34>
 8009a32:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 8009a36:	d302      	bcc.n	8009a3e <floorf+0x6e>
 8009a38:	f7f6 ff80 	bl	800093c <__addsf3>
 8009a3c:	4601      	mov	r1, r0
 8009a3e:	4608      	mov	r0, r1
 8009a40:	bd70      	pop	{r4, r5, r6, pc}
 8009a42:	2400      	movs	r4, #0
 8009a44:	e7de      	b.n	8009a04 <floorf+0x34>
 8009a46:	bf00      	nop
 8009a48:	7149f2ca 	.word	0x7149f2ca
 8009a4c:	bf800000 	.word	0xbf800000
 8009a50:	007fffff 	.word	0x007fffff

08009a54 <roundf>:
 8009a54:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8009a58:	3b7f      	subs	r3, #127	@ 0x7f
 8009a5a:	2b16      	cmp	r3, #22
 8009a5c:	4601      	mov	r1, r0
 8009a5e:	b510      	push	{r4, lr}
 8009a60:	dc14      	bgt.n	8009a8c <roundf+0x38>
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	da07      	bge.n	8009a76 <roundf+0x22>
 8009a66:	3301      	adds	r3, #1
 8009a68:	f000 4100 	and.w	r1, r0, #2147483648	@ 0x80000000
 8009a6c:	d101      	bne.n	8009a72 <roundf+0x1e>
 8009a6e:	f041 517e 	orr.w	r1, r1, #1065353216	@ 0x3f800000
 8009a72:	4608      	mov	r0, r1
 8009a74:	bd10      	pop	{r4, pc}
 8009a76:	4a08      	ldr	r2, [pc, #32]	@ (8009a98 <roundf+0x44>)
 8009a78:	411a      	asrs	r2, r3
 8009a7a:	4202      	tst	r2, r0
 8009a7c:	d0f9      	beq.n	8009a72 <roundf+0x1e>
 8009a7e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009a82:	4119      	asrs	r1, r3
 8009a84:	4401      	add	r1, r0
 8009a86:	ea21 0102 	bic.w	r1, r1, r2
 8009a8a:	e7f2      	b.n	8009a72 <roundf+0x1e>
 8009a8c:	2b80      	cmp	r3, #128	@ 0x80
 8009a8e:	d1f0      	bne.n	8009a72 <roundf+0x1e>
 8009a90:	f7f6 ff54 	bl	800093c <__addsf3>
 8009a94:	4601      	mov	r1, r0
 8009a96:	e7ec      	b.n	8009a72 <roundf+0x1e>
 8009a98:	007fffff 	.word	0x007fffff

08009a9c <abort>:
 8009a9c:	2006      	movs	r0, #6
 8009a9e:	b508      	push	{r3, lr}
 8009aa0:	f000 fa94 	bl	8009fcc <raise>
 8009aa4:	2001      	movs	r0, #1
 8009aa6:	f001 f8fd 	bl	800aca4 <_exit>

08009aaa <atexit>:
 8009aaa:	2300      	movs	r3, #0
 8009aac:	4601      	mov	r1, r0
 8009aae:	461a      	mov	r2, r3
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f000 bb41 	b.w	800a138 <__register_exitproc>
	...

08009ab8 <malloc>:
 8009ab8:	4b02      	ldr	r3, [pc, #8]	@ (8009ac4 <malloc+0xc>)
 8009aba:	4601      	mov	r1, r0
 8009abc:	6818      	ldr	r0, [r3, #0]
 8009abe:	f000 b82d 	b.w	8009b1c <_malloc_r>
 8009ac2:	bf00      	nop
 8009ac4:	2000001c 	.word	0x2000001c

08009ac8 <free>:
 8009ac8:	4b02      	ldr	r3, [pc, #8]	@ (8009ad4 <free+0xc>)
 8009aca:	4601      	mov	r1, r0
 8009acc:	6818      	ldr	r0, [r3, #0]
 8009ace:	f000 bbaf 	b.w	800a230 <_free_r>
 8009ad2:	bf00      	nop
 8009ad4:	2000001c 	.word	0x2000001c

08009ad8 <sbrk_aligned>:
 8009ad8:	b570      	push	{r4, r5, r6, lr}
 8009ada:	4e0f      	ldr	r6, [pc, #60]	@ (8009b18 <sbrk_aligned+0x40>)
 8009adc:	460c      	mov	r4, r1
 8009ade:	6831      	ldr	r1, [r6, #0]
 8009ae0:	4605      	mov	r5, r0
 8009ae2:	b911      	cbnz	r1, 8009aea <sbrk_aligned+0x12>
 8009ae4:	f000 fac2 	bl	800a06c <_sbrk_r>
 8009ae8:	6030      	str	r0, [r6, #0]
 8009aea:	4621      	mov	r1, r4
 8009aec:	4628      	mov	r0, r5
 8009aee:	f000 fabd 	bl	800a06c <_sbrk_r>
 8009af2:	1c43      	adds	r3, r0, #1
 8009af4:	d103      	bne.n	8009afe <sbrk_aligned+0x26>
 8009af6:	f04f 34ff 	mov.w	r4, #4294967295
 8009afa:	4620      	mov	r0, r4
 8009afc:	bd70      	pop	{r4, r5, r6, pc}
 8009afe:	1cc4      	adds	r4, r0, #3
 8009b00:	f024 0403 	bic.w	r4, r4, #3
 8009b04:	42a0      	cmp	r0, r4
 8009b06:	d0f8      	beq.n	8009afa <sbrk_aligned+0x22>
 8009b08:	1a21      	subs	r1, r4, r0
 8009b0a:	4628      	mov	r0, r5
 8009b0c:	f000 faae 	bl	800a06c <_sbrk_r>
 8009b10:	3001      	adds	r0, #1
 8009b12:	d1f2      	bne.n	8009afa <sbrk_aligned+0x22>
 8009b14:	e7ef      	b.n	8009af6 <sbrk_aligned+0x1e>
 8009b16:	bf00      	nop
 8009b18:	200006f8 	.word	0x200006f8

08009b1c <_malloc_r>:
 8009b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b20:	1ccd      	adds	r5, r1, #3
 8009b22:	f025 0503 	bic.w	r5, r5, #3
 8009b26:	3508      	adds	r5, #8
 8009b28:	2d0c      	cmp	r5, #12
 8009b2a:	bf38      	it	cc
 8009b2c:	250c      	movcc	r5, #12
 8009b2e:	2d00      	cmp	r5, #0
 8009b30:	4606      	mov	r6, r0
 8009b32:	db01      	blt.n	8009b38 <_malloc_r+0x1c>
 8009b34:	42a9      	cmp	r1, r5
 8009b36:	d904      	bls.n	8009b42 <_malloc_r+0x26>
 8009b38:	230c      	movs	r3, #12
 8009b3a:	6033      	str	r3, [r6, #0]
 8009b3c:	2000      	movs	r0, #0
 8009b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009c18 <_malloc_r+0xfc>
 8009b46:	f000 f869 	bl	8009c1c <__malloc_lock>
 8009b4a:	f8d8 3000 	ldr.w	r3, [r8]
 8009b4e:	461c      	mov	r4, r3
 8009b50:	bb44      	cbnz	r4, 8009ba4 <_malloc_r+0x88>
 8009b52:	4629      	mov	r1, r5
 8009b54:	4630      	mov	r0, r6
 8009b56:	f7ff ffbf 	bl	8009ad8 <sbrk_aligned>
 8009b5a:	1c43      	adds	r3, r0, #1
 8009b5c:	4604      	mov	r4, r0
 8009b5e:	d158      	bne.n	8009c12 <_malloc_r+0xf6>
 8009b60:	f8d8 4000 	ldr.w	r4, [r8]
 8009b64:	4627      	mov	r7, r4
 8009b66:	2f00      	cmp	r7, #0
 8009b68:	d143      	bne.n	8009bf2 <_malloc_r+0xd6>
 8009b6a:	2c00      	cmp	r4, #0
 8009b6c:	d04b      	beq.n	8009c06 <_malloc_r+0xea>
 8009b6e:	6823      	ldr	r3, [r4, #0]
 8009b70:	4639      	mov	r1, r7
 8009b72:	4630      	mov	r0, r6
 8009b74:	eb04 0903 	add.w	r9, r4, r3
 8009b78:	f000 fa78 	bl	800a06c <_sbrk_r>
 8009b7c:	4581      	cmp	r9, r0
 8009b7e:	d142      	bne.n	8009c06 <_malloc_r+0xea>
 8009b80:	6821      	ldr	r1, [r4, #0]
 8009b82:	4630      	mov	r0, r6
 8009b84:	1a6d      	subs	r5, r5, r1
 8009b86:	4629      	mov	r1, r5
 8009b88:	f7ff ffa6 	bl	8009ad8 <sbrk_aligned>
 8009b8c:	3001      	adds	r0, #1
 8009b8e:	d03a      	beq.n	8009c06 <_malloc_r+0xea>
 8009b90:	6823      	ldr	r3, [r4, #0]
 8009b92:	442b      	add	r3, r5
 8009b94:	6023      	str	r3, [r4, #0]
 8009b96:	f8d8 3000 	ldr.w	r3, [r8]
 8009b9a:	685a      	ldr	r2, [r3, #4]
 8009b9c:	bb62      	cbnz	r2, 8009bf8 <_malloc_r+0xdc>
 8009b9e:	f8c8 7000 	str.w	r7, [r8]
 8009ba2:	e00f      	b.n	8009bc4 <_malloc_r+0xa8>
 8009ba4:	6822      	ldr	r2, [r4, #0]
 8009ba6:	1b52      	subs	r2, r2, r5
 8009ba8:	d420      	bmi.n	8009bec <_malloc_r+0xd0>
 8009baa:	2a0b      	cmp	r2, #11
 8009bac:	d917      	bls.n	8009bde <_malloc_r+0xc2>
 8009bae:	1961      	adds	r1, r4, r5
 8009bb0:	42a3      	cmp	r3, r4
 8009bb2:	6025      	str	r5, [r4, #0]
 8009bb4:	bf18      	it	ne
 8009bb6:	6059      	strne	r1, [r3, #4]
 8009bb8:	6863      	ldr	r3, [r4, #4]
 8009bba:	bf08      	it	eq
 8009bbc:	f8c8 1000 	streq.w	r1, [r8]
 8009bc0:	5162      	str	r2, [r4, r5]
 8009bc2:	604b      	str	r3, [r1, #4]
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	f000 f82f 	bl	8009c28 <__malloc_unlock>
 8009bca:	f104 000b 	add.w	r0, r4, #11
 8009bce:	1d23      	adds	r3, r4, #4
 8009bd0:	f020 0007 	bic.w	r0, r0, #7
 8009bd4:	1ac2      	subs	r2, r0, r3
 8009bd6:	bf1c      	itt	ne
 8009bd8:	1a1b      	subne	r3, r3, r0
 8009bda:	50a3      	strne	r3, [r4, r2]
 8009bdc:	e7af      	b.n	8009b3e <_malloc_r+0x22>
 8009bde:	6862      	ldr	r2, [r4, #4]
 8009be0:	42a3      	cmp	r3, r4
 8009be2:	bf0c      	ite	eq
 8009be4:	f8c8 2000 	streq.w	r2, [r8]
 8009be8:	605a      	strne	r2, [r3, #4]
 8009bea:	e7eb      	b.n	8009bc4 <_malloc_r+0xa8>
 8009bec:	4623      	mov	r3, r4
 8009bee:	6864      	ldr	r4, [r4, #4]
 8009bf0:	e7ae      	b.n	8009b50 <_malloc_r+0x34>
 8009bf2:	463c      	mov	r4, r7
 8009bf4:	687f      	ldr	r7, [r7, #4]
 8009bf6:	e7b6      	b.n	8009b66 <_malloc_r+0x4a>
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	42a3      	cmp	r3, r4
 8009bfe:	d1fb      	bne.n	8009bf8 <_malloc_r+0xdc>
 8009c00:	2300      	movs	r3, #0
 8009c02:	6053      	str	r3, [r2, #4]
 8009c04:	e7de      	b.n	8009bc4 <_malloc_r+0xa8>
 8009c06:	230c      	movs	r3, #12
 8009c08:	4630      	mov	r0, r6
 8009c0a:	6033      	str	r3, [r6, #0]
 8009c0c:	f000 f80c 	bl	8009c28 <__malloc_unlock>
 8009c10:	e794      	b.n	8009b3c <_malloc_r+0x20>
 8009c12:	6005      	str	r5, [r0, #0]
 8009c14:	e7d6      	b.n	8009bc4 <_malloc_r+0xa8>
 8009c16:	bf00      	nop
 8009c18:	200006fc 	.word	0x200006fc

08009c1c <__malloc_lock>:
 8009c1c:	4801      	ldr	r0, [pc, #4]	@ (8009c24 <__malloc_lock+0x8>)
 8009c1e:	f000 ba6c 	b.w	800a0fa <__retarget_lock_acquire_recursive>
 8009c22:	bf00      	nop
 8009c24:	20000840 	.word	0x20000840

08009c28 <__malloc_unlock>:
 8009c28:	4801      	ldr	r0, [pc, #4]	@ (8009c30 <__malloc_unlock+0x8>)
 8009c2a:	f000 ba67 	b.w	800a0fc <__retarget_lock_release_recursive>
 8009c2e:	bf00      	nop
 8009c30:	20000840 	.word	0x20000840

08009c34 <srand>:
 8009c34:	b538      	push	{r3, r4, r5, lr}
 8009c36:	4b10      	ldr	r3, [pc, #64]	@ (8009c78 <srand+0x44>)
 8009c38:	4604      	mov	r4, r0
 8009c3a:	681d      	ldr	r5, [r3, #0]
 8009c3c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8009c3e:	b9b3      	cbnz	r3, 8009c6e <srand+0x3a>
 8009c40:	2018      	movs	r0, #24
 8009c42:	f7ff ff39 	bl	8009ab8 <malloc>
 8009c46:	4602      	mov	r2, r0
 8009c48:	6328      	str	r0, [r5, #48]	@ 0x30
 8009c4a:	b920      	cbnz	r0, 8009c56 <srand+0x22>
 8009c4c:	2146      	movs	r1, #70	@ 0x46
 8009c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8009c7c <srand+0x48>)
 8009c50:	480b      	ldr	r0, [pc, #44]	@ (8009c80 <srand+0x4c>)
 8009c52:	f000 facf 	bl	800a1f4 <__assert_func>
 8009c56:	490b      	ldr	r1, [pc, #44]	@ (8009c84 <srand+0x50>)
 8009c58:	4b0b      	ldr	r3, [pc, #44]	@ (8009c88 <srand+0x54>)
 8009c5a:	e9c0 1300 	strd	r1, r3, [r0]
 8009c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8009c8c <srand+0x58>)
 8009c60:	2100      	movs	r1, #0
 8009c62:	6083      	str	r3, [r0, #8]
 8009c64:	230b      	movs	r3, #11
 8009c66:	8183      	strh	r3, [r0, #12]
 8009c68:	2001      	movs	r0, #1
 8009c6a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8009c72:	611c      	str	r4, [r3, #16]
 8009c74:	615a      	str	r2, [r3, #20]
 8009c76:	bd38      	pop	{r3, r4, r5, pc}
 8009c78:	2000001c 	.word	0x2000001c
 8009c7c:	0800ca02 	.word	0x0800ca02
 8009c80:	0800ca19 	.word	0x0800ca19
 8009c84:	abcd330e 	.word	0xabcd330e
 8009c88:	e66d1234 	.word	0xe66d1234
 8009c8c:	0005deec 	.word	0x0005deec

08009c90 <rand>:
 8009c90:	4b16      	ldr	r3, [pc, #88]	@ (8009cec <rand+0x5c>)
 8009c92:	b510      	push	{r4, lr}
 8009c94:	681c      	ldr	r4, [r3, #0]
 8009c96:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009c98:	b9b3      	cbnz	r3, 8009cc8 <rand+0x38>
 8009c9a:	2018      	movs	r0, #24
 8009c9c:	f7ff ff0c 	bl	8009ab8 <malloc>
 8009ca0:	4602      	mov	r2, r0
 8009ca2:	6320      	str	r0, [r4, #48]	@ 0x30
 8009ca4:	b920      	cbnz	r0, 8009cb0 <rand+0x20>
 8009ca6:	2152      	movs	r1, #82	@ 0x52
 8009ca8:	4b11      	ldr	r3, [pc, #68]	@ (8009cf0 <rand+0x60>)
 8009caa:	4812      	ldr	r0, [pc, #72]	@ (8009cf4 <rand+0x64>)
 8009cac:	f000 faa2 	bl	800a1f4 <__assert_func>
 8009cb0:	4911      	ldr	r1, [pc, #68]	@ (8009cf8 <rand+0x68>)
 8009cb2:	4b12      	ldr	r3, [pc, #72]	@ (8009cfc <rand+0x6c>)
 8009cb4:	e9c0 1300 	strd	r1, r3, [r0]
 8009cb8:	4b11      	ldr	r3, [pc, #68]	@ (8009d00 <rand+0x70>)
 8009cba:	2100      	movs	r1, #0
 8009cbc:	6083      	str	r3, [r0, #8]
 8009cbe:	230b      	movs	r3, #11
 8009cc0:	8183      	strh	r3, [r0, #12]
 8009cc2:	2001      	movs	r0, #1
 8009cc4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8009cc8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009cca:	480e      	ldr	r0, [pc, #56]	@ (8009d04 <rand+0x74>)
 8009ccc:	690b      	ldr	r3, [r1, #16]
 8009cce:	694c      	ldr	r4, [r1, #20]
 8009cd0:	4358      	muls	r0, r3
 8009cd2:	4a0d      	ldr	r2, [pc, #52]	@ (8009d08 <rand+0x78>)
 8009cd4:	fb02 0004 	mla	r0, r2, r4, r0
 8009cd8:	fba3 3202 	umull	r3, r2, r3, r2
 8009cdc:	3301      	adds	r3, #1
 8009cde:	eb40 0002 	adc.w	r0, r0, r2
 8009ce2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8009ce6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8009cea:	bd10      	pop	{r4, pc}
 8009cec:	2000001c 	.word	0x2000001c
 8009cf0:	0800ca02 	.word	0x0800ca02
 8009cf4:	0800ca19 	.word	0x0800ca19
 8009cf8:	abcd330e 	.word	0xabcd330e
 8009cfc:	e66d1234 	.word	0xe66d1234
 8009d00:	0005deec 	.word	0x0005deec
 8009d04:	5851f42d 	.word	0x5851f42d
 8009d08:	4c957f2d 	.word	0x4c957f2d

08009d0c <std>:
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	b510      	push	{r4, lr}
 8009d10:	4604      	mov	r4, r0
 8009d12:	e9c0 3300 	strd	r3, r3, [r0]
 8009d16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d1a:	6083      	str	r3, [r0, #8]
 8009d1c:	8181      	strh	r1, [r0, #12]
 8009d1e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009d20:	81c2      	strh	r2, [r0, #14]
 8009d22:	6183      	str	r3, [r0, #24]
 8009d24:	4619      	mov	r1, r3
 8009d26:	2208      	movs	r2, #8
 8009d28:	305c      	adds	r0, #92	@ 0x5c
 8009d2a:	f000 f91e 	bl	8009f6a <memset>
 8009d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8009d64 <std+0x58>)
 8009d30:	6224      	str	r4, [r4, #32]
 8009d32:	6263      	str	r3, [r4, #36]	@ 0x24
 8009d34:	4b0c      	ldr	r3, [pc, #48]	@ (8009d68 <std+0x5c>)
 8009d36:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009d38:	4b0c      	ldr	r3, [pc, #48]	@ (8009d6c <std+0x60>)
 8009d3a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8009d70 <std+0x64>)
 8009d3e:	6323      	str	r3, [r4, #48]	@ 0x30
 8009d40:	4b0c      	ldr	r3, [pc, #48]	@ (8009d74 <std+0x68>)
 8009d42:	429c      	cmp	r4, r3
 8009d44:	d006      	beq.n	8009d54 <std+0x48>
 8009d46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009d4a:	4294      	cmp	r4, r2
 8009d4c:	d002      	beq.n	8009d54 <std+0x48>
 8009d4e:	33d0      	adds	r3, #208	@ 0xd0
 8009d50:	429c      	cmp	r4, r3
 8009d52:	d105      	bne.n	8009d60 <std+0x54>
 8009d54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d5c:	f000 b9cc 	b.w	800a0f8 <__retarget_lock_init_recursive>
 8009d60:	bd10      	pop	{r4, pc}
 8009d62:	bf00      	nop
 8009d64:	08009e91 	.word	0x08009e91
 8009d68:	08009eb3 	.word	0x08009eb3
 8009d6c:	08009eeb 	.word	0x08009eeb
 8009d70:	08009f0f 	.word	0x08009f0f
 8009d74:	20000700 	.word	0x20000700

08009d78 <stdio_exit_handler>:
 8009d78:	4a02      	ldr	r2, [pc, #8]	@ (8009d84 <stdio_exit_handler+0xc>)
 8009d7a:	4903      	ldr	r1, [pc, #12]	@ (8009d88 <stdio_exit_handler+0x10>)
 8009d7c:	4803      	ldr	r0, [pc, #12]	@ (8009d8c <stdio_exit_handler+0x14>)
 8009d7e:	f000 b869 	b.w	8009e54 <_fwalk_sglue>
 8009d82:	bf00      	nop
 8009d84:	20000010 	.word	0x20000010
 8009d88:	0800a3c1 	.word	0x0800a3c1
 8009d8c:	20000020 	.word	0x20000020

08009d90 <cleanup_stdio>:
 8009d90:	6841      	ldr	r1, [r0, #4]
 8009d92:	4b0c      	ldr	r3, [pc, #48]	@ (8009dc4 <cleanup_stdio+0x34>)
 8009d94:	b510      	push	{r4, lr}
 8009d96:	4299      	cmp	r1, r3
 8009d98:	4604      	mov	r4, r0
 8009d9a:	d001      	beq.n	8009da0 <cleanup_stdio+0x10>
 8009d9c:	f000 fb10 	bl	800a3c0 <_fflush_r>
 8009da0:	68a1      	ldr	r1, [r4, #8]
 8009da2:	4b09      	ldr	r3, [pc, #36]	@ (8009dc8 <cleanup_stdio+0x38>)
 8009da4:	4299      	cmp	r1, r3
 8009da6:	d002      	beq.n	8009dae <cleanup_stdio+0x1e>
 8009da8:	4620      	mov	r0, r4
 8009daa:	f000 fb09 	bl	800a3c0 <_fflush_r>
 8009dae:	68e1      	ldr	r1, [r4, #12]
 8009db0:	4b06      	ldr	r3, [pc, #24]	@ (8009dcc <cleanup_stdio+0x3c>)
 8009db2:	4299      	cmp	r1, r3
 8009db4:	d004      	beq.n	8009dc0 <cleanup_stdio+0x30>
 8009db6:	4620      	mov	r0, r4
 8009db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009dbc:	f000 bb00 	b.w	800a3c0 <_fflush_r>
 8009dc0:	bd10      	pop	{r4, pc}
 8009dc2:	bf00      	nop
 8009dc4:	20000700 	.word	0x20000700
 8009dc8:	20000768 	.word	0x20000768
 8009dcc:	200007d0 	.word	0x200007d0

08009dd0 <global_stdio_init.part.0>:
 8009dd0:	b510      	push	{r4, lr}
 8009dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8009e00 <global_stdio_init.part.0+0x30>)
 8009dd4:	4c0b      	ldr	r4, [pc, #44]	@ (8009e04 <global_stdio_init.part.0+0x34>)
 8009dd6:	4a0c      	ldr	r2, [pc, #48]	@ (8009e08 <global_stdio_init.part.0+0x38>)
 8009dd8:	4620      	mov	r0, r4
 8009dda:	601a      	str	r2, [r3, #0]
 8009ddc:	2104      	movs	r1, #4
 8009dde:	2200      	movs	r2, #0
 8009de0:	f7ff ff94 	bl	8009d0c <std>
 8009de4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009de8:	2201      	movs	r2, #1
 8009dea:	2109      	movs	r1, #9
 8009dec:	f7ff ff8e 	bl	8009d0c <std>
 8009df0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009df4:	2202      	movs	r2, #2
 8009df6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009dfa:	2112      	movs	r1, #18
 8009dfc:	f7ff bf86 	b.w	8009d0c <std>
 8009e00:	20000838 	.word	0x20000838
 8009e04:	20000700 	.word	0x20000700
 8009e08:	08009d79 	.word	0x08009d79

08009e0c <__sfp_lock_acquire>:
 8009e0c:	4801      	ldr	r0, [pc, #4]	@ (8009e14 <__sfp_lock_acquire+0x8>)
 8009e0e:	f000 b974 	b.w	800a0fa <__retarget_lock_acquire_recursive>
 8009e12:	bf00      	nop
 8009e14:	20000842 	.word	0x20000842

08009e18 <__sfp_lock_release>:
 8009e18:	4801      	ldr	r0, [pc, #4]	@ (8009e20 <__sfp_lock_release+0x8>)
 8009e1a:	f000 b96f 	b.w	800a0fc <__retarget_lock_release_recursive>
 8009e1e:	bf00      	nop
 8009e20:	20000842 	.word	0x20000842

08009e24 <__sinit>:
 8009e24:	b510      	push	{r4, lr}
 8009e26:	4604      	mov	r4, r0
 8009e28:	f7ff fff0 	bl	8009e0c <__sfp_lock_acquire>
 8009e2c:	6a23      	ldr	r3, [r4, #32]
 8009e2e:	b11b      	cbz	r3, 8009e38 <__sinit+0x14>
 8009e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e34:	f7ff bff0 	b.w	8009e18 <__sfp_lock_release>
 8009e38:	4b04      	ldr	r3, [pc, #16]	@ (8009e4c <__sinit+0x28>)
 8009e3a:	6223      	str	r3, [r4, #32]
 8009e3c:	4b04      	ldr	r3, [pc, #16]	@ (8009e50 <__sinit+0x2c>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d1f5      	bne.n	8009e30 <__sinit+0xc>
 8009e44:	f7ff ffc4 	bl	8009dd0 <global_stdio_init.part.0>
 8009e48:	e7f2      	b.n	8009e30 <__sinit+0xc>
 8009e4a:	bf00      	nop
 8009e4c:	08009d91 	.word	0x08009d91
 8009e50:	20000838 	.word	0x20000838

08009e54 <_fwalk_sglue>:
 8009e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e58:	4607      	mov	r7, r0
 8009e5a:	4688      	mov	r8, r1
 8009e5c:	4614      	mov	r4, r2
 8009e5e:	2600      	movs	r6, #0
 8009e60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009e64:	f1b9 0901 	subs.w	r9, r9, #1
 8009e68:	d505      	bpl.n	8009e76 <_fwalk_sglue+0x22>
 8009e6a:	6824      	ldr	r4, [r4, #0]
 8009e6c:	2c00      	cmp	r4, #0
 8009e6e:	d1f7      	bne.n	8009e60 <_fwalk_sglue+0xc>
 8009e70:	4630      	mov	r0, r6
 8009e72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e76:	89ab      	ldrh	r3, [r5, #12]
 8009e78:	2b01      	cmp	r3, #1
 8009e7a:	d907      	bls.n	8009e8c <_fwalk_sglue+0x38>
 8009e7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e80:	3301      	adds	r3, #1
 8009e82:	d003      	beq.n	8009e8c <_fwalk_sglue+0x38>
 8009e84:	4629      	mov	r1, r5
 8009e86:	4638      	mov	r0, r7
 8009e88:	47c0      	blx	r8
 8009e8a:	4306      	orrs	r6, r0
 8009e8c:	3568      	adds	r5, #104	@ 0x68
 8009e8e:	e7e9      	b.n	8009e64 <_fwalk_sglue+0x10>

08009e90 <__sread>:
 8009e90:	b510      	push	{r4, lr}
 8009e92:	460c      	mov	r4, r1
 8009e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e98:	f000 f8c2 	bl	800a020 <_read_r>
 8009e9c:	2800      	cmp	r0, #0
 8009e9e:	bfab      	itete	ge
 8009ea0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009ea2:	89a3      	ldrhlt	r3, [r4, #12]
 8009ea4:	181b      	addge	r3, r3, r0
 8009ea6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009eaa:	bfac      	ite	ge
 8009eac:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009eae:	81a3      	strhlt	r3, [r4, #12]
 8009eb0:	bd10      	pop	{r4, pc}

08009eb2 <__swrite>:
 8009eb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eb6:	461f      	mov	r7, r3
 8009eb8:	898b      	ldrh	r3, [r1, #12]
 8009eba:	4605      	mov	r5, r0
 8009ebc:	05db      	lsls	r3, r3, #23
 8009ebe:	460c      	mov	r4, r1
 8009ec0:	4616      	mov	r6, r2
 8009ec2:	d505      	bpl.n	8009ed0 <__swrite+0x1e>
 8009ec4:	2302      	movs	r3, #2
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ecc:	f000 f896 	bl	8009ffc <_lseek_r>
 8009ed0:	89a3      	ldrh	r3, [r4, #12]
 8009ed2:	4632      	mov	r2, r6
 8009ed4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009ed8:	81a3      	strh	r3, [r4, #12]
 8009eda:	4628      	mov	r0, r5
 8009edc:	463b      	mov	r3, r7
 8009ede:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ee2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ee6:	f000 b8d1 	b.w	800a08c <_write_r>

08009eea <__sseek>:
 8009eea:	b510      	push	{r4, lr}
 8009eec:	460c      	mov	r4, r1
 8009eee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ef2:	f000 f883 	bl	8009ffc <_lseek_r>
 8009ef6:	1c43      	adds	r3, r0, #1
 8009ef8:	89a3      	ldrh	r3, [r4, #12]
 8009efa:	bf15      	itete	ne
 8009efc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009efe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009f02:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009f06:	81a3      	strheq	r3, [r4, #12]
 8009f08:	bf18      	it	ne
 8009f0a:	81a3      	strhne	r3, [r4, #12]
 8009f0c:	bd10      	pop	{r4, pc}

08009f0e <__sclose>:
 8009f0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f12:	f000 b863 	b.w	8009fdc <_close_r>

08009f16 <memcmp>:
 8009f16:	b510      	push	{r4, lr}
 8009f18:	3901      	subs	r1, #1
 8009f1a:	4402      	add	r2, r0
 8009f1c:	4290      	cmp	r0, r2
 8009f1e:	d101      	bne.n	8009f24 <memcmp+0xe>
 8009f20:	2000      	movs	r0, #0
 8009f22:	e005      	b.n	8009f30 <memcmp+0x1a>
 8009f24:	7803      	ldrb	r3, [r0, #0]
 8009f26:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009f2a:	42a3      	cmp	r3, r4
 8009f2c:	d001      	beq.n	8009f32 <memcmp+0x1c>
 8009f2e:	1b18      	subs	r0, r3, r4
 8009f30:	bd10      	pop	{r4, pc}
 8009f32:	3001      	adds	r0, #1
 8009f34:	e7f2      	b.n	8009f1c <memcmp+0x6>

08009f36 <memmove>:
 8009f36:	4288      	cmp	r0, r1
 8009f38:	b510      	push	{r4, lr}
 8009f3a:	eb01 0402 	add.w	r4, r1, r2
 8009f3e:	d902      	bls.n	8009f46 <memmove+0x10>
 8009f40:	4284      	cmp	r4, r0
 8009f42:	4623      	mov	r3, r4
 8009f44:	d807      	bhi.n	8009f56 <memmove+0x20>
 8009f46:	1e43      	subs	r3, r0, #1
 8009f48:	42a1      	cmp	r1, r4
 8009f4a:	d008      	beq.n	8009f5e <memmove+0x28>
 8009f4c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f50:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f54:	e7f8      	b.n	8009f48 <memmove+0x12>
 8009f56:	4601      	mov	r1, r0
 8009f58:	4402      	add	r2, r0
 8009f5a:	428a      	cmp	r2, r1
 8009f5c:	d100      	bne.n	8009f60 <memmove+0x2a>
 8009f5e:	bd10      	pop	{r4, pc}
 8009f60:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f64:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f68:	e7f7      	b.n	8009f5a <memmove+0x24>

08009f6a <memset>:
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	4402      	add	r2, r0
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d100      	bne.n	8009f74 <memset+0xa>
 8009f72:	4770      	bx	lr
 8009f74:	f803 1b01 	strb.w	r1, [r3], #1
 8009f78:	e7f9      	b.n	8009f6e <memset+0x4>

08009f7a <_raise_r>:
 8009f7a:	291f      	cmp	r1, #31
 8009f7c:	b538      	push	{r3, r4, r5, lr}
 8009f7e:	4605      	mov	r5, r0
 8009f80:	460c      	mov	r4, r1
 8009f82:	d904      	bls.n	8009f8e <_raise_r+0x14>
 8009f84:	2316      	movs	r3, #22
 8009f86:	6003      	str	r3, [r0, #0]
 8009f88:	f04f 30ff 	mov.w	r0, #4294967295
 8009f8c:	bd38      	pop	{r3, r4, r5, pc}
 8009f8e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009f90:	b112      	cbz	r2, 8009f98 <_raise_r+0x1e>
 8009f92:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f96:	b94b      	cbnz	r3, 8009fac <_raise_r+0x32>
 8009f98:	4628      	mov	r0, r5
 8009f9a:	f000 f865 	bl	800a068 <_getpid_r>
 8009f9e:	4622      	mov	r2, r4
 8009fa0:	4601      	mov	r1, r0
 8009fa2:	4628      	mov	r0, r5
 8009fa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fa8:	f000 b84c 	b.w	800a044 <_kill_r>
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d00a      	beq.n	8009fc6 <_raise_r+0x4c>
 8009fb0:	1c59      	adds	r1, r3, #1
 8009fb2:	d103      	bne.n	8009fbc <_raise_r+0x42>
 8009fb4:	2316      	movs	r3, #22
 8009fb6:	6003      	str	r3, [r0, #0]
 8009fb8:	2001      	movs	r0, #1
 8009fba:	e7e7      	b.n	8009f8c <_raise_r+0x12>
 8009fbc:	2100      	movs	r1, #0
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009fc4:	4798      	blx	r3
 8009fc6:	2000      	movs	r0, #0
 8009fc8:	e7e0      	b.n	8009f8c <_raise_r+0x12>
	...

08009fcc <raise>:
 8009fcc:	4b02      	ldr	r3, [pc, #8]	@ (8009fd8 <raise+0xc>)
 8009fce:	4601      	mov	r1, r0
 8009fd0:	6818      	ldr	r0, [r3, #0]
 8009fd2:	f7ff bfd2 	b.w	8009f7a <_raise_r>
 8009fd6:	bf00      	nop
 8009fd8:	2000001c 	.word	0x2000001c

08009fdc <_close_r>:
 8009fdc:	b538      	push	{r3, r4, r5, lr}
 8009fde:	2300      	movs	r3, #0
 8009fe0:	4d05      	ldr	r5, [pc, #20]	@ (8009ff8 <_close_r+0x1c>)
 8009fe2:	4604      	mov	r4, r0
 8009fe4:	4608      	mov	r0, r1
 8009fe6:	602b      	str	r3, [r5, #0]
 8009fe8:	f000 fe0e 	bl	800ac08 <_close>
 8009fec:	1c43      	adds	r3, r0, #1
 8009fee:	d102      	bne.n	8009ff6 <_close_r+0x1a>
 8009ff0:	682b      	ldr	r3, [r5, #0]
 8009ff2:	b103      	cbz	r3, 8009ff6 <_close_r+0x1a>
 8009ff4:	6023      	str	r3, [r4, #0]
 8009ff6:	bd38      	pop	{r3, r4, r5, pc}
 8009ff8:	2000083c 	.word	0x2000083c

08009ffc <_lseek_r>:
 8009ffc:	b538      	push	{r3, r4, r5, lr}
 8009ffe:	4604      	mov	r4, r0
 800a000:	4608      	mov	r0, r1
 800a002:	4611      	mov	r1, r2
 800a004:	2200      	movs	r2, #0
 800a006:	4d05      	ldr	r5, [pc, #20]	@ (800a01c <_lseek_r+0x20>)
 800a008:	602a      	str	r2, [r5, #0]
 800a00a:	461a      	mov	r2, r3
 800a00c:	f000 fe24 	bl	800ac58 <_lseek>
 800a010:	1c43      	adds	r3, r0, #1
 800a012:	d102      	bne.n	800a01a <_lseek_r+0x1e>
 800a014:	682b      	ldr	r3, [r5, #0]
 800a016:	b103      	cbz	r3, 800a01a <_lseek_r+0x1e>
 800a018:	6023      	str	r3, [r4, #0]
 800a01a:	bd38      	pop	{r3, r4, r5, pc}
 800a01c:	2000083c 	.word	0x2000083c

0800a020 <_read_r>:
 800a020:	b538      	push	{r3, r4, r5, lr}
 800a022:	4604      	mov	r4, r0
 800a024:	4608      	mov	r0, r1
 800a026:	4611      	mov	r1, r2
 800a028:	2200      	movs	r2, #0
 800a02a:	4d05      	ldr	r5, [pc, #20]	@ (800a040 <_read_r+0x20>)
 800a02c:	602a      	str	r2, [r5, #0]
 800a02e:	461a      	mov	r2, r3
 800a030:	f000 fe1a 	bl	800ac68 <_read>
 800a034:	1c43      	adds	r3, r0, #1
 800a036:	d102      	bne.n	800a03e <_read_r+0x1e>
 800a038:	682b      	ldr	r3, [r5, #0]
 800a03a:	b103      	cbz	r3, 800a03e <_read_r+0x1e>
 800a03c:	6023      	str	r3, [r4, #0]
 800a03e:	bd38      	pop	{r3, r4, r5, pc}
 800a040:	2000083c 	.word	0x2000083c

0800a044 <_kill_r>:
 800a044:	b538      	push	{r3, r4, r5, lr}
 800a046:	2300      	movs	r3, #0
 800a048:	4d06      	ldr	r5, [pc, #24]	@ (800a064 <_kill_r+0x20>)
 800a04a:	4604      	mov	r4, r0
 800a04c:	4608      	mov	r0, r1
 800a04e:	4611      	mov	r1, r2
 800a050:	602b      	str	r3, [r5, #0]
 800a052:	f000 fdf9 	bl	800ac48 <_kill>
 800a056:	1c43      	adds	r3, r0, #1
 800a058:	d102      	bne.n	800a060 <_kill_r+0x1c>
 800a05a:	682b      	ldr	r3, [r5, #0]
 800a05c:	b103      	cbz	r3, 800a060 <_kill_r+0x1c>
 800a05e:	6023      	str	r3, [r4, #0]
 800a060:	bd38      	pop	{r3, r4, r5, pc}
 800a062:	bf00      	nop
 800a064:	2000083c 	.word	0x2000083c

0800a068 <_getpid_r>:
 800a068:	f000 bdde 	b.w	800ac28 <_getpid>

0800a06c <_sbrk_r>:
 800a06c:	b538      	push	{r3, r4, r5, lr}
 800a06e:	2300      	movs	r3, #0
 800a070:	4d05      	ldr	r5, [pc, #20]	@ (800a088 <_sbrk_r+0x1c>)
 800a072:	4604      	mov	r4, r0
 800a074:	4608      	mov	r0, r1
 800a076:	602b      	str	r3, [r5, #0]
 800a078:	f000 fdfe 	bl	800ac78 <_sbrk>
 800a07c:	1c43      	adds	r3, r0, #1
 800a07e:	d102      	bne.n	800a086 <_sbrk_r+0x1a>
 800a080:	682b      	ldr	r3, [r5, #0]
 800a082:	b103      	cbz	r3, 800a086 <_sbrk_r+0x1a>
 800a084:	6023      	str	r3, [r4, #0]
 800a086:	bd38      	pop	{r3, r4, r5, pc}
 800a088:	2000083c 	.word	0x2000083c

0800a08c <_write_r>:
 800a08c:	b538      	push	{r3, r4, r5, lr}
 800a08e:	4604      	mov	r4, r0
 800a090:	4608      	mov	r0, r1
 800a092:	4611      	mov	r1, r2
 800a094:	2200      	movs	r2, #0
 800a096:	4d05      	ldr	r5, [pc, #20]	@ (800a0ac <_write_r+0x20>)
 800a098:	602a      	str	r2, [r5, #0]
 800a09a:	461a      	mov	r2, r3
 800a09c:	f000 fdfa 	bl	800ac94 <_write>
 800a0a0:	1c43      	adds	r3, r0, #1
 800a0a2:	d102      	bne.n	800a0aa <_write_r+0x1e>
 800a0a4:	682b      	ldr	r3, [r5, #0]
 800a0a6:	b103      	cbz	r3, 800a0aa <_write_r+0x1e>
 800a0a8:	6023      	str	r3, [r4, #0]
 800a0aa:	bd38      	pop	{r3, r4, r5, pc}
 800a0ac:	2000083c 	.word	0x2000083c

0800a0b0 <__libc_init_array>:
 800a0b0:	b570      	push	{r4, r5, r6, lr}
 800a0b2:	2600      	movs	r6, #0
 800a0b4:	4d0c      	ldr	r5, [pc, #48]	@ (800a0e8 <__libc_init_array+0x38>)
 800a0b6:	4c0d      	ldr	r4, [pc, #52]	@ (800a0ec <__libc_init_array+0x3c>)
 800a0b8:	1b64      	subs	r4, r4, r5
 800a0ba:	10a4      	asrs	r4, r4, #2
 800a0bc:	42a6      	cmp	r6, r4
 800a0be:	d109      	bne.n	800a0d4 <__libc_init_array+0x24>
 800a0c0:	f000 fdf2 	bl	800aca8 <_init>
 800a0c4:	2600      	movs	r6, #0
 800a0c6:	4d0a      	ldr	r5, [pc, #40]	@ (800a0f0 <__libc_init_array+0x40>)
 800a0c8:	4c0a      	ldr	r4, [pc, #40]	@ (800a0f4 <__libc_init_array+0x44>)
 800a0ca:	1b64      	subs	r4, r4, r5
 800a0cc:	10a4      	asrs	r4, r4, #2
 800a0ce:	42a6      	cmp	r6, r4
 800a0d0:	d105      	bne.n	800a0de <__libc_init_array+0x2e>
 800a0d2:	bd70      	pop	{r4, r5, r6, pc}
 800a0d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0d8:	4798      	blx	r3
 800a0da:	3601      	adds	r6, #1
 800a0dc:	e7ee      	b.n	800a0bc <__libc_init_array+0xc>
 800a0de:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0e2:	4798      	blx	r3
 800a0e4:	3601      	adds	r6, #1
 800a0e6:	e7f2      	b.n	800a0ce <__libc_init_array+0x1e>
 800a0e8:	0800cae8 	.word	0x0800cae8
 800a0ec:	0800cae8 	.word	0x0800cae8
 800a0f0:	0800cae8 	.word	0x0800cae8
 800a0f4:	0800caf0 	.word	0x0800caf0

0800a0f8 <__retarget_lock_init_recursive>:
 800a0f8:	4770      	bx	lr

0800a0fa <__retarget_lock_acquire_recursive>:
 800a0fa:	4770      	bx	lr

0800a0fc <__retarget_lock_release_recursive>:
 800a0fc:	4770      	bx	lr

0800a0fe <memchr>:
 800a0fe:	4603      	mov	r3, r0
 800a100:	b510      	push	{r4, lr}
 800a102:	b2c9      	uxtb	r1, r1
 800a104:	4402      	add	r2, r0
 800a106:	4293      	cmp	r3, r2
 800a108:	4618      	mov	r0, r3
 800a10a:	d101      	bne.n	800a110 <memchr+0x12>
 800a10c:	2000      	movs	r0, #0
 800a10e:	e003      	b.n	800a118 <memchr+0x1a>
 800a110:	7804      	ldrb	r4, [r0, #0]
 800a112:	3301      	adds	r3, #1
 800a114:	428c      	cmp	r4, r1
 800a116:	d1f6      	bne.n	800a106 <memchr+0x8>
 800a118:	bd10      	pop	{r4, pc}

0800a11a <memcpy>:
 800a11a:	440a      	add	r2, r1
 800a11c:	4291      	cmp	r1, r2
 800a11e:	f100 33ff 	add.w	r3, r0, #4294967295
 800a122:	d100      	bne.n	800a126 <memcpy+0xc>
 800a124:	4770      	bx	lr
 800a126:	b510      	push	{r4, lr}
 800a128:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a12c:	4291      	cmp	r1, r2
 800a12e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a132:	d1f9      	bne.n	800a128 <memcpy+0xe>
 800a134:	bd10      	pop	{r4, pc}
	...

0800a138 <__register_exitproc>:
 800a138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a13c:	4d28      	ldr	r5, [pc, #160]	@ (800a1e0 <__register_exitproc+0xa8>)
 800a13e:	4607      	mov	r7, r0
 800a140:	6828      	ldr	r0, [r5, #0]
 800a142:	4691      	mov	r9, r2
 800a144:	460e      	mov	r6, r1
 800a146:	4698      	mov	r8, r3
 800a148:	f7ff ffd7 	bl	800a0fa <__retarget_lock_acquire_recursive>
 800a14c:	4a25      	ldr	r2, [pc, #148]	@ (800a1e4 <__register_exitproc+0xac>)
 800a14e:	6814      	ldr	r4, [r2, #0]
 800a150:	b93c      	cbnz	r4, 800a162 <__register_exitproc+0x2a>
 800a152:	4b25      	ldr	r3, [pc, #148]	@ (800a1e8 <__register_exitproc+0xb0>)
 800a154:	6013      	str	r3, [r2, #0]
 800a156:	4a25      	ldr	r2, [pc, #148]	@ (800a1ec <__register_exitproc+0xb4>)
 800a158:	b112      	cbz	r2, 800a160 <__register_exitproc+0x28>
 800a15a:	6812      	ldr	r2, [r2, #0]
 800a15c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 800a160:	4c21      	ldr	r4, [pc, #132]	@ (800a1e8 <__register_exitproc+0xb0>)
 800a162:	6863      	ldr	r3, [r4, #4]
 800a164:	2b1f      	cmp	r3, #31
 800a166:	dd06      	ble.n	800a176 <__register_exitproc+0x3e>
 800a168:	6828      	ldr	r0, [r5, #0]
 800a16a:	f7ff ffc7 	bl	800a0fc <__retarget_lock_release_recursive>
 800a16e:	f04f 30ff 	mov.w	r0, #4294967295
 800a172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a176:	b33f      	cbz	r7, 800a1c8 <__register_exitproc+0x90>
 800a178:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 800a17c:	b968      	cbnz	r0, 800a19a <__register_exitproc+0x62>
 800a17e:	4b1c      	ldr	r3, [pc, #112]	@ (800a1f0 <__register_exitproc+0xb8>)
 800a180:	2b00      	cmp	r3, #0
 800a182:	d0f1      	beq.n	800a168 <__register_exitproc+0x30>
 800a184:	f44f 7084 	mov.w	r0, #264	@ 0x108
 800a188:	f7ff fc96 	bl	8009ab8 <malloc>
 800a18c:	2800      	cmp	r0, #0
 800a18e:	d0eb      	beq.n	800a168 <__register_exitproc+0x30>
 800a190:	2300      	movs	r3, #0
 800a192:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 800a196:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 800a19a:	2201      	movs	r2, #1
 800a19c:	6863      	ldr	r3, [r4, #4]
 800a19e:	2f02      	cmp	r7, #2
 800a1a0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 800a1a4:	fa02 f203 	lsl.w	r2, r2, r3
 800a1a8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 800a1ac:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 800a1b0:	ea43 0302 	orr.w	r3, r3, r2
 800a1b4:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 800a1b8:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 800a1bc:	bf02      	ittt	eq
 800a1be:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 800a1c2:	4313      	orreq	r3, r2
 800a1c4:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 800a1c8:	6863      	ldr	r3, [r4, #4]
 800a1ca:	6828      	ldr	r0, [r5, #0]
 800a1cc:	1c5a      	adds	r2, r3, #1
 800a1ce:	3302      	adds	r3, #2
 800a1d0:	6062      	str	r2, [r4, #4]
 800a1d2:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 800a1d6:	f7ff ff91 	bl	800a0fc <__retarget_lock_release_recursive>
 800a1da:	2000      	movs	r0, #0
 800a1dc:	e7c9      	b.n	800a172 <__register_exitproc+0x3a>
 800a1de:	bf00      	nop
 800a1e0:	2000006c 	.word	0x2000006c
 800a1e4:	200008d0 	.word	0x200008d0
 800a1e8:	20000844 	.word	0x20000844
 800a1ec:	00000000 	.word	0x00000000
 800a1f0:	08009ab9 	.word	0x08009ab9

0800a1f4 <__assert_func>:
 800a1f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a1f6:	4614      	mov	r4, r2
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	4b09      	ldr	r3, [pc, #36]	@ (800a220 <__assert_func+0x2c>)
 800a1fc:	4605      	mov	r5, r0
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	68d8      	ldr	r0, [r3, #12]
 800a202:	b954      	cbnz	r4, 800a21a <__assert_func+0x26>
 800a204:	4b07      	ldr	r3, [pc, #28]	@ (800a224 <__assert_func+0x30>)
 800a206:	461c      	mov	r4, r3
 800a208:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a20c:	9100      	str	r1, [sp, #0]
 800a20e:	462b      	mov	r3, r5
 800a210:	4905      	ldr	r1, [pc, #20]	@ (800a228 <__assert_func+0x34>)
 800a212:	f000 f8fd 	bl	800a410 <fiprintf>
 800a216:	f7ff fc41 	bl	8009a9c <abort>
 800a21a:	4b04      	ldr	r3, [pc, #16]	@ (800a22c <__assert_func+0x38>)
 800a21c:	e7f4      	b.n	800a208 <__assert_func+0x14>
 800a21e:	bf00      	nop
 800a220:	2000001c 	.word	0x2000001c
 800a224:	0800caac 	.word	0x0800caac
 800a228:	0800ca7e 	.word	0x0800ca7e
 800a22c:	0800ca71 	.word	0x0800ca71

0800a230 <_free_r>:
 800a230:	b538      	push	{r3, r4, r5, lr}
 800a232:	4605      	mov	r5, r0
 800a234:	2900      	cmp	r1, #0
 800a236:	d040      	beq.n	800a2ba <_free_r+0x8a>
 800a238:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a23c:	1f0c      	subs	r4, r1, #4
 800a23e:	2b00      	cmp	r3, #0
 800a240:	bfb8      	it	lt
 800a242:	18e4      	addlt	r4, r4, r3
 800a244:	f7ff fcea 	bl	8009c1c <__malloc_lock>
 800a248:	4a1c      	ldr	r2, [pc, #112]	@ (800a2bc <_free_r+0x8c>)
 800a24a:	6813      	ldr	r3, [r2, #0]
 800a24c:	b933      	cbnz	r3, 800a25c <_free_r+0x2c>
 800a24e:	6063      	str	r3, [r4, #4]
 800a250:	6014      	str	r4, [r2, #0]
 800a252:	4628      	mov	r0, r5
 800a254:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a258:	f7ff bce6 	b.w	8009c28 <__malloc_unlock>
 800a25c:	42a3      	cmp	r3, r4
 800a25e:	d908      	bls.n	800a272 <_free_r+0x42>
 800a260:	6820      	ldr	r0, [r4, #0]
 800a262:	1821      	adds	r1, r4, r0
 800a264:	428b      	cmp	r3, r1
 800a266:	bf01      	itttt	eq
 800a268:	6819      	ldreq	r1, [r3, #0]
 800a26a:	685b      	ldreq	r3, [r3, #4]
 800a26c:	1809      	addeq	r1, r1, r0
 800a26e:	6021      	streq	r1, [r4, #0]
 800a270:	e7ed      	b.n	800a24e <_free_r+0x1e>
 800a272:	461a      	mov	r2, r3
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	b10b      	cbz	r3, 800a27c <_free_r+0x4c>
 800a278:	42a3      	cmp	r3, r4
 800a27a:	d9fa      	bls.n	800a272 <_free_r+0x42>
 800a27c:	6811      	ldr	r1, [r2, #0]
 800a27e:	1850      	adds	r0, r2, r1
 800a280:	42a0      	cmp	r0, r4
 800a282:	d10b      	bne.n	800a29c <_free_r+0x6c>
 800a284:	6820      	ldr	r0, [r4, #0]
 800a286:	4401      	add	r1, r0
 800a288:	1850      	adds	r0, r2, r1
 800a28a:	4283      	cmp	r3, r0
 800a28c:	6011      	str	r1, [r2, #0]
 800a28e:	d1e0      	bne.n	800a252 <_free_r+0x22>
 800a290:	6818      	ldr	r0, [r3, #0]
 800a292:	685b      	ldr	r3, [r3, #4]
 800a294:	4408      	add	r0, r1
 800a296:	6010      	str	r0, [r2, #0]
 800a298:	6053      	str	r3, [r2, #4]
 800a29a:	e7da      	b.n	800a252 <_free_r+0x22>
 800a29c:	d902      	bls.n	800a2a4 <_free_r+0x74>
 800a29e:	230c      	movs	r3, #12
 800a2a0:	602b      	str	r3, [r5, #0]
 800a2a2:	e7d6      	b.n	800a252 <_free_r+0x22>
 800a2a4:	6820      	ldr	r0, [r4, #0]
 800a2a6:	1821      	adds	r1, r4, r0
 800a2a8:	428b      	cmp	r3, r1
 800a2aa:	bf01      	itttt	eq
 800a2ac:	6819      	ldreq	r1, [r3, #0]
 800a2ae:	685b      	ldreq	r3, [r3, #4]
 800a2b0:	1809      	addeq	r1, r1, r0
 800a2b2:	6021      	streq	r1, [r4, #0]
 800a2b4:	6063      	str	r3, [r4, #4]
 800a2b6:	6054      	str	r4, [r2, #4]
 800a2b8:	e7cb      	b.n	800a252 <_free_r+0x22>
 800a2ba:	bd38      	pop	{r3, r4, r5, pc}
 800a2bc:	200006fc 	.word	0x200006fc

0800a2c0 <__sflush_r>:
 800a2c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2c6:	0716      	lsls	r6, r2, #28
 800a2c8:	4605      	mov	r5, r0
 800a2ca:	460c      	mov	r4, r1
 800a2cc:	d454      	bmi.n	800a378 <__sflush_r+0xb8>
 800a2ce:	684b      	ldr	r3, [r1, #4]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	dc02      	bgt.n	800a2da <__sflush_r+0x1a>
 800a2d4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	dd48      	ble.n	800a36c <__sflush_r+0xac>
 800a2da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a2dc:	2e00      	cmp	r6, #0
 800a2de:	d045      	beq.n	800a36c <__sflush_r+0xac>
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a2e6:	682f      	ldr	r7, [r5, #0]
 800a2e8:	6a21      	ldr	r1, [r4, #32]
 800a2ea:	602b      	str	r3, [r5, #0]
 800a2ec:	d030      	beq.n	800a350 <__sflush_r+0x90>
 800a2ee:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a2f0:	89a3      	ldrh	r3, [r4, #12]
 800a2f2:	0759      	lsls	r1, r3, #29
 800a2f4:	d505      	bpl.n	800a302 <__sflush_r+0x42>
 800a2f6:	6863      	ldr	r3, [r4, #4]
 800a2f8:	1ad2      	subs	r2, r2, r3
 800a2fa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a2fc:	b10b      	cbz	r3, 800a302 <__sflush_r+0x42>
 800a2fe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a300:	1ad2      	subs	r2, r2, r3
 800a302:	2300      	movs	r3, #0
 800a304:	4628      	mov	r0, r5
 800a306:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a308:	6a21      	ldr	r1, [r4, #32]
 800a30a:	47b0      	blx	r6
 800a30c:	1c43      	adds	r3, r0, #1
 800a30e:	89a3      	ldrh	r3, [r4, #12]
 800a310:	d106      	bne.n	800a320 <__sflush_r+0x60>
 800a312:	6829      	ldr	r1, [r5, #0]
 800a314:	291d      	cmp	r1, #29
 800a316:	d82b      	bhi.n	800a370 <__sflush_r+0xb0>
 800a318:	4a28      	ldr	r2, [pc, #160]	@ (800a3bc <__sflush_r+0xfc>)
 800a31a:	410a      	asrs	r2, r1
 800a31c:	07d6      	lsls	r6, r2, #31
 800a31e:	d427      	bmi.n	800a370 <__sflush_r+0xb0>
 800a320:	2200      	movs	r2, #0
 800a322:	6062      	str	r2, [r4, #4]
 800a324:	6922      	ldr	r2, [r4, #16]
 800a326:	04d9      	lsls	r1, r3, #19
 800a328:	6022      	str	r2, [r4, #0]
 800a32a:	d504      	bpl.n	800a336 <__sflush_r+0x76>
 800a32c:	1c42      	adds	r2, r0, #1
 800a32e:	d101      	bne.n	800a334 <__sflush_r+0x74>
 800a330:	682b      	ldr	r3, [r5, #0]
 800a332:	b903      	cbnz	r3, 800a336 <__sflush_r+0x76>
 800a334:	6560      	str	r0, [r4, #84]	@ 0x54
 800a336:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a338:	602f      	str	r7, [r5, #0]
 800a33a:	b1b9      	cbz	r1, 800a36c <__sflush_r+0xac>
 800a33c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a340:	4299      	cmp	r1, r3
 800a342:	d002      	beq.n	800a34a <__sflush_r+0x8a>
 800a344:	4628      	mov	r0, r5
 800a346:	f7ff ff73 	bl	800a230 <_free_r>
 800a34a:	2300      	movs	r3, #0
 800a34c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a34e:	e00d      	b.n	800a36c <__sflush_r+0xac>
 800a350:	2301      	movs	r3, #1
 800a352:	4628      	mov	r0, r5
 800a354:	47b0      	blx	r6
 800a356:	4602      	mov	r2, r0
 800a358:	1c50      	adds	r0, r2, #1
 800a35a:	d1c9      	bne.n	800a2f0 <__sflush_r+0x30>
 800a35c:	682b      	ldr	r3, [r5, #0]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d0c6      	beq.n	800a2f0 <__sflush_r+0x30>
 800a362:	2b1d      	cmp	r3, #29
 800a364:	d001      	beq.n	800a36a <__sflush_r+0xaa>
 800a366:	2b16      	cmp	r3, #22
 800a368:	d11d      	bne.n	800a3a6 <__sflush_r+0xe6>
 800a36a:	602f      	str	r7, [r5, #0]
 800a36c:	2000      	movs	r0, #0
 800a36e:	e021      	b.n	800a3b4 <__sflush_r+0xf4>
 800a370:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a374:	b21b      	sxth	r3, r3
 800a376:	e01a      	b.n	800a3ae <__sflush_r+0xee>
 800a378:	690f      	ldr	r7, [r1, #16]
 800a37a:	2f00      	cmp	r7, #0
 800a37c:	d0f6      	beq.n	800a36c <__sflush_r+0xac>
 800a37e:	0793      	lsls	r3, r2, #30
 800a380:	bf18      	it	ne
 800a382:	2300      	movne	r3, #0
 800a384:	680e      	ldr	r6, [r1, #0]
 800a386:	bf08      	it	eq
 800a388:	694b      	ldreq	r3, [r1, #20]
 800a38a:	1bf6      	subs	r6, r6, r7
 800a38c:	600f      	str	r7, [r1, #0]
 800a38e:	608b      	str	r3, [r1, #8]
 800a390:	2e00      	cmp	r6, #0
 800a392:	ddeb      	ble.n	800a36c <__sflush_r+0xac>
 800a394:	4633      	mov	r3, r6
 800a396:	463a      	mov	r2, r7
 800a398:	4628      	mov	r0, r5
 800a39a:	6a21      	ldr	r1, [r4, #32]
 800a39c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a3a0:	47e0      	blx	ip
 800a3a2:	2800      	cmp	r0, #0
 800a3a4:	dc07      	bgt.n	800a3b6 <__sflush_r+0xf6>
 800a3a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a3b2:	81a3      	strh	r3, [r4, #12]
 800a3b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3b6:	4407      	add	r7, r0
 800a3b8:	1a36      	subs	r6, r6, r0
 800a3ba:	e7e9      	b.n	800a390 <__sflush_r+0xd0>
 800a3bc:	dfbffffe 	.word	0xdfbffffe

0800a3c0 <_fflush_r>:
 800a3c0:	b538      	push	{r3, r4, r5, lr}
 800a3c2:	690b      	ldr	r3, [r1, #16]
 800a3c4:	4605      	mov	r5, r0
 800a3c6:	460c      	mov	r4, r1
 800a3c8:	b913      	cbnz	r3, 800a3d0 <_fflush_r+0x10>
 800a3ca:	2500      	movs	r5, #0
 800a3cc:	4628      	mov	r0, r5
 800a3ce:	bd38      	pop	{r3, r4, r5, pc}
 800a3d0:	b118      	cbz	r0, 800a3da <_fflush_r+0x1a>
 800a3d2:	6a03      	ldr	r3, [r0, #32]
 800a3d4:	b90b      	cbnz	r3, 800a3da <_fflush_r+0x1a>
 800a3d6:	f7ff fd25 	bl	8009e24 <__sinit>
 800a3da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d0f3      	beq.n	800a3ca <_fflush_r+0xa>
 800a3e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a3e4:	07d0      	lsls	r0, r2, #31
 800a3e6:	d404      	bmi.n	800a3f2 <_fflush_r+0x32>
 800a3e8:	0599      	lsls	r1, r3, #22
 800a3ea:	d402      	bmi.n	800a3f2 <_fflush_r+0x32>
 800a3ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a3ee:	f7ff fe84 	bl	800a0fa <__retarget_lock_acquire_recursive>
 800a3f2:	4628      	mov	r0, r5
 800a3f4:	4621      	mov	r1, r4
 800a3f6:	f7ff ff63 	bl	800a2c0 <__sflush_r>
 800a3fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a3fc:	4605      	mov	r5, r0
 800a3fe:	07da      	lsls	r2, r3, #31
 800a400:	d4e4      	bmi.n	800a3cc <_fflush_r+0xc>
 800a402:	89a3      	ldrh	r3, [r4, #12]
 800a404:	059b      	lsls	r3, r3, #22
 800a406:	d4e1      	bmi.n	800a3cc <_fflush_r+0xc>
 800a408:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a40a:	f7ff fe77 	bl	800a0fc <__retarget_lock_release_recursive>
 800a40e:	e7dd      	b.n	800a3cc <_fflush_r+0xc>

0800a410 <fiprintf>:
 800a410:	b40e      	push	{r1, r2, r3}
 800a412:	b503      	push	{r0, r1, lr}
 800a414:	4601      	mov	r1, r0
 800a416:	ab03      	add	r3, sp, #12
 800a418:	4805      	ldr	r0, [pc, #20]	@ (800a430 <fiprintf+0x20>)
 800a41a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a41e:	6800      	ldr	r0, [r0, #0]
 800a420:	9301      	str	r3, [sp, #4]
 800a422:	f000 f82f 	bl	800a484 <_vfiprintf_r>
 800a426:	b002      	add	sp, #8
 800a428:	f85d eb04 	ldr.w	lr, [sp], #4
 800a42c:	b003      	add	sp, #12
 800a42e:	4770      	bx	lr
 800a430:	2000001c 	.word	0x2000001c

0800a434 <__sfputc_r>:
 800a434:	6893      	ldr	r3, [r2, #8]
 800a436:	b410      	push	{r4}
 800a438:	3b01      	subs	r3, #1
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	6093      	str	r3, [r2, #8]
 800a43e:	da07      	bge.n	800a450 <__sfputc_r+0x1c>
 800a440:	6994      	ldr	r4, [r2, #24]
 800a442:	42a3      	cmp	r3, r4
 800a444:	db01      	blt.n	800a44a <__sfputc_r+0x16>
 800a446:	290a      	cmp	r1, #10
 800a448:	d102      	bne.n	800a450 <__sfputc_r+0x1c>
 800a44a:	bc10      	pop	{r4}
 800a44c:	f000 bac4 	b.w	800a9d8 <__swbuf_r>
 800a450:	6813      	ldr	r3, [r2, #0]
 800a452:	1c58      	adds	r0, r3, #1
 800a454:	6010      	str	r0, [r2, #0]
 800a456:	7019      	strb	r1, [r3, #0]
 800a458:	4608      	mov	r0, r1
 800a45a:	bc10      	pop	{r4}
 800a45c:	4770      	bx	lr

0800a45e <__sfputs_r>:
 800a45e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a460:	4606      	mov	r6, r0
 800a462:	460f      	mov	r7, r1
 800a464:	4614      	mov	r4, r2
 800a466:	18d5      	adds	r5, r2, r3
 800a468:	42ac      	cmp	r4, r5
 800a46a:	d101      	bne.n	800a470 <__sfputs_r+0x12>
 800a46c:	2000      	movs	r0, #0
 800a46e:	e007      	b.n	800a480 <__sfputs_r+0x22>
 800a470:	463a      	mov	r2, r7
 800a472:	4630      	mov	r0, r6
 800a474:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a478:	f7ff ffdc 	bl	800a434 <__sfputc_r>
 800a47c:	1c43      	adds	r3, r0, #1
 800a47e:	d1f3      	bne.n	800a468 <__sfputs_r+0xa>
 800a480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a484 <_vfiprintf_r>:
 800a484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a488:	460d      	mov	r5, r1
 800a48a:	4614      	mov	r4, r2
 800a48c:	4698      	mov	r8, r3
 800a48e:	4606      	mov	r6, r0
 800a490:	b09d      	sub	sp, #116	@ 0x74
 800a492:	b118      	cbz	r0, 800a49c <_vfiprintf_r+0x18>
 800a494:	6a03      	ldr	r3, [r0, #32]
 800a496:	b90b      	cbnz	r3, 800a49c <_vfiprintf_r+0x18>
 800a498:	f7ff fcc4 	bl	8009e24 <__sinit>
 800a49c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a49e:	07d9      	lsls	r1, r3, #31
 800a4a0:	d405      	bmi.n	800a4ae <_vfiprintf_r+0x2a>
 800a4a2:	89ab      	ldrh	r3, [r5, #12]
 800a4a4:	059a      	lsls	r2, r3, #22
 800a4a6:	d402      	bmi.n	800a4ae <_vfiprintf_r+0x2a>
 800a4a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a4aa:	f7ff fe26 	bl	800a0fa <__retarget_lock_acquire_recursive>
 800a4ae:	89ab      	ldrh	r3, [r5, #12]
 800a4b0:	071b      	lsls	r3, r3, #28
 800a4b2:	d501      	bpl.n	800a4b8 <_vfiprintf_r+0x34>
 800a4b4:	692b      	ldr	r3, [r5, #16]
 800a4b6:	b99b      	cbnz	r3, 800a4e0 <_vfiprintf_r+0x5c>
 800a4b8:	4629      	mov	r1, r5
 800a4ba:	4630      	mov	r0, r6
 800a4bc:	f000 faca 	bl	800aa54 <__swsetup_r>
 800a4c0:	b170      	cbz	r0, 800a4e0 <_vfiprintf_r+0x5c>
 800a4c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a4c4:	07dc      	lsls	r4, r3, #31
 800a4c6:	d504      	bpl.n	800a4d2 <_vfiprintf_r+0x4e>
 800a4c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4cc:	b01d      	add	sp, #116	@ 0x74
 800a4ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4d2:	89ab      	ldrh	r3, [r5, #12]
 800a4d4:	0598      	lsls	r0, r3, #22
 800a4d6:	d4f7      	bmi.n	800a4c8 <_vfiprintf_r+0x44>
 800a4d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a4da:	f7ff fe0f 	bl	800a0fc <__retarget_lock_release_recursive>
 800a4de:	e7f3      	b.n	800a4c8 <_vfiprintf_r+0x44>
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4e4:	2320      	movs	r3, #32
 800a4e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a4ea:	2330      	movs	r3, #48	@ 0x30
 800a4ec:	f04f 0901 	mov.w	r9, #1
 800a4f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4f4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a6a0 <_vfiprintf_r+0x21c>
 800a4f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a4fc:	4623      	mov	r3, r4
 800a4fe:	469a      	mov	sl, r3
 800a500:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a504:	b10a      	cbz	r2, 800a50a <_vfiprintf_r+0x86>
 800a506:	2a25      	cmp	r2, #37	@ 0x25
 800a508:	d1f9      	bne.n	800a4fe <_vfiprintf_r+0x7a>
 800a50a:	ebba 0b04 	subs.w	fp, sl, r4
 800a50e:	d00b      	beq.n	800a528 <_vfiprintf_r+0xa4>
 800a510:	465b      	mov	r3, fp
 800a512:	4622      	mov	r2, r4
 800a514:	4629      	mov	r1, r5
 800a516:	4630      	mov	r0, r6
 800a518:	f7ff ffa1 	bl	800a45e <__sfputs_r>
 800a51c:	3001      	adds	r0, #1
 800a51e:	f000 80a7 	beq.w	800a670 <_vfiprintf_r+0x1ec>
 800a522:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a524:	445a      	add	r2, fp
 800a526:	9209      	str	r2, [sp, #36]	@ 0x24
 800a528:	f89a 3000 	ldrb.w	r3, [sl]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	f000 809f 	beq.w	800a670 <_vfiprintf_r+0x1ec>
 800a532:	2300      	movs	r3, #0
 800a534:	f04f 32ff 	mov.w	r2, #4294967295
 800a538:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a53c:	f10a 0a01 	add.w	sl, sl, #1
 800a540:	9304      	str	r3, [sp, #16]
 800a542:	9307      	str	r3, [sp, #28]
 800a544:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a548:	931a      	str	r3, [sp, #104]	@ 0x68
 800a54a:	4654      	mov	r4, sl
 800a54c:	2205      	movs	r2, #5
 800a54e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a552:	4853      	ldr	r0, [pc, #332]	@ (800a6a0 <_vfiprintf_r+0x21c>)
 800a554:	f7ff fdd3 	bl	800a0fe <memchr>
 800a558:	9a04      	ldr	r2, [sp, #16]
 800a55a:	b9d8      	cbnz	r0, 800a594 <_vfiprintf_r+0x110>
 800a55c:	06d1      	lsls	r1, r2, #27
 800a55e:	bf44      	itt	mi
 800a560:	2320      	movmi	r3, #32
 800a562:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a566:	0713      	lsls	r3, r2, #28
 800a568:	bf44      	itt	mi
 800a56a:	232b      	movmi	r3, #43	@ 0x2b
 800a56c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a570:	f89a 3000 	ldrb.w	r3, [sl]
 800a574:	2b2a      	cmp	r3, #42	@ 0x2a
 800a576:	d015      	beq.n	800a5a4 <_vfiprintf_r+0x120>
 800a578:	4654      	mov	r4, sl
 800a57a:	2000      	movs	r0, #0
 800a57c:	f04f 0c0a 	mov.w	ip, #10
 800a580:	9a07      	ldr	r2, [sp, #28]
 800a582:	4621      	mov	r1, r4
 800a584:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a588:	3b30      	subs	r3, #48	@ 0x30
 800a58a:	2b09      	cmp	r3, #9
 800a58c:	d94b      	bls.n	800a626 <_vfiprintf_r+0x1a2>
 800a58e:	b1b0      	cbz	r0, 800a5be <_vfiprintf_r+0x13a>
 800a590:	9207      	str	r2, [sp, #28]
 800a592:	e014      	b.n	800a5be <_vfiprintf_r+0x13a>
 800a594:	eba0 0308 	sub.w	r3, r0, r8
 800a598:	fa09 f303 	lsl.w	r3, r9, r3
 800a59c:	4313      	orrs	r3, r2
 800a59e:	46a2      	mov	sl, r4
 800a5a0:	9304      	str	r3, [sp, #16]
 800a5a2:	e7d2      	b.n	800a54a <_vfiprintf_r+0xc6>
 800a5a4:	9b03      	ldr	r3, [sp, #12]
 800a5a6:	1d19      	adds	r1, r3, #4
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	9103      	str	r1, [sp, #12]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	bfbb      	ittet	lt
 800a5b0:	425b      	neglt	r3, r3
 800a5b2:	f042 0202 	orrlt.w	r2, r2, #2
 800a5b6:	9307      	strge	r3, [sp, #28]
 800a5b8:	9307      	strlt	r3, [sp, #28]
 800a5ba:	bfb8      	it	lt
 800a5bc:	9204      	strlt	r2, [sp, #16]
 800a5be:	7823      	ldrb	r3, [r4, #0]
 800a5c0:	2b2e      	cmp	r3, #46	@ 0x2e
 800a5c2:	d10a      	bne.n	800a5da <_vfiprintf_r+0x156>
 800a5c4:	7863      	ldrb	r3, [r4, #1]
 800a5c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5c8:	d132      	bne.n	800a630 <_vfiprintf_r+0x1ac>
 800a5ca:	9b03      	ldr	r3, [sp, #12]
 800a5cc:	3402      	adds	r4, #2
 800a5ce:	1d1a      	adds	r2, r3, #4
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	9203      	str	r2, [sp, #12]
 800a5d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a5d8:	9305      	str	r3, [sp, #20]
 800a5da:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a6a4 <_vfiprintf_r+0x220>
 800a5de:	2203      	movs	r2, #3
 800a5e0:	4650      	mov	r0, sl
 800a5e2:	7821      	ldrb	r1, [r4, #0]
 800a5e4:	f7ff fd8b 	bl	800a0fe <memchr>
 800a5e8:	b138      	cbz	r0, 800a5fa <_vfiprintf_r+0x176>
 800a5ea:	2240      	movs	r2, #64	@ 0x40
 800a5ec:	9b04      	ldr	r3, [sp, #16]
 800a5ee:	eba0 000a 	sub.w	r0, r0, sl
 800a5f2:	4082      	lsls	r2, r0
 800a5f4:	4313      	orrs	r3, r2
 800a5f6:	3401      	adds	r4, #1
 800a5f8:	9304      	str	r3, [sp, #16]
 800a5fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5fe:	2206      	movs	r2, #6
 800a600:	4829      	ldr	r0, [pc, #164]	@ (800a6a8 <_vfiprintf_r+0x224>)
 800a602:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a606:	f7ff fd7a 	bl	800a0fe <memchr>
 800a60a:	2800      	cmp	r0, #0
 800a60c:	d03f      	beq.n	800a68e <_vfiprintf_r+0x20a>
 800a60e:	4b27      	ldr	r3, [pc, #156]	@ (800a6ac <_vfiprintf_r+0x228>)
 800a610:	bb1b      	cbnz	r3, 800a65a <_vfiprintf_r+0x1d6>
 800a612:	9b03      	ldr	r3, [sp, #12]
 800a614:	3307      	adds	r3, #7
 800a616:	f023 0307 	bic.w	r3, r3, #7
 800a61a:	3308      	adds	r3, #8
 800a61c:	9303      	str	r3, [sp, #12]
 800a61e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a620:	443b      	add	r3, r7
 800a622:	9309      	str	r3, [sp, #36]	@ 0x24
 800a624:	e76a      	b.n	800a4fc <_vfiprintf_r+0x78>
 800a626:	460c      	mov	r4, r1
 800a628:	2001      	movs	r0, #1
 800a62a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a62e:	e7a8      	b.n	800a582 <_vfiprintf_r+0xfe>
 800a630:	2300      	movs	r3, #0
 800a632:	f04f 0c0a 	mov.w	ip, #10
 800a636:	4619      	mov	r1, r3
 800a638:	3401      	adds	r4, #1
 800a63a:	9305      	str	r3, [sp, #20]
 800a63c:	4620      	mov	r0, r4
 800a63e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a642:	3a30      	subs	r2, #48	@ 0x30
 800a644:	2a09      	cmp	r2, #9
 800a646:	d903      	bls.n	800a650 <_vfiprintf_r+0x1cc>
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d0c6      	beq.n	800a5da <_vfiprintf_r+0x156>
 800a64c:	9105      	str	r1, [sp, #20]
 800a64e:	e7c4      	b.n	800a5da <_vfiprintf_r+0x156>
 800a650:	4604      	mov	r4, r0
 800a652:	2301      	movs	r3, #1
 800a654:	fb0c 2101 	mla	r1, ip, r1, r2
 800a658:	e7f0      	b.n	800a63c <_vfiprintf_r+0x1b8>
 800a65a:	ab03      	add	r3, sp, #12
 800a65c:	9300      	str	r3, [sp, #0]
 800a65e:	462a      	mov	r2, r5
 800a660:	4630      	mov	r0, r6
 800a662:	4b13      	ldr	r3, [pc, #76]	@ (800a6b0 <_vfiprintf_r+0x22c>)
 800a664:	a904      	add	r1, sp, #16
 800a666:	f3af 8000 	nop.w
 800a66a:	4607      	mov	r7, r0
 800a66c:	1c78      	adds	r0, r7, #1
 800a66e:	d1d6      	bne.n	800a61e <_vfiprintf_r+0x19a>
 800a670:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a672:	07d9      	lsls	r1, r3, #31
 800a674:	d405      	bmi.n	800a682 <_vfiprintf_r+0x1fe>
 800a676:	89ab      	ldrh	r3, [r5, #12]
 800a678:	059a      	lsls	r2, r3, #22
 800a67a:	d402      	bmi.n	800a682 <_vfiprintf_r+0x1fe>
 800a67c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a67e:	f7ff fd3d 	bl	800a0fc <__retarget_lock_release_recursive>
 800a682:	89ab      	ldrh	r3, [r5, #12]
 800a684:	065b      	lsls	r3, r3, #25
 800a686:	f53f af1f 	bmi.w	800a4c8 <_vfiprintf_r+0x44>
 800a68a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a68c:	e71e      	b.n	800a4cc <_vfiprintf_r+0x48>
 800a68e:	ab03      	add	r3, sp, #12
 800a690:	9300      	str	r3, [sp, #0]
 800a692:	462a      	mov	r2, r5
 800a694:	4630      	mov	r0, r6
 800a696:	4b06      	ldr	r3, [pc, #24]	@ (800a6b0 <_vfiprintf_r+0x22c>)
 800a698:	a904      	add	r1, sp, #16
 800a69a:	f000 f87d 	bl	800a798 <_printf_i>
 800a69e:	e7e4      	b.n	800a66a <_vfiprintf_r+0x1e6>
 800a6a0:	0800caad 	.word	0x0800caad
 800a6a4:	0800cab3 	.word	0x0800cab3
 800a6a8:	0800cab7 	.word	0x0800cab7
 800a6ac:	00000000 	.word	0x00000000
 800a6b0:	0800a45f 	.word	0x0800a45f

0800a6b4 <_printf_common>:
 800a6b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6b8:	4616      	mov	r6, r2
 800a6ba:	4698      	mov	r8, r3
 800a6bc:	688a      	ldr	r2, [r1, #8]
 800a6be:	690b      	ldr	r3, [r1, #16]
 800a6c0:	4607      	mov	r7, r0
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	bfb8      	it	lt
 800a6c6:	4613      	movlt	r3, r2
 800a6c8:	6033      	str	r3, [r6, #0]
 800a6ca:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a6ce:	460c      	mov	r4, r1
 800a6d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a6d4:	b10a      	cbz	r2, 800a6da <_printf_common+0x26>
 800a6d6:	3301      	adds	r3, #1
 800a6d8:	6033      	str	r3, [r6, #0]
 800a6da:	6823      	ldr	r3, [r4, #0]
 800a6dc:	0699      	lsls	r1, r3, #26
 800a6de:	bf42      	ittt	mi
 800a6e0:	6833      	ldrmi	r3, [r6, #0]
 800a6e2:	3302      	addmi	r3, #2
 800a6e4:	6033      	strmi	r3, [r6, #0]
 800a6e6:	6825      	ldr	r5, [r4, #0]
 800a6e8:	f015 0506 	ands.w	r5, r5, #6
 800a6ec:	d106      	bne.n	800a6fc <_printf_common+0x48>
 800a6ee:	f104 0a19 	add.w	sl, r4, #25
 800a6f2:	68e3      	ldr	r3, [r4, #12]
 800a6f4:	6832      	ldr	r2, [r6, #0]
 800a6f6:	1a9b      	subs	r3, r3, r2
 800a6f8:	42ab      	cmp	r3, r5
 800a6fa:	dc2b      	bgt.n	800a754 <_printf_common+0xa0>
 800a6fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a700:	6822      	ldr	r2, [r4, #0]
 800a702:	3b00      	subs	r3, #0
 800a704:	bf18      	it	ne
 800a706:	2301      	movne	r3, #1
 800a708:	0692      	lsls	r2, r2, #26
 800a70a:	d430      	bmi.n	800a76e <_printf_common+0xba>
 800a70c:	4641      	mov	r1, r8
 800a70e:	4638      	mov	r0, r7
 800a710:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a714:	47c8      	blx	r9
 800a716:	3001      	adds	r0, #1
 800a718:	d023      	beq.n	800a762 <_printf_common+0xae>
 800a71a:	6823      	ldr	r3, [r4, #0]
 800a71c:	6922      	ldr	r2, [r4, #16]
 800a71e:	f003 0306 	and.w	r3, r3, #6
 800a722:	2b04      	cmp	r3, #4
 800a724:	bf14      	ite	ne
 800a726:	2500      	movne	r5, #0
 800a728:	6833      	ldreq	r3, [r6, #0]
 800a72a:	f04f 0600 	mov.w	r6, #0
 800a72e:	bf08      	it	eq
 800a730:	68e5      	ldreq	r5, [r4, #12]
 800a732:	f104 041a 	add.w	r4, r4, #26
 800a736:	bf08      	it	eq
 800a738:	1aed      	subeq	r5, r5, r3
 800a73a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a73e:	bf08      	it	eq
 800a740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a744:	4293      	cmp	r3, r2
 800a746:	bfc4      	itt	gt
 800a748:	1a9b      	subgt	r3, r3, r2
 800a74a:	18ed      	addgt	r5, r5, r3
 800a74c:	42b5      	cmp	r5, r6
 800a74e:	d11a      	bne.n	800a786 <_printf_common+0xd2>
 800a750:	2000      	movs	r0, #0
 800a752:	e008      	b.n	800a766 <_printf_common+0xb2>
 800a754:	2301      	movs	r3, #1
 800a756:	4652      	mov	r2, sl
 800a758:	4641      	mov	r1, r8
 800a75a:	4638      	mov	r0, r7
 800a75c:	47c8      	blx	r9
 800a75e:	3001      	adds	r0, #1
 800a760:	d103      	bne.n	800a76a <_printf_common+0xb6>
 800a762:	f04f 30ff 	mov.w	r0, #4294967295
 800a766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a76a:	3501      	adds	r5, #1
 800a76c:	e7c1      	b.n	800a6f2 <_printf_common+0x3e>
 800a76e:	2030      	movs	r0, #48	@ 0x30
 800a770:	18e1      	adds	r1, r4, r3
 800a772:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a776:	1c5a      	adds	r2, r3, #1
 800a778:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a77c:	4422      	add	r2, r4
 800a77e:	3302      	adds	r3, #2
 800a780:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a784:	e7c2      	b.n	800a70c <_printf_common+0x58>
 800a786:	2301      	movs	r3, #1
 800a788:	4622      	mov	r2, r4
 800a78a:	4641      	mov	r1, r8
 800a78c:	4638      	mov	r0, r7
 800a78e:	47c8      	blx	r9
 800a790:	3001      	adds	r0, #1
 800a792:	d0e6      	beq.n	800a762 <_printf_common+0xae>
 800a794:	3601      	adds	r6, #1
 800a796:	e7d9      	b.n	800a74c <_printf_common+0x98>

0800a798 <_printf_i>:
 800a798:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a79c:	7e0f      	ldrb	r7, [r1, #24]
 800a79e:	4691      	mov	r9, r2
 800a7a0:	2f78      	cmp	r7, #120	@ 0x78
 800a7a2:	4680      	mov	r8, r0
 800a7a4:	460c      	mov	r4, r1
 800a7a6:	469a      	mov	sl, r3
 800a7a8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a7aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a7ae:	d807      	bhi.n	800a7c0 <_printf_i+0x28>
 800a7b0:	2f62      	cmp	r7, #98	@ 0x62
 800a7b2:	d80a      	bhi.n	800a7ca <_printf_i+0x32>
 800a7b4:	2f00      	cmp	r7, #0
 800a7b6:	f000 80d3 	beq.w	800a960 <_printf_i+0x1c8>
 800a7ba:	2f58      	cmp	r7, #88	@ 0x58
 800a7bc:	f000 80ba 	beq.w	800a934 <_printf_i+0x19c>
 800a7c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a7c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a7c8:	e03a      	b.n	800a840 <_printf_i+0xa8>
 800a7ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a7ce:	2b15      	cmp	r3, #21
 800a7d0:	d8f6      	bhi.n	800a7c0 <_printf_i+0x28>
 800a7d2:	a101      	add	r1, pc, #4	@ (adr r1, 800a7d8 <_printf_i+0x40>)
 800a7d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a7d8:	0800a831 	.word	0x0800a831
 800a7dc:	0800a845 	.word	0x0800a845
 800a7e0:	0800a7c1 	.word	0x0800a7c1
 800a7e4:	0800a7c1 	.word	0x0800a7c1
 800a7e8:	0800a7c1 	.word	0x0800a7c1
 800a7ec:	0800a7c1 	.word	0x0800a7c1
 800a7f0:	0800a845 	.word	0x0800a845
 800a7f4:	0800a7c1 	.word	0x0800a7c1
 800a7f8:	0800a7c1 	.word	0x0800a7c1
 800a7fc:	0800a7c1 	.word	0x0800a7c1
 800a800:	0800a7c1 	.word	0x0800a7c1
 800a804:	0800a947 	.word	0x0800a947
 800a808:	0800a86f 	.word	0x0800a86f
 800a80c:	0800a901 	.word	0x0800a901
 800a810:	0800a7c1 	.word	0x0800a7c1
 800a814:	0800a7c1 	.word	0x0800a7c1
 800a818:	0800a969 	.word	0x0800a969
 800a81c:	0800a7c1 	.word	0x0800a7c1
 800a820:	0800a86f 	.word	0x0800a86f
 800a824:	0800a7c1 	.word	0x0800a7c1
 800a828:	0800a7c1 	.word	0x0800a7c1
 800a82c:	0800a909 	.word	0x0800a909
 800a830:	6833      	ldr	r3, [r6, #0]
 800a832:	1d1a      	adds	r2, r3, #4
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	6032      	str	r2, [r6, #0]
 800a838:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a83c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a840:	2301      	movs	r3, #1
 800a842:	e09e      	b.n	800a982 <_printf_i+0x1ea>
 800a844:	6833      	ldr	r3, [r6, #0]
 800a846:	6820      	ldr	r0, [r4, #0]
 800a848:	1d19      	adds	r1, r3, #4
 800a84a:	6031      	str	r1, [r6, #0]
 800a84c:	0606      	lsls	r6, r0, #24
 800a84e:	d501      	bpl.n	800a854 <_printf_i+0xbc>
 800a850:	681d      	ldr	r5, [r3, #0]
 800a852:	e003      	b.n	800a85c <_printf_i+0xc4>
 800a854:	0645      	lsls	r5, r0, #25
 800a856:	d5fb      	bpl.n	800a850 <_printf_i+0xb8>
 800a858:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a85c:	2d00      	cmp	r5, #0
 800a85e:	da03      	bge.n	800a868 <_printf_i+0xd0>
 800a860:	232d      	movs	r3, #45	@ 0x2d
 800a862:	426d      	negs	r5, r5
 800a864:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a868:	230a      	movs	r3, #10
 800a86a:	4859      	ldr	r0, [pc, #356]	@ (800a9d0 <_printf_i+0x238>)
 800a86c:	e011      	b.n	800a892 <_printf_i+0xfa>
 800a86e:	6821      	ldr	r1, [r4, #0]
 800a870:	6833      	ldr	r3, [r6, #0]
 800a872:	0608      	lsls	r0, r1, #24
 800a874:	f853 5b04 	ldr.w	r5, [r3], #4
 800a878:	d402      	bmi.n	800a880 <_printf_i+0xe8>
 800a87a:	0649      	lsls	r1, r1, #25
 800a87c:	bf48      	it	mi
 800a87e:	b2ad      	uxthmi	r5, r5
 800a880:	2f6f      	cmp	r7, #111	@ 0x6f
 800a882:	6033      	str	r3, [r6, #0]
 800a884:	bf14      	ite	ne
 800a886:	230a      	movne	r3, #10
 800a888:	2308      	moveq	r3, #8
 800a88a:	4851      	ldr	r0, [pc, #324]	@ (800a9d0 <_printf_i+0x238>)
 800a88c:	2100      	movs	r1, #0
 800a88e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a892:	6866      	ldr	r6, [r4, #4]
 800a894:	2e00      	cmp	r6, #0
 800a896:	bfa8      	it	ge
 800a898:	6821      	ldrge	r1, [r4, #0]
 800a89a:	60a6      	str	r6, [r4, #8]
 800a89c:	bfa4      	itt	ge
 800a89e:	f021 0104 	bicge.w	r1, r1, #4
 800a8a2:	6021      	strge	r1, [r4, #0]
 800a8a4:	b90d      	cbnz	r5, 800a8aa <_printf_i+0x112>
 800a8a6:	2e00      	cmp	r6, #0
 800a8a8:	d04b      	beq.n	800a942 <_printf_i+0x1aa>
 800a8aa:	4616      	mov	r6, r2
 800a8ac:	fbb5 f1f3 	udiv	r1, r5, r3
 800a8b0:	fb03 5711 	mls	r7, r3, r1, r5
 800a8b4:	5dc7      	ldrb	r7, [r0, r7]
 800a8b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a8ba:	462f      	mov	r7, r5
 800a8bc:	42bb      	cmp	r3, r7
 800a8be:	460d      	mov	r5, r1
 800a8c0:	d9f4      	bls.n	800a8ac <_printf_i+0x114>
 800a8c2:	2b08      	cmp	r3, #8
 800a8c4:	d10b      	bne.n	800a8de <_printf_i+0x146>
 800a8c6:	6823      	ldr	r3, [r4, #0]
 800a8c8:	07df      	lsls	r7, r3, #31
 800a8ca:	d508      	bpl.n	800a8de <_printf_i+0x146>
 800a8cc:	6923      	ldr	r3, [r4, #16]
 800a8ce:	6861      	ldr	r1, [r4, #4]
 800a8d0:	4299      	cmp	r1, r3
 800a8d2:	bfde      	ittt	le
 800a8d4:	2330      	movle	r3, #48	@ 0x30
 800a8d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a8da:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a8de:	1b92      	subs	r2, r2, r6
 800a8e0:	6122      	str	r2, [r4, #16]
 800a8e2:	464b      	mov	r3, r9
 800a8e4:	4621      	mov	r1, r4
 800a8e6:	4640      	mov	r0, r8
 800a8e8:	f8cd a000 	str.w	sl, [sp]
 800a8ec:	aa03      	add	r2, sp, #12
 800a8ee:	f7ff fee1 	bl	800a6b4 <_printf_common>
 800a8f2:	3001      	adds	r0, #1
 800a8f4:	d14a      	bne.n	800a98c <_printf_i+0x1f4>
 800a8f6:	f04f 30ff 	mov.w	r0, #4294967295
 800a8fa:	b004      	add	sp, #16
 800a8fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a900:	6823      	ldr	r3, [r4, #0]
 800a902:	f043 0320 	orr.w	r3, r3, #32
 800a906:	6023      	str	r3, [r4, #0]
 800a908:	2778      	movs	r7, #120	@ 0x78
 800a90a:	4832      	ldr	r0, [pc, #200]	@ (800a9d4 <_printf_i+0x23c>)
 800a90c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a910:	6823      	ldr	r3, [r4, #0]
 800a912:	6831      	ldr	r1, [r6, #0]
 800a914:	061f      	lsls	r7, r3, #24
 800a916:	f851 5b04 	ldr.w	r5, [r1], #4
 800a91a:	d402      	bmi.n	800a922 <_printf_i+0x18a>
 800a91c:	065f      	lsls	r7, r3, #25
 800a91e:	bf48      	it	mi
 800a920:	b2ad      	uxthmi	r5, r5
 800a922:	6031      	str	r1, [r6, #0]
 800a924:	07d9      	lsls	r1, r3, #31
 800a926:	bf44      	itt	mi
 800a928:	f043 0320 	orrmi.w	r3, r3, #32
 800a92c:	6023      	strmi	r3, [r4, #0]
 800a92e:	b11d      	cbz	r5, 800a938 <_printf_i+0x1a0>
 800a930:	2310      	movs	r3, #16
 800a932:	e7ab      	b.n	800a88c <_printf_i+0xf4>
 800a934:	4826      	ldr	r0, [pc, #152]	@ (800a9d0 <_printf_i+0x238>)
 800a936:	e7e9      	b.n	800a90c <_printf_i+0x174>
 800a938:	6823      	ldr	r3, [r4, #0]
 800a93a:	f023 0320 	bic.w	r3, r3, #32
 800a93e:	6023      	str	r3, [r4, #0]
 800a940:	e7f6      	b.n	800a930 <_printf_i+0x198>
 800a942:	4616      	mov	r6, r2
 800a944:	e7bd      	b.n	800a8c2 <_printf_i+0x12a>
 800a946:	6833      	ldr	r3, [r6, #0]
 800a948:	6825      	ldr	r5, [r4, #0]
 800a94a:	1d18      	adds	r0, r3, #4
 800a94c:	6961      	ldr	r1, [r4, #20]
 800a94e:	6030      	str	r0, [r6, #0]
 800a950:	062e      	lsls	r6, r5, #24
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	d501      	bpl.n	800a95a <_printf_i+0x1c2>
 800a956:	6019      	str	r1, [r3, #0]
 800a958:	e002      	b.n	800a960 <_printf_i+0x1c8>
 800a95a:	0668      	lsls	r0, r5, #25
 800a95c:	d5fb      	bpl.n	800a956 <_printf_i+0x1be>
 800a95e:	8019      	strh	r1, [r3, #0]
 800a960:	2300      	movs	r3, #0
 800a962:	4616      	mov	r6, r2
 800a964:	6123      	str	r3, [r4, #16]
 800a966:	e7bc      	b.n	800a8e2 <_printf_i+0x14a>
 800a968:	6833      	ldr	r3, [r6, #0]
 800a96a:	2100      	movs	r1, #0
 800a96c:	1d1a      	adds	r2, r3, #4
 800a96e:	6032      	str	r2, [r6, #0]
 800a970:	681e      	ldr	r6, [r3, #0]
 800a972:	6862      	ldr	r2, [r4, #4]
 800a974:	4630      	mov	r0, r6
 800a976:	f7ff fbc2 	bl	800a0fe <memchr>
 800a97a:	b108      	cbz	r0, 800a980 <_printf_i+0x1e8>
 800a97c:	1b80      	subs	r0, r0, r6
 800a97e:	6060      	str	r0, [r4, #4]
 800a980:	6863      	ldr	r3, [r4, #4]
 800a982:	6123      	str	r3, [r4, #16]
 800a984:	2300      	movs	r3, #0
 800a986:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a98a:	e7aa      	b.n	800a8e2 <_printf_i+0x14a>
 800a98c:	4632      	mov	r2, r6
 800a98e:	4649      	mov	r1, r9
 800a990:	4640      	mov	r0, r8
 800a992:	6923      	ldr	r3, [r4, #16]
 800a994:	47d0      	blx	sl
 800a996:	3001      	adds	r0, #1
 800a998:	d0ad      	beq.n	800a8f6 <_printf_i+0x15e>
 800a99a:	6823      	ldr	r3, [r4, #0]
 800a99c:	079b      	lsls	r3, r3, #30
 800a99e:	d413      	bmi.n	800a9c8 <_printf_i+0x230>
 800a9a0:	68e0      	ldr	r0, [r4, #12]
 800a9a2:	9b03      	ldr	r3, [sp, #12]
 800a9a4:	4298      	cmp	r0, r3
 800a9a6:	bfb8      	it	lt
 800a9a8:	4618      	movlt	r0, r3
 800a9aa:	e7a6      	b.n	800a8fa <_printf_i+0x162>
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	4632      	mov	r2, r6
 800a9b0:	4649      	mov	r1, r9
 800a9b2:	4640      	mov	r0, r8
 800a9b4:	47d0      	blx	sl
 800a9b6:	3001      	adds	r0, #1
 800a9b8:	d09d      	beq.n	800a8f6 <_printf_i+0x15e>
 800a9ba:	3501      	adds	r5, #1
 800a9bc:	68e3      	ldr	r3, [r4, #12]
 800a9be:	9903      	ldr	r1, [sp, #12]
 800a9c0:	1a5b      	subs	r3, r3, r1
 800a9c2:	42ab      	cmp	r3, r5
 800a9c4:	dcf2      	bgt.n	800a9ac <_printf_i+0x214>
 800a9c6:	e7eb      	b.n	800a9a0 <_printf_i+0x208>
 800a9c8:	2500      	movs	r5, #0
 800a9ca:	f104 0619 	add.w	r6, r4, #25
 800a9ce:	e7f5      	b.n	800a9bc <_printf_i+0x224>
 800a9d0:	0800cabe 	.word	0x0800cabe
 800a9d4:	0800cacf 	.word	0x0800cacf

0800a9d8 <__swbuf_r>:
 800a9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9da:	460e      	mov	r6, r1
 800a9dc:	4614      	mov	r4, r2
 800a9de:	4605      	mov	r5, r0
 800a9e0:	b118      	cbz	r0, 800a9ea <__swbuf_r+0x12>
 800a9e2:	6a03      	ldr	r3, [r0, #32]
 800a9e4:	b90b      	cbnz	r3, 800a9ea <__swbuf_r+0x12>
 800a9e6:	f7ff fa1d 	bl	8009e24 <__sinit>
 800a9ea:	69a3      	ldr	r3, [r4, #24]
 800a9ec:	60a3      	str	r3, [r4, #8]
 800a9ee:	89a3      	ldrh	r3, [r4, #12]
 800a9f0:	071a      	lsls	r2, r3, #28
 800a9f2:	d501      	bpl.n	800a9f8 <__swbuf_r+0x20>
 800a9f4:	6923      	ldr	r3, [r4, #16]
 800a9f6:	b943      	cbnz	r3, 800aa0a <__swbuf_r+0x32>
 800a9f8:	4621      	mov	r1, r4
 800a9fa:	4628      	mov	r0, r5
 800a9fc:	f000 f82a 	bl	800aa54 <__swsetup_r>
 800aa00:	b118      	cbz	r0, 800aa0a <__swbuf_r+0x32>
 800aa02:	f04f 37ff 	mov.w	r7, #4294967295
 800aa06:	4638      	mov	r0, r7
 800aa08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa0a:	6823      	ldr	r3, [r4, #0]
 800aa0c:	6922      	ldr	r2, [r4, #16]
 800aa0e:	b2f6      	uxtb	r6, r6
 800aa10:	1a98      	subs	r0, r3, r2
 800aa12:	6963      	ldr	r3, [r4, #20]
 800aa14:	4637      	mov	r7, r6
 800aa16:	4283      	cmp	r3, r0
 800aa18:	dc05      	bgt.n	800aa26 <__swbuf_r+0x4e>
 800aa1a:	4621      	mov	r1, r4
 800aa1c:	4628      	mov	r0, r5
 800aa1e:	f7ff fccf 	bl	800a3c0 <_fflush_r>
 800aa22:	2800      	cmp	r0, #0
 800aa24:	d1ed      	bne.n	800aa02 <__swbuf_r+0x2a>
 800aa26:	68a3      	ldr	r3, [r4, #8]
 800aa28:	3b01      	subs	r3, #1
 800aa2a:	60a3      	str	r3, [r4, #8]
 800aa2c:	6823      	ldr	r3, [r4, #0]
 800aa2e:	1c5a      	adds	r2, r3, #1
 800aa30:	6022      	str	r2, [r4, #0]
 800aa32:	701e      	strb	r6, [r3, #0]
 800aa34:	6962      	ldr	r2, [r4, #20]
 800aa36:	1c43      	adds	r3, r0, #1
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d004      	beq.n	800aa46 <__swbuf_r+0x6e>
 800aa3c:	89a3      	ldrh	r3, [r4, #12]
 800aa3e:	07db      	lsls	r3, r3, #31
 800aa40:	d5e1      	bpl.n	800aa06 <__swbuf_r+0x2e>
 800aa42:	2e0a      	cmp	r6, #10
 800aa44:	d1df      	bne.n	800aa06 <__swbuf_r+0x2e>
 800aa46:	4621      	mov	r1, r4
 800aa48:	4628      	mov	r0, r5
 800aa4a:	f7ff fcb9 	bl	800a3c0 <_fflush_r>
 800aa4e:	2800      	cmp	r0, #0
 800aa50:	d0d9      	beq.n	800aa06 <__swbuf_r+0x2e>
 800aa52:	e7d6      	b.n	800aa02 <__swbuf_r+0x2a>

0800aa54 <__swsetup_r>:
 800aa54:	b538      	push	{r3, r4, r5, lr}
 800aa56:	4b29      	ldr	r3, [pc, #164]	@ (800aafc <__swsetup_r+0xa8>)
 800aa58:	4605      	mov	r5, r0
 800aa5a:	6818      	ldr	r0, [r3, #0]
 800aa5c:	460c      	mov	r4, r1
 800aa5e:	b118      	cbz	r0, 800aa68 <__swsetup_r+0x14>
 800aa60:	6a03      	ldr	r3, [r0, #32]
 800aa62:	b90b      	cbnz	r3, 800aa68 <__swsetup_r+0x14>
 800aa64:	f7ff f9de 	bl	8009e24 <__sinit>
 800aa68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa6c:	0719      	lsls	r1, r3, #28
 800aa6e:	d422      	bmi.n	800aab6 <__swsetup_r+0x62>
 800aa70:	06da      	lsls	r2, r3, #27
 800aa72:	d407      	bmi.n	800aa84 <__swsetup_r+0x30>
 800aa74:	2209      	movs	r2, #9
 800aa76:	602a      	str	r2, [r5, #0]
 800aa78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa7c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa80:	81a3      	strh	r3, [r4, #12]
 800aa82:	e033      	b.n	800aaec <__swsetup_r+0x98>
 800aa84:	0758      	lsls	r0, r3, #29
 800aa86:	d512      	bpl.n	800aaae <__swsetup_r+0x5a>
 800aa88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aa8a:	b141      	cbz	r1, 800aa9e <__swsetup_r+0x4a>
 800aa8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aa90:	4299      	cmp	r1, r3
 800aa92:	d002      	beq.n	800aa9a <__swsetup_r+0x46>
 800aa94:	4628      	mov	r0, r5
 800aa96:	f7ff fbcb 	bl	800a230 <_free_r>
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	6363      	str	r3, [r4, #52]	@ 0x34
 800aa9e:	89a3      	ldrh	r3, [r4, #12]
 800aaa0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aaa4:	81a3      	strh	r3, [r4, #12]
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	6063      	str	r3, [r4, #4]
 800aaaa:	6923      	ldr	r3, [r4, #16]
 800aaac:	6023      	str	r3, [r4, #0]
 800aaae:	89a3      	ldrh	r3, [r4, #12]
 800aab0:	f043 0308 	orr.w	r3, r3, #8
 800aab4:	81a3      	strh	r3, [r4, #12]
 800aab6:	6923      	ldr	r3, [r4, #16]
 800aab8:	b94b      	cbnz	r3, 800aace <__swsetup_r+0x7a>
 800aaba:	89a3      	ldrh	r3, [r4, #12]
 800aabc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800aac0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aac4:	d003      	beq.n	800aace <__swsetup_r+0x7a>
 800aac6:	4621      	mov	r1, r4
 800aac8:	4628      	mov	r0, r5
 800aaca:	f000 f83e 	bl	800ab4a <__smakebuf_r>
 800aace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aad2:	f013 0201 	ands.w	r2, r3, #1
 800aad6:	d00a      	beq.n	800aaee <__swsetup_r+0x9a>
 800aad8:	2200      	movs	r2, #0
 800aada:	60a2      	str	r2, [r4, #8]
 800aadc:	6962      	ldr	r2, [r4, #20]
 800aade:	4252      	negs	r2, r2
 800aae0:	61a2      	str	r2, [r4, #24]
 800aae2:	6922      	ldr	r2, [r4, #16]
 800aae4:	b942      	cbnz	r2, 800aaf8 <__swsetup_r+0xa4>
 800aae6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800aaea:	d1c5      	bne.n	800aa78 <__swsetup_r+0x24>
 800aaec:	bd38      	pop	{r3, r4, r5, pc}
 800aaee:	0799      	lsls	r1, r3, #30
 800aaf0:	bf58      	it	pl
 800aaf2:	6962      	ldrpl	r2, [r4, #20]
 800aaf4:	60a2      	str	r2, [r4, #8]
 800aaf6:	e7f4      	b.n	800aae2 <__swsetup_r+0x8e>
 800aaf8:	2000      	movs	r0, #0
 800aafa:	e7f7      	b.n	800aaec <__swsetup_r+0x98>
 800aafc:	2000001c 	.word	0x2000001c

0800ab00 <__swhatbuf_r>:
 800ab00:	b570      	push	{r4, r5, r6, lr}
 800ab02:	460c      	mov	r4, r1
 800ab04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab08:	4615      	mov	r5, r2
 800ab0a:	2900      	cmp	r1, #0
 800ab0c:	461e      	mov	r6, r3
 800ab0e:	b096      	sub	sp, #88	@ 0x58
 800ab10:	da0c      	bge.n	800ab2c <__swhatbuf_r+0x2c>
 800ab12:	89a3      	ldrh	r3, [r4, #12]
 800ab14:	2100      	movs	r1, #0
 800ab16:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ab1a:	bf14      	ite	ne
 800ab1c:	2340      	movne	r3, #64	@ 0x40
 800ab1e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ab22:	2000      	movs	r0, #0
 800ab24:	6031      	str	r1, [r6, #0]
 800ab26:	602b      	str	r3, [r5, #0]
 800ab28:	b016      	add	sp, #88	@ 0x58
 800ab2a:	bd70      	pop	{r4, r5, r6, pc}
 800ab2c:	466a      	mov	r2, sp
 800ab2e:	f000 f849 	bl	800abc4 <_fstat_r>
 800ab32:	2800      	cmp	r0, #0
 800ab34:	dbed      	blt.n	800ab12 <__swhatbuf_r+0x12>
 800ab36:	9901      	ldr	r1, [sp, #4]
 800ab38:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ab3c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ab40:	4259      	negs	r1, r3
 800ab42:	4159      	adcs	r1, r3
 800ab44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ab48:	e7eb      	b.n	800ab22 <__swhatbuf_r+0x22>

0800ab4a <__smakebuf_r>:
 800ab4a:	898b      	ldrh	r3, [r1, #12]
 800ab4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab4e:	079d      	lsls	r5, r3, #30
 800ab50:	4606      	mov	r6, r0
 800ab52:	460c      	mov	r4, r1
 800ab54:	d507      	bpl.n	800ab66 <__smakebuf_r+0x1c>
 800ab56:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ab5a:	6023      	str	r3, [r4, #0]
 800ab5c:	6123      	str	r3, [r4, #16]
 800ab5e:	2301      	movs	r3, #1
 800ab60:	6163      	str	r3, [r4, #20]
 800ab62:	b003      	add	sp, #12
 800ab64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab66:	466a      	mov	r2, sp
 800ab68:	ab01      	add	r3, sp, #4
 800ab6a:	f7ff ffc9 	bl	800ab00 <__swhatbuf_r>
 800ab6e:	9f00      	ldr	r7, [sp, #0]
 800ab70:	4605      	mov	r5, r0
 800ab72:	4639      	mov	r1, r7
 800ab74:	4630      	mov	r0, r6
 800ab76:	f7fe ffd1 	bl	8009b1c <_malloc_r>
 800ab7a:	b948      	cbnz	r0, 800ab90 <__smakebuf_r+0x46>
 800ab7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab80:	059a      	lsls	r2, r3, #22
 800ab82:	d4ee      	bmi.n	800ab62 <__smakebuf_r+0x18>
 800ab84:	f023 0303 	bic.w	r3, r3, #3
 800ab88:	f043 0302 	orr.w	r3, r3, #2
 800ab8c:	81a3      	strh	r3, [r4, #12]
 800ab8e:	e7e2      	b.n	800ab56 <__smakebuf_r+0xc>
 800ab90:	89a3      	ldrh	r3, [r4, #12]
 800ab92:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ab96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab9a:	81a3      	strh	r3, [r4, #12]
 800ab9c:	9b01      	ldr	r3, [sp, #4]
 800ab9e:	6020      	str	r0, [r4, #0]
 800aba0:	b15b      	cbz	r3, 800abba <__smakebuf_r+0x70>
 800aba2:	4630      	mov	r0, r6
 800aba4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aba8:	f000 f81e 	bl	800abe8 <_isatty_r>
 800abac:	b128      	cbz	r0, 800abba <__smakebuf_r+0x70>
 800abae:	89a3      	ldrh	r3, [r4, #12]
 800abb0:	f023 0303 	bic.w	r3, r3, #3
 800abb4:	f043 0301 	orr.w	r3, r3, #1
 800abb8:	81a3      	strh	r3, [r4, #12]
 800abba:	89a3      	ldrh	r3, [r4, #12]
 800abbc:	431d      	orrs	r5, r3
 800abbe:	81a5      	strh	r5, [r4, #12]
 800abc0:	e7cf      	b.n	800ab62 <__smakebuf_r+0x18>
	...

0800abc4 <_fstat_r>:
 800abc4:	b538      	push	{r3, r4, r5, lr}
 800abc6:	2300      	movs	r3, #0
 800abc8:	4d06      	ldr	r5, [pc, #24]	@ (800abe4 <_fstat_r+0x20>)
 800abca:	4604      	mov	r4, r0
 800abcc:	4608      	mov	r0, r1
 800abce:	4611      	mov	r1, r2
 800abd0:	602b      	str	r3, [r5, #0]
 800abd2:	f000 f821 	bl	800ac18 <_fstat>
 800abd6:	1c43      	adds	r3, r0, #1
 800abd8:	d102      	bne.n	800abe0 <_fstat_r+0x1c>
 800abda:	682b      	ldr	r3, [r5, #0]
 800abdc:	b103      	cbz	r3, 800abe0 <_fstat_r+0x1c>
 800abde:	6023      	str	r3, [r4, #0]
 800abe0:	bd38      	pop	{r3, r4, r5, pc}
 800abe2:	bf00      	nop
 800abe4:	2000083c 	.word	0x2000083c

0800abe8 <_isatty_r>:
 800abe8:	b538      	push	{r3, r4, r5, lr}
 800abea:	2300      	movs	r3, #0
 800abec:	4d05      	ldr	r5, [pc, #20]	@ (800ac04 <_isatty_r+0x1c>)
 800abee:	4604      	mov	r4, r0
 800abf0:	4608      	mov	r0, r1
 800abf2:	602b      	str	r3, [r5, #0]
 800abf4:	f000 f820 	bl	800ac38 <_isatty>
 800abf8:	1c43      	adds	r3, r0, #1
 800abfa:	d102      	bne.n	800ac02 <_isatty_r+0x1a>
 800abfc:	682b      	ldr	r3, [r5, #0]
 800abfe:	b103      	cbz	r3, 800ac02 <_isatty_r+0x1a>
 800ac00:	6023      	str	r3, [r4, #0]
 800ac02:	bd38      	pop	{r3, r4, r5, pc}
 800ac04:	2000083c 	.word	0x2000083c

0800ac08 <_close>:
 800ac08:	2258      	movs	r2, #88	@ 0x58
 800ac0a:	4b02      	ldr	r3, [pc, #8]	@ (800ac14 <_close+0xc>)
 800ac0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac10:	601a      	str	r2, [r3, #0]
 800ac12:	4770      	bx	lr
 800ac14:	2000083c 	.word	0x2000083c

0800ac18 <_fstat>:
 800ac18:	2258      	movs	r2, #88	@ 0x58
 800ac1a:	4b02      	ldr	r3, [pc, #8]	@ (800ac24 <_fstat+0xc>)
 800ac1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac20:	601a      	str	r2, [r3, #0]
 800ac22:	4770      	bx	lr
 800ac24:	2000083c 	.word	0x2000083c

0800ac28 <_getpid>:
 800ac28:	2258      	movs	r2, #88	@ 0x58
 800ac2a:	4b02      	ldr	r3, [pc, #8]	@ (800ac34 <_getpid+0xc>)
 800ac2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac30:	601a      	str	r2, [r3, #0]
 800ac32:	4770      	bx	lr
 800ac34:	2000083c 	.word	0x2000083c

0800ac38 <_isatty>:
 800ac38:	2258      	movs	r2, #88	@ 0x58
 800ac3a:	4b02      	ldr	r3, [pc, #8]	@ (800ac44 <_isatty+0xc>)
 800ac3c:	2000      	movs	r0, #0
 800ac3e:	601a      	str	r2, [r3, #0]
 800ac40:	4770      	bx	lr
 800ac42:	bf00      	nop
 800ac44:	2000083c 	.word	0x2000083c

0800ac48 <_kill>:
 800ac48:	2258      	movs	r2, #88	@ 0x58
 800ac4a:	4b02      	ldr	r3, [pc, #8]	@ (800ac54 <_kill+0xc>)
 800ac4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac50:	601a      	str	r2, [r3, #0]
 800ac52:	4770      	bx	lr
 800ac54:	2000083c 	.word	0x2000083c

0800ac58 <_lseek>:
 800ac58:	2258      	movs	r2, #88	@ 0x58
 800ac5a:	4b02      	ldr	r3, [pc, #8]	@ (800ac64 <_lseek+0xc>)
 800ac5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac60:	601a      	str	r2, [r3, #0]
 800ac62:	4770      	bx	lr
 800ac64:	2000083c 	.word	0x2000083c

0800ac68 <_read>:
 800ac68:	2258      	movs	r2, #88	@ 0x58
 800ac6a:	4b02      	ldr	r3, [pc, #8]	@ (800ac74 <_read+0xc>)
 800ac6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac70:	601a      	str	r2, [r3, #0]
 800ac72:	4770      	bx	lr
 800ac74:	2000083c 	.word	0x2000083c

0800ac78 <_sbrk>:
 800ac78:	4a04      	ldr	r2, [pc, #16]	@ (800ac8c <_sbrk+0x14>)
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	6811      	ldr	r1, [r2, #0]
 800ac7e:	b909      	cbnz	r1, 800ac84 <_sbrk+0xc>
 800ac80:	4903      	ldr	r1, [pc, #12]	@ (800ac90 <_sbrk+0x18>)
 800ac82:	6011      	str	r1, [r2, #0]
 800ac84:	6810      	ldr	r0, [r2, #0]
 800ac86:	4403      	add	r3, r0
 800ac88:	6013      	str	r3, [r2, #0]
 800ac8a:	4770      	bx	lr
 800ac8c:	200008d4 	.word	0x200008d4
 800ac90:	200008d8 	.word	0x200008d8

0800ac94 <_write>:
 800ac94:	2258      	movs	r2, #88	@ 0x58
 800ac96:	4b02      	ldr	r3, [pc, #8]	@ (800aca0 <_write+0xc>)
 800ac98:	f04f 30ff 	mov.w	r0, #4294967295
 800ac9c:	601a      	str	r2, [r3, #0]
 800ac9e:	4770      	bx	lr
 800aca0:	2000083c 	.word	0x2000083c

0800aca4 <_exit>:
 800aca4:	e7fe      	b.n	800aca4 <_exit>
	...

0800aca8 <_init>:
 800aca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acaa:	bf00      	nop
 800acac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acae:	bc08      	pop	{r3}
 800acb0:	469e      	mov	lr, r3
 800acb2:	4770      	bx	lr

0800acb4 <_fini>:
 800acb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acb6:	bf00      	nop
 800acb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acba:	bc08      	pop	{r3}
 800acbc:	469e      	mov	lr, r3
 800acbe:	4770      	bx	lr
