
WithAstraUI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000981c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d40  0800992c  0800992c  0000a92c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b66c  0800b66c  0000d084  2**0
                  CONTENTS
  4 .ARM          00000008  0800b66c  0800b66c  0000c66c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b674  0800b674  0000d084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b674  0800b674  0000c674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800b67c  0800b67c  0000c67c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  0800b684  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003ef4  200000a0  0800b708  0000d0a0  2**5
                  ALLOC
 10 ._user_heap_stack 00000604  20003f94  0800b708  0000df94  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000a23c5  00000000  00000000  0000d0ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000c7a5  00000000  00000000  000af472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0001753a  00000000  00000000  000bbc17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018c8  00000000  00000000  000d3158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002c4d  00000000  00000000  000d4a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fbf0  00000000  00000000  000d766d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003226f  00000000  00000000  000f725d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b3b4c  00000000  00000000  001294cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001dd018  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006d58  00000000  00000000  001dd05c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  001e3db4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000a0 	.word	0x200000a0
 800012c:	00000000 	.word	0x00000000
 8000130:	08009914 	.word	0x08009914

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000a4 	.word	0x200000a4
 800014c:	08009914 	.word	0x08009914

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_dmul>:
 8000174:	b570      	push	{r4, r5, r6, lr}
 8000176:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800017a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800017e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000182:	bf1d      	ittte	ne
 8000184:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000188:	ea94 0f0c 	teqne	r4, ip
 800018c:	ea95 0f0c 	teqne	r5, ip
 8000190:	f000 f8de 	bleq	8000350 <__aeabi_dmul+0x1dc>
 8000194:	442c      	add	r4, r5
 8000196:	ea81 0603 	eor.w	r6, r1, r3
 800019a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800019e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001a6:	bf18      	it	ne
 80001a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80001ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80001b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80001b4:	d038      	beq.n	8000228 <__aeabi_dmul+0xb4>
 80001b6:	fba0 ce02 	umull	ip, lr, r0, r2
 80001ba:	f04f 0500 	mov.w	r5, #0
 80001be:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001c2:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001c6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001ca:	f04f 0600 	mov.w	r6, #0
 80001ce:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001d2:	f09c 0f00 	teq	ip, #0
 80001d6:	bf18      	it	ne
 80001d8:	f04e 0e01 	orrne.w	lr, lr, #1
 80001dc:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001e0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001e4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001e8:	d204      	bcs.n	80001f4 <__aeabi_dmul+0x80>
 80001ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ee:	416d      	adcs	r5, r5
 80001f0:	eb46 0606 	adc.w	r6, r6, r6
 80001f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000200:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000204:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000208:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800020c:	bf88      	it	hi
 800020e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000212:	d81e      	bhi.n	8000252 <__aeabi_dmul+0xde>
 8000214:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000218:	bf08      	it	eq
 800021a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800021e:	f150 0000 	adcs.w	r0, r0, #0
 8000222:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000226:	bd70      	pop	{r4, r5, r6, pc}
 8000228:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800022c:	ea46 0101 	orr.w	r1, r6, r1
 8000230:	ea40 0002 	orr.w	r0, r0, r2
 8000234:	ea81 0103 	eor.w	r1, r1, r3
 8000238:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800023c:	bfc2      	ittt	gt
 800023e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000242:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000246:	bd70      	popgt	{r4, r5, r6, pc}
 8000248:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800024c:	f04f 0e00 	mov.w	lr, #0
 8000250:	3c01      	subs	r4, #1
 8000252:	f300 80ab 	bgt.w	80003ac <__aeabi_dmul+0x238>
 8000256:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800025a:	bfde      	ittt	le
 800025c:	2000      	movle	r0, #0
 800025e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000262:	bd70      	pople	{r4, r5, r6, pc}
 8000264:	f1c4 0400 	rsb	r4, r4, #0
 8000268:	3c20      	subs	r4, #32
 800026a:	da35      	bge.n	80002d8 <__aeabi_dmul+0x164>
 800026c:	340c      	adds	r4, #12
 800026e:	dc1b      	bgt.n	80002a8 <__aeabi_dmul+0x134>
 8000270:	f104 0414 	add.w	r4, r4, #20
 8000274:	f1c4 0520 	rsb	r5, r4, #32
 8000278:	fa00 f305 	lsl.w	r3, r0, r5
 800027c:	fa20 f004 	lsr.w	r0, r0, r4
 8000280:	fa01 f205 	lsl.w	r2, r1, r5
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800028c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000290:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000294:	fa21 f604 	lsr.w	r6, r1, r4
 8000298:	eb42 0106 	adc.w	r1, r2, r6
 800029c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002a0:	bf08      	it	eq
 80002a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002a6:	bd70      	pop	{r4, r5, r6, pc}
 80002a8:	f1c4 040c 	rsb	r4, r4, #12
 80002ac:	f1c4 0520 	rsb	r5, r4, #32
 80002b0:	fa00 f304 	lsl.w	r3, r0, r4
 80002b4:	fa20 f005 	lsr.w	r0, r0, r5
 80002b8:	fa01 f204 	lsl.w	r2, r1, r4
 80002bc:	ea40 0002 	orr.w	r0, r0, r2
 80002c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002c8:	f141 0100 	adc.w	r1, r1, #0
 80002cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002d0:	bf08      	it	eq
 80002d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002d6:	bd70      	pop	{r4, r5, r6, pc}
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f205 	lsl.w	r2, r0, r5
 80002e0:	ea4e 0e02 	orr.w	lr, lr, r2
 80002e4:	fa20 f304 	lsr.w	r3, r0, r4
 80002e8:	fa01 f205 	lsl.w	r2, r1, r5
 80002ec:	ea43 0302 	orr.w	r3, r3, r2
 80002f0:	fa21 f004 	lsr.w	r0, r1, r4
 80002f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002f8:	fa21 f204 	lsr.w	r2, r1, r4
 80002fc:	ea20 0002 	bic.w	r0, r0, r2
 8000300:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000304:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000308:	bf08      	it	eq
 800030a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030e:	bd70      	pop	{r4, r5, r6, pc}
 8000310:	f094 0f00 	teq	r4, #0
 8000314:	d10f      	bne.n	8000336 <__aeabi_dmul+0x1c2>
 8000316:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800031a:	0040      	lsls	r0, r0, #1
 800031c:	eb41 0101 	adc.w	r1, r1, r1
 8000320:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000324:	bf08      	it	eq
 8000326:	3c01      	subeq	r4, #1
 8000328:	d0f7      	beq.n	800031a <__aeabi_dmul+0x1a6>
 800032a:	ea41 0106 	orr.w	r1, r1, r6
 800032e:	f095 0f00 	teq	r5, #0
 8000332:	bf18      	it	ne
 8000334:	4770      	bxne	lr
 8000336:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800033a:	0052      	lsls	r2, r2, #1
 800033c:	eb43 0303 	adc.w	r3, r3, r3
 8000340:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000344:	bf08      	it	eq
 8000346:	3d01      	subeq	r5, #1
 8000348:	d0f7      	beq.n	800033a <__aeabi_dmul+0x1c6>
 800034a:	ea43 0306 	orr.w	r3, r3, r6
 800034e:	4770      	bx	lr
 8000350:	ea94 0f0c 	teq	r4, ip
 8000354:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000358:	bf18      	it	ne
 800035a:	ea95 0f0c 	teqne	r5, ip
 800035e:	d00c      	beq.n	800037a <__aeabi_dmul+0x206>
 8000360:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000364:	bf18      	it	ne
 8000366:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800036a:	d1d1      	bne.n	8000310 <__aeabi_dmul+0x19c>
 800036c:	ea81 0103 	eor.w	r1, r1, r3
 8000370:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000374:	f04f 0000 	mov.w	r0, #0
 8000378:	bd70      	pop	{r4, r5, r6, pc}
 800037a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800037e:	bf06      	itte	eq
 8000380:	4610      	moveq	r0, r2
 8000382:	4619      	moveq	r1, r3
 8000384:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000388:	d019      	beq.n	80003be <__aeabi_dmul+0x24a>
 800038a:	ea94 0f0c 	teq	r4, ip
 800038e:	d102      	bne.n	8000396 <__aeabi_dmul+0x222>
 8000390:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000394:	d113      	bne.n	80003be <__aeabi_dmul+0x24a>
 8000396:	ea95 0f0c 	teq	r5, ip
 800039a:	d105      	bne.n	80003a8 <__aeabi_dmul+0x234>
 800039c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003a0:	bf1c      	itt	ne
 80003a2:	4610      	movne	r0, r2
 80003a4:	4619      	movne	r1, r3
 80003a6:	d10a      	bne.n	80003be <__aeabi_dmul+0x24a>
 80003a8:	ea81 0103 	eor.w	r1, r1, r3
 80003ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003b0:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003b4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b8:	f04f 0000 	mov.w	r0, #0
 80003bc:	bd70      	pop	{r4, r5, r6, pc}
 80003be:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003c2:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003c6:	bd70      	pop	{r4, r5, r6, pc}

080003c8 <__aeabi_drsub>:
 80003c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003cc:	e002      	b.n	80003d4 <__adddf3>
 80003ce:	bf00      	nop

080003d0 <__aeabi_dsub>:
 80003d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003d4 <__adddf3>:
 80003d4:	b530      	push	{r4, r5, lr}
 80003d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	bf1f      	itttt	ne
 80003ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003fa:	f000 80e2 	beq.w	80005c2 <__adddf3+0x1ee>
 80003fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000402:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000406:	bfb8      	it	lt
 8000408:	426d      	neglt	r5, r5
 800040a:	dd0c      	ble.n	8000426 <__adddf3+0x52>
 800040c:	442c      	add	r4, r5
 800040e:	ea80 0202 	eor.w	r2, r0, r2
 8000412:	ea81 0303 	eor.w	r3, r1, r3
 8000416:	ea82 0000 	eor.w	r0, r2, r0
 800041a:	ea83 0101 	eor.w	r1, r3, r1
 800041e:	ea80 0202 	eor.w	r2, r0, r2
 8000422:	ea81 0303 	eor.w	r3, r1, r3
 8000426:	2d36      	cmp	r5, #54	@ 0x36
 8000428:	bf88      	it	hi
 800042a:	bd30      	pophi	{r4, r5, pc}
 800042c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000430:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000434:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000438:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x70>
 800043e:	4240      	negs	r0, r0
 8000440:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000444:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000448:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800044c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000450:	d002      	beq.n	8000458 <__adddf3+0x84>
 8000452:	4252      	negs	r2, r2
 8000454:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000458:	ea94 0f05 	teq	r4, r5
 800045c:	f000 80a7 	beq.w	80005ae <__adddf3+0x1da>
 8000460:	f1a4 0401 	sub.w	r4, r4, #1
 8000464:	f1d5 0e20 	rsbs	lr, r5, #32
 8000468:	db0d      	blt.n	8000486 <__adddf3+0xb2>
 800046a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800046e:	fa22 f205 	lsr.w	r2, r2, r5
 8000472:	1880      	adds	r0, r0, r2
 8000474:	f141 0100 	adc.w	r1, r1, #0
 8000478:	fa03 f20e 	lsl.w	r2, r3, lr
 800047c:	1880      	adds	r0, r0, r2
 800047e:	fa43 f305 	asr.w	r3, r3, r5
 8000482:	4159      	adcs	r1, r3
 8000484:	e00e      	b.n	80004a4 <__adddf3+0xd0>
 8000486:	f1a5 0520 	sub.w	r5, r5, #32
 800048a:	f10e 0e20 	add.w	lr, lr, #32
 800048e:	2a01      	cmp	r2, #1
 8000490:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000494:	bf28      	it	cs
 8000496:	f04c 0c02 	orrcs.w	ip, ip, #2
 800049a:	fa43 f305 	asr.w	r3, r3, r5
 800049e:	18c0      	adds	r0, r0, r3
 80004a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a8:	d507      	bpl.n	80004ba <__adddf3+0xe6>
 80004aa:	f04f 0e00 	mov.w	lr, #0
 80004ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80004b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80004ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004be:	d31b      	bcc.n	80004f8 <__adddf3+0x124>
 80004c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004c4:	d30c      	bcc.n	80004e0 <__adddf3+0x10c>
 80004c6:	0849      	lsrs	r1, r1, #1
 80004c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80004cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004d0:	f104 0401 	add.w	r4, r4, #1
 80004d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004dc:	f080 809a 	bcs.w	8000614 <__adddf3+0x240>
 80004e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004e4:	bf08      	it	eq
 80004e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004ea:	f150 0000 	adcs.w	r0, r0, #0
 80004ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004f2:	ea41 0105 	orr.w	r1, r1, r5
 80004f6:	bd30      	pop	{r4, r5, pc}
 80004f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004fc:	4140      	adcs	r0, r0
 80004fe:	eb41 0101 	adc.w	r1, r1, r1
 8000502:	3c01      	subs	r4, #1
 8000504:	bf28      	it	cs
 8000506:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800050a:	d2e9      	bcs.n	80004e0 <__adddf3+0x10c>
 800050c:	f091 0f00 	teq	r1, #0
 8000510:	bf04      	itt	eq
 8000512:	4601      	moveq	r1, r0
 8000514:	2000      	moveq	r0, #0
 8000516:	fab1 f381 	clz	r3, r1
 800051a:	bf08      	it	eq
 800051c:	3320      	addeq	r3, #32
 800051e:	f1a3 030b 	sub.w	r3, r3, #11
 8000522:	f1b3 0220 	subs.w	r2, r3, #32
 8000526:	da0c      	bge.n	8000542 <__adddf3+0x16e>
 8000528:	320c      	adds	r2, #12
 800052a:	dd08      	ble.n	800053e <__adddf3+0x16a>
 800052c:	f102 0c14 	add.w	ip, r2, #20
 8000530:	f1c2 020c 	rsb	r2, r2, #12
 8000534:	fa01 f00c 	lsl.w	r0, r1, ip
 8000538:	fa21 f102 	lsr.w	r1, r1, r2
 800053c:	e00c      	b.n	8000558 <__adddf3+0x184>
 800053e:	f102 0214 	add.w	r2, r2, #20
 8000542:	bfd8      	it	le
 8000544:	f1c2 0c20 	rsble	ip, r2, #32
 8000548:	fa01 f102 	lsl.w	r1, r1, r2
 800054c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000550:	bfdc      	itt	le
 8000552:	ea41 010c 	orrle.w	r1, r1, ip
 8000556:	4090      	lslle	r0, r2
 8000558:	1ae4      	subs	r4, r4, r3
 800055a:	bfa2      	ittt	ge
 800055c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000560:	4329      	orrge	r1, r5
 8000562:	bd30      	popge	{r4, r5, pc}
 8000564:	ea6f 0404 	mvn.w	r4, r4
 8000568:	3c1f      	subs	r4, #31
 800056a:	da1c      	bge.n	80005a6 <__adddf3+0x1d2>
 800056c:	340c      	adds	r4, #12
 800056e:	dc0e      	bgt.n	800058e <__adddf3+0x1ba>
 8000570:	f104 0414 	add.w	r4, r4, #20
 8000574:	f1c4 0220 	rsb	r2, r4, #32
 8000578:	fa20 f004 	lsr.w	r0, r0, r4
 800057c:	fa01 f302 	lsl.w	r3, r1, r2
 8000580:	ea40 0003 	orr.w	r0, r0, r3
 8000584:	fa21 f304 	lsr.w	r3, r1, r4
 8000588:	ea45 0103 	orr.w	r1, r5, r3
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	f1c4 040c 	rsb	r4, r4, #12
 8000592:	f1c4 0220 	rsb	r2, r4, #32
 8000596:	fa20 f002 	lsr.w	r0, r0, r2
 800059a:	fa01 f304 	lsl.w	r3, r1, r4
 800059e:	ea40 0003 	orr.w	r0, r0, r3
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	fa21 f004 	lsr.w	r0, r1, r4
 80005aa:	4629      	mov	r1, r5
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	f094 0f00 	teq	r4, #0
 80005b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005b6:	bf06      	itte	eq
 80005b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005bc:	3401      	addeq	r4, #1
 80005be:	3d01      	subne	r5, #1
 80005c0:	e74e      	b.n	8000460 <__adddf3+0x8c>
 80005c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005c6:	bf18      	it	ne
 80005c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005cc:	d029      	beq.n	8000622 <__adddf3+0x24e>
 80005ce:	ea94 0f05 	teq	r4, r5
 80005d2:	bf08      	it	eq
 80005d4:	ea90 0f02 	teqeq	r0, r2
 80005d8:	d005      	beq.n	80005e6 <__adddf3+0x212>
 80005da:	ea54 0c00 	orrs.w	ip, r4, r0
 80005de:	bf04      	itt	eq
 80005e0:	4619      	moveq	r1, r3
 80005e2:	4610      	moveq	r0, r2
 80005e4:	bd30      	pop	{r4, r5, pc}
 80005e6:	ea91 0f03 	teq	r1, r3
 80005ea:	bf1e      	ittt	ne
 80005ec:	2100      	movne	r1, #0
 80005ee:	2000      	movne	r0, #0
 80005f0:	bd30      	popne	{r4, r5, pc}
 80005f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005f6:	d105      	bne.n	8000604 <__adddf3+0x230>
 80005f8:	0040      	lsls	r0, r0, #1
 80005fa:	4149      	adcs	r1, r1
 80005fc:	bf28      	it	cs
 80005fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000608:	bf3c      	itt	cc
 800060a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800060e:	bd30      	popcc	{r4, r5, pc}
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000614:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000618:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800061c:	f04f 0000 	mov.w	r0, #0
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000626:	bf1a      	itte	ne
 8000628:	4619      	movne	r1, r3
 800062a:	4610      	movne	r0, r2
 800062c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000630:	bf1c      	itt	ne
 8000632:	460b      	movne	r3, r1
 8000634:	4602      	movne	r2, r0
 8000636:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800063a:	bf06      	itte	eq
 800063c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000640:	ea91 0f03 	teqeq	r1, r3
 8000644:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	bf00      	nop

0800064c <__aeabi_ui2d>:
 800064c:	f090 0f00 	teq	r0, #0
 8000650:	bf04      	itt	eq
 8000652:	2100      	moveq	r1, #0
 8000654:	4770      	bxeq	lr
 8000656:	b530      	push	{r4, r5, lr}
 8000658:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800065c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000660:	f04f 0500 	mov.w	r5, #0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e750      	b.n	800050c <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_i2d>:
 800066c:	f090 0f00 	teq	r0, #0
 8000670:	bf04      	itt	eq
 8000672:	2100      	moveq	r1, #0
 8000674:	4770      	bxeq	lr
 8000676:	b530      	push	{r4, r5, lr}
 8000678:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800067c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000680:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000684:	bf48      	it	mi
 8000686:	4240      	negmi	r0, r0
 8000688:	f04f 0100 	mov.w	r1, #0
 800068c:	e73e      	b.n	800050c <__adddf3+0x138>
 800068e:	bf00      	nop

08000690 <__aeabi_f2d>:
 8000690:	0042      	lsls	r2, r0, #1
 8000692:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000696:	ea4f 0131 	mov.w	r1, r1, rrx
 800069a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800069e:	bf1f      	itttt	ne
 80006a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006ac:	4770      	bxne	lr
 80006ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006b2:	bf08      	it	eq
 80006b4:	4770      	bxeq	lr
 80006b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006ba:	bf04      	itt	eq
 80006bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006c0:	4770      	bxeq	lr
 80006c2:	b530      	push	{r4, r5, lr}
 80006c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	e71c      	b.n	800050c <__adddf3+0x138>
 80006d2:	bf00      	nop

080006d4 <__aeabi_ul2d>:
 80006d4:	ea50 0201 	orrs.w	r2, r0, r1
 80006d8:	bf08      	it	eq
 80006da:	4770      	bxeq	lr
 80006dc:	b530      	push	{r4, r5, lr}
 80006de:	f04f 0500 	mov.w	r5, #0
 80006e2:	e00a      	b.n	80006fa <__aeabi_l2d+0x16>

080006e4 <__aeabi_l2d>:
 80006e4:	ea50 0201 	orrs.w	r2, r0, r1
 80006e8:	bf08      	it	eq
 80006ea:	4770      	bxeq	lr
 80006ec:	b530      	push	{r4, r5, lr}
 80006ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006f2:	d502      	bpl.n	80006fa <__aeabi_l2d+0x16>
 80006f4:	4240      	negs	r0, r0
 80006f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000702:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000706:	f43f aed8 	beq.w	80004ba <__adddf3+0xe6>
 800070a:	f04f 0203 	mov.w	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800071a:	bf18      	it	ne
 800071c:	3203      	addne	r2, #3
 800071e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000722:	f1c2 0320 	rsb	r3, r2, #32
 8000726:	fa00 fc03 	lsl.w	ip, r0, r3
 800072a:	fa20 f002 	lsr.w	r0, r0, r2
 800072e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000732:	ea40 000e 	orr.w	r0, r0, lr
 8000736:	fa21 f102 	lsr.w	r1, r1, r2
 800073a:	4414      	add	r4, r2
 800073c:	e6bd      	b.n	80004ba <__adddf3+0xe6>
 800073e:	bf00      	nop

08000740 <__gedf2>:
 8000740:	f04f 3cff 	mov.w	ip, #4294967295
 8000744:	e006      	b.n	8000754 <__cmpdf2+0x4>
 8000746:	bf00      	nop

08000748 <__ledf2>:
 8000748:	f04f 0c01 	mov.w	ip, #1
 800074c:	e002      	b.n	8000754 <__cmpdf2+0x4>
 800074e:	bf00      	nop

08000750 <__cmpdf2>:
 8000750:	f04f 0c01 	mov.w	ip, #1
 8000754:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000758:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800075c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000760:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000764:	bf18      	it	ne
 8000766:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800076a:	d01b      	beq.n	80007a4 <__cmpdf2+0x54>
 800076c:	b001      	add	sp, #4
 800076e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000772:	bf0c      	ite	eq
 8000774:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000778:	ea91 0f03 	teqne	r1, r3
 800077c:	bf02      	ittt	eq
 800077e:	ea90 0f02 	teqeq	r0, r2
 8000782:	2000      	moveq	r0, #0
 8000784:	4770      	bxeq	lr
 8000786:	f110 0f00 	cmn.w	r0, #0
 800078a:	ea91 0f03 	teq	r1, r3
 800078e:	bf58      	it	pl
 8000790:	4299      	cmppl	r1, r3
 8000792:	bf08      	it	eq
 8000794:	4290      	cmpeq	r0, r2
 8000796:	bf2c      	ite	cs
 8000798:	17d8      	asrcs	r0, r3, #31
 800079a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800079e:	f040 0001 	orr.w	r0, r0, #1
 80007a2:	4770      	bx	lr
 80007a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007ac:	d102      	bne.n	80007b4 <__cmpdf2+0x64>
 80007ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80007b2:	d107      	bne.n	80007c4 <__cmpdf2+0x74>
 80007b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007bc:	d1d6      	bne.n	800076c <__cmpdf2+0x1c>
 80007be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007c2:	d0d3      	beq.n	800076c <__cmpdf2+0x1c>
 80007c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop

080007cc <__aeabi_cdrcmple>:
 80007cc:	4684      	mov	ip, r0
 80007ce:	4610      	mov	r0, r2
 80007d0:	4662      	mov	r2, ip
 80007d2:	468c      	mov	ip, r1
 80007d4:	4619      	mov	r1, r3
 80007d6:	4663      	mov	r3, ip
 80007d8:	e000      	b.n	80007dc <__aeabi_cdcmpeq>
 80007da:	bf00      	nop

080007dc <__aeabi_cdcmpeq>:
 80007dc:	b501      	push	{r0, lr}
 80007de:	f7ff ffb7 	bl	8000750 <__cmpdf2>
 80007e2:	2800      	cmp	r0, #0
 80007e4:	bf48      	it	mi
 80007e6:	f110 0f00 	cmnmi.w	r0, #0
 80007ea:	bd01      	pop	{r0, pc}

080007ec <__aeabi_dcmpeq>:
 80007ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007f0:	f7ff fff4 	bl	80007dc <__aeabi_cdcmpeq>
 80007f4:	bf0c      	ite	eq
 80007f6:	2001      	moveq	r0, #1
 80007f8:	2000      	movne	r0, #0
 80007fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80007fe:	bf00      	nop

08000800 <__aeabi_dcmplt>:
 8000800:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000804:	f7ff ffea 	bl	80007dc <__aeabi_cdcmpeq>
 8000808:	bf34      	ite	cc
 800080a:	2001      	movcc	r0, #1
 800080c:	2000      	movcs	r0, #0
 800080e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000812:	bf00      	nop

08000814 <__aeabi_dcmple>:
 8000814:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000818:	f7ff ffe0 	bl	80007dc <__aeabi_cdcmpeq>
 800081c:	bf94      	ite	ls
 800081e:	2001      	movls	r0, #1
 8000820:	2000      	movhi	r0, #0
 8000822:	f85d fb08 	ldr.w	pc, [sp], #8
 8000826:	bf00      	nop

08000828 <__aeabi_dcmpge>:
 8000828:	f84d ed08 	str.w	lr, [sp, #-8]!
 800082c:	f7ff ffce 	bl	80007cc <__aeabi_cdrcmple>
 8000830:	bf94      	ite	ls
 8000832:	2001      	movls	r0, #1
 8000834:	2000      	movhi	r0, #0
 8000836:	f85d fb08 	ldr.w	pc, [sp], #8
 800083a:	bf00      	nop

0800083c <__aeabi_dcmpgt>:
 800083c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000840:	f7ff ffc4 	bl	80007cc <__aeabi_cdrcmple>
 8000844:	bf34      	ite	cc
 8000846:	2001      	movcc	r0, #1
 8000848:	2000      	movcs	r0, #0
 800084a:	f85d fb08 	ldr.w	pc, [sp], #8
 800084e:	bf00      	nop

08000850 <__aeabi_d2uiz>:
 8000850:	004a      	lsls	r2, r1, #1
 8000852:	d211      	bcs.n	8000878 <__aeabi_d2uiz+0x28>
 8000854:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000858:	d211      	bcs.n	800087e <__aeabi_d2uiz+0x2e>
 800085a:	d50d      	bpl.n	8000878 <__aeabi_d2uiz+0x28>
 800085c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000860:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000864:	d40e      	bmi.n	8000884 <__aeabi_d2uiz+0x34>
 8000866:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800086a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800086e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000872:	fa23 f002 	lsr.w	r0, r3, r2
 8000876:	4770      	bx	lr
 8000878:	f04f 0000 	mov.w	r0, #0
 800087c:	4770      	bx	lr
 800087e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000882:	d102      	bne.n	800088a <__aeabi_d2uiz+0x3a>
 8000884:	f04f 30ff 	mov.w	r0, #4294967295
 8000888:	4770      	bx	lr
 800088a:	f04f 0000 	mov.w	r0, #0
 800088e:	4770      	bx	lr

08000890 <__aeabi_d2f>:
 8000890:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000894:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000898:	bf24      	itt	cs
 800089a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800089e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008a2:	d90d      	bls.n	80008c0 <__aeabi_d2f+0x30>
 80008a4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80008a8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008ac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008b0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80008b4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008b8:	bf08      	it	eq
 80008ba:	f020 0001 	biceq.w	r0, r0, #1
 80008be:	4770      	bx	lr
 80008c0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80008c4:	d121      	bne.n	800090a <__aeabi_d2f+0x7a>
 80008c6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80008ca:	bfbc      	itt	lt
 80008cc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80008d0:	4770      	bxlt	lr
 80008d2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008d6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008da:	f1c2 0218 	rsb	r2, r2, #24
 80008de:	f1c2 0c20 	rsb	ip, r2, #32
 80008e2:	fa10 f30c 	lsls.w	r3, r0, ip
 80008e6:	fa20 f002 	lsr.w	r0, r0, r2
 80008ea:	bf18      	it	ne
 80008ec:	f040 0001 	orrne.w	r0, r0, #1
 80008f0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008f4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008f8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008fc:	ea40 000c 	orr.w	r0, r0, ip
 8000900:	fa23 f302 	lsr.w	r3, r3, r2
 8000904:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000908:	e7cc      	b.n	80008a4 <__aeabi_d2f+0x14>
 800090a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800090e:	d107      	bne.n	8000920 <__aeabi_d2f+0x90>
 8000910:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000914:	bf1e      	ittt	ne
 8000916:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800091a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800091e:	4770      	bxne	lr
 8000920:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000924:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000928:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop

08000930 <__aeabi_frsub>:
 8000930:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000934:	e002      	b.n	800093c <__addsf3>
 8000936:	bf00      	nop

08000938 <__aeabi_fsub>:
 8000938:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800093c <__addsf3>:
 800093c:	0042      	lsls	r2, r0, #1
 800093e:	bf1f      	itttt	ne
 8000940:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000944:	ea92 0f03 	teqne	r2, r3
 8000948:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800094c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000950:	d06a      	beq.n	8000a28 <__addsf3+0xec>
 8000952:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000956:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800095a:	bfc1      	itttt	gt
 800095c:	18d2      	addgt	r2, r2, r3
 800095e:	4041      	eorgt	r1, r0
 8000960:	4048      	eorgt	r0, r1
 8000962:	4041      	eorgt	r1, r0
 8000964:	bfb8      	it	lt
 8000966:	425b      	neglt	r3, r3
 8000968:	2b19      	cmp	r3, #25
 800096a:	bf88      	it	hi
 800096c:	4770      	bxhi	lr
 800096e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000972:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000976:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800097a:	bf18      	it	ne
 800097c:	4240      	negne	r0, r0
 800097e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000982:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000986:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800098a:	bf18      	it	ne
 800098c:	4249      	negne	r1, r1
 800098e:	ea92 0f03 	teq	r2, r3
 8000992:	d03f      	beq.n	8000a14 <__addsf3+0xd8>
 8000994:	f1a2 0201 	sub.w	r2, r2, #1
 8000998:	fa41 fc03 	asr.w	ip, r1, r3
 800099c:	eb10 000c 	adds.w	r0, r0, ip
 80009a0:	f1c3 0320 	rsb	r3, r3, #32
 80009a4:	fa01 f103 	lsl.w	r1, r1, r3
 80009a8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80009ac:	d502      	bpl.n	80009b4 <__addsf3+0x78>
 80009ae:	4249      	negs	r1, r1
 80009b0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009b4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80009b8:	d313      	bcc.n	80009e2 <__addsf3+0xa6>
 80009ba:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80009be:	d306      	bcc.n	80009ce <__addsf3+0x92>
 80009c0:	0840      	lsrs	r0, r0, #1
 80009c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80009c6:	f102 0201 	add.w	r2, r2, #1
 80009ca:	2afe      	cmp	r2, #254	@ 0xfe
 80009cc:	d251      	bcs.n	8000a72 <__addsf3+0x136>
 80009ce:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80009d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009d6:	bf08      	it	eq
 80009d8:	f020 0001 	biceq.w	r0, r0, #1
 80009dc:	ea40 0003 	orr.w	r0, r0, r3
 80009e0:	4770      	bx	lr
 80009e2:	0049      	lsls	r1, r1, #1
 80009e4:	eb40 0000 	adc.w	r0, r0, r0
 80009e8:	3a01      	subs	r2, #1
 80009ea:	bf28      	it	cs
 80009ec:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80009f0:	d2ed      	bcs.n	80009ce <__addsf3+0x92>
 80009f2:	fab0 fc80 	clz	ip, r0
 80009f6:	f1ac 0c08 	sub.w	ip, ip, #8
 80009fa:	ebb2 020c 	subs.w	r2, r2, ip
 80009fe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a02:	bfaa      	itet	ge
 8000a04:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a08:	4252      	neglt	r2, r2
 8000a0a:	4318      	orrge	r0, r3
 8000a0c:	bfbc      	itt	lt
 8000a0e:	40d0      	lsrlt	r0, r2
 8000a10:	4318      	orrlt	r0, r3
 8000a12:	4770      	bx	lr
 8000a14:	f092 0f00 	teq	r2, #0
 8000a18:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a1c:	bf06      	itte	eq
 8000a1e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a22:	3201      	addeq	r2, #1
 8000a24:	3b01      	subne	r3, #1
 8000a26:	e7b5      	b.n	8000994 <__addsf3+0x58>
 8000a28:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a2c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a36:	d021      	beq.n	8000a7c <__addsf3+0x140>
 8000a38:	ea92 0f03 	teq	r2, r3
 8000a3c:	d004      	beq.n	8000a48 <__addsf3+0x10c>
 8000a3e:	f092 0f00 	teq	r2, #0
 8000a42:	bf08      	it	eq
 8000a44:	4608      	moveq	r0, r1
 8000a46:	4770      	bx	lr
 8000a48:	ea90 0f01 	teq	r0, r1
 8000a4c:	bf1c      	itt	ne
 8000a4e:	2000      	movne	r0, #0
 8000a50:	4770      	bxne	lr
 8000a52:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000a56:	d104      	bne.n	8000a62 <__addsf3+0x126>
 8000a58:	0040      	lsls	r0, r0, #1
 8000a5a:	bf28      	it	cs
 8000a5c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000a60:	4770      	bx	lr
 8000a62:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000a66:	bf3c      	itt	cc
 8000a68:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000a6c:	4770      	bxcc	lr
 8000a6e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a72:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000a76:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a7a:	4770      	bx	lr
 8000a7c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a80:	bf16      	itet	ne
 8000a82:	4608      	movne	r0, r1
 8000a84:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a88:	4601      	movne	r1, r0
 8000a8a:	0242      	lsls	r2, r0, #9
 8000a8c:	bf06      	itte	eq
 8000a8e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a92:	ea90 0f01 	teqeq	r0, r1
 8000a96:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_ui2f>:
 8000a9c:	f04f 0300 	mov.w	r3, #0
 8000aa0:	e004      	b.n	8000aac <__aeabi_i2f+0x8>
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_i2f>:
 8000aa4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000aa8:	bf48      	it	mi
 8000aaa:	4240      	negmi	r0, r0
 8000aac:	ea5f 0c00 	movs.w	ip, r0
 8000ab0:	bf08      	it	eq
 8000ab2:	4770      	bxeq	lr
 8000ab4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ab8:	4601      	mov	r1, r0
 8000aba:	f04f 0000 	mov.w	r0, #0
 8000abe:	e01c      	b.n	8000afa <__aeabi_l2f+0x2a>

08000ac0 <__aeabi_ul2f>:
 8000ac0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ac4:	bf08      	it	eq
 8000ac6:	4770      	bxeq	lr
 8000ac8:	f04f 0300 	mov.w	r3, #0
 8000acc:	e00a      	b.n	8000ae4 <__aeabi_l2f+0x14>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_l2f>:
 8000ad0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad4:	bf08      	it	eq
 8000ad6:	4770      	bxeq	lr
 8000ad8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000adc:	d502      	bpl.n	8000ae4 <__aeabi_l2f+0x14>
 8000ade:	4240      	negs	r0, r0
 8000ae0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ae4:	ea5f 0c01 	movs.w	ip, r1
 8000ae8:	bf02      	ittt	eq
 8000aea:	4684      	moveq	ip, r0
 8000aec:	4601      	moveq	r1, r0
 8000aee:	2000      	moveq	r0, #0
 8000af0:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000af4:	bf08      	it	eq
 8000af6:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000afa:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000afe:	fabc f28c 	clz	r2, ip
 8000b02:	3a08      	subs	r2, #8
 8000b04:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b08:	db10      	blt.n	8000b2c <__aeabi_l2f+0x5c>
 8000b0a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b0e:	4463      	add	r3, ip
 8000b10:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b14:	f1c2 0220 	rsb	r2, r2, #32
 8000b18:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b1c:	fa20 f202 	lsr.w	r2, r0, r2
 8000b20:	eb43 0002 	adc.w	r0, r3, r2
 8000b24:	bf08      	it	eq
 8000b26:	f020 0001 	biceq.w	r0, r0, #1
 8000b2a:	4770      	bx	lr
 8000b2c:	f102 0220 	add.w	r2, r2, #32
 8000b30:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b34:	f1c2 0220 	rsb	r2, r2, #32
 8000b38:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b3c:	fa21 f202 	lsr.w	r2, r1, r2
 8000b40:	eb43 0002 	adc.w	r0, r3, r2
 8000b44:	bf08      	it	eq
 8000b46:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b4a:	4770      	bx	lr

08000b4c <__aeabi_fmul>:
 8000b4c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000b50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b54:	bf1e      	ittt	ne
 8000b56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b5a:	ea92 0f0c 	teqne	r2, ip
 8000b5e:	ea93 0f0c 	teqne	r3, ip
 8000b62:	d06f      	beq.n	8000c44 <__aeabi_fmul+0xf8>
 8000b64:	441a      	add	r2, r3
 8000b66:	ea80 0c01 	eor.w	ip, r0, r1
 8000b6a:	0240      	lsls	r0, r0, #9
 8000b6c:	bf18      	it	ne
 8000b6e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b72:	d01e      	beq.n	8000bb2 <__aeabi_fmul+0x66>
 8000b74:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000b78:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b7c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b80:	fba0 3101 	umull	r3, r1, r0, r1
 8000b84:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000b88:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000b8c:	bf3e      	ittt	cc
 8000b8e:	0049      	lslcc	r1, r1, #1
 8000b90:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b94:	005b      	lslcc	r3, r3, #1
 8000b96:	ea40 0001 	orr.w	r0, r0, r1
 8000b9a:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000b9e:	2afd      	cmp	r2, #253	@ 0xfd
 8000ba0:	d81d      	bhi.n	8000bde <__aeabi_fmul+0x92>
 8000ba2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000ba6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000baa:	bf08      	it	eq
 8000bac:	f020 0001 	biceq.w	r0, r0, #1
 8000bb0:	4770      	bx	lr
 8000bb2:	f090 0f00 	teq	r0, #0
 8000bb6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000bba:	bf08      	it	eq
 8000bbc:	0249      	lsleq	r1, r1, #9
 8000bbe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bc2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bc6:	3a7f      	subs	r2, #127	@ 0x7f
 8000bc8:	bfc2      	ittt	gt
 8000bca:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000bce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bd2:	4770      	bxgt	lr
 8000bd4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd8:	f04f 0300 	mov.w	r3, #0
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	dc5d      	bgt.n	8000c9c <__aeabi_fmul+0x150>
 8000be0:	f112 0f19 	cmn.w	r2, #25
 8000be4:	bfdc      	itt	le
 8000be6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000bea:	4770      	bxle	lr
 8000bec:	f1c2 0200 	rsb	r2, r2, #0
 8000bf0:	0041      	lsls	r1, r0, #1
 8000bf2:	fa21 f102 	lsr.w	r1, r1, r2
 8000bf6:	f1c2 0220 	rsb	r2, r2, #32
 8000bfa:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bfe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c02:	f140 0000 	adc.w	r0, r0, #0
 8000c06:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c0a:	bf08      	it	eq
 8000c0c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c10:	4770      	bx	lr
 8000c12:	f092 0f00 	teq	r2, #0
 8000c16:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c1a:	bf02      	ittt	eq
 8000c1c:	0040      	lsleq	r0, r0, #1
 8000c1e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c22:	3a01      	subeq	r2, #1
 8000c24:	d0f9      	beq.n	8000c1a <__aeabi_fmul+0xce>
 8000c26:	ea40 000c 	orr.w	r0, r0, ip
 8000c2a:	f093 0f00 	teq	r3, #0
 8000c2e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c32:	bf02      	ittt	eq
 8000c34:	0049      	lsleq	r1, r1, #1
 8000c36:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c3a:	3b01      	subeq	r3, #1
 8000c3c:	d0f9      	beq.n	8000c32 <__aeabi_fmul+0xe6>
 8000c3e:	ea41 010c 	orr.w	r1, r1, ip
 8000c42:	e78f      	b.n	8000b64 <__aeabi_fmul+0x18>
 8000c44:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c48:	ea92 0f0c 	teq	r2, ip
 8000c4c:	bf18      	it	ne
 8000c4e:	ea93 0f0c 	teqne	r3, ip
 8000c52:	d00a      	beq.n	8000c6a <__aeabi_fmul+0x11e>
 8000c54:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000c58:	bf18      	it	ne
 8000c5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000c5e:	d1d8      	bne.n	8000c12 <__aeabi_fmul+0xc6>
 8000c60:	ea80 0001 	eor.w	r0, r0, r1
 8000c64:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000c68:	4770      	bx	lr
 8000c6a:	f090 0f00 	teq	r0, #0
 8000c6e:	bf17      	itett	ne
 8000c70:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000c74:	4608      	moveq	r0, r1
 8000c76:	f091 0f00 	teqne	r1, #0
 8000c7a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000c7e:	d014      	beq.n	8000caa <__aeabi_fmul+0x15e>
 8000c80:	ea92 0f0c 	teq	r2, ip
 8000c84:	d101      	bne.n	8000c8a <__aeabi_fmul+0x13e>
 8000c86:	0242      	lsls	r2, r0, #9
 8000c88:	d10f      	bne.n	8000caa <__aeabi_fmul+0x15e>
 8000c8a:	ea93 0f0c 	teq	r3, ip
 8000c8e:	d103      	bne.n	8000c98 <__aeabi_fmul+0x14c>
 8000c90:	024b      	lsls	r3, r1, #9
 8000c92:	bf18      	it	ne
 8000c94:	4608      	movne	r0, r1
 8000c96:	d108      	bne.n	8000caa <__aeabi_fmul+0x15e>
 8000c98:	ea80 0001 	eor.w	r0, r0, r1
 8000c9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ca0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca8:	4770      	bx	lr
 8000caa:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cae:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000cb2:	4770      	bx	lr

08000cb4 <__aeabi_fdiv>:
 8000cb4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cb8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cc2:	ea92 0f0c 	teqne	r2, ip
 8000cc6:	ea93 0f0c 	teqne	r3, ip
 8000cca:	d069      	beq.n	8000da0 <__aeabi_fdiv+0xec>
 8000ccc:	eba2 0203 	sub.w	r2, r2, r3
 8000cd0:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd4:	0249      	lsls	r1, r1, #9
 8000cd6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cda:	d037      	beq.n	8000d4c <__aeabi_fdiv+0x98>
 8000cdc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ce0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ce4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ce8:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000cec:	428b      	cmp	r3, r1
 8000cee:	bf38      	it	cc
 8000cf0:	005b      	lslcc	r3, r3, #1
 8000cf2:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000cf6:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	bf24      	itt	cs
 8000cfe:	1a5b      	subcs	r3, r3, r1
 8000d00:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d04:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d08:	bf24      	itt	cs
 8000d0a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d0e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d12:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d16:	bf24      	itt	cs
 8000d18:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d20:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d24:	bf24      	itt	cs
 8000d26:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d2a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d2e:	011b      	lsls	r3, r3, #4
 8000d30:	bf18      	it	ne
 8000d32:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d36:	d1e0      	bne.n	8000cfa <__aeabi_fdiv+0x46>
 8000d38:	2afd      	cmp	r2, #253	@ 0xfd
 8000d3a:	f63f af50 	bhi.w	8000bde <__aeabi_fmul+0x92>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d50:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d54:	327f      	adds	r2, #127	@ 0x7f
 8000d56:	bfc2      	ittt	gt
 8000d58:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d5c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d60:	4770      	bxgt	lr
 8000d62:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d66:	f04f 0300 	mov.w	r3, #0
 8000d6a:	3a01      	subs	r2, #1
 8000d6c:	e737      	b.n	8000bde <__aeabi_fmul+0x92>
 8000d6e:	f092 0f00 	teq	r2, #0
 8000d72:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d76:	bf02      	ittt	eq
 8000d78:	0040      	lsleq	r0, r0, #1
 8000d7a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7e:	3a01      	subeq	r2, #1
 8000d80:	d0f9      	beq.n	8000d76 <__aeabi_fdiv+0xc2>
 8000d82:	ea40 000c 	orr.w	r0, r0, ip
 8000d86:	f093 0f00 	teq	r3, #0
 8000d8a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8e:	bf02      	ittt	eq
 8000d90:	0049      	lsleq	r1, r1, #1
 8000d92:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d96:	3b01      	subeq	r3, #1
 8000d98:	d0f9      	beq.n	8000d8e <__aeabi_fdiv+0xda>
 8000d9a:	ea41 010c 	orr.w	r1, r1, ip
 8000d9e:	e795      	b.n	8000ccc <__aeabi_fdiv+0x18>
 8000da0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da4:	ea92 0f0c 	teq	r2, ip
 8000da8:	d108      	bne.n	8000dbc <__aeabi_fdiv+0x108>
 8000daa:	0242      	lsls	r2, r0, #9
 8000dac:	f47f af7d 	bne.w	8000caa <__aeabi_fmul+0x15e>
 8000db0:	ea93 0f0c 	teq	r3, ip
 8000db4:	f47f af70 	bne.w	8000c98 <__aeabi_fmul+0x14c>
 8000db8:	4608      	mov	r0, r1
 8000dba:	e776      	b.n	8000caa <__aeabi_fmul+0x15e>
 8000dbc:	ea93 0f0c 	teq	r3, ip
 8000dc0:	d104      	bne.n	8000dcc <__aeabi_fdiv+0x118>
 8000dc2:	024b      	lsls	r3, r1, #9
 8000dc4:	f43f af4c 	beq.w	8000c60 <__aeabi_fmul+0x114>
 8000dc8:	4608      	mov	r0, r1
 8000dca:	e76e      	b.n	8000caa <__aeabi_fmul+0x15e>
 8000dcc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000dd0:	bf18      	it	ne
 8000dd2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000dd6:	d1ca      	bne.n	8000d6e <__aeabi_fdiv+0xba>
 8000dd8:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000ddc:	f47f af5c 	bne.w	8000c98 <__aeabi_fmul+0x14c>
 8000de0:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000de4:	f47f af3c 	bne.w	8000c60 <__aeabi_fmul+0x114>
 8000de8:	e75f      	b.n	8000caa <__aeabi_fmul+0x15e>
 8000dea:	bf00      	nop

08000dec <__gesf2>:
 8000dec:	f04f 3cff 	mov.w	ip, #4294967295
 8000df0:	e006      	b.n	8000e00 <__cmpsf2+0x4>
 8000df2:	bf00      	nop

08000df4 <__lesf2>:
 8000df4:	f04f 0c01 	mov.w	ip, #1
 8000df8:	e002      	b.n	8000e00 <__cmpsf2+0x4>
 8000dfa:	bf00      	nop

08000dfc <__cmpsf2>:
 8000dfc:	f04f 0c01 	mov.w	ip, #1
 8000e00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e04:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e08:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e0c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e10:	bf18      	it	ne
 8000e12:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e16:	d011      	beq.n	8000e3c <__cmpsf2+0x40>
 8000e18:	b001      	add	sp, #4
 8000e1a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e1e:	bf18      	it	ne
 8000e20:	ea90 0f01 	teqne	r0, r1
 8000e24:	bf58      	it	pl
 8000e26:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e2a:	bf88      	it	hi
 8000e2c:	17c8      	asrhi	r0, r1, #31
 8000e2e:	bf38      	it	cc
 8000e30:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e34:	bf18      	it	ne
 8000e36:	f040 0001 	orrne.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e40:	d102      	bne.n	8000e48 <__cmpsf2+0x4c>
 8000e42:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e46:	d105      	bne.n	8000e54 <__cmpsf2+0x58>
 8000e48:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e4c:	d1e4      	bne.n	8000e18 <__cmpsf2+0x1c>
 8000e4e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e52:	d0e1      	beq.n	8000e18 <__cmpsf2+0x1c>
 8000e54:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <__aeabi_cfrcmple>:
 8000e5c:	4684      	mov	ip, r0
 8000e5e:	4608      	mov	r0, r1
 8000e60:	4661      	mov	r1, ip
 8000e62:	e7ff      	b.n	8000e64 <__aeabi_cfcmpeq>

08000e64 <__aeabi_cfcmpeq>:
 8000e64:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e66:	f7ff ffc9 	bl	8000dfc <__cmpsf2>
 8000e6a:	2800      	cmp	r0, #0
 8000e6c:	bf48      	it	mi
 8000e6e:	f110 0f00 	cmnmi.w	r0, #0
 8000e72:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e74 <__aeabi_fcmpeq>:
 8000e74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e78:	f7ff fff4 	bl	8000e64 <__aeabi_cfcmpeq>
 8000e7c:	bf0c      	ite	eq
 8000e7e:	2001      	moveq	r0, #1
 8000e80:	2000      	movne	r0, #0
 8000e82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e86:	bf00      	nop

08000e88 <__aeabi_fcmplt>:
 8000e88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e8c:	f7ff ffea 	bl	8000e64 <__aeabi_cfcmpeq>
 8000e90:	bf34      	ite	cc
 8000e92:	2001      	movcc	r0, #1
 8000e94:	2000      	movcs	r0, #0
 8000e96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e9a:	bf00      	nop

08000e9c <__aeabi_fcmple>:
 8000e9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ea0:	f7ff ffe0 	bl	8000e64 <__aeabi_cfcmpeq>
 8000ea4:	bf94      	ite	ls
 8000ea6:	2001      	movls	r0, #1
 8000ea8:	2000      	movhi	r0, #0
 8000eaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eae:	bf00      	nop

08000eb0 <__aeabi_fcmpge>:
 8000eb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eb4:	f7ff ffd2 	bl	8000e5c <__aeabi_cfrcmple>
 8000eb8:	bf94      	ite	ls
 8000eba:	2001      	movls	r0, #1
 8000ebc:	2000      	movhi	r0, #0
 8000ebe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_fcmpgt>:
 8000ec4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ec8:	f7ff ffc8 	bl	8000e5c <__aeabi_cfrcmple>
 8000ecc:	bf34      	ite	cc
 8000ece:	2001      	movcc	r0, #1
 8000ed0:	2000      	movcs	r0, #0
 8000ed2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ed6:	bf00      	nop

08000ed8 <__aeabi_f2iz>:
 8000ed8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000edc:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000ee0:	d30f      	bcc.n	8000f02 <__aeabi_f2iz+0x2a>
 8000ee2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000ee6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000eea:	d90d      	bls.n	8000f08 <__aeabi_f2iz+0x30>
 8000eec:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ef0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ef4:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000ef8:	fa23 f002 	lsr.w	r0, r3, r2
 8000efc:	bf18      	it	ne
 8000efe:	4240      	negne	r0, r0
 8000f00:	4770      	bx	lr
 8000f02:	f04f 0000 	mov.w	r0, #0
 8000f06:	4770      	bx	lr
 8000f08:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f0c:	d101      	bne.n	8000f12 <__aeabi_f2iz+0x3a>
 8000f0e:	0242      	lsls	r2, r0, #9
 8000f10:	d105      	bne.n	8000f1e <__aeabi_f2iz+0x46>
 8000f12:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000f16:	bf08      	it	eq
 8000f18:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000f1c:	4770      	bx	lr
 8000f1e:	f04f 0000 	mov.w	r0, #0
 8000f22:	4770      	bx	lr

08000f24 <__aeabi_f2uiz>:
 8000f24:	0042      	lsls	r2, r0, #1
 8000f26:	d20e      	bcs.n	8000f46 <__aeabi_f2uiz+0x22>
 8000f28:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f2c:	d30b      	bcc.n	8000f46 <__aeabi_f2uiz+0x22>
 8000f2e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f32:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f36:	d409      	bmi.n	8000f4c <__aeabi_f2uiz+0x28>
 8000f38:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f3c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f40:	fa23 f002 	lsr.w	r0, r3, r2
 8000f44:	4770      	bx	lr
 8000f46:	f04f 0000 	mov.w	r0, #0
 8000f4a:	4770      	bx	lr
 8000f4c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f50:	d101      	bne.n	8000f56 <__aeabi_f2uiz+0x32>
 8000f52:	0242      	lsls	r2, r0, #9
 8000f54:	d102      	bne.n	8000f5c <__aeabi_f2uiz+0x38>
 8000f56:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5a:	4770      	bx	lr
 8000f5c:	f04f 0000 	mov.w	r0, #0
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <__tcf_4>:
      /**
       *  @brief  Destroy the string instance.
       */
      _GLIBCXX20_CONSTEXPR
      ~basic_string()
      { _M_dispose(); }
 8000f64:	4801      	ldr	r0, [pc, #4]	@ (8000f6c <__tcf_4+0x8>)
 8000f66:	f007 ba33 	b.w	80083d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8000f6a:	bf00      	nop
 8000f6c:	200000f4 	.word	0x200000f4

08000f70 <__tcf_3>:
 8000f70:	4801      	ldr	r0, [pc, #4]	@ (8000f78 <__tcf_3+0x8>)
 8000f72:	f007 ba2d 	b.w	80083d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8000f76:	bf00      	nop
 8000f78:	20000110 	.word	0x20000110

08000f7c <_ZZN5astra8drawLogoEtENKUlRfffE_clES0_ff.constprop.0>:
 *       * Astra UI *
 *  *       *     *     *
 *     *  *     *           *
 */
void drawLogo(uint16_t _time) {
  auto animation = [] (float &_pos, float _posTrg, float _speed) -> void {
 8000f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (_pos != _posTrg) {
 8000f7e:	6806      	ldr	r6, [r0, #0]
  auto animation = [] (float &_pos, float _posTrg, float _speed) -> void {
 8000f80:	4604      	mov	r4, r0
    if (_pos != _posTrg) {
 8000f82:	4630      	mov	r0, r6
  auto animation = [] (float &_pos, float _posTrg, float _speed) -> void {
 8000f84:	460d      	mov	r5, r1
 8000f86:	4617      	mov	r7, r2
    if (_pos != _posTrg) {
 8000f88:	f7ff ff74 	bl	8000e74 <__aeabi_fcmpeq>
 8000f8c:	b950      	cbnz	r0, 8000fa4 <_ZZN5astra8drawLogoEtENKUlRfffE_clES0_ff.constprop.0+0x28>
      if (std::fabs(_pos - _posTrg) < 0.15f) _pos = _posTrg;
 8000f8e:	4629      	mov	r1, r5
 8000f90:	4630      	mov	r0, r6
 8000f92:	f7ff fcd1 	bl	8000938 <__aeabi_fsub>
 8000f96:	490d      	ldr	r1, [pc, #52]	@ (8000fcc <_ZZN5astra8drawLogoEtENKUlRfffE_clES0_ff.constprop.0+0x50>)
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8000f98:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8000f9c:	f7ff ff74 	bl	8000e88 <__aeabi_fcmplt>
 8000fa0:	b108      	cbz	r0, 8000fa6 <_ZZN5astra8drawLogoEtENKUlRfffE_clES0_ff.constprop.0+0x2a>
 8000fa2:	6025      	str	r5, [r4, #0]
      else _pos += (_posTrg - _pos) / ((100 - _speed) / 1.0f);
    }
  };
 8000fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else _pos += (_posTrg - _pos) / ((100 - _speed) / 1.0f);
 8000fa6:	4631      	mov	r1, r6
 8000fa8:	4628      	mov	r0, r5
 8000faa:	f7ff fcc5 	bl	8000938 <__aeabi_fsub>
 8000fae:	4639      	mov	r1, r7
 8000fb0:	4605      	mov	r5, r0
 8000fb2:	4807      	ldr	r0, [pc, #28]	@ (8000fd0 <_ZZN5astra8drawLogoEtENKUlRfffE_clES0_ff.constprop.0+0x54>)
 8000fb4:	f7ff fcc0 	bl	8000938 <__aeabi_fsub>
 8000fb8:	4601      	mov	r1, r0
 8000fba:	4628      	mov	r0, r5
 8000fbc:	f7ff fe7a 	bl	8000cb4 <__aeabi_fdiv>
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	f7ff fcbb 	bl	800093c <__addsf3>
 8000fc6:	6020      	str	r0, [r4, #0]
  };
 8000fc8:	e7ec      	b.n	8000fa4 <_ZZN5astra8drawLogoEtENKUlRfffE_clES0_ff.constprop.0+0x28>
 8000fca:	bf00      	nop
 8000fcc:	3e19999a 	.word	0x3e19999a
 8000fd0:	42c80000 	.word	0x42c80000

08000fd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.0>:

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      _GLIBCXX20_CONSTEXPR
      void
      basic_string<_CharT, _Traits, _Alloc>::
 8000fd4:	b573      	push	{r0, r1, r4, r5, r6, lr}
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 8000fd6:	1a53      	subs	r3, r2, r1
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

	if (__dnew > size_type(_S_local_capacity))
 8000fd8:	2b0f      	cmp	r3, #15
      basic_string<_CharT, _Traits, _Alloc>::
 8000fda:	4604      	mov	r4, r0
 8000fdc:	460d      	mov	r5, r1
 8000fde:	4616      	mov	r6, r2
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8000fe0:	9301      	str	r3, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
 8000fe2:	d906      	bls.n	8000ff2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.0+0x1e>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	a901      	add	r1, sp, #4
 8000fe8:	f007 f9d0 	bl	800838c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
 8000fec:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
 8000fee:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
 8000ff0:	60a3      	str	r3, [r4, #8]
	  ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }

	  basic_string* _M_guarded;
	} __guard(this);

	this->_S_copy_chars(_M_data(), __beg, __end);
 8000ff2:	4632      	mov	r2, r6
 8000ff4:	4629      	mov	r1, r5
 8000ff6:	6820      	ldr	r0, [r4, #0]
 8000ff8:	f007 fa2d 	bl	8008456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
#if __cpp_constexpr_dynamic_alloc
	if (std::__is_constant_evaluated())
	  std::construct_at(__builtin_addressof(__c1), __c2);
	else
#endif
	__c1 = __c2;
 8000ffc:	2100      	movs	r1, #0

	__guard._M_guarded = 0;

	_M_set_length(__dnew);
 8000ffe:	9b01      	ldr	r3, [sp, #4]
 8001000:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
 8001002:	6063      	str	r3, [r4, #4]
 8001004:	54d1      	strb	r1, [r2, r3]
      }
 8001006:	b002      	add	sp, #8
 8001008:	bd70      	pop	{r4, r5, r6, pc}

0800100a <_ZN3HAL7setFontEPKh>:

  static void canvasClear() { get()->_canvasClear(); }

  virtual void _canvasClear() {}

  static void setFont(const unsigned char *_font) { get()->_setFont(_font); }
 800100a:	b510      	push	{r4, lr}
 800100c:	4604      	mov	r4, r0
 800100e:	f003 fd6f 	bl	8004af0 <_ZN3HAL3getEv>
 8001012:	6803      	ldr	r3, [r0, #0]
 8001014:	4621      	mov	r1, r4
 8001016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800101a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800101c:	4718      	bx	r3

0800101e <_ZN3HAL12getFontWidthERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

  virtual void _setFont(const unsigned char *_font) {}

  static unsigned char getFontWidth(std::string &_text) { return get()->_getFontWidth(_text); }
 800101e:	b510      	push	{r4, lr}
 8001020:	4604      	mov	r4, r0
 8001022:	f003 fd65 	bl	8004af0 <_ZN3HAL3getEv>
 8001026:	6803      	ldr	r3, [r0, #0]
 8001028:	4621      	mov	r1, r4
 800102a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800102e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001030:	4718      	bx	r3

08001032 <_ZN3HAL11setDrawTypeEh>:

  static unsigned char getFontHeight() { return get()->_getFontHeight(); }

  virtual unsigned char _getFontHeight() { return 0; }

  static void setDrawType(unsigned char _type) { get()->_setDrawType(_type); }
 8001032:	b510      	push	{r4, lr}
 8001034:	4604      	mov	r4, r0
 8001036:	f003 fd5b 	bl	8004af0 <_ZN3HAL3getEv>
 800103a:	6803      	ldr	r3, [r0, #0]
 800103c:	4621      	mov	r1, r4
 800103e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001044:	4718      	bx	r3

08001046 <_ZN3HAL11drawEnglishEffRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
  static void drawPixel(float _x, float _y) { get()->_drawPixel(_x, _y); }

  virtual void _drawPixel(float _x, float _y) {}

  //notice: _x和_y是字体左下角的坐标 _x and _y is the coordinate the lower left corner of the font
  static void drawEnglish(float _x, float _y, const std::string &_text) { get()->_drawEnglish(_x, _y, _text); }
 8001046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800104a:	460d      	mov	r5, r1
 800104c:	4616      	mov	r6, r2
 800104e:	4604      	mov	r4, r0
 8001050:	f003 fd4e 	bl	8004af0 <_ZN3HAL3getEv>
 8001054:	6803      	ldr	r3, [r0, #0]
 8001056:	462a      	mov	r2, r5
 8001058:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
 800105a:	4621      	mov	r1, r4
 800105c:	4633      	mov	r3, r6
 800105e:	46bc      	mov	ip, r7
 8001060:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001064:	4760      	bx	ip

08001066 <_ZN3HAL9drawVLineEfff>:

  static void drawHDottedLine(float _x, float _y, float _l) { get()->_drawHDottedLine(_x, _y, _l); }

  virtual void _drawHDottedLine(float _x, float _y, float _l) {}

  static void drawVLine(float _x, float _y, float _h) { get()->_drawVLine(_x, _y, _h); }
 8001066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800106a:	460d      	mov	r5, r1
 800106c:	4616      	mov	r6, r2
 800106e:	4604      	mov	r4, r0
 8001070:	f003 fd3e 	bl	8004af0 <_ZN3HAL3getEv>
 8001074:	6803      	ldr	r3, [r0, #0]
 8001076:	462a      	mov	r2, r5
 8001078:	6c9f      	ldr	r7, [r3, #72]	@ 0x48
 800107a:	4621      	mov	r1, r4
 800107c:	4633      	mov	r3, r6
 800107e:	46bc      	mov	ip, r7
 8001080:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001084:	4760      	bx	ip

08001086 <_ZN3HAL9drawHLineEfff>:

  virtual void _drawVLine(float _x, float _y, float _h) {}

  static void drawHLine(float _x, float _y, float _l) { get()->_drawHLine(_x, _y, _l); }
 8001086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800108a:	460d      	mov	r5, r1
 800108c:	4616      	mov	r6, r2
 800108e:	4604      	mov	r4, r0
 8001090:	f003 fd2e 	bl	8004af0 <_ZN3HAL3getEv>
 8001094:	6803      	ldr	r3, [r0, #0]
 8001096:	462a      	mov	r2, r5
 8001098:	6cdf      	ldr	r7, [r3, #76]	@ 0x4c
 800109a:	4621      	mov	r1, r4
 800109c:	4633      	mov	r3, r6
 800109e:	46bc      	mov	ip, r7
 80010a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010a4:	4760      	bx	ip

080010a6 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
      { }
#endif

      _GLIBCXX20_CONSTEXPR
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80010a6:	b510      	push	{r4, lr}
 80010a8:	4604      	mov	r4, r0
      {
	_M_deallocate(_M_impl._M_start,
 80010aa:	6800      	ldr	r0, [r0, #0]
      _GLIBCXX20_CONSTEXPR
      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
 80010ac:	b118      	cbz	r0, 80010b6 <_ZNSt12_Vector_baseIfSaIfEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80010ae:	68a1      	ldr	r1, [r4, #8]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80010b0:	1a09      	subs	r1, r1, r0
 80010b2:	f006 fe29 	bl	8007d08 <_ZdlPvj>
      }
 80010b6:	4620      	mov	r0, r4
 80010b8:	bd10      	pop	{r4, pc}
	...

080010bc <__tcf_2>:
  while(onRender) {
    time++;

    static std::vector<float> yStars;
    static std::vector<float> yStarsTrg;
    static std::vector<float> xStars;
 80010bc:	b508      	push	{r3, lr}
      ~vector() _GLIBCXX_NOEXCEPT
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 80010be:	4802      	ldr	r0, [pc, #8]	@ (80010c8 <__tcf_2+0xc>)
 80010c0:	f7ff fff1 	bl	80010a6 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 80010c4:	bd08      	pop	{r3, pc}
 80010c6:	bf00      	nop
 80010c8:	2000012c 	.word	0x2000012c

080010cc <__tcf_1>:
    static std::vector<float> yStarsTrg;
 80010cc:	b508      	push	{r3, lr}
 80010ce:	4802      	ldr	r0, [pc, #8]	@ (80010d8 <__tcf_1+0xc>)
 80010d0:	f7ff ffe9 	bl	80010a6 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 80010d4:	bd08      	pop	{r3, pc}
 80010d6:	bf00      	nop
 80010d8:	2000013c 	.word	0x2000013c

080010dc <__tcf_0>:
    static std::vector<float> yStars;
 80010dc:	b508      	push	{r3, lr}
 80010de:	4802      	ldr	r0, [pc, #8]	@ (80010e8 <__tcf_0+0xc>)
 80010e0:	f7ff ffe1 	bl	80010a6 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 80010e4:	bd08      	pop	{r3, pc}
 80010e6:	bf00      	nop
 80010e8:	2000014c 	.word	0x2000014c

080010ec <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 80010ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80010f0:	e9d0 8a00 	ldrd	r8, sl, [r0]
      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
 80010f4:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 80010f8:	4693      	mov	fp, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80010fa:	ebaa 0208 	sub.w	r2, sl, r8
	if (max_size() - size() < __n)
 80010fe:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
 8001102:	4607      	mov	r7, r0
 8001104:	4689      	mov	r9, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001106:	ea4f 04a2 	mov.w	r4, r2, asr #2
	if (max_size() - size() < __n)
 800110a:	d102      	bne.n	8001112 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 800110c:	481e      	ldr	r0, [pc, #120]	@ (8001188 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x9c>)
 800110e:	f007 f92b 	bl	8008368 <_ZSt20__throw_length_errorPKc>
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8001112:	45c2      	cmp	sl, r8
 8001114:	bf14      	ite	ne
 8001116:	4622      	movne	r2, r4
 8001118:	2201      	moveq	r2, #1
 800111a:	18a4      	adds	r4, r4, r2
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800111c:	eba1 0508 	sub.w	r5, r1, r8

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8001120:	d22e      	bcs.n	8001180 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x94>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001122:	b37c      	cbz	r4, 8001184 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x98>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8001124:	429c      	cmp	r4, r3
 8001126:	bf28      	it	cs
 8001128:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800112a:	00a0      	lsls	r0, r4, #2
 800112c:	f005 fc3e 	bl	80069ac <_Znwj>
 8001130:	4606      	mov	r6, r0
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8001132:	f8db 3000 	ldr.w	r3, [fp]
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result,
		   [[__maybe_unused__]] allocator<_Up>& __alloc) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
 8001136:	2d00      	cmp	r5, #0
 8001138:	5173      	str	r3, [r6, r5]
 800113a:	dd04      	ble.n	8001146 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x5a>
	      __gnu_cxx::__normal_iterator<_Tp*, void> __out(__result);
	      __out = std::__relocate_a_1(__first, __last, __out, __alloc);
	      return __out.base();
	    }
#endif
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800113c:	462a      	mov	r2, r5
 800113e:	4641      	mov	r1, r8
 8001140:	4630      	mov	r0, r6
 8001142:	f007 fcc2 	bl	8008aca <memmove>
      ptrdiff_t __count = __last - __first;
 8001146:	ebaa 0a09 	sub.w	sl, sl, r9
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
 800114a:	3504      	adds	r5, #4
      if (__count > 0)
 800114c:	f1ba 0f00 	cmp.w	sl, #0
 8001150:	4435      	add	r5, r6
 8001152:	dd04      	ble.n	800115e <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x72>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8001154:	4652      	mov	r2, sl
 8001156:	4649      	mov	r1, r9
 8001158:	4628      	mov	r0, r5
 800115a:	f007 fd9e 	bl	8008c9a <memcpy>
	}
      return __result + __count;
 800115e:	4455      	add	r5, sl
	if (__p)
 8001160:	f1b8 0f00 	cmp.w	r8, #0
 8001164:	d005      	beq.n	8001172 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x86>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
 8001166:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8001168:	4640      	mov	r0, r8
 800116a:	eba1 0108 	sub.w	r1, r1, r8
 800116e:	f006 fdcb 	bl	8007d08 <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
 8001172:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8001176:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 800117a:	60be      	str	r6, [r7, #8]
    }
 800117c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8001180:	461c      	mov	r4, r3
 8001182:	e7d2      	b.n	800112a <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001184:	4626      	mov	r6, r4
 8001186:	e7d4      	b.n	8001132 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x46>
 8001188:	08009b0c 	.word	0x08009b0c

0800118c <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_>:
      vector<_Tp, _Alloc>::
 800118c:	460a      	mov	r2, r1
 800118e:	b510      	push	{r4, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8001190:	e9d0 1401 	ldrd	r1, r4, [r0, #4]
 8001194:	42a1      	cmp	r1, r4
 8001196:	d004      	beq.n	80011a2 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_+0x16>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8001198:	6812      	ldr	r2, [r2, #0]
 800119a:	f841 2b04 	str.w	r2, [r1], #4
	    ++this->_M_impl._M_finish;
 800119e:	6041      	str	r1, [r0, #4]
      }
 80011a0:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80011a2:	f7ff ffa3 	bl	80010ec <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>
      }
 80011a6:	e7fb      	b.n	80011a0 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_+0x14>

080011a8 <_ZSt6fill_nIPfjfET_S1_T0_RKT1_>:
	       std::random_access_iterator_tag)
    {
#if __cplusplus >= 201103L
      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
#endif
      if (__n <= 0)
 80011a8:	b121      	cbz	r1, 80011b4 <_ZSt6fill_nIPfjfET_S1_T0_RKT1_+0xc>
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
 80011aa:	6813      	ldr	r3, [r2, #0]
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
 80011ac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
      for (; __first != __last; ++__first)
 80011b0:	4281      	cmp	r1, r0
 80011b2:	d100      	bne.n	80011b6 <_ZSt6fill_nIPfjfET_S1_T0_RKT1_+0xe>
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, const _Tp&>)

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
			       std::__iterator_category(__first));
    }
 80011b4:	4770      	bx	lr
	*__first = __tmp;
 80011b6:	f840 3b04 	str.w	r3, [r0], #4
      for (; __first != __last; ++__first)
 80011ba:	e7f9      	b.n	80011b0 <_ZSt6fill_nIPfjfET_S1_T0_RKT1_+0x8>

080011bc <_ZNSt6vectorIfSaIfEE14_M_fill_assignEjRKf>:
    vector<_Tp, _Alloc>::
 80011bc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80011c0:	4604      	mov	r4, r0
			 - this->_M_impl._M_start); }
 80011c2:	6800      	ldr	r0, [r0, #0]
 80011c4:	68a3      	ldr	r3, [r4, #8]
 80011c6:	460d      	mov	r5, r1
 80011c8:	1a1b      	subs	r3, r3, r0
      if (__n > capacity())
 80011ca:	ebb1 0fa3 	cmp.w	r1, r3, asr #2
    vector<_Tp, _Alloc>::
 80011ce:	4616      	mov	r6, r2
      if (__n > capacity())
 80011d0:	d91e      	bls.n	8001210 <_ZNSt6vectorIfSaIfEE14_M_fill_assignEjRKf+0x54>

      // Called by constructors to check initial size.
      static _GLIBCXX20_CONSTEXPR size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 80011d2:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 80011d6:	d302      	bcc.n	80011de <_ZNSt6vectorIfSaIfEE14_M_fill_assignEjRKf+0x22>
	  __throw_length_error(
 80011d8:	481a      	ldr	r0, [pc, #104]	@ (8001244 <_ZNSt6vectorIfSaIfEE14_M_fill_assignEjRKf+0x88>)
 80011da:	f007 f8c5 	bl	8008368 <_ZSt20__throw_length_errorPKc>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80011de:	008f      	lsls	r7, r1, #2
 80011e0:	4638      	mov	r0, r7
 80011e2:	f005 fbe3 	bl	80069ac <_Znwj>
        { return std::fill_n(__first, __n, __x); }
 80011e6:	4632      	mov	r2, r6
 80011e8:	4629      	mov	r1, r5
 80011ea:	4680      	mov	r8, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80011ec:	4407      	add	r7, r0
 80011ee:	f7ff ffdb 	bl	80011a8 <_ZSt6fill_nIPfjfET_S1_T0_RKT1_>
	  _M_start = __x._M_start;
 80011f2:	6823      	ldr	r3, [r4, #0]
 80011f4:	9301      	str	r3, [sp, #4]
	  _M_finish = __x._M_finish;
 80011f6:	6863      	ldr	r3, [r4, #4]
 80011f8:	e9c4 8000 	strd	r8, r0, [r4]
 80011fc:	9302      	str	r3, [sp, #8]
	  _M_end_of_storage = __x._M_end_of_storage;
 80011fe:	68a3      	ldr	r3, [r4, #8]
      }
 8001200:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 8001202:	60a7      	str	r7, [r4, #8]
 8001204:	9303      	str	r3, [sp, #12]
      }
 8001206:	f7ff ff4e 	bl	80010a6 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
    }
 800120a:	b004      	add	sp, #16
 800120c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001210:	6867      	ldr	r7, [r4, #4]
 8001212:	1a3b      	subs	r3, r7, r0
      else if (__n > size())
 8001214:	ebb1 0fa3 	cmp.w	r1, r3, asr #2
 8001218:	ea4f 0ca3 	mov.w	ip, r3, asr #2
 800121c:	d90d      	bls.n	800123a <_ZNSt6vectorIfSaIfEE14_M_fill_assignEjRKf+0x7e>
    __fill_a1(::__gnu_cxx::__normal_iterator<_Ite, _Cont> __first,
 800121e:	6813      	ldr	r3, [r2, #0]
      for (; __first != __last; ++__first)
 8001220:	4287      	cmp	r7, r0
 8001222:	d107      	bne.n	8001234 <_ZNSt6vectorIfSaIfEE14_M_fill_assignEjRKf+0x78>
 8001224:	4632      	mov	r2, r6
 8001226:	4638      	mov	r0, r7
 8001228:	eba5 010c 	sub.w	r1, r5, ip
 800122c:	f7ff ffbc 	bl	80011a8 <_ZSt6fill_nIPfjfET_S1_T0_RKT1_>
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
 8001230:	6060      	str	r0, [r4, #4]
    }
 8001232:	e7ea      	b.n	800120a <_ZNSt6vectorIfSaIfEE14_M_fill_assignEjRKf+0x4e>
	*__first = __tmp;
 8001234:	f840 3b04 	str.w	r3, [r0], #4
      for (; __first != __last; ++__first)
 8001238:	e7f2      	b.n	8001220 <_ZNSt6vectorIfSaIfEE14_M_fill_assignEjRKf+0x64>
        _M_erase_at_end(std::fill_n(this->_M_impl._M_start, __n, __val));
 800123a:	f7ff ffb5 	bl	80011a8 <_ZSt6fill_nIPfjfET_S1_T0_RKT1_>
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800123e:	42b8      	cmp	r0, r7
 8001240:	d1f6      	bne.n	8001230 <_ZNSt6vectorIfSaIfEE14_M_fill_assignEjRKf+0x74>
 8001242:	e7e2      	b.n	800120a <_ZNSt6vectorIfSaIfEE14_M_fill_assignEjRKf+0x4e>
 8001244:	08009b26 	.word	0x08009b26

08001248 <_ZN5astra8drawLogoEt>:
void drawLogo(uint16_t _time) {
 8001248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800124c:	b087      	sub	sp, #28
 800124e:	9002      	str	r0, [sp, #8]
  while(onRender) {
 8001250:	4b02      	ldr	r3, [pc, #8]	@ (800125c <_ZN5astra8drawLogoEt+0x14>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	b923      	cbnz	r3, 8001260 <_ZN5astra8drawLogoEt+0x18>

    HAL::canvasUpdate();

    if (time >= _time && yBackGround == 0 - HAL::getSystemConfig().screenHeight - 1) onRender = false;
  }
}
 8001256:	b007      	add	sp, #28
 8001258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800125c:	20000000 	.word	0x20000000
    time++;
 8001260:	4ab1      	ldr	r2, [pc, #708]	@ (8001528 <_ZN5astra8drawLogoEt+0x2e0>)
    static std::vector<float> yStars;
 8001262:	4cb2      	ldr	r4, [pc, #712]	@ (800152c <_ZN5astra8drawLogoEt+0x2e4>)
    time++;
 8001264:	8813      	ldrh	r3, [r2, #0]
 8001266:	4db2      	ldr	r5, [pc, #712]	@ (8001530 <_ZN5astra8drawLogoEt+0x2e8>)
 8001268:	3301      	adds	r3, #1
 800126a:	8013      	strh	r3, [r2, #0]
    static std::vector<float> yStars;
 800126c:	6826      	ldr	r6, [r4, #0]
 800126e:	f3bf 8f5b 	dmb	ish
 8001272:	f016 0601 	ands.w	r6, r6, #1
 8001276:	d10c      	bne.n	8001292 <_ZN5astra8drawLogoEt+0x4a>
 8001278:	4620      	mov	r0, r4
 800127a:	f006 fd9c 	bl	8007db6 <__cxa_guard_acquire>
 800127e:	b140      	cbz	r0, 8001292 <_ZN5astra8drawLogoEt+0x4a>
 8001280:	48ac      	ldr	r0, [pc, #688]	@ (8001534 <_ZN5astra8drawLogoEt+0x2ec>)
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001282:	e9c5 6600 	strd	r6, r6, [r5]
 8001286:	60ae      	str	r6, [r5, #8]
 8001288:	f007 fa97 	bl	80087ba <atexit>
 800128c:	4620      	mov	r0, r4
 800128e:	f006 fd9e 	bl	8007dce <__cxa_guard_release>
    static std::vector<float> yStarsTrg;
 8001292:	4ca9      	ldr	r4, [pc, #676]	@ (8001538 <_ZN5astra8drawLogoEt+0x2f0>)
 8001294:	f8df 82a4 	ldr.w	r8, [pc, #676]	@ 800153c <_ZN5astra8drawLogoEt+0x2f4>
 8001298:	6826      	ldr	r6, [r4, #0]
 800129a:	f3bf 8f5b 	dmb	ish
 800129e:	f016 0601 	ands.w	r6, r6, #1
 80012a2:	d10d      	bne.n	80012c0 <_ZN5astra8drawLogoEt+0x78>
 80012a4:	4620      	mov	r0, r4
 80012a6:	f006 fd86 	bl	8007db6 <__cxa_guard_acquire>
 80012aa:	b148      	cbz	r0, 80012c0 <_ZN5astra8drawLogoEt+0x78>
 80012ac:	48a4      	ldr	r0, [pc, #656]	@ (8001540 <_ZN5astra8drawLogoEt+0x2f8>)
 80012ae:	e9c8 6600 	strd	r6, r6, [r8]
 80012b2:	f8c8 6008 	str.w	r6, [r8, #8]
 80012b6:	f007 fa80 	bl	80087ba <atexit>
 80012ba:	4620      	mov	r0, r4
 80012bc:	f006 fd87 	bl	8007dce <__cxa_guard_release>
    static std::vector<float> xStars;
 80012c0:	4ca0      	ldr	r4, [pc, #640]	@ (8001544 <_ZN5astra8drawLogoEt+0x2fc>)
 80012c2:	4ea1      	ldr	r6, [pc, #644]	@ (8001548 <_ZN5astra8drawLogoEt+0x300>)
 80012c4:	6827      	ldr	r7, [r4, #0]
 80012c6:	f3bf 8f5b 	dmb	ish
 80012ca:	f017 0701 	ands.w	r7, r7, #1
 80012ce:	d10c      	bne.n	80012ea <_ZN5astra8drawLogoEt+0xa2>
 80012d0:	4620      	mov	r0, r4
 80012d2:	f006 fd70 	bl	8007db6 <__cxa_guard_acquire>
 80012d6:	b140      	cbz	r0, 80012ea <_ZN5astra8drawLogoEt+0xa2>
 80012d8:	489c      	ldr	r0, [pc, #624]	@ (800154c <_ZN5astra8drawLogoEt+0x304>)
 80012da:	e9c6 7700 	strd	r7, r7, [r6]
 80012de:	60b7      	str	r7, [r6, #8]
 80012e0:	f007 fa6b 	bl	80087ba <atexit>
 80012e4:	4620      	mov	r0, r4
 80012e6:	f006 fd72 	bl	8007dce <__cxa_guard_release>
    static std::string text = "astra UI";
 80012ea:	4c99      	ldr	r4, [pc, #612]	@ (8001550 <_ZN5astra8drawLogoEt+0x308>)
 80012ec:	6823      	ldr	r3, [r4, #0]
 80012ee:	f3bf 8f5b 	dmb	ish
 80012f2:	07da      	lsls	r2, r3, #31
 80012f4:	d412      	bmi.n	800131c <_ZN5astra8drawLogoEt+0xd4>
 80012f6:	4620      	mov	r0, r4
 80012f8:	f006 fd5d 	bl	8007db6 <__cxa_guard_acquire>
 80012fc:	b170      	cbz	r0, 800131c <_ZN5astra8drawLogoEt+0xd4>
	: allocator_type(__a), _M_p(__dat) { }
 80012fe:	4895      	ldr	r0, [pc, #596]	@ (8001554 <_ZN5astra8drawLogoEt+0x30c>)
	_M_construct(__s, __end, forward_iterator_tag());
 8001300:	4a95      	ldr	r2, [pc, #596]	@ (8001558 <_ZN5astra8drawLogoEt+0x310>)
	: allocator_type(__a), _M_p(__dat) { }
 8001302:	f100 0308 	add.w	r3, r0, #8
	_M_construct(__s, __end, forward_iterator_tag());
 8001306:	f1a2 0108 	sub.w	r1, r2, #8
	: allocator_type(__a), _M_p(__dat) { }
 800130a:	6003      	str	r3, [r0, #0]
	_M_construct(__s, __end, forward_iterator_tag());
 800130c:	f7ff fe62 	bl	8000fd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.0>
 8001310:	4892      	ldr	r0, [pc, #584]	@ (800155c <_ZN5astra8drawLogoEt+0x314>)
 8001312:	f007 fa52 	bl	80087ba <atexit>
 8001316:	4620      	mov	r0, r4
 8001318:	f006 fd59 	bl	8007dce <__cxa_guard_release>
    static std::string copyRight = "powered by";
 800131c:	4c90      	ldr	r4, [pc, #576]	@ (8001560 <_ZN5astra8drawLogoEt+0x318>)
 800131e:	6823      	ldr	r3, [r4, #0]
 8001320:	f3bf 8f5b 	dmb	ish
 8001324:	07db      	lsls	r3, r3, #31
 8001326:	d412      	bmi.n	800134e <_ZN5astra8drawLogoEt+0x106>
 8001328:	4620      	mov	r0, r4
 800132a:	f006 fd44 	bl	8007db6 <__cxa_guard_acquire>
 800132e:	b170      	cbz	r0, 800134e <_ZN5astra8drawLogoEt+0x106>
	: allocator_type(__a), _M_p(__dat) { }
 8001330:	488c      	ldr	r0, [pc, #560]	@ (8001564 <_ZN5astra8drawLogoEt+0x31c>)
	_M_construct(__s, __end, forward_iterator_tag());
 8001332:	4a8d      	ldr	r2, [pc, #564]	@ (8001568 <_ZN5astra8drawLogoEt+0x320>)
	: allocator_type(__a), _M_p(__dat) { }
 8001334:	f100 0308 	add.w	r3, r0, #8
	_M_construct(__s, __end, forward_iterator_tag());
 8001338:	f1a2 010a 	sub.w	r1, r2, #10
	: allocator_type(__a), _M_p(__dat) { }
 800133c:	6003      	str	r3, [r0, #0]
	_M_construct(__s, __end, forward_iterator_tag());
 800133e:	f7ff fe49 	bl	8000fd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.0>
 8001342:	488a      	ldr	r0, [pc, #552]	@ (800156c <_ZN5astra8drawLogoEt+0x324>)
 8001344:	f007 fa39 	bl	80087ba <atexit>
 8001348:	4620      	mov	r0, r4
 800134a:	f006 fd40 	bl	8007dce <__cxa_guard_release>
    static float xTitle = (HAL::getSystemConfig().screenWeight - HAL::getFontWidth(text)) / 2;
 800134e:	4c88      	ldr	r4, [pc, #544]	@ (8001570 <_ZN5astra8drawLogoEt+0x328>)
    HAL::setFont(getUIConfig().logoTitleFont);
 8001350:	4888      	ldr	r0, [pc, #544]	@ (8001574 <_ZN5astra8drawLogoEt+0x32c>)
 8001352:	f7ff fe5a 	bl	800100a <_ZN3HAL7setFontEPKh>
    static float xTitle = (HAL::getSystemConfig().screenWeight - HAL::getFontWidth(text)) / 2;
 8001356:	6823      	ldr	r3, [r4, #0]
 8001358:	f3bf 8f5b 	dmb	ish
 800135c:	07df      	lsls	r7, r3, #31
 800135e:	d414      	bmi.n	800138a <_ZN5astra8drawLogoEt+0x142>
 8001360:	4620      	mov	r0, r4
 8001362:	f006 fd28 	bl	8007db6 <__cxa_guard_acquire>
 8001366:	b180      	cbz	r0, 800138a <_ZN5astra8drawLogoEt+0x142>

  /**
   * @brief system config.
   */
public:
  static sys::config &getSystemConfig() { return get()->config; }
 8001368:	f003 fbc2 	bl	8004af0 <_ZN3HAL3getEv>
 800136c:	7907      	ldrb	r7, [r0, #4]
 800136e:	4879      	ldr	r0, [pc, #484]	@ (8001554 <_ZN5astra8drawLogoEt+0x30c>)
 8001370:	f7ff fe55 	bl	800101e <_ZN3HAL12getFontWidthERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001374:	1a38      	subs	r0, r7, r0
 8001376:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800137a:	1040      	asrs	r0, r0, #1
 800137c:	f7ff fb92 	bl	8000aa4 <__aeabi_i2f>
 8001380:	4b7d      	ldr	r3, [pc, #500]	@ (8001578 <_ZN5astra8drawLogoEt+0x330>)
 8001382:	6018      	str	r0, [r3, #0]
 8001384:	4620      	mov	r0, r4
 8001386:	f006 fd22 	bl	8007dce <__cxa_guard_release>
    static float xCopyRight = (HAL::getSystemConfig().screenWeight - HAL::getFontWidth(copyRight)) / 2;
 800138a:	4c7c      	ldr	r4, [pc, #496]	@ (800157c <_ZN5astra8drawLogoEt+0x334>)
    HAL::setFont(getUIConfig().logoCopyRightFont);
 800138c:	487c      	ldr	r0, [pc, #496]	@ (8001580 <_ZN5astra8drawLogoEt+0x338>)
 800138e:	f7ff fe3c 	bl	800100a <_ZN3HAL7setFontEPKh>
    static float xCopyRight = (HAL::getSystemConfig().screenWeight - HAL::getFontWidth(copyRight)) / 2;
 8001392:	6823      	ldr	r3, [r4, #0]
 8001394:	f3bf 8f5b 	dmb	ish
 8001398:	07d8      	lsls	r0, r3, #31
 800139a:	d414      	bmi.n	80013c6 <_ZN5astra8drawLogoEt+0x17e>
 800139c:	4620      	mov	r0, r4
 800139e:	f006 fd0a 	bl	8007db6 <__cxa_guard_acquire>
 80013a2:	b180      	cbz	r0, 80013c6 <_ZN5astra8drawLogoEt+0x17e>
 80013a4:	f003 fba4 	bl	8004af0 <_ZN3HAL3getEv>
 80013a8:	7907      	ldrb	r7, [r0, #4]
 80013aa:	486e      	ldr	r0, [pc, #440]	@ (8001564 <_ZN5astra8drawLogoEt+0x31c>)
 80013ac:	f7ff fe37 	bl	800101e <_ZN3HAL12getFontWidthERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80013b0:	1a38      	subs	r0, r7, r0
 80013b2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80013b6:	1040      	asrs	r0, r0, #1
 80013b8:	f7ff fb74 	bl	8000aa4 <__aeabi_i2f>
 80013bc:	4b71      	ldr	r3, [pc, #452]	@ (8001584 <_ZN5astra8drawLogoEt+0x33c>)
 80013be:	6018      	str	r0, [r3, #0]
 80013c0:	4620      	mov	r0, r4
 80013c2:	f006 fd04 	bl	8007dce <__cxa_guard_release>
    static float yTitle = 0 - getUIConfig().logoTextHeight - 1;
 80013c6:	4c70      	ldr	r4, [pc, #448]	@ (8001588 <_ZN5astra8drawLogoEt+0x340>)
    HAL::setFont(getUIConfig().mainFont);
 80013c8:	486d      	ldr	r0, [pc, #436]	@ (8001580 <_ZN5astra8drawLogoEt+0x338>)
 80013ca:	f7ff fe1e 	bl	800100a <_ZN3HAL7setFontEPKh>
    static float yTitle = 0 - getUIConfig().logoTextHeight - 1;
 80013ce:	6823      	ldr	r3, [r4, #0]
 80013d0:	f3bf 8f5b 	dmb	ish
 80013d4:	07d9      	lsls	r1, r3, #31
 80013d6:	d409      	bmi.n	80013ec <_ZN5astra8drawLogoEt+0x1a4>
 80013d8:	4620      	mov	r0, r4
 80013da:	f006 fcec 	bl	8007db6 <__cxa_guard_acquire>
 80013de:	b128      	cbz	r0, 80013ec <_ZN5astra8drawLogoEt+0x1a4>
 80013e0:	4b6a      	ldr	r3, [pc, #424]	@ (800158c <_ZN5astra8drawLogoEt+0x344>)
 80013e2:	4a6b      	ldr	r2, [pc, #428]	@ (8001590 <_ZN5astra8drawLogoEt+0x348>)
 80013e4:	4620      	mov	r0, r4
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	f006 fcf1 	bl	8007dce <__cxa_guard_release>
    static float yCopyRight = 0 - getUIConfig().logoCopyRightHeight - 1;
 80013ec:	4c69      	ldr	r4, [pc, #420]	@ (8001594 <_ZN5astra8drawLogoEt+0x34c>)
 80013ee:	6823      	ldr	r3, [r4, #0]
 80013f0:	f3bf 8f5b 	dmb	ish
 80013f4:	07da      	lsls	r2, r3, #31
 80013f6:	d409      	bmi.n	800140c <_ZN5astra8drawLogoEt+0x1c4>
 80013f8:	4620      	mov	r0, r4
 80013fa:	f006 fcdc 	bl	8007db6 <__cxa_guard_acquire>
 80013fe:	b128      	cbz	r0, 800140c <_ZN5astra8drawLogoEt+0x1c4>
 8001400:	4b65      	ldr	r3, [pc, #404]	@ (8001598 <_ZN5astra8drawLogoEt+0x350>)
 8001402:	4a66      	ldr	r2, [pc, #408]	@ (800159c <_ZN5astra8drawLogoEt+0x354>)
 8001404:	4620      	mov	r0, r4
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	f006 fce1 	bl	8007dce <__cxa_guard_release>
    static float yBackGround = 0 - HAL::getSystemConfig().screenHeight - 1;
 800140c:	4c64      	ldr	r4, [pc, #400]	@ (80015a0 <_ZN5astra8drawLogoEt+0x358>)
 800140e:	6823      	ldr	r3, [r4, #0]
 8001410:	f3bf 8f5b 	dmb	ish
 8001414:	07db      	lsls	r3, r3, #31
 8001416:	d40e      	bmi.n	8001436 <_ZN5astra8drawLogoEt+0x1ee>
 8001418:	4620      	mov	r0, r4
 800141a:	f006 fccc 	bl	8007db6 <__cxa_guard_acquire>
 800141e:	b150      	cbz	r0, 8001436 <_ZN5astra8drawLogoEt+0x1ee>
 8001420:	f003 fb66 	bl	8004af0 <_ZN3HAL3getEv>
 8001424:	7940      	ldrb	r0, [r0, #5]
 8001426:	43c0      	mvns	r0, r0
 8001428:	f7ff fb3c 	bl	8000aa4 <__aeabi_i2f>
 800142c:	4b5d      	ldr	r3, [pc, #372]	@ (80015a4 <_ZN5astra8drawLogoEt+0x35c>)
 800142e:	6018      	str	r0, [r3, #0]
 8001430:	4620      	mov	r0, r4
 8001432:	f006 fccc 	bl	8007dce <__cxa_guard_release>
    if (time < _time) {
 8001436:	4b3c      	ldr	r3, [pc, #240]	@ (8001528 <_ZN5astra8drawLogoEt+0x2e0>)
 8001438:	9a02      	ldr	r2, [sp, #8]
 800143a:	881b      	ldrh	r3, [r3, #0]
 800143c:	4f5a      	ldr	r7, [pc, #360]	@ (80015a8 <_ZN5astra8drawLogoEt+0x360>)
 800143e:	4293      	cmp	r3, r2
 8001440:	f080 819c 	bcs.w	800177c <_ZN5astra8drawLogoEt+0x534>
      yBackGroundTrg = 0;
 8001444:	2300      	movs	r3, #0
      if (!isInit) {
 8001446:	4a59      	ldr	r2, [pc, #356]	@ (80015ac <_ZN5astra8drawLogoEt+0x364>)
      yBackGroundTrg = 0;
 8001448:	603b      	str	r3, [r7, #0]
      if (!isInit) {
 800144a:	7813      	ldrb	r3, [r2, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	f040 80b7 	bne.w	80015c0 <_ZN5astra8drawLogoEt+0x378>
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8001452:	e9d5 3100 	ldrd	r3, r1, [r5]
 8001456:	428b      	cmp	r3, r1
	    this->_M_impl._M_finish = __pos;
 8001458:	bf18      	it	ne
 800145a:	606b      	strne	r3, [r5, #4]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800145c:	e9d8 3100 	ldrd	r3, r1, [r8]
 8001460:	428b      	cmp	r3, r1
	    this->_M_impl._M_finish = __pos;
 8001462:	bf18      	it	ne
 8001464:	f8c8 3004 	strne.w	r3, [r8, #4]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8001468:	e9d6 3100 	ldrd	r3, r1, [r6]
 800146c:	428b      	cmp	r3, r1
	    this->_M_impl._M_finish = __pos;
 800146e:	bf18      	it	ne
 8001470:	6073      	strne	r3, [r6, #4]
          yStarsTrg.push_back(1 + rand() % (uint16_t)(HAL::getSystemConfig().screenHeight - 2 * getUIConfig().logoStarLength - 2 + 1));
 8001472:	f04f 4b81 	mov.w	fp, #1082130432	@ 0x40800000
void drawLogo(uint16_t _time) {
 8001476:	2310      	movs	r3, #16
          yStarsTrg.push_back(1 + rand() % (uint16_t)(HAL::getSystemConfig().screenHeight - 2 * getUIConfig().logoStarLength - 2 + 1));
 8001478:	f04f 4a80 	mov.w	sl, #1073741824	@ 0x40000000
 800147c:	f04f 597e 	mov.w	r9, #1065353216	@ 0x3f800000
 8001480:	9303      	str	r3, [sp, #12]
  static unsigned long getRandomSeed() { return get()->_getRandomSeed(); }
 8001482:	f003 fb35 	bl	8004af0 <_ZN3HAL3getEv>
 8001486:	6801      	ldr	r1, [r0, #0]
 8001488:	6f49      	ldr	r1, [r1, #116]	@ 0x74
 800148a:	4788      	blx	r1
          srand(HAL::getRandomSeed() * 7);
 800148c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8001490:	f007 f99a 	bl	80087c8 <srand>
          yStars.push_back(0 - getUIConfig().logoStarLength - 1);
 8001494:	4b46      	ldr	r3, [pc, #280]	@ (80015b0 <_ZN5astra8drawLogoEt+0x368>)
      { emplace_back(std::move(__x)); }
 8001496:	a905      	add	r1, sp, #20
 8001498:	4825      	ldr	r0, [pc, #148]	@ (8001530 <_ZN5astra8drawLogoEt+0x2e8>)
 800149a:	9305      	str	r3, [sp, #20]
 800149c:	f7ff fe76 	bl	800118c <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_>
          yStarsTrg.push_back(1 + rand() % (uint16_t)(HAL::getSystemConfig().screenHeight - 2 * getUIConfig().logoStarLength - 2 + 1));
 80014a0:	f007 f9c0 	bl	8008824 <rand>
 80014a4:	4604      	mov	r4, r0
  static sys::config &getSystemConfig() { return get()->config; }
 80014a6:	f003 fb23 	bl	8004af0 <_ZN3HAL3getEv>
 80014aa:	7940      	ldrb	r0, [r0, #5]
 80014ac:	f7ff fafa 	bl	8000aa4 <__aeabi_i2f>
 80014b0:	4659      	mov	r1, fp
 80014b2:	f7ff fa41 	bl	8000938 <__aeabi_fsub>
 80014b6:	4651      	mov	r1, sl
 80014b8:	f7ff fa3e 	bl	8000938 <__aeabi_fsub>
 80014bc:	4649      	mov	r1, r9
 80014be:	f7ff fa3d 	bl	800093c <__addsf3>
 80014c2:	f7ff fd2f 	bl	8000f24 <__aeabi_f2uiz>
 80014c6:	b280      	uxth	r0, r0
 80014c8:	fb94 f1f0 	sdiv	r1, r4, r0
 80014cc:	fb00 4011 	mls	r0, r0, r1, r4
 80014d0:	3001      	adds	r0, #1
 80014d2:	f7ff fae7 	bl	8000aa4 <__aeabi_i2f>
 80014d6:	a905      	add	r1, sp, #20
 80014d8:	9005      	str	r0, [sp, #20]
 80014da:	4818      	ldr	r0, [pc, #96]	@ (800153c <_ZN5astra8drawLogoEt+0x2f4>)
 80014dc:	f7ff fe56 	bl	800118c <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_>
          xStars.push_back(1 + rand() % (uint16_t)(HAL::getSystemConfig().screenWeight - 2 * getUIConfig().logoStarLength - 2 + 1));
 80014e0:	f007 f9a0 	bl	8008824 <rand>
 80014e4:	4604      	mov	r4, r0
 80014e6:	f003 fb03 	bl	8004af0 <_ZN3HAL3getEv>
 80014ea:	7900      	ldrb	r0, [r0, #4]
 80014ec:	f7ff fada 	bl	8000aa4 <__aeabi_i2f>
 80014f0:	4659      	mov	r1, fp
 80014f2:	f7ff fa21 	bl	8000938 <__aeabi_fsub>
 80014f6:	4651      	mov	r1, sl
 80014f8:	f7ff fa1e 	bl	8000938 <__aeabi_fsub>
 80014fc:	4649      	mov	r1, r9
 80014fe:	f7ff fa1d 	bl	800093c <__addsf3>
 8001502:	f7ff fd0f 	bl	8000f24 <__aeabi_f2uiz>
 8001506:	b280      	uxth	r0, r0
 8001508:	fb94 f1f0 	sdiv	r1, r4, r0
 800150c:	fb00 4011 	mls	r0, r0, r1, r4
 8001510:	3001      	adds	r0, #1
 8001512:	f7ff fac7 	bl	8000aa4 <__aeabi_i2f>
 8001516:	a905      	add	r1, sp, #20
 8001518:	9005      	str	r0, [sp, #20]
 800151a:	480b      	ldr	r0, [pc, #44]	@ (8001548 <_ZN5astra8drawLogoEt+0x300>)
 800151c:	f7ff fe36 	bl	800118c <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_>
        for (unsigned char i = 0; i < getUIConfig().logoStarNum; i++) {
 8001520:	9b03      	ldr	r3, [sp, #12]
 8001522:	4a22      	ldr	r2, [pc, #136]	@ (80015ac <_ZN5astra8drawLogoEt+0x364>)
 8001524:	3b01      	subs	r3, #1
 8001526:	e045      	b.n	80015b4 <_ZN5astra8drawLogoEt+0x36c>
 8001528:	20000158 	.word	0x20000158
 800152c:	20000148 	.word	0x20000148
 8001530:	2000014c 	.word	0x2000014c
 8001534:	080010dd 	.word	0x080010dd
 8001538:	20000138 	.word	0x20000138
 800153c:	2000013c 	.word	0x2000013c
 8001540:	080010cd 	.word	0x080010cd
 8001544:	20000128 	.word	0x20000128
 8001548:	2000012c 	.word	0x2000012c
 800154c:	080010bd 	.word	0x080010bd
 8001550:	2000010c 	.word	0x2000010c
 8001554:	20000110 	.word	0x20000110
 8001558:	08009b5f 	.word	0x08009b5f
 800155c:	08000f71 	.word	0x08000f71
 8001560:	200000f0 	.word	0x200000f0
 8001564:	200000f4 	.word	0x200000f4
 8001568:	08009b6a 	.word	0x08009b6a
 800156c:	08000f65 	.word	0x08000f65
 8001570:	200000e8 	.word	0x200000e8
 8001574:	08009fcc 	.word	0x08009fcc
 8001578:	200000ec 	.word	0x200000ec
 800157c:	200000e0 	.word	0x200000e0
 8001580:	0800a81f 	.word	0x0800a81f
 8001584:	200000e4 	.word	0x200000e4
 8001588:	200000d8 	.word	0x200000d8
 800158c:	200000dc 	.word	0x200000dc
 8001590:	c1700000 	.word	0xc1700000
 8001594:	200000d0 	.word	0x200000d0
 8001598:	200000d4 	.word	0x200000d4
 800159c:	c1100000 	.word	0xc1100000
 80015a0:	200000c0 	.word	0x200000c0
 80015a4:	200000c4 	.word	0x200000c4
 80015a8:	200000bc 	.word	0x200000bc
 80015ac:	2000015a 	.word	0x2000015a
 80015b0:	c0400000 	.word	0xc0400000
 80015b4:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 80015b8:	f47f af62 	bne.w	8001480 <_ZN5astra8drawLogoEt+0x238>
        isInit = true;
 80015bc:	2301      	movs	r3, #1
 80015be:	7013      	strb	r3, [r2, #0]
 80015c0:	f003 fa96 	bl	8004af0 <_ZN3HAL3getEv>
      yTitleTrg = HAL::getSystemConfig().screenHeight / 2 - getUIConfig().logoTextHeight / 2;  //居中
 80015c4:	7940      	ldrb	r0, [r0, #5]
 80015c6:	0840      	lsrs	r0, r0, #1
 80015c8:	f7ff fa6c 	bl	8000aa4 <__aeabi_i2f>
 80015cc:	4974      	ldr	r1, [pc, #464]	@ (80017a0 <_ZN5astra8drawLogoEt+0x558>)
 80015ce:	f7ff f9b3 	bl	8000938 <__aeabi_fsub>
      yCopyRightTrg = yTitleTrg - getUIConfig().logoCopyRightHeight - 4;
 80015d2:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
      yTitleTrg = HAL::getSystemConfig().screenHeight / 2 - getUIConfig().logoTextHeight / 2;  //居中
 80015d6:	4604      	mov	r4, r0
      yCopyRightTrg = yTitleTrg - getUIConfig().logoCopyRightHeight - 4;
 80015d8:	f7ff f9ae 	bl	8000938 <__aeabi_fsub>
 80015dc:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80015e0:	f7ff f9aa 	bl	8000938 <__aeabi_fsub>
      yTitleTrg = HAL::getSystemConfig().screenHeight / 2 - getUIConfig().logoTextHeight / 2;  //居中
 80015e4:	4b6f      	ldr	r3, [pc, #444]	@ (80017a4 <_ZN5astra8drawLogoEt+0x55c>)
    HAL::drawBox(xBackGround, yBackGround, HAL::getSystemConfig().screenWeight, HAL::getSystemConfig().screenHeight);
 80015e6:	f8df 91c0 	ldr.w	r9, [pc, #448]	@ 80017a8 <_ZN5astra8drawLogoEt+0x560>
      yTitleTrg = HAL::getSystemConfig().screenHeight / 2 - getUIConfig().logoTextHeight / 2;  //居中
 80015ea:	601c      	str	r4, [r3, #0]
      yCopyRightTrg = yTitleTrg - getUIConfig().logoCopyRightHeight - 4;
 80015ec:	4b6f      	ldr	r3, [pc, #444]	@ (80017ac <_ZN5astra8drawLogoEt+0x564>)
 80015ee:	6018      	str	r0, [r3, #0]
  static void canvasClear() { get()->_canvasClear(); }
 80015f0:	f003 fa7e 	bl	8004af0 <_ZN3HAL3getEv>
 80015f4:	6803      	ldr	r3, [r0, #0]
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	4798      	blx	r3
    HAL::setDrawType(0);
 80015fa:	2000      	movs	r0, #0
 80015fc:	f7ff fd19 	bl	8001032 <_ZN3HAL11setDrawTypeEh>
    HAL::drawBox(xBackGround, yBackGround, HAL::getSystemConfig().screenWeight, HAL::getSystemConfig().screenHeight);
 8001600:	f8d9 b000 	ldr.w	fp, [r9]
  static sys::config &getSystemConfig() { return get()->config; }
 8001604:	f003 fa74 	bl	8004af0 <_ZN3HAL3getEv>
 8001608:	7900      	ldrb	r0, [r0, #4]
 800160a:	f7ff fa47 	bl	8000a9c <__aeabi_ui2f>
 800160e:	4682      	mov	sl, r0
 8001610:	f003 fa6e 	bl	8004af0 <_ZN3HAL3getEv>
 8001614:	7940      	ldrb	r0, [r0, #5]
 8001616:	f7ff fa41 	bl	8000a9c <__aeabi_ui2f>
 800161a:	4604      	mov	r4, r0
  static void drawBox(float _x, float _y, float _w, float _h) { get()->_drawBox(_x, _y, _w, _h); }
 800161c:	f003 fa68 	bl	8004af0 <_ZN3HAL3getEv>
 8001620:	6803      	ldr	r3, [r0, #0]
 8001622:	9400      	str	r4, [sp, #0]
 8001624:	465a      	mov	r2, fp
 8001626:	6d5c      	ldr	r4, [r3, #84]	@ 0x54
 8001628:	2100      	movs	r1, #0
 800162a:	4653      	mov	r3, sl
 800162c:	47a0      	blx	r4
    animation(yBackGround, yBackGroundTrg, getUIConfig().logoAnimationSpeed);
 800162e:	4a60      	ldr	r2, [pc, #384]	@ (80017b0 <_ZN5astra8drawLogoEt+0x568>)
 8001630:	6839      	ldr	r1, [r7, #0]
 8001632:	4648      	mov	r0, r9
 8001634:	f7ff fca2 	bl	8000f7c <_ZZN5astra8drawLogoEtENKUlRfffE_clES0_ff.constprop.0>
    HAL::setDrawType(1);
 8001638:	2001      	movs	r0, #1
 800163a:	f7ff fcfa 	bl	8001032 <_ZN3HAL11setDrawTypeEh>
  static sys::config &getSystemConfig() { return get()->config; }
 800163e:	f003 fa57 	bl	8004af0 <_ZN3HAL3getEv>
    HAL::drawHLine(0, yBackGround + HAL::getSystemConfig().screenHeight, HAL::getSystemConfig().screenWeight);
 8001642:	7940      	ldrb	r0, [r0, #5]
 8001644:	f7ff fa2e 	bl	8000aa4 <__aeabi_i2f>
 8001648:	f8d9 1000 	ldr.w	r1, [r9]
 800164c:	f7ff f976 	bl	800093c <__addsf3>
 8001650:	4604      	mov	r4, r0
 8001652:	f003 fa4d 	bl	8004af0 <_ZN3HAL3getEv>
 8001656:	7900      	ldrb	r0, [r0, #4]
 8001658:	f7ff fa20 	bl	8000a9c <__aeabi_ui2f>
 800165c:	4621      	mov	r1, r4
 800165e:	4602      	mov	r2, r0
 8001660:	2000      	movs	r0, #0
 8001662:	f7ff fd10 	bl	8001086 <_ZN3HAL9drawHLineEfff>
 8001666:	2400      	movs	r4, #0
      HAL::drawHLine(xStars[i] - getUIConfig().logoStarLength - 1, yStars[i], getUIConfig().logoStarLength);
 8001668:	f04f 4780 	mov.w	r7, #1073741824	@ 0x40000000
 800166c:	f04f 5a7e 	mov.w	sl, #1065353216	@ 0x3f800000
      animation(yStars[i], yStarsTrg[i], getUIConfig().logoAnimationSpeed);
 8001670:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 80017b0 <_ZN5astra8drawLogoEt+0x568>
      HAL::drawHLine(xStars[i] - getUIConfig().logoStarLength - 1, yStars[i], getUIConfig().logoStarLength);
 8001674:	6832      	ldr	r2, [r6, #0]
 8001676:	682b      	ldr	r3, [r5, #0]
 8001678:	5910      	ldr	r0, [r2, r4]
 800167a:	4639      	mov	r1, r7
 800167c:	9303      	str	r3, [sp, #12]
 800167e:	f7ff f95b 	bl	8000938 <__aeabi_fsub>
 8001682:	4651      	mov	r1, sl
 8001684:	f7ff f958 	bl	8000938 <__aeabi_fsub>
 8001688:	9b03      	ldr	r3, [sp, #12]
 800168a:	463a      	mov	r2, r7
 800168c:	5919      	ldr	r1, [r3, r4]
 800168e:	f7ff fcfa 	bl	8001086 <_ZN3HAL9drawHLineEfff>
      HAL::drawHLine(xStars[i] + 2, yStars[i], getUIConfig().logoStarLength);
 8001692:	6832      	ldr	r2, [r6, #0]
 8001694:	682b      	ldr	r3, [r5, #0]
 8001696:	5910      	ldr	r0, [r2, r4]
 8001698:	4639      	mov	r1, r7
 800169a:	9303      	str	r3, [sp, #12]
 800169c:	f7ff f94e 	bl	800093c <__addsf3>
 80016a0:	9b03      	ldr	r3, [sp, #12]
 80016a2:	463a      	mov	r2, r7
 80016a4:	5919      	ldr	r1, [r3, r4]
 80016a6:	f7ff fcee 	bl	8001086 <_ZN3HAL9drawHLineEfff>
      HAL::drawVLine(xStars[i], yStars[i] - getUIConfig().logoStarLength - 1, getUIConfig().logoStarLength);
 80016aa:	682b      	ldr	r3, [r5, #0]
 80016ac:	4639      	mov	r1, r7
 80016ae:	5918      	ldr	r0, [r3, r4]
 80016b0:	f7ff f942 	bl	8000938 <__aeabi_fsub>
 80016b4:	4651      	mov	r1, sl
 80016b6:	f7ff f93f 	bl	8000938 <__aeabi_fsub>
 80016ba:	6833      	ldr	r3, [r6, #0]
 80016bc:	4601      	mov	r1, r0
 80016be:	463a      	mov	r2, r7
 80016c0:	5918      	ldr	r0, [r3, r4]
 80016c2:	f7ff fcd0 	bl	8001066 <_ZN3HAL9drawVLineEfff>
      HAL::drawVLine(xStars[i], yStars[i] + 2, getUIConfig().logoStarLength);
 80016c6:	682b      	ldr	r3, [r5, #0]
 80016c8:	4639      	mov	r1, r7
 80016ca:	5918      	ldr	r0, [r3, r4]
 80016cc:	f7ff f936 	bl	800093c <__addsf3>
 80016d0:	6833      	ldr	r3, [r6, #0]
 80016d2:	4601      	mov	r1, r0
 80016d4:	463a      	mov	r2, r7
 80016d6:	5918      	ldr	r0, [r3, r4]
 80016d8:	f7ff fcc5 	bl	8001066 <_ZN3HAL9drawVLineEfff>
      animation(yStars[i], yStarsTrg[i], getUIConfig().logoAnimationSpeed);
 80016dc:	f8d8 3000 	ldr.w	r3, [r8]
	return *(this->_M_impl._M_start + __n);
 80016e0:	6828      	ldr	r0, [r5, #0]
 80016e2:	5919      	ldr	r1, [r3, r4]
 80016e4:	4420      	add	r0, r4
 80016e6:	465a      	mov	r2, fp
    for (unsigned char i = 0; i < getUIConfig().logoStarNum; i++) {
 80016e8:	3404      	adds	r4, #4
      animation(yStars[i], yStarsTrg[i], getUIConfig().logoAnimationSpeed);
 80016ea:	f7ff fc47 	bl	8000f7c <_ZZN5astra8drawLogoEtENKUlRfffE_clES0_ff.constprop.0>
    for (unsigned char i = 0; i < getUIConfig().logoStarNum; i++) {
 80016ee:	2c40      	cmp	r4, #64	@ 0x40
 80016f0:	d1c0      	bne.n	8001674 <_ZN5astra8drawLogoEt+0x42c>
    HAL::drawEnglish(xTitle, yTitle + getUIConfig().logoTextHeight, text);
 80016f2:	4d30      	ldr	r5, [pc, #192]	@ (80017b4 <_ZN5astra8drawLogoEt+0x56c>)
    HAL::setFont(getUIConfig().logoTitleFont);
 80016f4:	4830      	ldr	r0, [pc, #192]	@ (80017b8 <_ZN5astra8drawLogoEt+0x570>)
 80016f6:	f7ff fc88 	bl	800100a <_ZN3HAL7setFontEPKh>
    HAL::drawEnglish(xTitle, yTitle + getUIConfig().logoTextHeight, text);
 80016fa:	4930      	ldr	r1, [pc, #192]	@ (80017bc <_ZN5astra8drawLogoEt+0x574>)
 80016fc:	6828      	ldr	r0, [r5, #0]
 80016fe:	f7ff f91d 	bl	800093c <__addsf3>
 8001702:	4b2f      	ldr	r3, [pc, #188]	@ (80017c0 <_ZN5astra8drawLogoEt+0x578>)
 8001704:	4601      	mov	r1, r0
 8001706:	4a2f      	ldr	r2, [pc, #188]	@ (80017c4 <_ZN5astra8drawLogoEt+0x57c>)
 8001708:	6818      	ldr	r0, [r3, #0]
    HAL::drawEnglish(xCopyRight, yCopyRight + getUIConfig().logoCopyRightHeight, copyRight);
 800170a:	4c2f      	ldr	r4, [pc, #188]	@ (80017c8 <_ZN5astra8drawLogoEt+0x580>)
    HAL::drawEnglish(xTitle, yTitle + getUIConfig().logoTextHeight, text);
 800170c:	f7ff fc9b 	bl	8001046 <_ZN3HAL11drawEnglishEffRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
    HAL::setFont(getUIConfig().logoCopyRightFont);
 8001710:	482e      	ldr	r0, [pc, #184]	@ (80017cc <_ZN5astra8drawLogoEt+0x584>)
 8001712:	f7ff fc7a 	bl	800100a <_ZN3HAL7setFontEPKh>
    HAL::drawEnglish(xCopyRight, yCopyRight + getUIConfig().logoCopyRightHeight, copyRight);
 8001716:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 800171a:	6820      	ldr	r0, [r4, #0]
 800171c:	f7ff f90e 	bl	800093c <__addsf3>
 8001720:	4b2b      	ldr	r3, [pc, #172]	@ (80017d0 <_ZN5astra8drawLogoEt+0x588>)
 8001722:	4601      	mov	r1, r0
 8001724:	4a2b      	ldr	r2, [pc, #172]	@ (80017d4 <_ZN5astra8drawLogoEt+0x58c>)
 8001726:	6818      	ldr	r0, [r3, #0]
 8001728:	f7ff fc8d 	bl	8001046 <_ZN3HAL11drawEnglishEffRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
    animation(yTitle, yTitleTrg, getUIConfig().logoAnimationSpeed);
 800172c:	4b1d      	ldr	r3, [pc, #116]	@ (80017a4 <_ZN5astra8drawLogoEt+0x55c>)
 800172e:	4628      	mov	r0, r5
 8001730:	6819      	ldr	r1, [r3, #0]
 8001732:	4a1f      	ldr	r2, [pc, #124]	@ (80017b0 <_ZN5astra8drawLogoEt+0x568>)
 8001734:	f7ff fc22 	bl	8000f7c <_ZZN5astra8drawLogoEtENKUlRfffE_clES0_ff.constprop.0>
    animation(yCopyRight, yCopyRightTrg, getUIConfig().logoAnimationSpeed);
 8001738:	4b1c      	ldr	r3, [pc, #112]	@ (80017ac <_ZN5astra8drawLogoEt+0x564>)
 800173a:	4a1d      	ldr	r2, [pc, #116]	@ (80017b0 <_ZN5astra8drawLogoEt+0x568>)
 800173c:	6819      	ldr	r1, [r3, #0]
 800173e:	4620      	mov	r0, r4
 8001740:	f7ff fc1c 	bl	8000f7c <_ZZN5astra8drawLogoEtENKUlRfffE_clES0_ff.constprop.0>
  static void canvasUpdate() { get()->_canvasUpdate(); }
 8001744:	f003 f9d4 	bl	8004af0 <_ZN3HAL3getEv>
 8001748:	6803      	ldr	r3, [r0, #0]
 800174a:	69db      	ldr	r3, [r3, #28]
 800174c:	4798      	blx	r3
    if (time >= _time && yBackGround == 0 - HAL::getSystemConfig().screenHeight - 1) onRender = false;
 800174e:	4b22      	ldr	r3, [pc, #136]	@ (80017d8 <_ZN5astra8drawLogoEt+0x590>)
 8001750:	9a02      	ldr	r2, [sp, #8]
 8001752:	881b      	ldrh	r3, [r3, #0]
 8001754:	4293      	cmp	r3, r2
 8001756:	f4ff ad7b 	bcc.w	8001250 <_ZN5astra8drawLogoEt+0x8>
  static sys::config &getSystemConfig() { return get()->config; }
 800175a:	f003 f9c9 	bl	8004af0 <_ZN3HAL3getEv>
 800175e:	7940      	ldrb	r0, [r0, #5]
 8001760:	43c0      	mvns	r0, r0
 8001762:	f7ff f99f 	bl	8000aa4 <__aeabi_i2f>
 8001766:	f8d9 1000 	ldr.w	r1, [r9]
 800176a:	f7ff fb83 	bl	8000e74 <__aeabi_fcmpeq>
 800176e:	2800      	cmp	r0, #0
 8001770:	f43f ad6e 	beq.w	8001250 <_ZN5astra8drawLogoEt+0x8>
 8001774:	2300      	movs	r3, #0
 8001776:	4a19      	ldr	r2, [pc, #100]	@ (80017dc <_ZN5astra8drawLogoEt+0x594>)
 8001778:	7013      	strb	r3, [r2, #0]
 800177a:	e569      	b.n	8001250 <_ZN5astra8drawLogoEt+0x8>
 800177c:	f003 f9b8 	bl	8004af0 <_ZN3HAL3getEv>
      yBackGroundTrg = 0 - HAL::getSystemConfig().screenHeight - 1;
 8001780:	7940      	ldrb	r0, [r0, #5]
      yStarsTrg.assign(getUIConfig().logoStarNum, 0 - getUIConfig().logoStarLength - 1);
 8001782:	4c17      	ldr	r4, [pc, #92]	@ (80017e0 <_ZN5astra8drawLogoEt+0x598>)
      yBackGroundTrg = 0 - HAL::getSystemConfig().screenHeight - 1;
 8001784:	43c0      	mvns	r0, r0
 8001786:	f7ff f98d 	bl	8000aa4 <__aeabi_i2f>
      yStarsTrg.assign(getUIConfig().logoStarNum, 0 - getUIConfig().logoStarLength - 1);
 800178a:	4b16      	ldr	r3, [pc, #88]	@ (80017e4 <_ZN5astra8drawLogoEt+0x59c>)
      yBackGroundTrg = 0 - HAL::getSystemConfig().screenHeight - 1;
 800178c:	6038      	str	r0, [r7, #0]
      { _M_fill_assign(__n, __val); }
 800178e:	2110      	movs	r1, #16
 8001790:	4815      	ldr	r0, [pc, #84]	@ (80017e8 <_ZN5astra8drawLogoEt+0x5a0>)
 8001792:	aa05      	add	r2, sp, #20
      yStarsTrg.assign(getUIConfig().logoStarNum, 0 - getUIConfig().logoStarLength - 1);
 8001794:	9305      	str	r3, [sp, #20]
 8001796:	f7ff fd11 	bl	80011bc <_ZNSt6vectorIfSaIfEE14_M_fill_assignEjRKf>
 800179a:	4814      	ldr	r0, [pc, #80]	@ (80017ec <_ZN5astra8drawLogoEt+0x5a4>)
 800179c:	e722      	b.n	80015e4 <_ZN5astra8drawLogoEt+0x39c>
 800179e:	bf00      	nop
 80017a0:	40e00000 	.word	0x40e00000
 80017a4:	200000cc 	.word	0x200000cc
 80017a8:	200000c4 	.word	0x200000c4
 80017ac:	200000c8 	.word	0x200000c8
 80017b0:	428c0000 	.word	0x428c0000
 80017b4:	200000dc 	.word	0x200000dc
 80017b8:	08009fcc 	.word	0x08009fcc
 80017bc:	41600000 	.word	0x41600000
 80017c0:	200000ec 	.word	0x200000ec
 80017c4:	20000110 	.word	0x20000110
 80017c8:	200000d4 	.word	0x200000d4
 80017cc:	0800a81f 	.word	0x0800a81f
 80017d0:	200000e4 	.word	0x200000e4
 80017d4:	200000f4 	.word	0x200000f4
 80017d8:	20000158 	.word	0x20000158
 80017dc:	20000000 	.word	0x20000000
 80017e0:	c1700000 	.word	0xc1700000
 80017e4:	c0400000 	.word	0xc0400000
 80017e8:	2000013c 	.word	0x2000013c
 80017ec:	c1100000 	.word	0xc1100000

080017f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>:
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 80017f0:	f100 0308 	add.w	r3, r0, #8
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 80017f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80017f6:	4604      	mov	r4, r0
	if (__s == 0)
 80017f8:	460d      	mov	r5, r1
	: allocator_type(__a), _M_p(__dat) { }
 80017fa:	6003      	str	r3, [r0, #0]
	if (__s == 0)
 80017fc:	b911      	cbnz	r1, 8001804 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0+0x14>
	  std::__throw_logic_error(__N("basic_string: "
 80017fe:	480f      	ldr	r0, [pc, #60]	@ (800183c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0+0x4c>)
 8001800:	f006 fdaf 	bl	8008362 <_ZSt19__throw_logic_errorPKc>
      {
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
 8001804:	4608      	mov	r0, r1
 8001806:	f7fe fcad 	bl	8000164 <strlen>
	if (__dnew > size_type(_S_local_capacity))
 800180a:	280f      	cmp	r0, #15
	const _CharT* __end = __s + traits_type::length(__s);
 800180c:	eb05 0600 	add.w	r6, r5, r0
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8001810:	9001      	str	r0, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
 8001812:	d907      	bls.n	8001824 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0+0x34>
	    _M_data(_M_create(__dnew, size_type(0)));
 8001814:	2200      	movs	r2, #0
 8001816:	4620      	mov	r0, r4
 8001818:	a901      	add	r1, sp, #4
 800181a:	f006 fdb7 	bl	800838c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
 800181e:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
 8001820:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
 8001822:	60a3      	str	r3, [r4, #8]
	this->_S_copy_chars(_M_data(), __beg, __end);
 8001824:	4632      	mov	r2, r6
 8001826:	4629      	mov	r1, r5
 8001828:	6820      	ldr	r0, [r4, #0]
 800182a:	f006 fe14 	bl	8008456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	__c1 = __c2;
 800182e:	2100      	movs	r1, #0
	_M_set_length(__dnew);
 8001830:	9b01      	ldr	r3, [sp, #4]
 8001832:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
 8001834:	6063      	str	r3, [r4, #4]
 8001836:	54d1      	strb	r1, [r2, r3]
      }
 8001838:	b002      	add	sp, #8
 800183a:	bd70      	pop	{r4, r5, r6, pc}
 800183c:	08009b6b 	.word	0x08009b6b

08001840 <astraCoreInit>:
unsigned char testIndex = 0;
unsigned char testSlider = 60;

auto *secondPage = new astra::List("关于", pic_3);

void astraCoreInit(void) {
 8001840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL::inject(new HALDreamCore);
 8001844:	20a4      	movs	r0, #164	@ 0xa4
void astraCoreInit(void) {
 8001846:	b09b      	sub	sp, #108	@ 0x6c
  HAL::inject(new HALDreamCore);
 8001848:	f005 f8b0 	bl	80069ac <_Znwj>
namespace led {

}

namespace sys {
struct config {
 800184c:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
/**
 * @brief hardware abstraction layer.
 * @note provide a set of interfaces to access hardware.
 * @note provide some default implementation.
 */
class HAL {
 8001850:	2600      	movs	r6, #0
 8001852:	4604      	mov	r4, r0
struct config {
 8001854:	8083      	strh	r3, [r0, #4]
 8001856:	4bc5      	ldr	r3, [pc, #788]	@ (8001b6c <astraCoreInit+0x32c>)
private:
  void _ssd1306_init();
  void _u8g2_init();

public:
  HALDreamCore() = default;
 8001858:	2294      	movs	r2, #148	@ 0x94
 800185a:	6083      	str	r3, [r0, #8]
 800185c:	4bc4      	ldr	r3, [pc, #784]	@ (8001b70 <astraCoreInit+0x330>)
 800185e:	4631      	mov	r1, r6
class HAL {
 8001860:	8186      	strh	r6, [r0, #12]
 8001862:	7386      	strb	r6, [r0, #14]
 8001864:	f840 3b10 	str.w	r3, [r0], #16
 8001868:	f007 f949 	bl	8008afe <memset>
 800186c:	4620      	mov	r0, r4
 800186e:	f003 f945 	bl	8004afc <_ZN3HAL6injectEPS_>

  /**
   * @brief system timers.
   */
public:
  static void delay(unsigned long _mill) { get()->_delay(_mill); }
 8001872:	f003 f93d 	bl	8004af0 <_ZN3HAL3getEv>
 8001876:	6803      	ldr	r3, [r0, #0]
 8001878:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 800187c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800187e:	4798      	blx	r3

  HAL::delay(350);
  astra::drawLogo(200);

  rootPage->addItem(new astra::List("Dino Run", pic_0));
 8001880:	4fbc      	ldr	r7, [pc, #752]	@ (8001b74 <astraCoreInit+0x334>)
  astra::drawLogo(200);
 8001882:	20c8      	movs	r0, #200	@ 0xc8
 8001884:	f7ff fce0 	bl	8001248 <_ZN5astra8drawLogoEt>
  rootPage->addItem(new astra::List("Dino Run", pic_0));
 8001888:	f44f 70b2 	mov.w	r0, #356	@ 0x164
 800188c:	683d      	ldr	r5, [r7, #0]
 800188e:	f005 f88d 	bl	80069ac <_Znwj>
 8001892:	4604      	mov	r4, r0
 8001894:	49b8      	ldr	r1, [pc, #736]	@ (8001b78 <astraCoreInit+0x338>)
 8001896:	a814      	add	r0, sp, #80	@ 0x50
 8001898:	f7ff ffaa 	bl	80017f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 800189c:	4ab7      	ldr	r2, [pc, #732]	@ (8001b7c <astraCoreInit+0x33c>)
 800189e:	4620      	mov	r0, r4
 80018a0:	a914      	add	r1, sp, #80	@ 0x50
 80018a2:	f001 fbe9 	bl	8003078 <_ZN5astra4ListC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIhSaIhEE>
 80018a6:	4621      	mov	r1, r4
 80018a8:	4628      	mov	r0, r5
 80018aa:	f001 fb15 	bl	8002ed8 <_ZN5astra4Menu7addItemEPS0_>
      { _M_dispose(); }
 80018ae:	a814      	add	r0, sp, #80	@ 0x50
 80018b0:	f006 fd8e 	bl	80083d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
  rootPage->addItem(new astra::List("Snake", pic_1));
 80018b4:	f44f 70b2 	mov.w	r0, #356	@ 0x164
 80018b8:	683d      	ldr	r5, [r7, #0]
 80018ba:	f005 f877 	bl	80069ac <_Znwj>
 80018be:	4604      	mov	r4, r0
 80018c0:	49af      	ldr	r1, [pc, #700]	@ (8001b80 <astraCoreInit+0x340>)
 80018c2:	a814      	add	r0, sp, #80	@ 0x50
 80018c4:	f7ff ff94 	bl	80017f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 80018c8:	4aae      	ldr	r2, [pc, #696]	@ (8001b84 <astraCoreInit+0x344>)
 80018ca:	4620      	mov	r0, r4
 80018cc:	a914      	add	r1, sp, #80	@ 0x50
 80018ce:	f001 fbd3 	bl	8003078 <_ZN5astra4ListC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIhSaIhEE>
 80018d2:	4621      	mov	r1, r4
 80018d4:	4628      	mov	r0, r5
 80018d6:	f001 faff 	bl	8002ed8 <_ZN5astra4Menu7addItemEPS0_>
 80018da:	a814      	add	r0, sp, #80	@ 0x50
 80018dc:	f006 fd78 	bl	80083d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
  rootPage->addItem(new astra::List("Tetris", pic_2));
 80018e0:	f44f 70b2 	mov.w	r0, #356	@ 0x164
 80018e4:	683d      	ldr	r5, [r7, #0]
 80018e6:	f005 f861 	bl	80069ac <_Znwj>
 80018ea:	4604      	mov	r4, r0
 80018ec:	49a6      	ldr	r1, [pc, #664]	@ (8001b88 <astraCoreInit+0x348>)
 80018ee:	a814      	add	r0, sp, #80	@ 0x50
 80018f0:	f7ff ff7e 	bl	80017f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 80018f4:	4aa5      	ldr	r2, [pc, #660]	@ (8001b8c <astraCoreInit+0x34c>)
 80018f6:	4620      	mov	r0, r4
 80018f8:	a914      	add	r1, sp, #80	@ 0x50
 80018fa:	f001 fbbd 	bl	8003078 <_ZN5astra4ListC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIhSaIhEE>
 80018fe:	4621      	mov	r1, r4
 8001900:	4628      	mov	r0, r5
  rootPage->addItem(secondPage);
 8001902:	4da3      	ldr	r5, [pc, #652]	@ (8001b90 <astraCoreInit+0x350>)
  rootPage->addItem(new astra::List("Tetris", pic_2));
 8001904:	f001 fae8 	bl	8002ed8 <_ZN5astra4Menu7addItemEPS0_>
 8001908:	a814      	add	r0, sp, #80	@ 0x50
 800190a:	f006 fd61 	bl	80083d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
  rootPage->addItem(secondPage);
 800190e:	6829      	ldr	r1, [r5, #0]
 8001910:	6838      	ldr	r0, [r7, #0]
 8001912:	f001 fae1 	bl	8002ed8 <_ZN5astra4Menu7addItemEPS0_>

  secondPage->addItem(new astra::List("项目：With AstraUI"));
 8001916:	f44f 70b2 	mov.w	r0, #356	@ 0x164
 800191a:	f8d5 8000 	ldr.w	r8, [r5]
 800191e:	f005 f845 	bl	80069ac <_Znwj>
 8001922:	4604      	mov	r4, r0
 8001924:	499b      	ldr	r1, [pc, #620]	@ (8001b94 <astraCoreInit+0x354>)
 8001926:	a814      	add	r0, sp, #80	@ 0x50
 8001928:	f7ff ff62 	bl	80017f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 800192c:	4620      	mov	r0, r4
 800192e:	a914      	add	r1, sp, #80	@ 0x50
 8001930:	f001 fcba 	bl	80032a8 <_ZN5astra4ListC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001934:	4621      	mov	r1, r4
 8001936:	4640      	mov	r0, r8
 8001938:	f001 face 	bl	8002ed8 <_ZN5astra4Menu7addItemEPS0_>
 800193c:	a814      	add	r0, sp, #80	@ 0x50
 800193e:	f006 fd47 	bl	80083d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
  secondPage->addItem(new astra::Tile("Supported Games:"));
 8001942:	f44f 70b4 	mov.w	r0, #360	@ 0x168
 8001946:	f8d5 8000 	ldr.w	r8, [r5]
 800194a:	f005 f82f 	bl	80069ac <_Znwj>
 800194e:	4604      	mov	r4, r0
 8001950:	4991      	ldr	r1, [pc, #580]	@ (8001b98 <astraCoreInit+0x358>)
 8001952:	a814      	add	r0, sp, #80	@ 0x50
 8001954:	f7ff ff4c 	bl	80017f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 8001958:	4620      	mov	r0, r4
 800195a:	a914      	add	r1, sp, #80	@ 0x50
 800195c:	f001 fd00 	bl	8003360 <_ZN5astra4TileC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001960:	4621      	mov	r1, r4
 8001962:	4640      	mov	r0, r8
 8001964:	f001 fab8 	bl	8002ed8 <_ZN5astra4Menu7addItemEPS0_>
 8001968:	a814      	add	r0, sp, #80	@ 0x50
 800196a:	f006 fd31 	bl	80083d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
  secondPage->addItem(new astra::Tile("Chrome Dino Run"), new astra::CheckBox(test));
 800196e:	f44f 70b4 	mov.w	r0, #360	@ 0x168
 8001972:	f8d5 9000 	ldr.w	r9, [r5]
 8001976:	f005 f819 	bl	80069ac <_Znwj>
 800197a:	4604      	mov	r4, r0
 800197c:	4987      	ldr	r1, [pc, #540]	@ (8001b9c <astraCoreInit+0x35c>)
 800197e:	a814      	add	r0, sp, #80	@ 0x50
 8001980:	f7ff ff36 	bl	80017f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 8001984:	a914      	add	r1, sp, #80	@ 0x50
 8001986:	4620      	mov	r0, r4
 8001988:	f001 fcea 	bl	8003360 <_ZN5astra4TileC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800198c:	20e0      	movs	r0, #224	@ 0xe0
 800198e:	f005 f80d 	bl	80069ac <_Znwj>
 8001992:	4680      	mov	r8, r0
 8001994:	4982      	ldr	r1, [pc, #520]	@ (8001ba0 <astraCoreInit+0x360>)
 8001996:	f002 faaf 	bl	8003ef8 <_ZN5astra8CheckBoxC1ERb>
 800199a:	4642      	mov	r2, r8
 800199c:	4621      	mov	r1, r4
 800199e:	4648      	mov	r0, r9
 80019a0:	f001 fb0c 	bl	8002fbc <_ZN5astra4Menu7addItemEPS0_PNS_6WidgetE>
 80019a4:	a814      	add	r0, sp, #80	@ 0x50
 80019a6:	f006 fd13 	bl	80083d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
  secondPage->addItem(new astra::List("Snake"), new astra::PopUp(1, "测试", {"测试"}, testIndex));
 80019aa:	682b      	ldr	r3, [r5, #0]
 80019ac:	f44f 70b2 	mov.w	r0, #356	@ 0x164
 80019b0:	9302      	str	r3, [sp, #8]
 80019b2:	f004 fffb 	bl	80069ac <_Znwj>
 80019b6:	4680      	mov	r8, r0
 80019b8:	4971      	ldr	r1, [pc, #452]	@ (8001b80 <astraCoreInit+0x340>)
 80019ba:	a808      	add	r0, sp, #32
 80019bc:	f7ff ff18 	bl	80017f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 80019c0:	a908      	add	r1, sp, #32
 80019c2:	4640      	mov	r0, r8
 80019c4:	f001 fc70 	bl	80032a8 <_ZN5astra4ListC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80019c8:	f44f 708c 	mov.w	r0, #280	@ 0x118
 80019cc:	f004 ffee 	bl	80069ac <_Znwj>
 80019d0:	4974      	ldr	r1, [pc, #464]	@ (8001ba4 <astraCoreInit+0x364>)
 80019d2:	4681      	mov	r9, r0
 80019d4:	a80e      	add	r0, sp, #56	@ 0x38
 80019d6:	f7ff ff0b 	bl	80017f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 80019da:	4972      	ldr	r1, [pc, #456]	@ (8001ba4 <astraCoreInit+0x364>)
 80019dc:	a814      	add	r0, sp, #80	@ 0x50
 80019de:	f7ff ff07 	bl	80017f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 80019e2:	2018      	movs	r0, #24
	: _M_start(), _M_finish(), _M_end_of_storage()
 80019e4:	e9cd 6605 	strd	r6, r6, [sp, #20]
 80019e8:	9607      	str	r6, [sp, #28]
 80019ea:	f004 ffdf 	bl	80069ac <_Znwj>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 80019ee:	f100 0308 	add.w	r3, r0, #8
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80019f2:	f100 0a18 	add.w	sl, r0, #24
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 80019f6:	6003      	str	r3, [r0, #0]
      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      _GLIBCXX20_CONSTEXPR
      size_type
      length() const _GLIBCXX_NOEXCEPT
      { return _M_string_length; }
 80019f8:	e9dd 3214 	ldrd	r3, r2, [sp, #80]	@ 0x50
	if (__dnew > size_type(_S_local_capacity))
 80019fc:	2a0f      	cmp	r2, #15
 80019fe:	4604      	mov	r4, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8001a00:	9005      	str	r0, [sp, #20]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8001a02:	f8cd a01c 	str.w	sl, [sp, #28]
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
 8001a06:	eb03 0b02 	add.w	fp, r3, r2
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8001a0a:	9204      	str	r2, [sp, #16]
	if (__dnew > size_type(_S_local_capacity))
 8001a0c:	d908      	bls.n	8001a20 <astraCoreInit+0x1e0>
	    _M_data(_M_create(__dnew, size_type(0)));
 8001a0e:	4632      	mov	r2, r6
 8001a10:	a904      	add	r1, sp, #16
 8001a12:	9303      	str	r3, [sp, #12]
 8001a14:	f006 fcba 	bl	800838c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
 8001a18:	9a04      	ldr	r2, [sp, #16]
 8001a1a:	9b03      	ldr	r3, [sp, #12]
      { _M_dataplus._M_p = __p; }
 8001a1c:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
 8001a1e:	60a2      	str	r2, [r4, #8]
	this->_S_copy_chars(_M_data(), __beg, __end);
 8001a20:	4619      	mov	r1, r3
 8001a22:	6820      	ldr	r0, [r4, #0]
 8001a24:	465a      	mov	r2, fp
 8001a26:	f006 fd11 	bl	800844c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	6822      	ldr	r2, [r4, #0]
	_M_set_length(__dnew);
 8001a2e:	9b04      	ldr	r3, [sp, #16]
 8001a30:	4648      	mov	r0, r9
      { _M_string_length = __length; }
 8001a32:	6063      	str	r3, [r4, #4]
 8001a34:	54d1      	strb	r1, [r2, r3]
 8001a36:	4b5c      	ldr	r3, [pc, #368]	@ (8001ba8 <astraCoreInit+0x368>)
 8001a38:	2101      	movs	r1, #1
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	aa0e      	add	r2, sp, #56	@ 0x38
 8001a3e:	ab05      	add	r3, sp, #20
	  this->_M_impl._M_finish =
 8001a40:	f8cd a018 	str.w	sl, [sp, #24]
 8001a44:	f002 fa6c 	bl	8003f20 <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh>
 8001a48:	464a      	mov	r2, r9
 8001a4a:	4641      	mov	r1, r8
 8001a4c:	9802      	ldr	r0, [sp, #8]
 8001a4e:	f001 fab5 	bl	8002fbc <_ZN5astra4Menu7addItemEPS0_PNS_6WidgetE>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001a52:	e9dd 4605 	ldrd	r4, r6, [sp, #20]
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
 8001a56:	42a6      	cmp	r6, r4
 8001a58:	f040 8083 	bne.w	8001b62 <astraCoreInit+0x322>
	_M_deallocate(_M_impl._M_start,
 8001a5c:	9805      	ldr	r0, [sp, #20]
	if (__p)
 8001a5e:	b118      	cbz	r0, 8001a68 <astraCoreInit+0x228>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8001a60:	9907      	ldr	r1, [sp, #28]
 8001a62:	1a09      	subs	r1, r1, r0
 8001a64:	f006 f950 	bl	8007d08 <_ZdlPvj>
      { _M_dispose(); }
 8001a68:	a814      	add	r0, sp, #80	@ 0x50
 8001a6a:	f006 fcb1 	bl	80083d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8001a6e:	a80e      	add	r0, sp, #56	@ 0x38
 8001a70:	f006 fcae 	bl	80083d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8001a74:	a808      	add	r0, sp, #32
 8001a76:	f006 fcab 	bl	80083d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
  secondPage->addItem(new astra::List("Tetris"), new astra::Slider("测试", 0, 100, 50, testSlider));
 8001a7a:	f44f 70b2 	mov.w	r0, #356	@ 0x164
 8001a7e:	f8d5 8000 	ldr.w	r8, [r5]
 8001a82:	f004 ff93 	bl	80069ac <_Znwj>
 8001a86:	4604      	mov	r4, r0
 8001a88:	493f      	ldr	r1, [pc, #252]	@ (8001b88 <astraCoreInit+0x348>)
 8001a8a:	a80e      	add	r0, sp, #56	@ 0x38
 8001a8c:	f7ff feb0 	bl	80017f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 8001a90:	a90e      	add	r1, sp, #56	@ 0x38
 8001a92:	4620      	mov	r0, r4
 8001a94:	f001 fc08 	bl	80032a8 <_ZN5astra4ListC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001a98:	f44f 708c 	mov.w	r0, #280	@ 0x118
 8001a9c:	f004 ff86 	bl	80069ac <_Znwj>
 8001aa0:	4940      	ldr	r1, [pc, #256]	@ (8001ba4 <astraCoreInit+0x364>)
 8001aa2:	4606      	mov	r6, r0
 8001aa4:	a814      	add	r0, sp, #80	@ 0x50
 8001aa6:	f7ff fea3 	bl	80017f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 8001aaa:	4b40      	ldr	r3, [pc, #256]	@ (8001bac <astraCoreInit+0x36c>)
 8001aac:	a914      	add	r1, sp, #80	@ 0x50
 8001aae:	9301      	str	r3, [sp, #4]
 8001ab0:	2332      	movs	r3, #50	@ 0x32
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	4630      	mov	r0, r6
 8001ab8:	2364      	movs	r3, #100	@ 0x64
 8001aba:	f002 faf1 	bl	80040a0 <_ZN5astra6SliderC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhhRh>
 8001abe:	4632      	mov	r2, r6
 8001ac0:	4621      	mov	r1, r4
 8001ac2:	4640      	mov	r0, r8
 8001ac4:	f001 fa7a 	bl	8002fbc <_ZN5astra4Menu7addItemEPS0_PNS_6WidgetE>
 8001ac8:	a814      	add	r0, sp, #80	@ 0x50
 8001aca:	f006 fc81 	bl	80083d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8001ace:	a80e      	add	r0, sp, #56	@ 0x38
 8001ad0:	f006 fc7e 	bl	80083d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
  secondPage->addItem(new astra::List("auto-fill item"));
 8001ad4:	f44f 70b2 	mov.w	r0, #356	@ 0x164
 8001ad8:	682e      	ldr	r6, [r5, #0]
 8001ada:	f004 ff67 	bl	80069ac <_Znwj>
 8001ade:	4604      	mov	r4, r0
 8001ae0:	4933      	ldr	r1, [pc, #204]	@ (8001bb0 <astraCoreInit+0x370>)
 8001ae2:	a814      	add	r0, sp, #80	@ 0x50
 8001ae4:	f7ff fe84 	bl	80017f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 8001ae8:	a914      	add	r1, sp, #80	@ 0x50
 8001aea:	4620      	mov	r0, r4
 8001aec:	f001 fbdc 	bl	80032a8 <_ZN5astra4ListC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001af0:	4621      	mov	r1, r4
 8001af2:	4630      	mov	r0, r6
 8001af4:	f001 f9f0 	bl	8002ed8 <_ZN5astra4Menu7addItemEPS0_>
 8001af8:	a814      	add	r0, sp, #80	@ 0x50
 8001afa:	f006 fc69 	bl	80083d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
  secondPage->addItem(new astra::List("pseudo-text"));
 8001afe:	f44f 70b2 	mov.w	r0, #356	@ 0x164
 8001b02:	682e      	ldr	r6, [r5, #0]
 8001b04:	f004 ff52 	bl	80069ac <_Znwj>
 8001b08:	4604      	mov	r4, r0
 8001b0a:	492a      	ldr	r1, [pc, #168]	@ (8001bb4 <astraCoreInit+0x374>)
 8001b0c:	a814      	add	r0, sp, #80	@ 0x50
 8001b0e:	f7ff fe6f 	bl	80017f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 8001b12:	a914      	add	r1, sp, #80	@ 0x50
 8001b14:	4620      	mov	r0, r4
 8001b16:	f001 fbc7 	bl	80032a8 <_ZN5astra4ListC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001b1a:	4621      	mov	r1, r4
 8001b1c:	4630      	mov	r0, r6
 8001b1e:	f001 f9db 	bl	8002ed8 <_ZN5astra4Menu7addItemEPS0_>
 8001b22:	a814      	add	r0, sp, #80	@ 0x50
 8001b24:	f006 fc54 	bl	80083d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
  secondPage->addItem(new astra::List("padding"));
 8001b28:	f44f 70b2 	mov.w	r0, #356	@ 0x164
 8001b2c:	682d      	ldr	r5, [r5, #0]
 8001b2e:	f004 ff3d 	bl	80069ac <_Znwj>
 8001b32:	4604      	mov	r4, r0
 8001b34:	4920      	ldr	r1, [pc, #128]	@ (8001bb8 <astraCoreInit+0x378>)
 8001b36:	a814      	add	r0, sp, #80	@ 0x50
 8001b38:	f7ff fe5a 	bl	80017f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 8001b3c:	a914      	add	r1, sp, #80	@ 0x50
 8001b3e:	4620      	mov	r0, r4
 8001b40:	f001 fbb2 	bl	80032a8 <_ZN5astra4ListC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001b44:	4621      	mov	r1, r4
 8001b46:	4628      	mov	r0, r5
 8001b48:	f001 f9c6 	bl	8002ed8 <_ZN5astra4Menu7addItemEPS0_>
 8001b4c:	a814      	add	r0, sp, #80	@ 0x50
 8001b4e:	f006 fc3f 	bl	80083d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>

  astraLauncher->init(rootPage);
 8001b52:	4b1a      	ldr	r3, [pc, #104]	@ (8001bbc <astraCoreInit+0x37c>)
 8001b54:	6839      	ldr	r1, [r7, #0]
 8001b56:	6818      	ldr	r0, [r3, #0]
}
 8001b58:	b01b      	add	sp, #108	@ 0x6c
 8001b5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  astraLauncher->init(rootPage);
 8001b5e:	f002 bc8b 	b.w	8004478 <_ZN5astra8Launcher4initEPNS_4MenuE>
 8001b62:	4620      	mov	r0, r4
 8001b64:	f006 fc34 	bl	80083d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8001b68:	3418      	adds	r4, #24
 8001b6a:	e774      	b.n	8001a56 <astraCoreInit+0x216>
 8001b6c:	437f0000 	.word	0x437f0000
 8001b70:	0800b380 	.word	0x0800b380
 8001b74:	20000164 	.word	0x20000164
 8001b78:	08009bd8 	.word	0x08009bd8
 8001b7c:	20000190 	.word	0x20000190
 8001b80:	08009b9d 	.word	0x08009b9d
 8001b84:	20000184 	.word	0x20000184
 8001b88:	08009ba3 	.word	0x08009ba3
 8001b8c:	20000178 	.word	0x20000178
 8001b90:	2000015c 	.word	0x2000015c
 8001b94:	08009baa 	.word	0x08009baa
 8001b98:	08009bc0 	.word	0x08009bc0
 8001b9c:	08009bd1 	.word	0x08009bd1
 8001ba0:	20000161 	.word	0x20000161
 8001ba4:	08009be1 	.word	0x08009be1
 8001ba8:	20000160 	.word	0x20000160
 8001bac:	20000001 	.word	0x20000001
 8001bb0:	08009be8 	.word	0x08009be8
 8001bb4:	08009bf7 	.word	0x08009bf7
 8001bb8:	08009c03 	.word	0x08009c03
 8001bbc:	20000168 	.word	0x20000168

08001bc0 <astraCoreStart>:

void astraCoreStart(void) {
 8001bc0:	b508      	push	{r3, lr}
  for (;;) {  //NOLINT
    astraLauncher->update();
 8001bc2:	4c02      	ldr	r4, [pc, #8]	@ (8001bcc <astraCoreStart+0xc>)
 8001bc4:	6820      	ldr	r0, [r4, #0]
 8001bc6:	f002 fe0f 	bl	80047e8 <_ZN5astra8Launcher6updateEv>
  for (;;) {  //NOLINT
 8001bca:	e7fb      	b.n	8001bc4 <astraCoreStart+0x4>
 8001bcc:	20000168 	.word	0x20000168

08001bd0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001bd0:	b510      	push	{r4, lr}
 8001bd2:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8001bd4:	6800      	ldr	r0, [r0, #0]
	if (__p)
 8001bd6:	b118      	cbz	r0, 8001be0 <_ZNSt12_Vector_baseIhSaIhEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001bd8:	68a1      	ldr	r1, [r4, #8]
 8001bda:	1a09      	subs	r1, r1, r0
 8001bdc:	f006 f894 	bl	8007d08 <_ZdlPvj>
      }
 8001be0:	4620      	mov	r0, r4
 8001be2:	bd10      	pop	{r4, pc}

08001be4 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>:
      vector(initializer_list<value_type> __l,
 8001be4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001be6:	ab02      	add	r3, sp, #8
 8001be8:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001bec:	2300      	movs	r3, #0
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8001bee:	429a      	cmp	r2, r3
      vector(initializer_list<value_type> __l,
 8001bf0:	4604      	mov	r4, r0
 8001bf2:	460f      	mov	r7, r1
      constexpr initializer_list() noexcept
      : _M_array(0), _M_len(0) { }

      // Number of elements.
      constexpr size_type
      size() const noexcept { return _M_len; }
 8001bf4:	4615      	mov	r5, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001bf6:	e9c0 3300 	strd	r3, r3, [r0]
 8001bfa:	6083      	str	r3, [r0, #8]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8001bfc:	da02      	bge.n	8001c04 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_+0x20>
	  __throw_length_error(
 8001bfe:	4809      	ldr	r0, [pc, #36]	@ (8001c24 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_+0x40>)
 8001c00:	f006 fbb2 	bl	8008368 <_ZSt20__throw_length_errorPKc>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8001c04:	4610      	mov	r0, r2
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001c06:	d001      	beq.n	8001c0c <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_+0x28>
 8001c08:	f004 fed0 	bl	80069ac <_Znwj>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8001c0c:	1946      	adds	r6, r0, r5
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8001c0e:	6020      	str	r0, [r4, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8001c10:	60a6      	str	r6, [r4, #8]
	  if (_Num)
 8001c12:	b11d      	cbz	r5, 8001c1c <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_+0x38>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8001c14:	462a      	mov	r2, r5
 8001c16:	4639      	mov	r1, r7
 8001c18:	f007 f83f 	bl	8008c9a <memcpy>
      }
 8001c1c:	4620      	mov	r0, r4
	  this->_M_impl._M_finish =
 8001c1e:	6066      	str	r6, [r4, #4]
      }
 8001c20:	b003      	add	sp, #12
 8001c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c24:	08009b26 	.word	0x08009b26

08001c28 <_Z41__static_initialization_and_destruction_0ii.constprop.0>:
}

void astraCoreDestroy(void) {
  HAL::destroy();
  delete astraLauncher;
}
 8001c28:	b570      	push	{r4, r5, r6, lr}
 8001c2a:	2801      	cmp	r0, #1
 8001c2c:	b0a8      	sub	sp, #160	@ 0xa0
 8001c2e:	d00d      	beq.n	8001c4c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x24>
      }
 8001c30:	483c      	ldr	r0, [pc, #240]	@ (8001d24 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xfc>)
 8001c32:	f7ff ffcd 	bl	8001bd0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8001c36:	483c      	ldr	r0, [pc, #240]	@ (8001d28 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x100>)
 8001c38:	f7ff ffca 	bl	8001bd0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8001c3c:	483b      	ldr	r0, [pc, #236]	@ (8001d2c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x104>)
 8001c3e:	f7ff ffc7 	bl	8001bd0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8001c42:	483b      	ldr	r0, [pc, #236]	@ (8001d30 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x108>)
 8001c44:	f7ff ffc4 	bl	8001bd0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8001c48:	b028      	add	sp, #160	@ 0xa0
 8001c4a:	bd70      	pop	{r4, r5, r6, pc}
std::vector<uint8_t> pic_0 = {
 8001c4c:	2478      	movs	r4, #120	@ 0x78
 8001c4e:	4939      	ldr	r1, [pc, #228]	@ (8001d34 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10c>)
 8001c50:	4622      	mov	r2, r4
 8001c52:	a80a      	add	r0, sp, #40	@ 0x28
 8001c54:	f007 f821 	bl	8008c9a <memcpy>
 8001c58:	ab0a      	add	r3, sp, #40	@ 0x28
 8001c5a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8001c5e:	ad06      	add	r5, sp, #24
 8001c60:	462b      	mov	r3, r5
 8001c62:	4622      	mov	r2, r4
 8001c64:	9908      	ldr	r1, [sp, #32]
 8001c66:	4832      	ldr	r0, [pc, #200]	@ (8001d30 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x108>)
 8001c68:	f7ff ffbc 	bl	8001be4 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
std::vector<uint8_t> pic_1 = {
 8001c6c:	4622      	mov	r2, r4
 8001c6e:	4932      	ldr	r1, [pc, #200]	@ (8001d38 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x110>)
 8001c70:	a80a      	add	r0, sp, #40	@ 0x28
 8001c72:	f007 f812 	bl	8008c9a <memcpy>
 8001c76:	ab0a      	add	r3, sp, #40	@ 0x28
 8001c78:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8001c7c:	ae04      	add	r6, sp, #16
 8001c7e:	4633      	mov	r3, r6
 8001c80:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001c84:	4829      	ldr	r0, [pc, #164]	@ (8001d2c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x104>)
 8001c86:	f7ff ffad 	bl	8001be4 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
std::vector<uint8_t> pic_2 = {
 8001c8a:	4622      	mov	r2, r4
 8001c8c:	492b      	ldr	r1, [pc, #172]	@ (8001d3c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x114>)
 8001c8e:	a80a      	add	r0, sp, #40	@ 0x28
 8001c90:	f007 f803 	bl	8008c9a <memcpy>
 8001c94:	ab0a      	add	r3, sp, #40	@ 0x28
 8001c96:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8001c9a:	ad02      	add	r5, sp, #8
 8001c9c:	462b      	mov	r3, r5
 8001c9e:	e896 0006 	ldmia.w	r6, {r1, r2}
 8001ca2:	4821      	ldr	r0, [pc, #132]	@ (8001d28 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x100>)
 8001ca4:	f7ff ff9e 	bl	8001be4 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
std::vector<uint8_t> pic_3 = {
 8001ca8:	4622      	mov	r2, r4
 8001caa:	4925      	ldr	r1, [pc, #148]	@ (8001d40 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x118>)
 8001cac:	a80a      	add	r0, sp, #40	@ 0x28
 8001cae:	f006 fff4 	bl	8008c9a <memcpy>
 8001cb2:	ab0a      	add	r3, sp, #40	@ 0x28
 8001cb4:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8001cb8:	481a      	ldr	r0, [pc, #104]	@ (8001d24 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xfc>)
 8001cba:	ab01      	add	r3, sp, #4
 8001cbc:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001cc0:	f7ff ff90 	bl	8001be4 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
auto *astraLauncher = new astra::Launcher();
 8001cc4:	2018      	movs	r0, #24
 8001cc6:	f004 fe71 	bl	80069ac <_Znwj>
 8001cca:	4604      	mov	r4, r0
 8001ccc:	2218      	movs	r2, #24
 8001cce:	2100      	movs	r1, #0
 8001cd0:	f006 ff15 	bl	8008afe <memset>
 8001cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d44 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x11c>)
auto *rootPage = new astra::Tile("root");
 8001cd6:	f44f 70b4 	mov.w	r0, #360	@ 0x168
auto *astraLauncher = new astra::Launcher();
 8001cda:	601c      	str	r4, [r3, #0]
auto *rootPage = new astra::Tile("root");
 8001cdc:	f004 fe66 	bl	80069ac <_Znwj>
 8001ce0:	4604      	mov	r4, r0
 8001ce2:	4919      	ldr	r1, [pc, #100]	@ (8001d48 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x120>)
 8001ce4:	a80a      	add	r0, sp, #40	@ 0x28
 8001ce6:	f7ff fd83 	bl	80017f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 8001cea:	a90a      	add	r1, sp, #40	@ 0x28
 8001cec:	4620      	mov	r0, r4
 8001cee:	f001 fb37 	bl	8003360 <_ZN5astra4TileC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001cf2:	4b16      	ldr	r3, [pc, #88]	@ (8001d4c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x124>)
 8001cf4:	a80a      	add	r0, sp, #40	@ 0x28
 8001cf6:	601c      	str	r4, [r3, #0]
 8001cf8:	f006 fb6a 	bl	80083d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
auto *secondPage = new astra::List("关于", pic_3);
 8001cfc:	f44f 70b2 	mov.w	r0, #356	@ 0x164
 8001d00:	f004 fe54 	bl	80069ac <_Znwj>
 8001d04:	4604      	mov	r4, r0
 8001d06:	4912      	ldr	r1, [pc, #72]	@ (8001d50 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x128>)
 8001d08:	a80a      	add	r0, sp, #40	@ 0x28
 8001d0a:	f7ff fd71 	bl	80017f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 8001d0e:	4620      	mov	r0, r4
 8001d10:	4a04      	ldr	r2, [pc, #16]	@ (8001d24 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xfc>)
 8001d12:	a90a      	add	r1, sp, #40	@ 0x28
 8001d14:	f001 f9b0 	bl	8003078 <_ZN5astra4ListC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIhSaIhEE>
 8001d18:	4b0e      	ldr	r3, [pc, #56]	@ (8001d54 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x12c>)
 8001d1a:	a80a      	add	r0, sp, #40	@ 0x28
 8001d1c:	601c      	str	r4, [r3, #0]
 8001d1e:	f006 fb57 	bl	80083d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
}
 8001d22:	e791      	b.n	8001c48 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x20>
 8001d24:	2000016c 	.word	0x2000016c
 8001d28:	20000178 	.word	0x20000178
 8001d2c:	20000184 	.word	0x20000184
 8001d30:	20000190 	.word	0x20000190
 8001d34:	0800992c 	.word	0x0800992c
 8001d38:	080099a4 	.word	0x080099a4
 8001d3c:	08009a1c 	.word	0x08009a1c
 8001d40:	08009a94 	.word	0x08009a94
 8001d44:	20000168 	.word	0x20000168
 8001d48:	08009c0b 	.word	0x08009c0b
 8001d4c:	20000164 	.word	0x20000164
 8001d50:	08009c10 	.word	0x08009c10
 8001d54:	2000015c 	.word	0x2000015c

08001d58 <_GLOBAL__sub_I_pic_0>:
 8001d58:	2001      	movs	r0, #1
 8001d5a:	f7ff bf65 	b.w	8001c28 <_Z41__static_initialization_and_destruction_0ii.constprop.0>

08001d5e <_GLOBAL__sub_D_pic_0>:
 8001d5e:	2000      	movs	r0, #0
 8001d60:	f7ff bf62 	b.w	8001c28 <_Z41__static_initialization_and_destruction_0ii.constprop.0>

08001d64 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
 8001d64:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001d66:	b170      	cbz	r0, 8001d86 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0+0x22>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8001d68:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 8001d6c:	d306      	bcc.n	8001d7c <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0+0x18>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8001d6e:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001d72:	d301      	bcc.n	8001d78 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0+0x14>
	      std::__throw_bad_array_new_length();
 8001d74:	f006 faf2 	bl	800835c <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8001d78:	f006 faed 	bl	8008356 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8001d7c:	0080      	lsls	r0, r0, #2
      }
 8001d7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001d82:	f004 be13 	b.w	80069ac <_Znwj>
 8001d86:	bd08      	pop	{r3, pc}

08001d88 <_ZN5astra6configC1Ev>:

namespace astra {
/**
 * @brief config of astra ui. astra ui的配置结构体
 */
struct config {
 8001d88:	4a34      	ldr	r2, [pc, #208]	@ (8001e5c <_ZN5astra6configC1Ev+0xd4>)
 8001d8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d8c:	6002      	str	r2, [r0, #0]
 8001d8e:	6042      	str	r2, [r0, #4]
 8001d90:	60c2      	str	r2, [r0, #12]
 8001d92:	6102      	str	r2, [r0, #16]
 8001d94:	6282      	str	r2, [r0, #40]	@ 0x28
 8001d96:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 8001d9a:	f04f 547c 	mov.w	r4, #1056964608	@ 0x3f000000
 8001d9e:	62c2      	str	r2, [r0, #44]	@ 0x2c
 8001da0:	2200      	movs	r2, #0
 8001da2:	492f      	ldr	r1, [pc, #188]	@ (8001e60 <_ZN5astra6configC1Ev+0xd8>)
 8001da4:	f04f 4583 	mov.w	r5, #1098907648	@ 0x41800000
 8001da8:	6081      	str	r1, [r0, #8]
 8001daa:	492e      	ldr	r1, [pc, #184]	@ (8001e64 <_ZN5astra6configC1Ev+0xdc>)
 8001dac:	f880 2030 	strb.w	r2, [r0, #48]	@ 0x30
 8001db0:	6141      	str	r1, [r0, #20]
 8001db2:	492d      	ldr	r1, [pc, #180]	@ (8001e68 <_ZN5astra6configC1Ev+0xe0>)
 8001db4:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8001db8:	6181      	str	r1, [r0, #24]
 8001dba:	492c      	ldr	r1, [pc, #176]	@ (8001e6c <_ZN5astra6configC1Ev+0xe4>)
 8001dbc:	6444      	str	r4, [r0, #68]	@ 0x44
 8001dbe:	61c1      	str	r1, [r0, #28]
 8001dc0:	492b      	ldr	r1, [pc, #172]	@ (8001e70 <_ZN5astra6configC1Ev+0xe8>)
 8001dc2:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 8001dc6:	6201      	str	r1, [r0, #32]
 8001dc8:	492a      	ldr	r1, [pc, #168]	@ (8001e74 <_ZN5astra6configC1Ev+0xec>)
 8001dca:	4f2b      	ldr	r7, [pc, #172]	@ (8001e78 <_ZN5astra6configC1Ev+0xf0>)
 8001dcc:	6241      	str	r1, [r0, #36]	@ 0x24
 8001dce:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001dd2:	6507      	str	r7, [r0, #80]	@ 0x50
 8001dd4:	6547      	str	r7, [r0, #84]	@ 0x54
 8001dd6:	4f29      	ldr	r7, [pc, #164]	@ (8001e7c <_ZN5astra6configC1Ev+0xf4>)
 8001dd8:	4e29      	ldr	r6, [pc, #164]	@ (8001e80 <_ZN5astra6configC1Ev+0xf8>)
 8001dda:	6607      	str	r7, [r0, #96]	@ 0x60
 8001ddc:	4f29      	ldr	r7, [pc, #164]	@ (8001e84 <_ZN5astra6configC1Ev+0xfc>)
 8001dde:	6346      	str	r6, [r0, #52]	@ 0x34
 8001de0:	6687      	str	r7, [r0, #104]	@ 0x68
 8001de2:	6786      	str	r6, [r0, #120]	@ 0x78
 8001de4:	4f28      	ldr	r7, [pc, #160]	@ (8001e88 <_ZN5astra6configC1Ev+0x100>)
 8001de6:	4e29      	ldr	r6, [pc, #164]	@ (8001e8c <_ZN5astra6configC1Ev+0x104>)
 8001de8:	6382      	str	r2, [r0, #56]	@ 0x38
 8001dea:	6405      	str	r5, [r0, #64]	@ 0x40
 8001dec:	64c4      	str	r4, [r0, #76]	@ 0x4c
 8001dee:	6582      	str	r2, [r0, #88]	@ 0x58
 8001df0:	65c2      	str	r2, [r0, #92]	@ 0x5c
 8001df2:	66c2      	str	r2, [r0, #108]	@ 0x6c
 8001df4:	6744      	str	r4, [r0, #116]	@ 0x74
 8001df6:	63c1      	str	r1, [r0, #60]	@ 0x3c
 8001df8:	6481      	str	r1, [r0, #72]	@ 0x48
 8001dfa:	6641      	str	r1, [r0, #100]	@ 0x64
 8001dfc:	6707      	str	r7, [r0, #112]	@ 0x70
 8001dfe:	67c6      	str	r6, [r0, #124]	@ 0x7c
 8001e00:	f8c0 4094 	str.w	r4, [r0, #148]	@ 0x94
 8001e04:	f8c0 409c 	str.w	r4, [r0, #156]	@ 0x9c
 8001e08:	4c21      	ldr	r4, [pc, #132]	@ (8001e90 <_ZN5astra6configC1Ev+0x108>)
 8001e0a:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
 8001e0e:	f8c0 40a0 	str.w	r4, [r0, #160]	@ 0xa0
 8001e12:	2410      	movs	r4, #16
 8001e14:	f8c0 20a4 	str.w	r2, [r0, #164]	@ 0xa4
 8001e18:	f8c0 20b8 	str.w	r2, [r0, #184]	@ 0xb8
 8001e1c:	f8c0 20bc 	str.w	r2, [r0, #188]	@ 0xbc
 8001e20:	4a1c      	ldr	r2, [pc, #112]	@ (8001e94 <_ZN5astra6configC1Ev+0x10c>)
 8001e22:	f880 40a8 	strb.w	r4, [r0, #168]	@ 0xa8
 8001e26:	f8c0 20c4 	str.w	r2, [r0, #196]	@ 0xc4
 8001e2a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001e2e:	4c1a      	ldr	r4, [pc, #104]	@ (8001e98 <_ZN5astra6configC1Ev+0x110>)
 8001e30:	4e1a      	ldr	r6, [pc, #104]	@ (8001e9c <_ZN5astra6configC1Ev+0x114>)
 8001e32:	f8c0 508c 	str.w	r5, [r0, #140]	@ 0x8c
 8001e36:	f8c0 40ac 	str.w	r4, [r0, #172]	@ 0xac
 8001e3a:	4d19      	ldr	r5, [pc, #100]	@ (8001ea0 <_ZN5astra6configC1Ev+0x118>)
 8001e3c:	4c19      	ldr	r4, [pc, #100]	@ (8001ea4 <_ZN5astra6configC1Ev+0x11c>)
 8001e3e:	f8c0 6080 	str.w	r6, [r0, #128]	@ 0x80
 8001e42:	e9c0 442c 	strd	r4, r4, [r0, #176]	@ 0xb0
 8001e46:	f8c0 6084 	str.w	r6, [r0, #132]	@ 0x84
 8001e4a:	f8c0 1090 	str.w	r1, [r0, #144]	@ 0x90
 8001e4e:	f8c0 5098 	str.w	r5, [r0, #152]	@ 0x98
 8001e52:	f8c0 10c0 	str.w	r1, [r0, #192]	@ 0xc0
 8001e56:	f8c0 20c8 	str.w	r2, [r0, #200]	@ 0xc8
 8001e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e5c:	428c0000 	.word	0x428c0000
 8001e60:	42700000 	.word	0x42700000
 8001e64:	425c0000 	.word	0x425c0000
 8001e68:	41c80000 	.word	0x41c80000
 8001e6c:	41700000 	.word	0x41700000
 8001e70:	42c80000 	.word	0x42c80000
 8001e74:	42a00000 	.word	0x42a00000
 8001e78:	41f00000 	.word	0x41f00000
 8001e7c:	40c00000 	.word	0x40c00000
 8001e80:	40a00000 	.word	0x40a00000
 8001e84:	41900000 	.word	0x41900000
 8001e88:	41400000 	.word	0x41400000
 8001e8c:	40400000 	.word	0x40400000
 8001e90:	41600000 	.word	0x41600000
 8001e94:	41200000 	.word	0x41200000
 8001e98:	08009fcc 	.word	0x08009fcc
 8001e9c:	42100000 	.word	0x42100000
 8001ea0:	42b40000 	.word	0x42b40000
 8001ea4:	0800a81f 	.word	0x0800a81f

08001ea8 <_ZN5astra9Animation4moveEPfff>:
  static auto *bufferPointer = (unsigned char *) HAL::getCanvasBuffer();

  for (uint16_t i = 0; i < bufferLen; ++i) bufferPointer[i] = bufferPointer[i] & (i % 2 == 0 ? 0x55 : 0xAA);
}

inline void Animation::move(float *_pos, float _posTrg, float _speed) {
 8001ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (*_pos != _posTrg) {
 8001eaa:	6806      	ldr	r6, [r0, #0]
inline void Animation::move(float *_pos, float _posTrg, float _speed) {
 8001eac:	4604      	mov	r4, r0
  if (*_pos != _posTrg) {
 8001eae:	4630      	mov	r0, r6
inline void Animation::move(float *_pos, float _posTrg, float _speed) {
 8001eb0:	460d      	mov	r5, r1
 8001eb2:	4617      	mov	r7, r2
  if (*_pos != _posTrg) {
 8001eb4:	f7fe ffde 	bl	8000e74 <__aeabi_fcmpeq>
 8001eb8:	b958      	cbnz	r0, 8001ed2 <_ZN5astra9Animation4moveEPfff+0x2a>
    if (std::fabs(*_pos - _posTrg) <= 1.0f) *_pos = _posTrg;
 8001eba:	4629      	mov	r1, r5
 8001ebc:	4630      	mov	r0, r6
 8001ebe:	f7fe fd3b 	bl	8000938 <__aeabi_fsub>
 8001ec2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001ec6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001eca:	f7fe ffe7 	bl	8000e9c <__aeabi_fcmple>
 8001ece:	b108      	cbz	r0, 8001ed4 <_ZN5astra9Animation4moveEPfff+0x2c>
 8001ed0:	6025      	str	r5, [r4, #0]
    else *_pos += (_posTrg - *_pos) / ((100 - _speed) / 1.0f);
  }
}
 8001ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else *_pos += (_posTrg - *_pos) / ((100 - _speed) / 1.0f);
 8001ed4:	4631      	mov	r1, r6
 8001ed6:	4628      	mov	r0, r5
 8001ed8:	f7fe fd2e 	bl	8000938 <__aeabi_fsub>
 8001edc:	4639      	mov	r1, r7
 8001ede:	4605      	mov	r5, r0
 8001ee0:	4805      	ldr	r0, [pc, #20]	@ (8001ef8 <_ZN5astra9Animation4moveEPfff+0x50>)
 8001ee2:	f7fe fd29 	bl	8000938 <__aeabi_fsub>
 8001ee6:	4601      	mov	r1, r0
 8001ee8:	4628      	mov	r0, r5
 8001eea:	f7fe fee3 	bl	8000cb4 <__aeabi_fdiv>
 8001eee:	4631      	mov	r1, r6
 8001ef0:	f7fe fd24 	bl	800093c <__addsf3>
 8001ef4:	6020      	str	r0, [r4, #0]
}
 8001ef6:	e7ec      	b.n	8001ed2 <_ZN5astra9Animation4moveEPfff+0x2a>
 8001ef8:	42c80000 	.word	0x42c80000

08001efc <_ZN5astra6CameraC1Eff>:
namespace led {

}

namespace sys {
struct config {
 8001efc:	f44f 4381 	mov.w	r3, #16512	@ 0x4080

//这里的坐标应该都是负的 因为最终渲染的时候是加上摄像机的坐标
//所以说比如想显示下一页 应该是item本身的坐标减去摄像机的坐标 这样才会让item向上移动
//一个办法是用户传进来正的坐标 但是在摄像机内部 所有坐标都取其相反数 负的

Camera::Camera(float _x, float _y) {
 8001f00:	b570      	push	{r4, r5, r6, lr}
 8001f02:	460d      	mov	r5, r1
 8001f04:	8003      	strh	r3, [r0, #0]
 8001f06:	4b0f      	ldr	r3, [pc, #60]	@ (8001f44 <_ZN5astra6CameraC1Eff+0x48>)
 8001f08:	4604      	mov	r4, r0
 8001f0a:	6043      	str	r3, [r0, #4]
class Item {
 8001f0c:	3008      	adds	r0, #8
 8001f0e:	4616      	mov	r6, r2
 8001f10:	f7ff ff3a 	bl	8001d88 <_ZN5astra6configC1Ev>
  this->xInit = 0 - _x;
 8001f14:	4629      	mov	r1, r5
 8001f16:	2000      	movs	r0, #0
 8001f18:	f7fe fd0e 	bl	8000938 <__aeabi_fsub>
  this->yInit = 0 - _y;
 8001f1c:	4631      	mov	r1, r6
  this->xInit = 0 - _x;
 8001f1e:	4605      	mov	r5, r0
 8001f20:	f8c4 00d4 	str.w	r0, [r4, #212]	@ 0xd4
  this->yInit = 0 - _y;
 8001f24:	2000      	movs	r0, #0
 8001f26:	f7fe fd07 	bl	8000938 <__aeabi_fsub>

  this->x = 0 - _x;
 8001f2a:	f8c4 50dc 	str.w	r5, [r4, #220]	@ 0xdc
  this->yInit = 0 - _y;
 8001f2e:	f8c4 00d8 	str.w	r0, [r4, #216]	@ 0xd8
  this->y = 0 - _y;
 8001f32:	f8c4 00e0 	str.w	r0, [r4, #224]	@ 0xe0

  this->xTrg = 0 - _x;
  this->yTrg = 0 - _y;
 8001f36:	f8c4 00e8 	str.w	r0, [r4, #232]	@ 0xe8
  this->xTrg = 0 - _x;
 8001f3a:	f8c4 50e4 	str.w	r5, [r4, #228]	@ 0xe4
}
 8001f3e:	4620      	mov	r0, r4
 8001f40:	bd70      	pop	{r4, r5, r6, pc}
 8001f42:	bf00      	nop
 8001f44:	437f0000 	.word	0x437f0000

08001f48 <_ZN5astra6Camera4initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

std::vector<float> Camera::getPositionTrg() {
  return {xTrg, yTrg};
}

void Camera::init(const std::string &_type) {
 8001f48:	b538      	push	{r3, r4, r5, lr}
 8001f4a:	460d      	mov	r5, r1
 8001f4c:	4604      	mov	r4, r0
  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
	       const _CharT* __rhs)
    { return __lhs.compare(__rhs) == 0; }
 8001f4e:	490d      	ldr	r1, [pc, #52]	@ (8001f84 <_ZN5astra6Camera4initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c>)
 8001f50:	4628      	mov	r0, r5
 8001f52:	f006 fab3 	bl	80084bc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
  if (_type == "List") {
 8001f56:	b950      	cbnz	r0, 8001f6e <_ZN5astra6Camera4initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x26>
  this->xTrg = 0 - _pos[0];
  this->yTrg = 0 - _pos[1];
}

void Camera::goDirect(float _x, float _y) {
  this->x = 0 - _x;
 8001f58:	2200      	movs	r2, #0
  this->y = 0 - _y;
 8001f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f88 <_ZN5astra6Camera4initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x40>)
  this->x = 0 - _x;
 8001f5c:	f8c4 20dc 	str.w	r2, [r4, #220]	@ 0xdc
  this->y = 0 - _y;
 8001f60:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
  this->xTrg = 0 - _x;
 8001f64:	f8c4 20e4 	str.w	r2, [r4, #228]	@ 0xe4
  this->yTrg = 0 - _y;
 8001f68:	f8c4 30e8 	str.w	r3, [r4, #232]	@ 0xe8
}
 8001f6c:	bd38      	pop	{r3, r4, r5, pc}
 8001f6e:	4628      	mov	r0, r5
 8001f70:	4906      	ldr	r1, [pc, #24]	@ (8001f8c <_ZN5astra6Camera4initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x44>)
 8001f72:	f006 faa3 	bl	80084bc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
  else if (_type == "Tile") {
 8001f76:	2800      	cmp	r0, #0
 8001f78:	d1f8      	bne.n	8001f6c <_ZN5astra6Camera4initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x24>
  this->x = 0 - _x;
 8001f7a:	4a05      	ldr	r2, [pc, #20]	@ (8001f90 <_ZN5astra6Camera4initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x48>)
  this->y = 0 - _y;
 8001f7c:	2300      	movs	r3, #0
  this->x = 0 - _x;
 8001f7e:	f8c4 20dc 	str.w	r2, [r4, #220]	@ 0xdc
  this->y = 0 - _y;
 8001f82:	e7ed      	b.n	8001f60 <_ZN5astra6Camera4initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x18>
 8001f84:	08009c17 	.word	0x08009c17
 8001f88:	44200000 	.word	0x44200000
 8001f8c:	08009c1c 	.word	0x08009c1c
 8001f90:	44a00000 	.word	0x44a00000

08001f94 <_ZN5astra6Camera12goToTileItemEh>:
    return;
  }
  else return;
}

void Camera::goToTileItem(unsigned char _index) {
 8001f94:	b570      	push	{r4, r5, r6, lr}
 8001f96:	4604      	mov	r4, r0
 8001f98:	460e      	mov	r6, r1
  go(_index * (astraConfig.tilePicWidth + astraConfig.tilePicMargin), 0);
 8001f9a:	6e01      	ldr	r1, [r0, #96]	@ 0x60
 8001f9c:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8001f9e:	f7fe fccd 	bl	800093c <__addsf3>
 8001fa2:	4605      	mov	r5, r0
 8001fa4:	4630      	mov	r0, r6
 8001fa6:	f7fe fd7d 	bl	8000aa4 <__aeabi_i2f>
 8001faa:	4601      	mov	r1, r0
 8001fac:	4628      	mov	r0, r5
 8001fae:	f7fe fdcd 	bl	8000b4c <__aeabi_fmul>
 8001fb2:	4601      	mov	r1, r0
  this->xTrg = 0 - _x;
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	f7fe fcbf 	bl	8000938 <__aeabi_fsub>
  this->yTrg = 0 - _y;
 8001fba:	2300      	movs	r3, #0
  this->xTrg = 0 - _x;
 8001fbc:	f8c4 00e4 	str.w	r0, [r4, #228]	@ 0xe4
  this->yTrg = 0 - _y;
 8001fc0:	f8c4 30e8 	str.w	r3, [r4, #232]	@ 0xe8
}
 8001fc4:	bd70      	pop	{r4, r5, r6, pc}

08001fc6 <_ZN5astra6Camera6renderEv>:

void Camera::resetDirect() {
  goDirect(this->xInit, this->yInit);
}

void Camera::render() {
 8001fc6:	b538      	push	{r3, r4, r5, lr}
 8001fc8:	4604      	mov	r4, r0
  Animation::move(&this->x, this->xTrg, astraConfig.cameraAnimationSpeed);
 8001fca:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
 8001fcc:	f8d0 10e4 	ldr.w	r1, [r0, #228]	@ 0xe4
 8001fd0:	462a      	mov	r2, r5
 8001fd2:	30dc      	adds	r0, #220	@ 0xdc
 8001fd4:	f7ff ff68 	bl	8001ea8 <_ZN5astra9Animation4moveEPfff>
  Animation::move(&this->y, this->yTrg, astraConfig.cameraAnimationSpeed);
 8001fd8:	462a      	mov	r2, r5
 8001fda:	f8d4 10e8 	ldr.w	r1, [r4, #232]	@ 0xe8
 8001fde:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 8001fe2:	f7ff ff61 	bl	8001ea8 <_ZN5astra9Animation4moveEPfff>
}
 8001fe6:	bd38      	pop	{r3, r4, r5, pc}

08001fe8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	  if (_Num)
 8001fe8:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8001fea:	b510      	push	{r4, lr}
 8001fec:	4613      	mov	r3, r2
	  const ptrdiff_t _Num = __last - __first;
 8001fee:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
 8001ff2:	d005      	beq.n	8002000 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8001ff4:	4601      	mov	r1, r0
 8001ff6:	4622      	mov	r2, r4
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f006 fd66 	bl	8008aca <memmove>
 8001ffe:	4603      	mov	r3, r0
	}
 8002000:	1918      	adds	r0, r3, r4
 8002002:	bd10      	pop	{r4, pc}

08002004 <_ZNSt6vectorIfSaIfEEC1ERKS1_>:
      vector(const vector& __x)
 8002004:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002006:	e9d1 3600 	ldrd	r3, r6, [r1]
 800200a:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 800200c:	2300      	movs	r3, #0
      vector(const vector& __x)
 800200e:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
 8002010:	e9c0 3300 	strd	r3, r3, [r0]
 8002014:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8002016:	10b0      	asrs	r0, r6, #2
      vector(const vector& __x)
 8002018:	460d      	mov	r5, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
 800201a:	f7ff fea3 	bl	8001d64 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800201e:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8002022:	4406      	add	r6, r0
 8002024:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8002026:	4602      	mov	r2, r0
			      _Category>::__copy_m(__first, __last, __result);
 8002028:	e9d5 0100 	ldrd	r0, r1, [r5]
 800202c:	f7ff ffdc 	bl	8001fe8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
 8002030:	6060      	str	r0, [r4, #4]
      }
 8002032:	4620      	mov	r0, r4
 8002034:	bd70      	pop	{r4, r5, r6, pc}
	...

08002038 <_ZNSt6vectorIfSaIfEE19_M_range_initializeIPKfEEvT_S5_St20forward_iterator_tag.isra.0>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8002038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 800203a:	4b0c      	ldr	r3, [pc, #48]	@ (800206c <_ZNSt6vectorIfSaIfEE19_M_range_initializeIPKfEEvT_S5_St20forward_iterator_tag.isra.0+0x34>)
 800203c:	1a55      	subs	r5, r2, r1
 800203e:	429d      	cmp	r5, r3
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8002040:	4604      	mov	r4, r0
 8002042:	460e      	mov	r6, r1
 8002044:	4617      	mov	r7, r2
 8002046:	ea4f 00a5 	mov.w	r0, r5, asr #2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 800204a:	d902      	bls.n	8002052 <_ZNSt6vectorIfSaIfEE19_M_range_initializeIPKfEEvT_S5_St20forward_iterator_tag.isra.0+0x1a>
	  __throw_length_error(
 800204c:	4808      	ldr	r0, [pc, #32]	@ (8002070 <_ZNSt6vectorIfSaIfEE19_M_range_initializeIPKfEEvT_S5_St20forward_iterator_tag.isra.0+0x38>)
 800204e:	f006 f98b 	bl	8008368 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8002052:	f7ff fe87 	bl	8001d64 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8002056:	4405      	add	r5, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8002058:	4602      	mov	r2, r0
 800205a:	6020      	str	r0, [r4, #0]
 800205c:	4639      	mov	r1, r7
 800205e:	4630      	mov	r0, r6
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8002060:	60a5      	str	r5, [r4, #8]
 8002062:	f7ff ffc1 	bl	8001fe8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
 8002066:	6060      	str	r0, [r4, #4]
	}
 8002068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800206a:	bf00      	nop
 800206c:	7ffffffc 	.word	0x7ffffffc
 8002070:	08009b26 	.word	0x08009b26

08002074 <_ZN5astra6Camera14getPositionTrgEv>:
std::vector<float> Camera::getPositionTrg() {
 8002074:	b513      	push	{r0, r1, r4, lr}
  return {xTrg, yTrg};
 8002076:	f8d1 30e4 	ldr.w	r3, [r1, #228]	@ 0xe4
std::vector<float> Camera::getPositionTrg() {
 800207a:	4604      	mov	r4, r0
  return {xTrg, yTrg};
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	f8d1 30e8 	ldr.w	r3, [r1, #232]	@ 0xe8
	_M_range_initialize(__l.begin(), __l.end(),
 8002082:	aa02      	add	r2, sp, #8
 8002084:	9301      	str	r3, [sp, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8002086:	2300      	movs	r3, #0
	_M_range_initialize(__l.begin(), __l.end(),
 8002088:	4669      	mov	r1, sp
	: _M_start(), _M_finish(), _M_end_of_storage()
 800208a:	e9c0 3300 	strd	r3, r3, [r0]
 800208e:	6083      	str	r3, [r0, #8]
	_M_range_initialize(__l.begin(), __l.end(),
 8002090:	f7ff ffd2 	bl	8002038 <_ZNSt6vectorIfSaIfEE19_M_range_initializeIPKfEEvT_S5_St20forward_iterator_tag.isra.0>
}
 8002094:	4620      	mov	r0, r4
 8002096:	b002      	add	sp, #8
 8002098:	bd10      	pop	{r4, pc}

0800209a <_ZN5astra6Camera11getPositionEv>:
std::vector<float> Camera::getPosition() {
 800209a:	b513      	push	{r0, r1, r4, lr}
  return {x, y};
 800209c:	f8d1 30dc 	ldr.w	r3, [r1, #220]	@ 0xdc
std::vector<float> Camera::getPosition() {
 80020a0:	4604      	mov	r4, r0
  return {x, y};
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	f8d1 30e0 	ldr.w	r3, [r1, #224]	@ 0xe0
 80020a8:	aa02      	add	r2, sp, #8
 80020aa:	9301      	str	r3, [sp, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80020ac:	2300      	movs	r3, #0
	_M_range_initialize(__l.begin(), __l.end(),
 80020ae:	4669      	mov	r1, sp
	: _M_start(), _M_finish(), _M_end_of_storage()
 80020b0:	e9c0 3300 	strd	r3, r3, [r0]
 80020b4:	6083      	str	r3, [r0, #8]
	_M_range_initialize(__l.begin(), __l.end(),
 80020b6:	f7ff ffbf 	bl	8002038 <_ZNSt6vectorIfSaIfEE19_M_range_initializeIPKfEEvT_S5_St20forward_iterator_tag.isra.0>
}
 80020ba:	4620      	mov	r0, r4
 80020bc:	b002      	add	sp, #8
 80020be:	bd10      	pop	{r4, pc}

080020c0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80020c0:	b510      	push	{r4, lr}
	  if (_Num)
 80020c2:	1a0c      	subs	r4, r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80020c4:	4613      	mov	r3, r2
	  if (_Num)
 80020c6:	d005      	beq.n	80020d4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x14>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80020c8:	4601      	mov	r1, r0
 80020ca:	4622      	mov	r2, r4
 80020cc:	4618      	mov	r0, r3
 80020ce:	f006 fcfc 	bl	8008aca <memmove>
 80020d2:	4603      	mov	r3, r0
	}
 80020d4:	1918      	adds	r0, r3, r4
 80020d6:	bd10      	pop	{r4, pc}

080020d8 <_ZNSt6vectorIhSaIhEEC1ERKS1_>:
      vector(const vector& __x)
 80020d8:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80020da:	e9d1 3500 	ldrd	r3, r5, [r1]
 80020de:	1aed      	subs	r5, r5, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 80020e0:	2300      	movs	r3, #0
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80020e2:	429d      	cmp	r5, r3
      vector(const vector& __x)
 80020e4:	4604      	mov	r4, r0
 80020e6:	460e      	mov	r6, r1
	: _M_start(), _M_finish(), _M_end_of_storage()
 80020e8:	e9c0 3300 	strd	r3, r3, [r0]
 80020ec:	6083      	str	r3, [r0, #8]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80020ee:	d011      	beq.n	8002114 <_ZNSt6vectorIhSaIhEEC1ERKS1_+0x3c>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80020f0:	da01      	bge.n	80020f6 <_ZNSt6vectorIhSaIhEEC1ERKS1_+0x1e>
	    std::__throw_bad_alloc();
 80020f2:	f006 f930 	bl	8008356 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80020f6:	4628      	mov	r0, r5
 80020f8:	f004 fc58 	bl	80069ac <_Znwj>
 80020fc:	4602      	mov	r2, r0
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80020fe:	e9c4 2200 	strd	r2, r2, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8002102:	4415      	add	r5, r2
 8002104:	60a5      	str	r5, [r4, #8]
			      _Category>::__copy_m(__first, __last, __result);
 8002106:	e9d6 0100 	ldrd	r0, r1, [r6]
 800210a:	f7ff ffd9 	bl	80020c0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
 800210e:	6060      	str	r0, [r4, #4]
      }
 8002110:	4620      	mov	r0, r4
 8002112:	bd70      	pop	{r4, r5, r6, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002114:	462a      	mov	r2, r5
 8002116:	e7f2      	b.n	80020fe <_ZNSt6vectorIhSaIhEEC1ERKS1_+0x26>

08002118 <_ZN5astra4List15refreshBoundaryEhh>:
  List(const std::string &_title, const std::vector<unsigned char>& _pic);

public:
  std::vector<unsigned char> boundary = {0, static_cast<unsigned char>(systemConfig.screenHeight / astraConfig.listLineHeight - 1)};
  [[nodiscard]] std::vector<unsigned char> getBoundary() const { return boundary; }
  void refreshBoundary(unsigned char _l, unsigned char _r) { boundary = {_l, _r}; }
 8002118:	b537      	push	{r0, r1, r2, r4, r5, lr}
			 - this->_M_impl._M_start); }
 800211a:	f8d0 3160 	ldr.w	r3, [r0, #352]	@ 0x160
 800211e:	f88d 2005 	strb.w	r2, [sp, #5]
 8002122:	f8d0 2158 	ldr.w	r2, [r0, #344]	@ 0x158
 8002126:	4604      	mov	r4, r0
 8002128:	1a9b      	subs	r3, r3, r2
	if (__len > capacity())
 800212a:	2b01      	cmp	r3, #1
 800212c:	f88d 1004 	strb.w	r1, [sp, #4]
 8002130:	d818      	bhi.n	8002164 <_ZN5astra4List15refreshBoundaryEhh+0x4c>
 8002132:	2002      	movs	r0, #2
 8002134:	f004 fc3a 	bl	80069ac <_Znwj>
 8002138:	f10d 0106 	add.w	r1, sp, #6
 800213c:	4602      	mov	r2, r0
 800213e:	4605      	mov	r5, r0
 8002140:	a801      	add	r0, sp, #4
 8002142:	f7ff ffbd 	bl	80020c0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002146:	f8d4 0158 	ldr.w	r0, [r4, #344]	@ 0x158
	if (__p)
 800214a:	b120      	cbz	r0, 8002156 <_ZN5astra4List15refreshBoundaryEhh+0x3e>
			  - this->_M_impl._M_start);
 800214c:	f8d4 1160 	ldr.w	r1, [r4, #352]	@ 0x160
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8002150:	1a09      	subs	r1, r1, r0
 8002152:	f005 fdd9 	bl	8007d08 <_ZdlPvj>
	    this->_M_impl._M_start = __tmp;
 8002156:	f8c4 5158 	str.w	r5, [r4, #344]	@ 0x158
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
 800215a:	3502      	adds	r5, #2
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
 800215c:	e9c4 5557 	strd	r5, r5, [r4, #348]	@ 0x15c
 8002160:	b003      	add	sp, #12
 8002162:	bd30      	pop	{r4, r5, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002164:	f8d0 515c 	ldr.w	r5, [r0, #348]	@ 0x15c
 8002168:	1aad      	subs	r5, r5, r2
	else if (size() >= __len)
 800216a:	2d01      	cmp	r5, #1
 800216c:	d90b      	bls.n	8002186 <_ZN5astra4List15refreshBoundaryEhh+0x6e>
 800216e:	f10d 0106 	add.w	r1, sp, #6
 8002172:	a801      	add	r0, sp, #4
 8002174:	f7ff ffa4 	bl	80020c0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8002178:	f8d4 315c 	ldr.w	r3, [r4, #348]	@ 0x15c
 800217c:	4298      	cmp	r0, r3
 800217e:	d0ef      	beq.n	8002160 <_ZN5astra4List15refreshBoundaryEhh+0x48>
	    this->_M_impl._M_finish =
 8002180:	f8c4 015c 	str.w	r0, [r4, #348]	@ 0x15c
 8002184:	e7ec      	b.n	8002160 <_ZN5astra4List15refreshBoundaryEhh+0x48>
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 8002186:	ab01      	add	r3, sp, #4
 8002188:	441d      	add	r5, r3
 800218a:	4629      	mov	r1, r5
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff ff97 	bl	80020c0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8002192:	4628      	mov	r0, r5
 8002194:	f8d4 215c 	ldr.w	r2, [r4, #348]	@ 0x15c
 8002198:	f10d 0106 	add.w	r1, sp, #6
 800219c:	f7ff ff90 	bl	80020c0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80021a0:	e7ee      	b.n	8002180 <_ZN5astra4List15refreshBoundaryEhh+0x68>
	...

080021a4 <_ZN5astra6Camera19goToListItemRollingEPNS_4ListE>:
void Camera::goToListItemRolling(List *_menu) {
 80021a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  static const unsigned char maxItemPerPage = systemConfig.screenHeight / astraConfig.listLineHeight;
 80021a8:	4e41      	ldr	r6, [pc, #260]	@ (80022b0 <_ZN5astra6Camera19goToListItemRollingEPNS_4ListE+0x10c>)
void Camera::goToListItemRolling(List *_menu) {
 80021aa:	4605      	mov	r5, r0
  static const unsigned char maxItemPerPage = systemConfig.screenHeight / astraConfig.listLineHeight;
 80021ac:	6833      	ldr	r3, [r6, #0]
void Camera::goToListItemRolling(List *_menu) {
 80021ae:	460c      	mov	r4, r1
  static const unsigned char maxItemPerPage = systemConfig.screenHeight / astraConfig.listLineHeight;
 80021b0:	07db      	lsls	r3, r3, #31
 80021b2:	f3bf 8f5b 	dmb	ish
 80021b6:	d410      	bmi.n	80021da <_ZN5astra6Camera19goToListItemRollingEPNS_4ListE+0x36>
 80021b8:	4630      	mov	r0, r6
 80021ba:	f005 fdfc 	bl	8007db6 <__cxa_guard_acquire>
 80021be:	b160      	cbz	r0, 80021da <_ZN5astra6Camera19goToListItemRollingEPNS_4ListE+0x36>
 80021c0:	7868      	ldrb	r0, [r5, #1]
 80021c2:	f7fe fc6f 	bl	8000aa4 <__aeabi_i2f>
 80021c6:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 80021c8:	f7fe fd74 	bl	8000cb4 <__aeabi_fdiv>
 80021cc:	f7fe feaa 	bl	8000f24 <__aeabi_f2uiz>
 80021d0:	4b38      	ldr	r3, [pc, #224]	@ (80022b4 <_ZN5astra6Camera19goToListItemRollingEPNS_4ListE+0x110>)
 80021d2:	7018      	strb	r0, [r3, #0]
 80021d4:	4630      	mov	r0, r6
 80021d6:	f005 fdfa 	bl	8007dce <__cxa_guard_release>
  if (!_menu->initFlag) {
 80021da:	f894 3145 	ldrb.w	r3, [r4, #325]	@ 0x145
 80021de:	b93b      	cbnz	r3, 80021f0 <_ZN5astra6Camera19goToListItemRollingEPNS_4ListE+0x4c>
  this->xTrg = 0 - _x;
 80021e0:	2300      	movs	r3, #0
 80021e2:	f8c5 30e4 	str.w	r3, [r5, #228]	@ 0xe4
  this->yTrg = 0 - _y;
 80021e6:	f8c5 30e8 	str.w	r3, [r5, #232]	@ 0xe8
    _menu->initFlag = true;
 80021ea:	2301      	movs	r3, #1
 80021ec:	f884 3145 	strb.w	r3, [r4, #325]	@ 0x145
  [[nodiscard]] std::vector<unsigned char> getBoundary() const { return boundary; }
 80021f0:	f504 76ac 	add.w	r6, r4, #344	@ 0x158
 80021f4:	4631      	mov	r1, r6
 80021f6:	a801      	add	r0, sp, #4
  if (_menu->selectIndex < _menu->getBoundary()[0]) {
 80021f8:	f894 8144 	ldrb.w	r8, [r4, #324]	@ 0x144
 80021fc:	f7ff ff6c 	bl	80020d8 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8002200:	9b01      	ldr	r3, [sp, #4]
      }
 8002202:	a801      	add	r0, sp, #4
 8002204:	781f      	ldrb	r7, [r3, #0]
 8002206:	f7ff fce3 	bl	8001bd0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 800220a:	45b8      	cmp	r8, r7
 800220c:	4631      	mov	r1, r6
 800220e:	f894 7144 	ldrb.w	r7, [r4, #324]	@ 0x144
 8002212:	a801      	add	r0, sp, #4
 8002214:	d220      	bcs.n	8002258 <_ZN5astra6Camera19goToListItemRollingEPNS_4ListE+0xb4>
 8002216:	f7ff ff5f 	bl	80020d8 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
    move(0, (_menu->selectIndex - _menu->getBoundary()[0]) * astraConfig.listLineHeight);
 800221a:	9b01      	ldr	r3, [sp, #4]
 800221c:	7818      	ldrb	r0, [r3, #0]
 800221e:	1a38      	subs	r0, r7, r0
 8002220:	f7fe fc40 	bl	8000aa4 <__aeabi_i2f>
 8002224:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 8002226:	f7fe fc91 	bl	8000b4c <__aeabi_fmul>
 800222a:	4601      	mov	r1, r0
  this->yTrg -= _y;
 800222c:	f8d5 00e8 	ldr.w	r0, [r5, #232]	@ 0xe8
 8002230:	f7fe fb82 	bl	8000938 <__aeabi_fsub>
 8002234:	f8c5 00e8 	str.w	r0, [r5, #232]	@ 0xe8
 8002238:	a801      	add	r0, sp, #4
 800223a:	f7ff fcc9 	bl	8001bd0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
    _menu->refreshBoundary(_menu->selectIndex, _menu->selectIndex + maxItemPerPage - 1);
 800223e:	4b1d      	ldr	r3, [pc, #116]	@ (80022b4 <_ZN5astra6Camera19goToListItemRollingEPNS_4ListE+0x110>)
 8002240:	f894 1144 	ldrb.w	r1, [r4, #324]	@ 0x144
 8002244:	781a      	ldrb	r2, [r3, #0]
 8002246:	3a01      	subs	r2, #1
 8002248:	440a      	add	r2, r1
 800224a:	b2d2      	uxtb	r2, r2
    _menu->refreshBoundary(_menu->selectIndex - maxItemPerPage + 1, _menu->selectIndex);
 800224c:	4620      	mov	r0, r4
 800224e:	f7ff ff63 	bl	8002118 <_ZN5astra4List15refreshBoundaryEhh>
}
 8002252:	b004      	add	sp, #16
 8002254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002258:	f7ff ff3e 	bl	80020d8 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
  else if (_menu->selectIndex > _menu->getBoundary()[1]) {
 800225c:	9b01      	ldr	r3, [sp, #4]
 800225e:	a801      	add	r0, sp, #4
 8002260:	f893 8001 	ldrb.w	r8, [r3, #1]
 8002264:	f7ff fcb4 	bl	8001bd0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8002268:	4547      	cmp	r7, r8
 800226a:	d9f2      	bls.n	8002252 <_ZN5astra6Camera19goToListItemRollingEPNS_4ListE+0xae>
 800226c:	4631      	mov	r1, r6
 800226e:	a801      	add	r0, sp, #4
    move(0, (_menu->selectIndex - _menu->getBoundary()[1]) * astraConfig.listLineHeight);
 8002270:	f894 7144 	ldrb.w	r7, [r4, #324]	@ 0x144
 8002274:	f7ff ff30 	bl	80020d8 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8002278:	9b01      	ldr	r3, [sp, #4]
 800227a:	7858      	ldrb	r0, [r3, #1]
 800227c:	1a38      	subs	r0, r7, r0
 800227e:	f7fe fc11 	bl	8000aa4 <__aeabi_i2f>
 8002282:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 8002284:	f7fe fc62 	bl	8000b4c <__aeabi_fmul>
 8002288:	4601      	mov	r1, r0
  this->yTrg -= _y;
 800228a:	f8d5 00e8 	ldr.w	r0, [r5, #232]	@ 0xe8
 800228e:	f7fe fb53 	bl	8000938 <__aeabi_fsub>
 8002292:	f8c5 00e8 	str.w	r0, [r5, #232]	@ 0xe8
 8002296:	a801      	add	r0, sp, #4
 8002298:	f7ff fc9a 	bl	8001bd0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
    _menu->refreshBoundary(_menu->selectIndex - maxItemPerPage + 1, _menu->selectIndex);
 800229c:	4b05      	ldr	r3, [pc, #20]	@ (80022b4 <_ZN5astra6Camera19goToListItemRollingEPNS_4ListE+0x110>)
 800229e:	f894 2144 	ldrb.w	r2, [r4, #324]	@ 0x144
 80022a2:	7819      	ldrb	r1, [r3, #0]
 80022a4:	f1c1 0101 	rsb	r1, r1, #1
 80022a8:	4411      	add	r1, r2
 80022aa:	b2c9      	uxtb	r1, r1
 80022ac:	e7ce      	b.n	800224c <_ZN5astra6Camera19goToListItemRollingEPNS_4ListE+0xa8>
 80022ae:	bf00      	nop
 80022b0:	2000019c 	.word	0x2000019c
 80022b4:	200001a0 	.word	0x200001a0

080022b8 <_ZN5astra6Camera6updateEPNS_4MenuEPNS_8SelectorE>:

void Camera::update(Menu *_menu, Selector *_selector) {
 80022b8:	b5f0      	push	{r4, r5, r6, r7, lr}

  if (_menu->cameraPosMemoryFlag) {
 80022ba:	f891 30e4 	ldrb.w	r3, [r1, #228]	@ 0xe4
void Camera::update(Menu *_menu, Selector *_selector) {
 80022be:	4606      	mov	r6, r0
 80022c0:	460c      	mov	r4, r1
 80022c2:	b08b      	sub	sp, #44	@ 0x2c
  if (_menu->cameraPosMemoryFlag) {
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d04a      	beq.n	800235e <_ZN5astra6Camera6updateEPNS_4MenuEPNS_8SelectorE+0xa6>
  [[nodiscard]] std::vector<float> getCameraMemoryPos() const { return cameraPosMemory; }
 80022c8:	f101 05d8 	add.w	r5, r1, #216	@ 0xd8
 80022cc:	4629      	mov	r1, r5
 80022ce:	a801      	add	r0, sp, #4
 80022d0:	f7ff fe98 	bl	8002004 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
    go(0 - _menu->getCameraMemoryPos()[0], 0 - _menu->getCameraMemoryPos()[1]);
 80022d4:	9b01      	ldr	r3, [sp, #4]
 80022d6:	2000      	movs	r0, #0
 80022d8:	6819      	ldr	r1, [r3, #0]
 80022da:	f7fe fb2d 	bl	8000938 <__aeabi_fsub>
 80022de:	4629      	mov	r1, r5
 80022e0:	4607      	mov	r7, r0
 80022e2:	a804      	add	r0, sp, #16
 80022e4:	f7ff fe8e 	bl	8002004 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 80022e8:	9b04      	ldr	r3, [sp, #16]
 80022ea:	2000      	movs	r0, #0
 80022ec:	6859      	ldr	r1, [r3, #4]
 80022ee:	f7fe fb23 	bl	8000938 <__aeabi_fsub>
  this->xTrg = 0 - _x;
 80022f2:	4639      	mov	r1, r7
    go(0 - _menu->getCameraMemoryPos()[0], 0 - _menu->getCameraMemoryPos()[1]);
 80022f4:	4605      	mov	r5, r0
  this->xTrg = 0 - _x;
 80022f6:	2000      	movs	r0, #0
 80022f8:	f7fe fb1e 	bl	8000938 <__aeabi_fsub>
  this->yTrg = 0 - _y;
 80022fc:	4629      	mov	r1, r5
  this->xTrg = 0 - _x;
 80022fe:	f8c6 00e4 	str.w	r0, [r6, #228]	@ 0xe4
  this->yTrg = 0 - _y;
 8002302:	2000      	movs	r0, #0
 8002304:	f7fe fb18 	bl	8000938 <__aeabi_fsub>
 8002308:	f8c6 00e8 	str.w	r0, [r6, #232]	@ 0xe8
 800230c:	a804      	add	r0, sp, #16
 800230e:	f7fe feca 	bl	80010a6 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8002312:	a801      	add	r0, sp, #4
 8002314:	f7fe fec7 	bl	80010a6 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
    _menu->cameraPosMemoryFlag = false;
 8002318:	2300      	movs	r3, #0
 800231a:	f884 30e4 	strb.w	r3, [r4, #228]	@ 0xe4
  void resetCameraMemoryPos() { cameraPosMemory = {0, 0}; }
 800231e:	2300      	movs	r3, #0
			 - this->_M_impl._M_start); }
 8002320:	f8d4 20d8 	ldr.w	r2, [r4, #216]	@ 0xd8
 8002324:	9304      	str	r3, [sp, #16]
 8002326:	9305      	str	r3, [sp, #20]
 8002328:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800232c:	1a9b      	subs	r3, r3, r2
	if (__len > capacity())
 800232e:	2b07      	cmp	r3, #7
 8002330:	d833      	bhi.n	800239a <_ZN5astra6Camera6updateEPNS_4MenuEPNS_8SelectorE+0xe2>
	  pointer __result = this->_M_allocate(__n);
 8002332:	2002      	movs	r0, #2
 8002334:	f7ff fd16 	bl	8001d64 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
 8002338:	a906      	add	r1, sp, #24
 800233a:	4602      	mov	r2, r0
 800233c:	4605      	mov	r5, r0
 800233e:	a804      	add	r0, sp, #16
 8002340:	f7ff fe52 	bl	8001fe8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002344:	f8d4 00d8 	ldr.w	r0, [r4, #216]	@ 0xd8
	if (__p)
 8002348:	b120      	cbz	r0, 8002354 <_ZN5astra6Camera6updateEPNS_4MenuEPNS_8SelectorE+0x9c>
			  - this->_M_impl._M_start);
 800234a:	f8d4 10e0 	ldr.w	r1, [r4, #224]	@ 0xe0
 800234e:	1a09      	subs	r1, r1, r0
 8002350:	f005 fcda 	bl	8007d08 <_ZdlPvj>
	    this->_M_impl._M_start = __tmp;
 8002354:	f8c4 50d8 	str.w	r5, [r4, #216]	@ 0xd8
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
 8002358:	3508      	adds	r5, #8
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
 800235a:	e9c4 5537 	strd	r5, r5, [r4, #220]	@ 0xdc
    _menu->resetCameraMemoryPos();
  }
    //if (this->isReached(_menu->getCameraMemoryPos())) _menu->cameraPosMemoryFlag = false;
  if (_menu->getType() == "List") goToListItemRolling(dynamic_cast<List*>(_menu));
 800235e:	6823      	ldr	r3, [r4, #0]
 8002360:	4621      	mov	r1, r4
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	a804      	add	r0, sp, #16
 8002366:	4798      	blx	r3
 8002368:	4925      	ldr	r1, [pc, #148]	@ (8002400 <_ZN5astra6Camera6updateEPNS_4MenuEPNS_8SelectorE+0x148>)
 800236a:	a804      	add	r0, sp, #16
 800236c:	f006 f8a6 	bl	80084bc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 8002370:	4605      	mov	r5, r0
      { _M_dispose(); }
 8002372:	a804      	add	r0, sp, #16
 8002374:	f006 f82c 	bl	80083d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8002378:	bb65      	cbnz	r5, 80023d4 <_ZN5astra6Camera6updateEPNS_4MenuEPNS_8SelectorE+0x11c>
 800237a:	4922      	ldr	r1, [pc, #136]	@ (8002404 <_ZN5astra6Camera6updateEPNS_4MenuEPNS_8SelectorE+0x14c>)
 800237c:	462b      	mov	r3, r5
 800237e:	4620      	mov	r0, r4
 8002380:	4a21      	ldr	r2, [pc, #132]	@ (8002408 <_ZN5astra6Camera6updateEPNS_4MenuEPNS_8SelectorE+0x150>)
 8002382:	f005 fcc3 	bl	8007d0c <__dynamic_cast>
 8002386:	4601      	mov	r1, r0
 8002388:	4630      	mov	r0, r6
 800238a:	f7ff ff0b 	bl	80021a4 <_ZN5astra6Camera19goToListItemRollingEPNS_4ListE>
  else if (_menu->getType() == "Tile") goToTileItem(_menu->selectIndex);

  this->render();
 800238e:	4630      	mov	r0, r6
}
 8002390:	b00b      	add	sp, #44	@ 0x2c
 8002392:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  this->render();
 8002396:	f7ff be16 	b.w	8001fc6 <_ZN5astra6Camera6renderEv>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800239a:	f8d4 50dc 	ldr.w	r5, [r4, #220]	@ 0xdc
 800239e:	1aad      	subs	r5, r5, r2
	else if (size() >= __len)
 80023a0:	2d07      	cmp	r5, #7
 80023a2:	d90a      	bls.n	80023ba <_ZN5astra6Camera6updateEPNS_4MenuEPNS_8SelectorE+0x102>
 80023a4:	a906      	add	r1, sp, #24
 80023a6:	a804      	add	r0, sp, #16
 80023a8:	f7ff fe1e 	bl	8001fe8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80023ac:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
 80023b0:	4298      	cmp	r0, r3
 80023b2:	d0d4      	beq.n	800235e <_ZN5astra6Camera6updateEPNS_4MenuEPNS_8SelectorE+0xa6>
	    this->_M_impl._M_finish =
 80023b4:	f8c4 00dc 	str.w	r0, [r4, #220]	@ 0xdc
 80023b8:	e7d1      	b.n	800235e <_ZN5astra6Camera6updateEPNS_4MenuEPNS_8SelectorE+0xa6>
 80023ba:	ab04      	add	r3, sp, #16
 80023bc:	441d      	add	r5, r3
 80023be:	4629      	mov	r1, r5
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff fe11 	bl	8001fe8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 80023c6:	4628      	mov	r0, r5
 80023c8:	f8d4 20dc 	ldr.w	r2, [r4, #220]	@ 0xdc
 80023cc:	a906      	add	r1, sp, #24
 80023ce:	f7ff fe0b 	bl	8001fe8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 80023d2:	e7ef      	b.n	80023b4 <_ZN5astra6Camera6updateEPNS_4MenuEPNS_8SelectorE+0xfc>
  else if (_menu->getType() == "Tile") goToTileItem(_menu->selectIndex);
 80023d4:	6823      	ldr	r3, [r4, #0]
 80023d6:	4621      	mov	r1, r4
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	a804      	add	r0, sp, #16
 80023dc:	4798      	blx	r3
    { return __lhs.compare(__rhs) == 0; }
 80023de:	490b      	ldr	r1, [pc, #44]	@ (800240c <_ZN5astra6Camera6updateEPNS_4MenuEPNS_8SelectorE+0x154>)
 80023e0:	a804      	add	r0, sp, #16
 80023e2:	f006 f86b 	bl	80084bc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 80023e6:	4605      	mov	r5, r0
      { _M_dispose(); }
 80023e8:	a804      	add	r0, sp, #16
 80023ea:	f005 fff1 	bl	80083d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80023ee:	2d00      	cmp	r5, #0
 80023f0:	d1cd      	bne.n	800238e <_ZN5astra6Camera6updateEPNS_4MenuEPNS_8SelectorE+0xd6>
 80023f2:	4630      	mov	r0, r6
 80023f4:	f894 1144 	ldrb.w	r1, [r4, #324]	@ 0x144
 80023f8:	f7ff fdcc 	bl	8001f94 <_ZN5astra6Camera12goToTileItemEh>
 80023fc:	e7c7      	b.n	800238e <_ZN5astra6Camera6updateEPNS_4MenuEPNS_8SelectorE+0xd6>
 80023fe:	bf00      	nop
 8002400:	08009c17 	.word	0x08009c17
 8002404:	08009c48 	.word	0x08009c48
 8002408:	08009c8c 	.word	0x08009c8c
 800240c:	08009c1c 	.word	0x08009c1c

08002410 <_ZN5astra4Menu12childPosInitERKSt6vectorIfSaIfEE>:
  } Position;

  Position position{};

  [[nodiscard]] Position getItemPosition(unsigned char _index) const;
  virtual void childPosInit(const std::vector<float> &_camera) {}
 8002410:	4770      	bx	lr

08002412 <_ZN5astra4Menu11forePosInitEv>:
  virtual void forePosInit() {}
 8002412:	4770      	bx	lr

08002414 <_ZN5astra4Menu6renderERKSt6vectorIfSaIfEE>:
public:
  void init(const std::vector<float>& _camera); //每次打开页面都要调用一次
  void deInit(); //每次关闭页面都要调用一次

public:
  virtual void render(const std::vector<float> &_camera) {}  //render all child item.
 8002414:	4770      	bx	lr

08002416 <_ZN5astra4List12childPosInitERKSt6vectorIfSaIfEE>:
    _anyWidget->init();
    return true;
  } else return false;
}

void List::childPosInit(const std::vector<float> &_camera) {
 8002416:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800241a:	e9d0 694b 	ldrd	r6, r9, [r0, #300]	@ 0x12c
 800241e:	4604      	mov	r4, r0
 8002420:	460f      	mov	r7, r1
  unsigned char _index = 0;

  for (auto _iter : childMenu) {
 8002422:	f04f 0a00 	mov.w	sl, #0
 8002426:	454e      	cmp	r6, r9
 8002428:	d101      	bne.n	800242e <_ZN5astra4List12childPosInitERKSt6vectorIfSaIfEE+0x18>
    //根页面有开场动画 所以不需要从头展开
    if (_iter->parent->parent == nullptr) { _iter->position.y = _iter->position.yTrg; continue; }
    if (astraConfig.listUnfold) { _iter->position.y = _camera[1] - astraConfig.listLineHeight;
      continue; } //text unfold from top.
  }
}
 800242a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    _iter->position.x = astraConfig.listTextMargin;
 800242e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  for (auto _iter : childMenu) {
 8002430:	6835      	ldr	r5, [r6, #0]
    _iter->position.yTrg = _index * astraConfig.listLineHeight;
 8002432:	f8d4 804c 	ldr.w	r8, [r4, #76]	@ 0x4c
    _iter->position.x = astraConfig.listTextMargin;
 8002436:	f8c5 30e8 	str.w	r3, [r5, #232]	@ 0xe8
    _iter->position.xTrg = astraConfig.listTextMargin;
 800243a:	f8c5 30ec 	str.w	r3, [r5, #236]	@ 0xec
    _iter->position.yTrg = _index * astraConfig.listLineHeight;
 800243e:	fa5f f08a 	uxtb.w	r0, sl
 8002442:	f7fe fb2f 	bl	8000aa4 <__aeabi_i2f>
 8002446:	4641      	mov	r1, r8
 8002448:	f7fe fb80 	bl	8000b4c <__aeabi_fmul>
    if (_iter->parent->parent == nullptr) { _iter->position.y = _iter->position.yTrg; continue; }
 800244c:	f8d5 3128 	ldr.w	r3, [r5, #296]	@ 0x128
    _iter->position.yTrg = _index * astraConfig.listLineHeight;
 8002450:	f8c5 00f4 	str.w	r0, [r5, #244]	@ 0xf4
    if (_iter->parent->parent == nullptr) { _iter->position.y = _iter->position.yTrg; continue; }
 8002454:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8002458:	b92b      	cbnz	r3, 8002466 <_ZN5astra4List12childPosInitERKSt6vectorIfSaIfEE+0x50>
    if (astraConfig.listUnfold) { _iter->position.y = _camera[1] - astraConfig.listLineHeight;
 800245a:	f8c5 00f0 	str.w	r0, [r5, #240]	@ 0xf0
      operator++() _GLIBCXX_NOEXCEPT
 800245e:	f10a 0a01 	add.w	sl, sl, #1
 8002462:	3604      	adds	r6, #4
	return *this;
 8002464:	e7df      	b.n	8002426 <_ZN5astra4List12childPosInitERKSt6vectorIfSaIfEE+0x10>
 8002466:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0f7      	beq.n	800245e <_ZN5astra4List12childPosInitERKSt6vectorIfSaIfEE+0x48>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	4641      	mov	r1, r8
 8002472:	6858      	ldr	r0, [r3, #4]
 8002474:	f7fe fa60 	bl	8000938 <__aeabi_fsub>
 8002478:	e7ef      	b.n	800245a <_ZN5astra4List12childPosInitERKSt6vectorIfSaIfEE+0x44>

0800247a <_ZN5astra4List11forePosInitEv>:

void List::forePosInit() {
 800247a:	b538      	push	{r3, r4, r5, lr}
 800247c:	4604      	mov	r4, r0
  positionForeground.xBarTrg = systemConfig.screenWeight - astraConfig.listBarWeight;
 800247e:	7905      	ldrb	r5, [r0, #4]
 8002480:	4628      	mov	r0, r5
 8002482:	f7fe fb0f 	bl	8000aa4 <__aeabi_i2f>
 8002486:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8002488:	f7fe fa56 	bl	8000938 <__aeabi_fsub>

  //受展开开关影响的坐标初始化
  if (astraConfig.listUnfold) positionForeground.hBar = 0;  //bar unfold from top.
 800248c:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
  positionForeground.xBarTrg = systemConfig.screenWeight - astraConfig.listBarWeight;
 8002490:	f8c4 0154 	str.w	r0, [r4, #340]	@ 0x154
  if (astraConfig.listUnfold) positionForeground.hBar = 0;  //bar unfold from top.
 8002494:	b94b      	cbnz	r3, 80024aa <_ZN5astra4List11forePosInitEv+0x30>
  else positionForeground.hBar = positionForeground.hBarTrg;
 8002496:	f8d4 314c 	ldr.w	r3, [r4, #332]	@ 0x14c

  //始终执行的坐标初始化
  positionForeground.xBar = systemConfig.screenWeight;
 800249a:	4628      	mov	r0, r5
 800249c:	f8c4 3148 	str.w	r3, [r4, #328]	@ 0x148
 80024a0:	f7fe fafc 	bl	8000a9c <__aeabi_ui2f>
 80024a4:	f8c4 0150 	str.w	r0, [r4, #336]	@ 0x150
}
 80024a8:	bd38      	pop	{r3, r4, r5, pc}
  if (astraConfig.listUnfold) positionForeground.hBar = 0;  //bar unfold from top.
 80024aa:	2300      	movs	r3, #0
 80024ac:	e7f5      	b.n	800249a <_ZN5astra4List11forePosInitEv+0x20>

080024ae <_ZN5astra4Tile12childPosInitERKSt6vectorIfSaIfEE>:

  Animation::move(&positionForeground.hBar, positionForeground.hBarTrg, astraConfig.listAnimationSpeed);
  Animation::move(&positionForeground.xBar, positionForeground.xBarTrg, astraConfig.listAnimationSpeed);
}

void Tile::childPosInit(const std::vector<float> &_camera) {
 80024ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024b2:	e9d0 a34b 	ldrd	sl, r3, [r0, #300]	@ 0x12c
 80024b6:	4604      	mov	r4, r0
 80024b8:	460f      	mov	r7, r1
  unsigned char _index = 0;

  for (auto _iter : childMenu) {
 80024ba:	2600      	movs	r6, #0
    _iter->position.y = 0;
 80024bc:	f04f 0b00 	mov.w	fp, #0
 80024c0:	9300      	str	r3, [sp, #0]
  for (auto _iter : childMenu) {
 80024c2:	9b00      	ldr	r3, [sp, #0]
 80024c4:	459a      	cmp	sl, r3
 80024c6:	d102      	bne.n	80024ce <_ZN5astra4Tile12childPosInitERKSt6vectorIfSaIfEE+0x20>
    _index++;

    if (_iter->parent->parent == nullptr) { _iter->position.x = _iter->position.xTrg; continue; }
    if (astraConfig.tileUnfold) { _iter->position.x = _camera[0] - astraConfig.tilePicWidth; continue; } //unfold from left.
  }
}
 80024c8:	b003      	add	sp, #12
 80024ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (auto _iter : childMenu) {
 80024ce:	f8da 5000 	ldr.w	r5, [sl]
    _iter->position.xTrg = systemConfig.screenWeight / 2 - astraConfig.tilePicWidth / 2 +
 80024d2:	f8d4 805c 	ldr.w	r8, [r4, #92]	@ 0x5c
    _iter->position.y = 0;
 80024d6:	f8c5 b0f0 	str.w	fp, [r5, #240]	@ 0xf0
    _iter->position.xTrg = systemConfig.screenWeight / 2 - astraConfig.tilePicWidth / 2 +
 80024da:	7920      	ldrb	r0, [r4, #4]
 80024dc:	0840      	lsrs	r0, r0, #1
 80024de:	f7fe fae1 	bl	8000aa4 <__aeabi_i2f>
 80024e2:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80024e6:	4681      	mov	r9, r0
 80024e8:	4640      	mov	r0, r8
 80024ea:	f7fe fb2f 	bl	8000b4c <__aeabi_fmul>
 80024ee:	4601      	mov	r1, r0
 80024f0:	4648      	mov	r0, r9
 80024f2:	f7fe fa21 	bl	8000938 <__aeabi_fsub>
 80024f6:	4681      	mov	r9, r0
                           (_index) * (astraConfig.tilePicMargin + astraConfig.tilePicWidth);
 80024f8:	b2f0      	uxtb	r0, r6
 80024fa:	f7fe fad3 	bl	8000aa4 <__aeabi_i2f>
 80024fe:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8002500:	9001      	str	r0, [sp, #4]
 8002502:	4640      	mov	r0, r8
 8002504:	f7fe fa1a 	bl	800093c <__addsf3>
 8002508:	4601      	mov	r1, r0
 800250a:	9801      	ldr	r0, [sp, #4]
 800250c:	f7fe fb1e 	bl	8000b4c <__aeabi_fmul>
 8002510:	4601      	mov	r1, r0
    _iter->position.xTrg = systemConfig.screenWeight / 2 - astraConfig.tilePicWidth / 2 +
 8002512:	4648      	mov	r0, r9
 8002514:	f7fe fa12 	bl	800093c <__addsf3>
    _iter->position.yTrg = astraConfig.tilePicTopMargin;
 8002518:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
    _iter->position.xTrg = systemConfig.screenWeight / 2 - astraConfig.tilePicWidth / 2 +
 800251a:	f8c5 00ec 	str.w	r0, [r5, #236]	@ 0xec
    _iter->position.yTrg = astraConfig.tilePicTopMargin;
 800251e:	f8c5 20f4 	str.w	r2, [r5, #244]	@ 0xf4
    if (_iter->parent->parent == nullptr) { _iter->position.x = _iter->position.xTrg; continue; }
 8002522:	f8d5 2128 	ldr.w	r2, [r5, #296]	@ 0x128
 8002526:	f8d2 2128 	ldr.w	r2, [r2, #296]	@ 0x128
 800252a:	b92a      	cbnz	r2, 8002538 <_ZN5astra4Tile12childPosInitERKSt6vectorIfSaIfEE+0x8a>
    if (astraConfig.tileUnfold) { _iter->position.x = _camera[0] - astraConfig.tilePicWidth; continue; } //unfold from left.
 800252c:	f8c5 00e8 	str.w	r0, [r5, #232]	@ 0xe8
      operator++() _GLIBCXX_NOEXCEPT
 8002530:	3601      	adds	r6, #1
 8002532:	f10a 0a04 	add.w	sl, sl, #4
	return *this;
 8002536:	e7c4      	b.n	80024c2 <_ZN5astra4Tile12childPosInitERKSt6vectorIfSaIfEE+0x14>
 8002538:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 800253c:	2a00      	cmp	r2, #0
 800253e:	d0f7      	beq.n	8002530 <_ZN5astra4Tile12childPosInitERKSt6vectorIfSaIfEE+0x82>
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	4641      	mov	r1, r8
 8002544:	6810      	ldr	r0, [r2, #0]
 8002546:	f7fe f9f7 	bl	8000938 <__aeabi_fsub>
 800254a:	e7ef      	b.n	800252c <_ZN5astra4Tile12childPosInitERKSt6vectorIfSaIfEE+0x7e>

0800254c <_ZN5astra4Tile11forePosInitEv>:

void Tile::forePosInit() {
 800254c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  positionForeground.yBarTrg = 0;
 800254e:	2500      	movs	r5, #0
  positionForeground.yArrowTrg = systemConfig.screenHeight - astraConfig.tileArrowBottomMargin;
 8002550:	7947      	ldrb	r7, [r0, #5]
void Tile::forePosInit() {
 8002552:	4604      	mov	r4, r0
  positionForeground.yBarTrg = 0;
 8002554:	f8c0 5154 	str.w	r5, [r0, #340]	@ 0x154
  positionForeground.yArrowTrg = systemConfig.screenHeight - astraConfig.tileArrowBottomMargin;
 8002558:	4638      	mov	r0, r7
 800255a:	f7fe faa3 	bl	8000aa4 <__aeabi_i2f>
 800255e:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8002560:	4606      	mov	r6, r0
 8002562:	f7fe f9e9 	bl	8000938 <__aeabi_fsub>
  positionForeground.yDottedLineTrg = systemConfig.screenHeight - astraConfig.tileDottedLineBottomMargin;
 8002566:	6f61      	ldr	r1, [r4, #116]	@ 0x74
  positionForeground.yArrowTrg = systemConfig.screenHeight - astraConfig.tileArrowBottomMargin;
 8002568:	f8c4 015c 	str.w	r0, [r4, #348]	@ 0x15c
  positionForeground.yDottedLineTrg = systemConfig.screenHeight - astraConfig.tileDottedLineBottomMargin;
 800256c:	4630      	mov	r0, r6
 800256e:	f7fe f9e3 	bl	8000938 <__aeabi_fsub>

  if (astraConfig.tileUnfold) positionForeground.wBar = 0;  //bar unfold from left.
 8002572:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
  positionForeground.yDottedLineTrg = systemConfig.screenHeight - astraConfig.tileDottedLineBottomMargin;
 8002576:	f8c4 0164 	str.w	r0, [r4, #356]	@ 0x164
  if (astraConfig.tileUnfold) positionForeground.wBar = 0;  //bar unfold from left.
 800257a:	b90b      	cbnz	r3, 8002580 <_ZN5astra4Tile11forePosInitEv+0x34>
  else positionForeground.wBar = positionForeground.wBarTrg;
 800257c:	f8d4 514c 	ldr.w	r5, [r4, #332]	@ 0x14c

  //position.y = -astraConfig.tilePicHeight * 2;

  //始终执行的坐标初始化
  //底部箭头和虚线的初始化
  positionForeground.yArrow = systemConfig.screenHeight;
 8002580:	4638      	mov	r0, r7
 8002582:	f8c4 5148 	str.w	r5, [r4, #328]	@ 0x148
 8002586:	f7fe fa89 	bl	8000a9c <__aeabi_ui2f>
  positionForeground.yDottedLine = systemConfig.screenHeight;

  //顶部进度条的从上方滑入的初始化
  positionForeground.yBar = 0 - astraConfig.tileBarHeight; //注意这里是坐标从屏幕外滑入 而不是height从0变大
 800258a:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
  positionForeground.yArrow = systemConfig.screenHeight;
 800258e:	f8c4 0158 	str.w	r0, [r4, #344]	@ 0x158
  positionForeground.yDottedLine = systemConfig.screenHeight;
 8002592:	f8c4 0160 	str.w	r0, [r4, #352]	@ 0x160
  positionForeground.yBar = 0 - astraConfig.tileBarHeight; //注意这里是坐标从屏幕外滑入 而不是height从0变大
 8002596:	2000      	movs	r0, #0
 8002598:	f7fe f9ce 	bl	8000938 <__aeabi_fsub>
 800259c:	f8c4 0150 	str.w	r0, [r4, #336]	@ 0x150
}
 80025a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080025a2 <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_.isra.0>:
    __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
 80025a2:	460b      	mov	r3, r1
 80025a4:	4611      	mov	r1, r2
      if (const size_t __len = __last - __first)
 80025a6:	1a1a      	subs	r2, r3, r0
 80025a8:	d001      	beq.n	80025ae <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_.isra.0+0xc>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 80025aa:	f006 baa8 	b.w	8008afe <memset>
    }
 80025ae:	4770      	bx	lr

080025b0 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80025b0:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 80025b2:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80025b4:	d006      	beq.n	80025c4 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80025b6:	da01      	bge.n	80025bc <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 80025b8:	f005 fecd 	bl	8008356 <_ZSt17__throw_bad_allocv>
      }
 80025bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80025c0:	f004 b9f4 	b.w	80069ac <_Znwj>
 80025c4:	bd08      	pop	{r3, pc}
	...

080025c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>:
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 80025c8:	f100 0308 	add.w	r3, r0, #8
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 80025cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80025ce:	4604      	mov	r4, r0
	if (__s == 0)
 80025d0:	460d      	mov	r5, r1
	: allocator_type(__a), _M_p(__dat) { }
 80025d2:	6003      	str	r3, [r0, #0]
	if (__s == 0)
 80025d4:	b911      	cbnz	r1, 80025dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0+0x14>
	  std::__throw_logic_error(__N("basic_string: "
 80025d6:	480f      	ldr	r0, [pc, #60]	@ (8002614 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0+0x4c>)
 80025d8:	f005 fec3 	bl	8008362 <_ZSt19__throw_logic_errorPKc>
	return __builtin_strlen(__s);
 80025dc:	4608      	mov	r0, r1
 80025de:	f7fd fdc1 	bl	8000164 <strlen>
	if (__dnew > size_type(_S_local_capacity))
 80025e2:	280f      	cmp	r0, #15
	const _CharT* __end = __s + traits_type::length(__s);
 80025e4:	eb05 0600 	add.w	r6, r5, r0
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 80025e8:	9001      	str	r0, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
 80025ea:	d907      	bls.n	80025fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0+0x34>
	    _M_data(_M_create(__dnew, size_type(0)));
 80025ec:	2200      	movs	r2, #0
 80025ee:	4620      	mov	r0, r4
 80025f0:	a901      	add	r1, sp, #4
 80025f2:	f005 fecb 	bl	800838c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
 80025f6:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
 80025f8:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
 80025fa:	60a3      	str	r3, [r4, #8]
	this->_S_copy_chars(_M_data(), __beg, __end);
 80025fc:	4632      	mov	r2, r6
 80025fe:	4629      	mov	r1, r5
 8002600:	6820      	ldr	r0, [r4, #0]
 8002602:	f005 ff28 	bl	8008456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	__c1 = __c2;
 8002606:	2100      	movs	r1, #0
	_M_set_length(__dnew);
 8002608:	9b01      	ldr	r3, [sp, #4]
 800260a:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
 800260c:	6063      	str	r3, [r4, #4]
 800260e:	54d1      	strb	r1, [r2, r3]
      }
 8002610:	b002      	add	sp, #8
 8002612:	bd70      	pop	{r4, r5, r6, pc}
 8002614:	08009b6b 	.word	0x08009b6b

08002618 <_ZNK5astra4List7getTypeB5cxx11Ev>:
  bool addItem(Menu *_page, Widget* _anyWidget); //新建一个带有控件的列表项
};

class List : public Menu {
public:
  [[nodiscard]] std::string getType() const override { return "List"; }
 8002618:	b510      	push	{r4, lr}
 800261a:	4604      	mov	r4, r0
 800261c:	4902      	ldr	r1, [pc, #8]	@ (8002628 <_ZNK5astra4List7getTypeB5cxx11Ev+0x10>)
 800261e:	f7ff ffd3 	bl	80025c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 8002622:	4620      	mov	r0, r4
 8002624:	bd10      	pop	{r4, pc}
 8002626:	bf00      	nop
 8002628:	08009c17 	.word	0x08009c17

0800262c <_ZNK5astra4Tile7getTypeB5cxx11Ev>:
  void render(const std::vector<float> &_camera) override;
};

class Tile : public Menu {
public:
  [[nodiscard]] std::string getType() const override { return "Tile"; }
 800262c:	b510      	push	{r4, lr}
 800262e:	4604      	mov	r4, r0
 8002630:	4902      	ldr	r1, [pc, #8]	@ (800263c <_ZNK5astra4Tile7getTypeB5cxx11Ev+0x10>)
 8002632:	f7ff ffc9 	bl	80025c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 8002636:	4620      	mov	r0, r4
 8002638:	bd10      	pop	{r4, pc}
 800263a:	bf00      	nop
 800263c:	08009c1c 	.word	0x08009c1c

08002640 <_ZNK5astra4Menu7getTypeB5cxx11Ev>:
  [[nodiscard]] virtual std::string getType() const { return "Base"; }
 8002640:	b510      	push	{r4, lr}
 8002642:	4604      	mov	r4, r0
 8002644:	4902      	ldr	r1, [pc, #8]	@ (8002650 <_ZNK5astra4Menu7getTypeB5cxx11Ev+0x10>)
 8002646:	f7ff ffbf 	bl	80025c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 800264a:	4620      	mov	r0, r4
 800264c:	bd10      	pop	{r4, pc}
 800264e:	bf00      	nop
 8002650:	08009c60 	.word	0x08009c60

08002654 <_ZN3HAL9drawPixelEff>:

  static void setDrawType(unsigned char _type) { get()->_setDrawType(_type); }

  virtual void _setDrawType(unsigned char _type) {}

  static void drawPixel(float _x, float _y) { get()->_drawPixel(_x, _y); }
 8002654:	b570      	push	{r4, r5, r6, lr}
 8002656:	460d      	mov	r5, r1
 8002658:	4604      	mov	r4, r0
 800265a:	f002 fa49 	bl	8004af0 <_ZN3HAL3getEv>
 800265e:	6803      	ldr	r3, [r0, #0]
 8002660:	462a      	mov	r2, r5
 8002662:	4621      	mov	r1, r4
 8002664:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002668:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800266a:	4718      	bx	r3

0800266c <_ZN3HAL7drawBoxEffff>:
                    _bitMap);
  }

  virtual void _drawBMP(float _x, float _y, float _w, float _h, const unsigned char *_bitMap) {}

  static void drawBox(float _x, float _y, float _w, float _h) { get()->_drawBox(_x, _y, _w, _h); }
 800266c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800266e:	460d      	mov	r5, r1
 8002670:	4616      	mov	r6, r2
 8002672:	461f      	mov	r7, r3
 8002674:	4604      	mov	r4, r0
 8002676:	f002 fa3b 	bl	8004af0 <_ZN3HAL3getEv>
 800267a:	6803      	ldr	r3, [r0, #0]
 800267c:	9700      	str	r7, [sp, #0]
 800267e:	6d5f      	ldr	r7, [r3, #84]	@ 0x54
 8002680:	462a      	mov	r2, r5
 8002682:	4633      	mov	r3, r6
 8002684:	4621      	mov	r1, r4
 8002686:	47b8      	blx	r7
 8002688:	b003      	add	sp, #12
 800268a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800268c <_ZN5astra4Item12updateConfigEv>:
class Item {
protected:
  sys::config systemConfig;
  config astraConfig;

  inline void updateConfig() {
 800268c:	b510      	push	{r4, lr}
 800268e:	4604      	mov	r4, r0

  /**
   * @brief system config.
   */
public:
  static sys::config &getSystemConfig() { return get()->config; }
 8002690:	f002 fa2e 	bl	8004af0 <_ZN3HAL3getEv>
    this->systemConfig = HAL::getSystemConfig();
 8002694:	6881      	ldr	r1, [r0, #8]
 8002696:	6840      	ldr	r0, [r0, #4]
    this->astraConfig = getUIConfig();
 8002698:	22cc      	movs	r2, #204	@ 0xcc
    this->systemConfig = HAL::getSystemConfig();
 800269a:	e884 0003 	stmia.w	r4, {r0, r1}
    this->astraConfig = getUIConfig();
 800269e:	4903      	ldr	r1, [pc, #12]	@ (80026ac <_ZN5astra4Item12updateConfigEv+0x20>)
 80026a0:	f104 0008 	add.w	r0, r4, #8
 80026a4:	f006 faf9 	bl	8008c9a <memcpy>
  }
 80026a8:	bd10      	pop	{r4, pc}
 80026aa:	bf00      	nop
 80026ac:	08009cfc 	.word	0x08009cfc

080026b0 <_ZN5astra9Animation4exitEv>:
};

inline void Animation::entry() { }

//todo 未实现功能
inline void Animation::exit() {
 80026b0:	b538      	push	{r3, r4, r5, lr}
  static unsigned char fadeFlag = 1;
  static unsigned char bufferLen = 8 * HAL::getBufferTileHeight() * HAL::getBufferTileWidth();
 80026b2:	4c2a      	ldr	r4, [pc, #168]	@ (800275c <_ZN5astra9Animation4exitEv+0xac>)
 80026b4:	6823      	ldr	r3, [r4, #0]
 80026b6:	f3bf 8f5b 	dmb	ish
 80026ba:	07dd      	lsls	r5, r3, #31
 80026bc:	d415      	bmi.n	80026ea <_ZN5astra9Animation4exitEv+0x3a>
 80026be:	4620      	mov	r0, r4
 80026c0:	f005 fb79 	bl	8007db6 <__cxa_guard_acquire>
 80026c4:	b188      	cbz	r0, 80026ea <_ZN5astra9Animation4exitEv+0x3a>
  static unsigned char getBufferTileHeight() { return get()->_getBufferTileHeight(); }
 80026c6:	f002 fa13 	bl	8004af0 <_ZN3HAL3getEv>
 80026ca:	6803      	ldr	r3, [r0, #0]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	4798      	blx	r3
 80026d0:	4605      	mov	r5, r0
  static unsigned char getBufferTileWidth() { return get()->_getBufferTileWidth(); }
 80026d2:	f002 fa0d 	bl	8004af0 <_ZN3HAL3getEv>
 80026d6:	6803      	ldr	r3, [r0, #0]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	4798      	blx	r3
 80026dc:	4368      	muls	r0, r5
 80026de:	4b20      	ldr	r3, [pc, #128]	@ (8002760 <_ZN5astra9Animation4exitEv+0xb0>)
 80026e0:	00c0      	lsls	r0, r0, #3
 80026e2:	7018      	strb	r0, [r3, #0]
 80026e4:	4620      	mov	r0, r4
 80026e6:	f005 fb72 	bl	8007dce <__cxa_guard_release>
  static void *getCanvasBuffer() { return get()->_getCanvasBuffer(); }
 80026ea:	f002 fa01 	bl	8004af0 <_ZN3HAL3getEv>
 80026ee:	6803      	ldr	r3, [r0, #0]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	4798      	blx	r3
 80026f4:	4604      	mov	r4, r0
  static void delay(unsigned long _mill) { get()->_delay(_mill); }
 80026f6:	f002 f9fb 	bl	8004af0 <_ZN3HAL3getEv>
 80026fa:	6803      	ldr	r3, [r0, #0]
 80026fc:	2164      	movs	r1, #100	@ 0x64
 80026fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002700:	4798      	blx	r3
        //放动画结束退出函数的代码
        fadeFlag = 0;
        break;
    }
  else
    switch (fadeFlag) {
 8002702:	4a18      	ldr	r2, [pc, #96]	@ (8002764 <_ZN5astra9Animation4exitEv+0xb4>)
 8002704:	7813      	ldrb	r3, [r2, #0]
 8002706:	3b01      	subs	r3, #1
 8002708:	2b03      	cmp	r3, #3
 800270a:	d824      	bhi.n	8002756 <_ZN5astra9Animation4exitEv+0xa6>
 800270c:	e8df f003 	tbb	[pc, r3]
 8002710:	0d200d11 	.word	0x0d200d11
      case 1:
        for (uint16_t i = 0; i < bufferLen; ++i) if (i % 2 != 0) bufferPointer[i] = bufferPointer[i] | 0xAA;
 8002714:	07c8      	lsls	r0, r1, #31
 8002716:	bf42      	ittt	mi
 8002718:	5ce1      	ldrbmi	r1, [r4, r3]
 800271a:	f061 0155 	ornmi	r1, r1, #85	@ 0x55
 800271e:	54e1      	strbmi	r1, [r4, r3]
 8002720:	3301      	adds	r3, #1
 8002722:	7828      	ldrb	r0, [r5, #0]
 8002724:	b299      	uxth	r1, r3
 8002726:	4288      	cmp	r0, r1
 8002728:	d8f4      	bhi.n	8002714 <_ZN5astra9Animation4exitEv+0x64>
        break;
      default:
        fadeFlag = 0;
        break;
    }
  fadeFlag++;
 800272a:	7813      	ldrb	r3, [r2, #0]
 800272c:	3301      	adds	r3, #1
 800272e:	7013      	strb	r3, [r2, #0]
}
 8002730:	bd38      	pop	{r3, r4, r5, pc}
    switch (fadeFlag) {
 8002732:	2300      	movs	r3, #0
        for (uint16_t i = 0; i < bufferLen; ++i) if (i % 2 != 0) bufferPointer[i] = bufferPointer[i] | 0xAA;
 8002734:	4d0a      	ldr	r5, [pc, #40]	@ (8002760 <_ZN5astra9Animation4exitEv+0xb0>)
 8002736:	e7f4      	b.n	8002722 <_ZN5astra9Animation4exitEv+0x72>
        for (uint16_t i = 0; i < bufferLen; ++i) if (i % 2 == 0) bufferPointer[i] = bufferPointer[i] | 0x55;
 8002738:	07c9      	lsls	r1, r1, #31
 800273a:	bf5e      	ittt	pl
 800273c:	5ce1      	ldrbpl	r1, [r4, r3]
 800273e:	f041 0155 	orrpl.w	r1, r1, #85	@ 0x55
 8002742:	54e1      	strbpl	r1, [r4, r3]
 8002744:	3301      	adds	r3, #1
 8002746:	7828      	ldrb	r0, [r5, #0]
 8002748:	b299      	uxth	r1, r3
 800274a:	4288      	cmp	r0, r1
 800274c:	d8f4      	bhi.n	8002738 <_ZN5astra9Animation4exitEv+0x88>
 800274e:	e7ec      	b.n	800272a <_ZN5astra9Animation4exitEv+0x7a>
    switch (fadeFlag) {
 8002750:	2300      	movs	r3, #0
        for (uint16_t i = 0; i < bufferLen; ++i) if (i % 2 == 0) bufferPointer[i] = bufferPointer[i] | 0x55;
 8002752:	4d03      	ldr	r5, [pc, #12]	@ (8002760 <_ZN5astra9Animation4exitEv+0xb0>)
 8002754:	e7f7      	b.n	8002746 <_ZN5astra9Animation4exitEv+0x96>
        fadeFlag = 0;
 8002756:	2300      	movs	r3, #0
 8002758:	7013      	strb	r3, [r2, #0]
        break;
 800275a:	e7e6      	b.n	800272a <_ZN5astra9Animation4exitEv+0x7a>
 800275c:	200001a4 	.word	0x200001a4
 8002760:	200001a8 	.word	0x200001a8
 8002764:	20000002 	.word	0x20000002

08002768 <_ZN5astra4Tile6renderERKSt6vectorIfSaIfEE>:

  this->position = {};
  this->positionForeground = {};
}

void Tile::render(const std::vector<float> &_camera) {
 8002768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800276c:	4604      	mov	r4, r0
 800276e:	b085      	sub	sp, #20
  Item::updateConfig();
 8002770:	3004      	adds	r0, #4
void Tile::render(const std::vector<float> &_camera) {
 8002772:	460f      	mov	r7, r1
  Item::updateConfig();
 8002774:	f7ff ff8a 	bl	800268c <_ZN5astra4Item12updateConfigEv>

  HAL::setDrawType(1);
 8002778:	2001      	movs	r0, #1
 800277a:	f7fe fc5a 	bl	8001032 <_ZN3HAL11setDrawTypeEh>
      : _M_current(__i) { }
 800277e:	e9d4 6a4b 	ldrd	r6, sl, [r4, #300]	@ 0x12c
  //draw pic.
  for (auto _iter : childMenu) {
 8002782:	4556      	cmp	r6, sl
 8002784:	f040 8142 	bne.w	8002a0c <_ZN5astra4Tile6renderERKSt6vectorIfSaIfEE+0x2a4>
                    astraConfig.tileAnimationSpeed);
  }

  //draw bar.
  //在屏幕最上方 两个像素高
  positionForeground.wBarTrg = (selectIndex + 1) * ((float) systemConfig.screenWeight / getItemNum());
 8002788:	7920      	ldrb	r0, [r4, #4]
 800278a:	f7fe f987 	bl	8000a9c <__aeabi_ui2f>
 800278e:	4605      	mov	r5, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002790:	e9d4 304b 	ldrd	r3, r0, [r4, #300]	@ 0x12c
 8002794:	1ac0      	subs	r0, r0, r3
 8002796:	f3c0 0087 	ubfx	r0, r0, #2, #8
 800279a:	f7fe f983 	bl	8000aa4 <__aeabi_i2f>
 800279e:	4601      	mov	r1, r0
 80027a0:	4628      	mov	r0, r5
 80027a2:	f7fe fa87 	bl	8000cb4 <__aeabi_fdiv>
 80027a6:	4605      	mov	r5, r0
 80027a8:	f894 0144 	ldrb.w	r0, [r4, #324]	@ 0x144
 80027ac:	3001      	adds	r0, #1
 80027ae:	f7fe f979 	bl	8000aa4 <__aeabi_i2f>
 80027b2:	4601      	mov	r1, r0
 80027b4:	4628      	mov	r0, r5
 80027b6:	f7fe f9c9 	bl	8000b4c <__aeabi_fmul>
  HAL::drawBox(0, positionForeground.yBar, positionForeground.wBar, astraConfig.tileBarHeight);
 80027ba:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80027be:	f8d4 2148 	ldr.w	r2, [r4, #328]	@ 0x148
 80027c2:	f8d4 1150 	ldr.w	r1, [r4, #336]	@ 0x150
  positionForeground.wBarTrg = (selectIndex + 1) * ((float) systemConfig.screenWeight / getItemNum());
 80027c6:	f8c4 014c 	str.w	r0, [r4, #332]	@ 0x14c
  HAL::drawBox(0, positionForeground.yBar, positionForeground.wBar, astraConfig.tileBarHeight);
 80027ca:	2000      	movs	r0, #0
 80027cc:	f7ff ff4e 	bl	800266c <_ZN3HAL7drawBoxEffff>

  //draw left arrow.
  HAL::drawHLine(astraConfig.tileArrowMargin, positionForeground.yArrow, astraConfig.tileArrowWidth);
 80027d0:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 80027d2:	f8d4 1158 	ldr.w	r1, [r4, #344]	@ 0x158
 80027d6:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 80027d8:	f7fe fc55 	bl	8001086 <_ZN3HAL9drawHLineEfff>
  HAL::drawPixel(astraConfig.tileArrowMargin + 1, positionForeground.yArrow + 1);
 80027dc:	f8d4 0158 	ldr.w	r0, [r4, #344]	@ 0x158
 80027e0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80027e4:	f7fe f8aa 	bl	800093c <__addsf3>
 80027e8:	4605      	mov	r5, r0
 80027ea:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80027ee:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 80027f0:	f7fe f8a4 	bl	800093c <__addsf3>
 80027f4:	4629      	mov	r1, r5
 80027f6:	f7ff ff2d 	bl	8002654 <_ZN3HAL9drawPixelEff>
  HAL::drawPixel(astraConfig.tileArrowMargin + 2, positionForeground.yArrow + 2);
 80027fa:	f8d4 0158 	ldr.w	r0, [r4, #344]	@ 0x158
 80027fe:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002802:	f7fe f89b 	bl	800093c <__addsf3>
 8002806:	4605      	mov	r5, r0
 8002808:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800280c:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 800280e:	f7fe f895 	bl	800093c <__addsf3>
 8002812:	4629      	mov	r1, r5
 8002814:	f7ff ff1e 	bl	8002654 <_ZN3HAL9drawPixelEff>
  HAL::drawPixel(astraConfig.tileArrowMargin + 1, positionForeground.yArrow - 1);
 8002818:	f8d4 0158 	ldr.w	r0, [r4, #344]	@ 0x158
 800281c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002820:	f7fe f88a 	bl	8000938 <__aeabi_fsub>
 8002824:	4605      	mov	r5, r0
 8002826:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800282a:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 800282c:	f7fe f886 	bl	800093c <__addsf3>
 8002830:	4629      	mov	r1, r5
 8002832:	f7ff ff0f 	bl	8002654 <_ZN3HAL9drawPixelEff>
  HAL::drawPixel(astraConfig.tileArrowMargin + 2, positionForeground.yArrow - 2);
 8002836:	f8d4 0158 	ldr.w	r0, [r4, #344]	@ 0x158
 800283a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800283e:	f7fe f87b 	bl	8000938 <__aeabi_fsub>
 8002842:	4605      	mov	r5, r0
 8002844:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002848:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 800284a:	f7fe f877 	bl	800093c <__addsf3>
 800284e:	4629      	mov	r1, r5
 8002850:	f7ff ff00 	bl	8002654 <_ZN3HAL9drawPixelEff>

  //draw right arrow.
  HAL::drawHLine(systemConfig.screenWeight - astraConfig.tileArrowWidth - astraConfig.tileArrowMargin,
 8002854:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 8002856:	7920      	ldrb	r0, [r4, #4]
 8002858:	f7fe f924 	bl	8000aa4 <__aeabi_i2f>
 800285c:	4629      	mov	r1, r5
 800285e:	f7fe f86b 	bl	8000938 <__aeabi_fsub>
 8002862:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8002864:	f7fe f868 	bl	8000938 <__aeabi_fsub>
 8002868:	462a      	mov	r2, r5
 800286a:	f8d4 1158 	ldr.w	r1, [r4, #344]	@ 0x158
 800286e:	f7fe fc0a 	bl	8001086 <_ZN3HAL9drawHLineEfff>
                 positionForeground.yArrow,
                 astraConfig.tileArrowWidth);
  HAL::drawPixel(systemConfig.screenWeight - astraConfig.tileArrowWidth, positionForeground.yArrow + 1);
 8002872:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002876:	f8d4 0158 	ldr.w	r0, [r4, #344]	@ 0x158
 800287a:	f7fe f85f 	bl	800093c <__addsf3>
 800287e:	4605      	mov	r5, r0
 8002880:	7920      	ldrb	r0, [r4, #4]
 8002882:	f7fe f90f 	bl	8000aa4 <__aeabi_i2f>
 8002886:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8002888:	f7fe f856 	bl	8000938 <__aeabi_fsub>
 800288c:	4629      	mov	r1, r5
 800288e:	f7ff fee1 	bl	8002654 <_ZN3HAL9drawPixelEff>
  HAL::drawPixel(systemConfig.screenWeight - astraConfig.tileArrowWidth - 1, positionForeground.yArrow + 2);
 8002892:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002896:	f8d4 0158 	ldr.w	r0, [r4, #344]	@ 0x158
 800289a:	f7fe f84f 	bl	800093c <__addsf3>
 800289e:	4605      	mov	r5, r0
 80028a0:	7920      	ldrb	r0, [r4, #4]
 80028a2:	f7fe f8ff 	bl	8000aa4 <__aeabi_i2f>
 80028a6:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 80028a8:	f7fe f846 	bl	8000938 <__aeabi_fsub>
 80028ac:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80028b0:	f7fe f842 	bl	8000938 <__aeabi_fsub>
 80028b4:	4629      	mov	r1, r5
 80028b6:	f7ff fecd 	bl	8002654 <_ZN3HAL9drawPixelEff>
  HAL::drawPixel(systemConfig.screenWeight - astraConfig.tileArrowWidth, positionForeground.yArrow - 1);
 80028ba:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80028be:	f8d4 0158 	ldr.w	r0, [r4, #344]	@ 0x158
 80028c2:	f7fe f839 	bl	8000938 <__aeabi_fsub>
 80028c6:	4605      	mov	r5, r0
 80028c8:	7920      	ldrb	r0, [r4, #4]
 80028ca:	f7fe f8eb 	bl	8000aa4 <__aeabi_i2f>
 80028ce:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 80028d0:	f7fe f832 	bl	8000938 <__aeabi_fsub>
 80028d4:	4629      	mov	r1, r5
 80028d6:	f7ff febd 	bl	8002654 <_ZN3HAL9drawPixelEff>
  HAL::drawPixel(systemConfig.screenWeight - astraConfig.tileArrowWidth - 1, positionForeground.yArrow - 2);
 80028da:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80028de:	f8d4 0158 	ldr.w	r0, [r4, #344]	@ 0x158
 80028e2:	f7fe f829 	bl	8000938 <__aeabi_fsub>
 80028e6:	4605      	mov	r5, r0
 80028e8:	7920      	ldrb	r0, [r4, #4]
 80028ea:	f7fe f8db 	bl	8000aa4 <__aeabi_i2f>
 80028ee:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 80028f0:	f7fe f822 	bl	8000938 <__aeabi_fsub>
 80028f4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80028f8:	f7fe f81e 	bl	8000938 <__aeabi_fsub>
 80028fc:	4629      	mov	r1, r5
 80028fe:	f7ff fea9 	bl	8002654 <_ZN3HAL9drawPixelEff>

  //draw left button.
  HAL::drawHLine(astraConfig.tileBtnMargin, positionForeground.yArrow + 2, 9);
 8002902:	f8d4 0158 	ldr.w	r0, [r4, #344]	@ 0x158
 8002906:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800290a:	f7fe f817 	bl	800093c <__addsf3>
 800290e:	4a56      	ldr	r2, [pc, #344]	@ (8002a68 <_ZN5astra4Tile6renderERKSt6vectorIfSaIfEE+0x300>)
 8002910:	4601      	mov	r1, r0
 8002912:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 8002916:	f7fe fbb6 	bl	8001086 <_ZN3HAL9drawHLineEfff>
  HAL::drawBox(astraConfig.tileBtnMargin + 2, positionForeground.yArrow + 2 - 4, 5, 4);
 800291a:	f8d4 0158 	ldr.w	r0, [r4, #344]	@ 0x158
 800291e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002922:	f7fe f80b 	bl	800093c <__addsf3>
 8002926:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 800292a:	f7fe f805 	bl	8000938 <__aeabi_fsub>
 800292e:	4605      	mov	r5, r0
 8002930:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002934:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 8002938:	f7fe f800 	bl	800093c <__addsf3>
 800293c:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8002940:	4a4a      	ldr	r2, [pc, #296]	@ (8002a6c <_ZN5astra4Tile6renderERKSt6vectorIfSaIfEE+0x304>)
 8002942:	4629      	mov	r1, r5
 8002944:	f7ff fe92 	bl	800266c <_ZN3HAL7drawBoxEffff>

  //draw the right button.
  HAL::drawHLine(systemConfig.screenWeight - astraConfig.tileBtnMargin - 9, positionForeground.yArrow + 2, 9);
 8002948:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800294c:	f8d4 0158 	ldr.w	r0, [r4, #344]	@ 0x158
 8002950:	f7fd fff4 	bl	800093c <__addsf3>
 8002954:	4605      	mov	r5, r0
 8002956:	7920      	ldrb	r0, [r4, #4]
 8002958:	f7fe f8a4 	bl	8000aa4 <__aeabi_i2f>
 800295c:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 8002960:	f7fd ffea 	bl	8000938 <__aeabi_fsub>
 8002964:	4940      	ldr	r1, [pc, #256]	@ (8002a68 <_ZN5astra4Tile6renderERKSt6vectorIfSaIfEE+0x300>)
 8002966:	f7fd ffe7 	bl	8000938 <__aeabi_fsub>
 800296a:	4a3f      	ldr	r2, [pc, #252]	@ (8002a68 <_ZN5astra4Tile6renderERKSt6vectorIfSaIfEE+0x300>)
 800296c:	4629      	mov	r1, r5
 800296e:	f7fe fb8a 	bl	8001086 <_ZN3HAL9drawHLineEfff>
  HAL::drawBox(systemConfig.screenWeight - astraConfig.tileBtnMargin - 9 + 2,
               positionForeground.yArrow + 2 - 4,
 8002972:	f8d4 0158 	ldr.w	r0, [r4, #344]	@ 0x158
 8002976:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800297a:	f7fd ffdf 	bl	800093c <__addsf3>
  HAL::drawBox(systemConfig.screenWeight - astraConfig.tileBtnMargin - 9 + 2,
 800297e:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8002982:	f7fd ffd9 	bl	8000938 <__aeabi_fsub>
 8002986:	4605      	mov	r5, r0
 8002988:	7920      	ldrb	r0, [r4, #4]
 800298a:	f7fe f88b 	bl	8000aa4 <__aeabi_i2f>
 800298e:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 8002992:	f7fd ffd1 	bl	8000938 <__aeabi_fsub>
 8002996:	4934      	ldr	r1, [pc, #208]	@ (8002a68 <_ZN5astra4Tile6renderERKSt6vectorIfSaIfEE+0x300>)
 8002998:	f7fd ffce 	bl	8000938 <__aeabi_fsub>
 800299c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80029a0:	f7fd ffcc 	bl	800093c <__addsf3>
 80029a4:	4629      	mov	r1, r5
 80029a6:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 80029aa:	4a30      	ldr	r2, [pc, #192]	@ (8002a6c <_ZN5astra4Tile6renderERKSt6vectorIfSaIfEE+0x304>)
 80029ac:	f7ff fe5e 	bl	800266c <_ZN3HAL7drawBoxEffff>
               5,
               4);

  //draw dotted line.
  HAL::drawHDottedLine(0, positionForeground.yDottedLine, systemConfig.screenWeight);
 80029b0:	7920      	ldrb	r0, [r4, #4]
 80029b2:	f7fe f873 	bl	8000a9c <__aeabi_ui2f>
 80029b6:	f8d4 7160 	ldr.w	r7, [r4, #352]	@ 0x160
 80029ba:	4605      	mov	r5, r0
  static void drawHDottedLine(float _x, float _y, float _l) { get()->_drawHDottedLine(_x, _y, _l); }
 80029bc:	f002 f898 	bl	8004af0 <_ZN3HAL3getEv>
 80029c0:	6803      	ldr	r3, [r0, #0]
 80029c2:	463a      	mov	r2, r7
 80029c4:	6c5e      	ldr	r6, [r3, #68]	@ 0x44
 80029c6:	2100      	movs	r1, #0
 80029c8:	462b      	mov	r3, r5
 80029ca:	47b0      	blx	r6

  Animation::move(&positionForeground.yDottedLine, positionForeground.yDottedLineTrg, astraConfig.tileAnimationSpeed);
 80029cc:	68e5      	ldr	r5, [r4, #12]
 80029ce:	f8d4 1164 	ldr.w	r1, [r4, #356]	@ 0x164
 80029d2:	462a      	mov	r2, r5
 80029d4:	f504 70b0 	add.w	r0, r4, #352	@ 0x160
 80029d8:	f7ff fa66 	bl	8001ea8 <_ZN5astra9Animation4moveEPfff>
  Animation::move(&positionForeground.yArrow, positionForeground.yArrowTrg, astraConfig.tileAnimationSpeed);
 80029dc:	462a      	mov	r2, r5
 80029de:	f8d4 115c 	ldr.w	r1, [r4, #348]	@ 0x15c
 80029e2:	f504 70ac 	add.w	r0, r4, #344	@ 0x158
 80029e6:	f7ff fa5f 	bl	8001ea8 <_ZN5astra9Animation4moveEPfff>
  Animation::move(&positionForeground.wBar, positionForeground.wBarTrg, astraConfig.tileAnimationSpeed);
 80029ea:	462a      	mov	r2, r5
 80029ec:	f8d4 114c 	ldr.w	r1, [r4, #332]	@ 0x14c
 80029f0:	f504 70a4 	add.w	r0, r4, #328	@ 0x148
 80029f4:	f7ff fa58 	bl	8001ea8 <_ZN5astra9Animation4moveEPfff>
  Animation::move(&positionForeground.yBar, positionForeground.yBarTrg, astraConfig.tileAnimationSpeed);
 80029f8:	462a      	mov	r2, r5
 80029fa:	f8d4 1154 	ldr.w	r1, [r4, #340]	@ 0x154
 80029fe:	f504 70a8 	add.w	r0, r4, #336	@ 0x150
 8002a02:	f7ff fa51 	bl	8001ea8 <_ZN5astra9Animation4moveEPfff>
}
 8002a06:	b005      	add	sp, #20
 8002a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (auto _iter : childMenu) {
 8002a0c:	f856 5b04 	ldr.w	r5, [r6], #4
	return *(this->_M_impl._M_start + __n);
 8002a10:	f8d7 9000 	ldr.w	r9, [r7]
    HAL::drawBMP(_iter->position.x + _camera[0],
 8002a14:	f8d5 00e8 	ldr.w	r0, [r5, #232]	@ 0xe8
 8002a18:	f8d9 1000 	ldr.w	r1, [r9]
 8002a1c:	f7fd ff8e 	bl	800093c <__addsf3>
 8002a20:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8002a24:	4680      	mov	r8, r0
 8002a26:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8002a28:	f7fd ff88 	bl	800093c <__addsf3>
 8002a2c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
      { return _M_data_ptr(this->_M_impl._M_start); }
 8002a2e:	f8d5 1110 	ldr.w	r1, [r5, #272]	@ 0x110
 8002a32:	f8d4 b060 	ldr.w	fp, [r4, #96]	@ 0x60
 8002a36:	4681      	mov	r9, r0
 8002a38:	9303      	str	r3, [sp, #12]
 8002a3a:	9102      	str	r1, [sp, #8]
    get()->_drawBMP(_x,
 8002a3c:	f002 f858 	bl	8004af0 <_ZN3HAL3getEv>
 8002a40:	9902      	ldr	r1, [sp, #8]
 8002a42:	6802      	ldr	r2, [r0, #0]
 8002a44:	9101      	str	r1, [sp, #4]
 8002a46:	f8cd b000 	str.w	fp, [sp]
 8002a4a:	4641      	mov	r1, r8
 8002a4c:	f8d2 b050 	ldr.w	fp, [r2, #80]	@ 0x50
 8002a50:	9b03      	ldr	r3, [sp, #12]
 8002a52:	464a      	mov	r2, r9
 8002a54:	47d8      	blx	fp
    Animation::move(&_iter->position.x,
 8002a56:	68e2      	ldr	r2, [r4, #12]
 8002a58:	f8d5 10ec 	ldr.w	r1, [r5, #236]	@ 0xec
 8002a5c:	f105 00e8 	add.w	r0, r5, #232	@ 0xe8
 8002a60:	f7ff fa22 	bl	8001ea8 <_ZN5astra9Animation4moveEPfff>
	return *this;
 8002a64:	e68d      	b.n	8002782 <_ZN5astra4Tile6renderERKSt6vectorIfSaIfEE+0x1a>
 8002a66:	bf00      	nop
 8002a68:	41100000 	.word	0x41100000
 8002a6c:	40a00000 	.word	0x40a00000

08002a70 <_ZN5astra4List6renderERKSt6vectorIfSaIfEE>:
void List::render(const std::vector<float> &_camera) {
 8002a70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a74:	4604      	mov	r4, r0
  Item::updateConfig();
 8002a76:	3004      	adds	r0, #4
void List::render(const std::vector<float> &_camera) {
 8002a78:	460e      	mov	r6, r1
  Item::updateConfig();
 8002a7a:	f7ff fe07 	bl	800268c <_ZN5astra4Item12updateConfigEv>
  HAL::setDrawType(1);
 8002a7e:	2001      	movs	r0, #1
 8002a80:	f7fe fad7 	bl	8001032 <_ZN3HAL11setDrawTypeEh>
      : _M_current(__i) { }
 8002a84:	f8d4 3130 	ldr.w	r3, [r4, #304]	@ 0x130
 8002a88:	f8d4 812c 	ldr.w	r8, [r4, #300]	@ 0x12c
 8002a8c:	9300      	str	r3, [sp, #0]
  for (auto _iter : childMenu) {
 8002a8e:	9b00      	ldr	r3, [sp, #0]
 8002a90:	4543      	cmp	r3, r8
 8002a92:	f040 8087 	bne.w	8002ba4 <_ZN5astra4List6renderERKSt6vectorIfSaIfEE+0x134>
  positionForeground.hBarTrg = (selectIndex + 1) * ((float) systemConfig.screenHeight / getItemNum());
 8002a96:	7960      	ldrb	r0, [r4, #5]
 8002a98:	f7fe f800 	bl	8000a9c <__aeabi_ui2f>
 8002a9c:	4605      	mov	r5, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002a9e:	e9d4 304b 	ldrd	r3, r0, [r4, #300]	@ 0x12c
 8002aa2:	1ac0      	subs	r0, r0, r3
 8002aa4:	f3c0 0087 	ubfx	r0, r0, #2, #8
 8002aa8:	f7fd fffc 	bl	8000aa4 <__aeabi_i2f>
 8002aac:	4601      	mov	r1, r0
 8002aae:	4628      	mov	r0, r5
 8002ab0:	f7fe f900 	bl	8000cb4 <__aeabi_fdiv>
 8002ab4:	4605      	mov	r5, r0
 8002ab6:	f894 0144 	ldrb.w	r0, [r4, #324]	@ 0x144
 8002aba:	3001      	adds	r0, #1
 8002abc:	f7fd fff2 	bl	8000aa4 <__aeabi_i2f>
 8002ac0:	4601      	mov	r1, r0
 8002ac2:	4628      	mov	r0, r5
 8002ac4:	f7fe f842 	bl	8000b4c <__aeabi_fmul>
  HAL::drawHLine(systemConfig.screenWeight - astraConfig.listBarWeight, 0, astraConfig.listBarWeight);
 8002ac8:	6c25      	ldr	r5, [r4, #64]	@ 0x40
  positionForeground.hBarTrg = (selectIndex + 1) * ((float) systemConfig.screenHeight / getItemNum());
 8002aca:	f8c4 014c 	str.w	r0, [r4, #332]	@ 0x14c
  HAL::drawHLine(systemConfig.screenWeight - astraConfig.listBarWeight, 0, astraConfig.listBarWeight);
 8002ace:	7920      	ldrb	r0, [r4, #4]
 8002ad0:	f7fd ffe8 	bl	8000aa4 <__aeabi_i2f>
 8002ad4:	4629      	mov	r1, r5
 8002ad6:	f7fd ff2f 	bl	8000938 <__aeabi_fsub>
 8002ada:	462a      	mov	r2, r5
 8002adc:	2100      	movs	r1, #0
 8002ade:	f7fe fad2 	bl	8001086 <_ZN3HAL9drawHLineEfff>
                 systemConfig.screenHeight - 1,
 8002ae2:	7960      	ldrb	r0, [r4, #5]
  HAL::drawHLine(systemConfig.screenWeight - astraConfig.listBarWeight,
 8002ae4:	6c26      	ldr	r6, [r4, #64]	@ 0x40
 8002ae6:	3801      	subs	r0, #1
 8002ae8:	f7fd ffdc 	bl	8000aa4 <__aeabi_i2f>
 8002aec:	4605      	mov	r5, r0
 8002aee:	7920      	ldrb	r0, [r4, #4]
 8002af0:	f7fd ffd8 	bl	8000aa4 <__aeabi_i2f>
 8002af4:	4631      	mov	r1, r6
 8002af6:	f7fd ff1f 	bl	8000938 <__aeabi_fsub>
 8002afa:	4632      	mov	r2, r6
 8002afc:	4629      	mov	r1, r5
 8002afe:	f7fe fac2 	bl	8001086 <_ZN3HAL9drawHLineEfff>
  HAL::drawVLine(systemConfig.screenWeight - ceil((float) astraConfig.listBarWeight / 2.0f),
 8002b02:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002b06:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8002b08:	f7fe f820 	bl	8000b4c <__aeabi_fmul>
 8002b0c:	f7fd fdc0 	bl	8000690 <__aeabi_f2d>
 8002b10:	f005 fcea 	bl	80084e8 <ceil>
 8002b14:	4606      	mov	r6, r0
 8002b16:	460f      	mov	r7, r1
 8002b18:	7920      	ldrb	r0, [r4, #4]
 8002b1a:	f7fd fda7 	bl	800066c <__aeabi_i2d>
 8002b1e:	4632      	mov	r2, r6
 8002b20:	463b      	mov	r3, r7
 8002b22:	f7fd fc55 	bl	80003d0 <__aeabi_dsub>
 8002b26:	f7fd feb3 	bl	8000890 <__aeabi_d2f>
 8002b2a:	4605      	mov	r5, r0
 8002b2c:	7960      	ldrb	r0, [r4, #5]
 8002b2e:	f7fd ffb5 	bl	8000a9c <__aeabi_ui2f>
 8002b32:	4606      	mov	r6, r0
  static void drawVLine(float _x, float _y, float _h) { get()->_drawVLine(_x, _y, _h); }
 8002b34:	f001 ffdc 	bl	8004af0 <_ZN3HAL3getEv>
 8002b38:	6803      	ldr	r3, [r0, #0]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	4629      	mov	r1, r5
 8002b3e:	6c9f      	ldr	r7, [r3, #72]	@ 0x48
 8002b40:	4633      	mov	r3, r6
 8002b42:	47b8      	blx	r7
  HAL::drawBox(positionForeground.xBar, 0, astraConfig.listBarWeight, positionForeground.hBar);
 8002b44:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
 8002b48:	2100      	movs	r1, #0
 8002b4a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002b4c:	f8d4 0150 	ldr.w	r0, [r4, #336]	@ 0x150
 8002b50:	f7ff fd8c 	bl	800266c <_ZN3HAL7drawBoxEffff>
  if (astraConfig.lightMode) {
 8002b54:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8002b58:	b193      	cbz	r3, 8002b80 <_ZN5astra4List6renderERKSt6vectorIfSaIfEE+0x110>
    HAL::setDrawType(2);
 8002b5a:	2002      	movs	r0, #2
 8002b5c:	f7fe fa69 	bl	8001032 <_ZN3HAL11setDrawTypeEh>
    HAL::drawBox(0, 0, systemConfig.screenWeight, systemConfig.screenHeight);
 8002b60:	7960      	ldrb	r0, [r4, #5]
 8002b62:	f7fd ff9b 	bl	8000a9c <__aeabi_ui2f>
 8002b66:	4605      	mov	r5, r0
 8002b68:	7920      	ldrb	r0, [r4, #4]
 8002b6a:	f7fd ff97 	bl	8000a9c <__aeabi_ui2f>
 8002b6e:	2100      	movs	r1, #0
 8002b70:	4602      	mov	r2, r0
 8002b72:	462b      	mov	r3, r5
 8002b74:	4608      	mov	r0, r1
 8002b76:	f7ff fd79 	bl	800266c <_ZN3HAL7drawBoxEffff>
    HAL::setDrawType(1);
 8002b7a:	2001      	movs	r0, #1
 8002b7c:	f7fe fa59 	bl	8001032 <_ZN3HAL11setDrawTypeEh>
  Animation::move(&positionForeground.hBar, positionForeground.hBarTrg, astraConfig.listAnimationSpeed);
 8002b80:	6925      	ldr	r5, [r4, #16]
 8002b82:	f8d4 114c 	ldr.w	r1, [r4, #332]	@ 0x14c
 8002b86:	462a      	mov	r2, r5
 8002b88:	f504 70a4 	add.w	r0, r4, #328	@ 0x148
 8002b8c:	f7ff f98c 	bl	8001ea8 <_ZN5astra9Animation4moveEPfff>
  Animation::move(&positionForeground.xBar, positionForeground.xBarTrg, astraConfig.listAnimationSpeed);
 8002b90:	462a      	mov	r2, r5
 8002b92:	f8d4 1154 	ldr.w	r1, [r4, #340]	@ 0x154
 8002b96:	f504 70a8 	add.w	r0, r4, #336	@ 0x150
 8002b9a:	f7ff f985 	bl	8001ea8 <_ZN5astra9Animation4moveEPfff>
}
 8002b9e:	b003      	add	sp, #12
 8002ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (auto _iter : childMenu) {
 8002ba4:	f858 5b04 	ldr.w	r5, [r8], #4
 8002ba8:	e9d5 794e 	ldrd	r7, r9, [r5, #312]	@ 0x138
    if (!_iter->childWidget.empty()) {
 8002bac:	45b9      	cmp	r9, r7
 8002bae:	d142      	bne.n	8002c36 <_ZN5astra4List6renderERKSt6vectorIfSaIfEE+0x1c6>
	return *(this->_M_impl._M_start + __n);
 8002bb0:	f8d6 9000 	ldr.w	r9, [r6]
    HAL::drawChinese(_iter->position.x + _camera[0],
 8002bb4:	f8d5 00e8 	ldr.w	r0, [r5, #232]	@ 0xe8
 8002bb8:	f8d9 1000 	ldr.w	r1, [r9]
 8002bbc:	f7fd febe 	bl	800093c <__addsf3>
                     _iter->position.y + astraConfig.listTextHeight +
 8002bc0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
    HAL::drawChinese(_iter->position.x + _camera[0],
 8002bc2:	4607      	mov	r7, r0
                     _iter->position.y + astraConfig.listTextHeight +
 8002bc4:	f8d5 00f0 	ldr.w	r0, [r5, #240]	@ 0xf0
 8002bc8:	f7fd feb8 	bl	800093c <__addsf3>
 8002bcc:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8002bce:	f7fd feb5 	bl	800093c <__addsf3>
    HAL::drawChinese(_iter->position.x + _camera[0],
 8002bd2:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8002bd6:	f7fd feb1 	bl	800093c <__addsf3>
 8002bda:	4681      	mov	r9, r0
  static void drawChinese(float _x, float _y, const std::string &_text) { get()->_drawChinese(_x, _y, _text); }
 8002bdc:	f001 ff88 	bl	8004af0 <_ZN3HAL3getEv>
 8002be0:	6803      	ldr	r3, [r0, #0]
 8002be2:	464a      	mov	r2, r9
 8002be4:	4639      	mov	r1, r7
 8002be6:	f8d3 a03c 	ldr.w	sl, [r3, #60]	@ 0x3c
 8002bea:	f105 03f8 	add.w	r3, r5, #248	@ 0xf8
 8002bee:	47d0      	blx	sl
    Animation::move(&_iter->position.y, _iter->position.yTrg, astraConfig.listAnimationSpeed);
 8002bf0:	6922      	ldr	r2, [r4, #16]
 8002bf2:	f8d5 10f4 	ldr.w	r1, [r5, #244]	@ 0xf4
 8002bf6:	f105 00f0 	add.w	r0, r5, #240	@ 0xf0
 8002bfa:	f7ff f955 	bl	8001ea8 <_ZN5astra9Animation4moveEPfff>
	return *this;
 8002bfe:	e746      	b.n	8002a8e <_ZN5astra4List6renderERKSt6vectorIfSaIfEE+0x1e>
        _widget->renderIndicator(
 8002c00:	f8d4 10cc 	ldr.w	r1, [r4, #204]	@ 0xcc
 8002c04:	f7fd fe9a 	bl	800093c <__addsf3>
 8002c08:	9001      	str	r0, [sp, #4]
            systemConfig.screenWeight - astraConfig.checkBoxRightMargin - astraConfig.checkBoxWidth,
 8002c0a:	7920      	ldrb	r0, [r4, #4]
 8002c0c:	f7fd ff4a 	bl	8000aa4 <__aeabi_i2f>
 8002c10:	f8d4 10d0 	ldr.w	r1, [r4, #208]	@ 0xd0
 8002c14:	f7fd fe90 	bl	8000938 <__aeabi_fsub>
        _widget->renderIndicator(
 8002c18:	f8d4 10c4 	ldr.w	r1, [r4, #196]	@ 0xc4
 8002c1c:	f7fd fe8c 	bl	8000938 <__aeabi_fsub>
      for (auto _widget : _iter->childWidget) {
 8002c20:	f857 ab04 	ldr.w	sl, [r7], #4
        _widget->renderIndicator(
 8002c24:	4601      	mov	r1, r0
 8002c26:	f8da 3000 	ldr.w	r3, [sl]
 8002c2a:	4650      	mov	r0, sl
 8002c2c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8002c30:	9a01      	ldr	r2, [sp, #4]
 8002c32:	4633      	mov	r3, r6
 8002c34:	47d8      	blx	fp
      for (auto _widget : _iter->childWidget) {
 8002c36:	454f      	cmp	r7, r9
            _iter->position.y + astraConfig.checkBoxTopMargin,
 8002c38:	f8d5 00f0 	ldr.w	r0, [r5, #240]	@ 0xf0
      for (auto _widget : _iter->childWidget) {
 8002c3c:	d1e0      	bne.n	8002c00 <_ZN5astra4List6renderERKSt6vectorIfSaIfEE+0x190>
 8002c3e:	e7b7      	b.n	8002bb0 <_ZN5astra4List6renderERKSt6vectorIfSaIfEE+0x140>

08002c40 <_ZNK5astra4Menu10getItemNumEv>:
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002c40:	f8d0 3130 	ldr.w	r3, [r0, #304]	@ 0x130
 8002c44:	f8d0 012c 	ldr.w	r0, [r0, #300]	@ 0x12c
 8002c48:	1a18      	subs	r0, r3, r0
unsigned char Menu::getItemNum() const { return childMenu.size(); }
 8002c4a:	f3c0 0087 	ubfx	r0, r0, #2, #8
 8002c4e:	4770      	bx	lr

08002c50 <_ZNK5astra4Menu11getNextMenuEv>:
Menu *Menu::getNextMenu() const { return childMenu[selectIndex]; }
 8002c50:	f890 2144 	ldrb.w	r2, [r0, #324]	@ 0x144
 8002c54:	f8d0 312c 	ldr.w	r3, [r0, #300]	@ 0x12c
 8002c58:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002c5c:	4770      	bx	lr

08002c5e <_ZNK5astra4Menu10getPreviewEv>:
Menu *Menu::getPreview() const { return parent; }
 8002c5e:	f8d0 0128 	ldr.w	r0, [r0, #296]	@ 0x128
 8002c62:	4770      	bx	lr

08002c64 <_ZN5astra4Menu6deInitEv>:
void Menu::deInit() {
 8002c64:	b508      	push	{r3, lr}
  Animation::exit();
 8002c66:	f7ff fd23 	bl	80026b0 <_ZN5astra9Animation4exitEv>
}
 8002c6a:	bd08      	pop	{r3, pc}

08002c6c <_ZN5astra4MenuC1Ev>:
  Menu() = default;
 8002c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
struct config {
 8002c6e:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8002c72:	8083      	strh	r3, [r0, #4]
 8002c74:	4b49      	ldr	r3, [pc, #292]	@ (8002d9c <_ZN5astra4MenuC1Ev+0x130>)

namespace astra {
/**
 * @brief config of astra ui. astra ui的配置结构体
 */
struct config {
 8002c76:	4a4a      	ldr	r2, [pc, #296]	@ (8002da0 <_ZN5astra4MenuC1Ev+0x134>)
 8002c78:	6083      	str	r3, [r0, #8]
 8002c7a:	4b4a      	ldr	r3, [pc, #296]	@ (8002da4 <_ZN5astra4MenuC1Ev+0x138>)
 8002c7c:	6142      	str	r2, [r0, #20]
 8002c7e:	60c3      	str	r3, [r0, #12]
 8002c80:	6103      	str	r3, [r0, #16]
 8002c82:	6183      	str	r3, [r0, #24]
 8002c84:	61c3      	str	r3, [r0, #28]
 8002c86:	6343      	str	r3, [r0, #52]	@ 0x34
 8002c88:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 8002c8c:	4a46      	ldr	r2, [pc, #280]	@ (8002da8 <_ZN5astra4MenuC1Ev+0x13c>)
 8002c8e:	4604      	mov	r4, r0
 8002c90:	6202      	str	r2, [r0, #32]
 8002c92:	4a46      	ldr	r2, [pc, #280]	@ (8002dac <_ZN5astra4MenuC1Ev+0x140>)
 8002c94:	2500      	movs	r5, #0
 8002c96:	6242      	str	r2, [r0, #36]	@ 0x24
 8002c98:	4a45      	ldr	r2, [pc, #276]	@ (8002db0 <_ZN5astra4MenuC1Ev+0x144>)
 8002c9a:	6383      	str	r3, [r0, #56]	@ 0x38
 8002c9c:	6282      	str	r2, [r0, #40]	@ 0x28
 8002c9e:	4a45      	ldr	r2, [pc, #276]	@ (8002db4 <_ZN5astra4MenuC1Ev+0x148>)
 8002ca0:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8002ca4:	62c2      	str	r2, [r0, #44]	@ 0x2c
 8002ca6:	4a44      	ldr	r2, [pc, #272]	@ (8002db8 <_ZN5astra4MenuC1Ev+0x14c>)
 8002ca8:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8002cac:	6302      	str	r2, [r0, #48]	@ 0x30
 8002cae:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8002cb2:	4e42      	ldr	r6, [pc, #264]	@ (8002dbc <_ZN5astra4MenuC1Ev+0x150>)
 8002cb4:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
 8002cb8:	6406      	str	r6, [r0, #64]	@ 0x40
 8002cba:	6443      	str	r3, [r0, #68]	@ 0x44
 8002cbc:	6481      	str	r1, [r0, #72]	@ 0x48
 8002cbe:	f04f 4083 	mov.w	r0, #1098907648	@ 0x41800000
 8002cc2:	6522      	str	r2, [r4, #80]	@ 0x50
 8002cc4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002cc8:	4f3d      	ldr	r7, [pc, #244]	@ (8002dc0 <_ZN5astra4MenuC1Ev+0x154>)
 8002cca:	64e0      	str	r0, [r4, #76]	@ 0x4c
 8002ccc:	65e7      	str	r7, [r4, #92]	@ 0x5c
 8002cce:	6627      	str	r7, [r4, #96]	@ 0x60
 8002cd0:	4f3c      	ldr	r7, [pc, #240]	@ (8002dc4 <_ZN5astra4MenuC1Ev+0x158>)
 8002cd2:	6561      	str	r1, [r4, #84]	@ 0x54
 8002cd4:	66e7      	str	r7, [r4, #108]	@ 0x6c
 8002cd6:	4f3c      	ldr	r7, [pc, #240]	@ (8002dc8 <_ZN5astra4MenuC1Ev+0x15c>)
 8002cd8:	65a2      	str	r2, [r4, #88]	@ 0x58
 8002cda:	6767      	str	r7, [r4, #116]	@ 0x74
 8002cdc:	4f3b      	ldr	r7, [pc, #236]	@ (8002dcc <_ZN5astra4MenuC1Ev+0x160>)
 8002cde:	6663      	str	r3, [r4, #100]	@ 0x64
 8002ce0:	66a3      	str	r3, [r4, #104]	@ 0x68
 8002ce2:	6721      	str	r1, [r4, #112]	@ 0x70
 8002ce4:	67a3      	str	r3, [r4, #120]	@ 0x78
 8002ce6:	67e7      	str	r7, [r4, #124]	@ 0x7c
 8002ce8:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
 8002cec:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 8002cf0:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
 8002cf4:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8002cf8:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
 8002cfc:	4b34      	ldr	r3, [pc, #208]	@ (8002dd0 <_ZN5astra4MenuC1Ev+0x164>)
 8002cfe:	f8c4 20a0 	str.w	r2, [r4, #160]	@ 0xa0
 8002d02:	f8c4 20a8 	str.w	r2, [r4, #168]	@ 0xa8
 8002d06:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
 8002d0a:	4a32      	ldr	r2, [pc, #200]	@ (8002dd4 <_ZN5astra4MenuC1Ev+0x168>)
 8002d0c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002d10:	f8c4 20ac 	str.w	r2, [r4, #172]	@ 0xac
 8002d14:	2210      	movs	r2, #16
 8002d16:	f8c4 0098 	str.w	r0, [r4, #152]	@ 0x98
 8002d1a:	482f      	ldr	r0, [pc, #188]	@ (8002dd8 <_ZN5astra4MenuC1Ev+0x16c>)
 8002d1c:	f8c4 6084 	str.w	r6, [r4, #132]	@ 0x84
 8002d20:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
 8002d24:	4e2d      	ldr	r6, [pc, #180]	@ (8002ddc <_ZN5astra4MenuC1Ev+0x170>)
 8002d26:	482e      	ldr	r0, [pc, #184]	@ (8002de0 <_ZN5astra4MenuC1Ev+0x174>)
 8002d28:	f8c4 6088 	str.w	r6, [r4, #136]	@ 0x88
 8002d2c:	f8c4 00b8 	str.w	r0, [r4, #184]	@ 0xb8
 8002d30:	4e2c      	ldr	r6, [pc, #176]	@ (8002de4 <_ZN5astra4MenuC1Ev+0x178>)
 8002d32:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
 8002d36:	482c      	ldr	r0, [pc, #176]	@ (8002de8 <_ZN5astra4MenuC1Ev+0x17c>)
 8002d38:	4b2c      	ldr	r3, [pc, #176]	@ (8002dec <_ZN5astra4MenuC1Ev+0x180>)
 8002d3a:	e9c4 002f 	strd	r0, r0, [r4, #188]	@ 0xbc
 8002d3e:	f8c4 109c 	str.w	r1, [r4, #156]	@ 0x9c
 8002d42:	f8c4 10cc 	str.w	r1, [r4, #204]	@ 0xcc
 8002d46:	6023      	str	r3, [r4, #0]
 8002d48:	4629      	mov	r1, r5
	: _M_start(), _M_finish(), _M_end_of_storage()
 8002d4a:	e9c4 5536 	strd	r5, r5, [r4, #216]	@ 0xd8
 8002d4e:	f8c4 608c 	str.w	r6, [r4, #140]	@ 0x8c
 8002d52:	f8c4 6090 	str.w	r6, [r4, #144]	@ 0x90
 8002d56:	f884 20b4 	strb.w	r2, [r4, #180]	@ 0xb4
 8002d5a:	f8c4 50e0 	str.w	r5, [r4, #224]	@ 0xe0
 8002d5e:	f884 50e4 	strb.w	r5, [r4, #228]	@ 0xe4
 8002d62:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 8002d66:	f005 feca 	bl	8008afe <memset>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 8002d6a:	f504 7380 	add.w	r3, r4, #256	@ 0x100
 8002d6e:	f884 5100 	strb.w	r5, [r4, #256]	@ 0x100
 8002d72:	f8a4 5144 	strh.w	r5, [r4, #324]	@ 0x144
 8002d76:	4620      	mov	r0, r4
      { _M_string_length = __length; }
 8002d78:	e9c4 353e 	strd	r3, r5, [r4, #248]	@ 0xf8
 8002d7c:	e9c4 5544 	strd	r5, r5, [r4, #272]	@ 0x110
 8002d80:	e9c4 5546 	strd	r5, r5, [r4, #280]	@ 0x118
 8002d84:	e9c4 5548 	strd	r5, r5, [r4, #288]	@ 0x120
 8002d88:	e9c4 554a 	strd	r5, r5, [r4, #296]	@ 0x128
 8002d8c:	e9c4 554c 	strd	r5, r5, [r4, #304]	@ 0x130
 8002d90:	e9c4 554e 	strd	r5, r5, [r4, #312]	@ 0x138
 8002d94:	f8c4 5140 	str.w	r5, [r4, #320]	@ 0x140
 8002d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	437f0000 	.word	0x437f0000
 8002da0:	42700000 	.word	0x42700000
 8002da4:	428c0000 	.word	0x428c0000
 8002da8:	425c0000 	.word	0x425c0000
 8002dac:	41c80000 	.word	0x41c80000
 8002db0:	41700000 	.word	0x41700000
 8002db4:	42c80000 	.word	0x42c80000
 8002db8:	42a00000 	.word	0x42a00000
 8002dbc:	40a00000 	.word	0x40a00000
 8002dc0:	41f00000 	.word	0x41f00000
 8002dc4:	40c00000 	.word	0x40c00000
 8002dc8:	41900000 	.word	0x41900000
 8002dcc:	41400000 	.word	0x41400000
 8002dd0:	41200000 	.word	0x41200000
 8002dd4:	41600000 	.word	0x41600000
 8002dd8:	42b40000 	.word	0x42b40000
 8002ddc:	40400000 	.word	0x40400000
 8002de0:	08009fcc 	.word	0x08009fcc
 8002de4:	42100000 	.word	0x42100000
 8002de8:	0800a81f 	.word	0x0800a81f
 8002dec:	08009cbc 	.word	0x08009cbc

08002df0 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8002df0:	b530      	push	{r4, r5, lr}
	  _M_finish = __x._M_finish;
 8002df2:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_end_of_storage = __x._M_end_of_storage;
 8002df6:	6883      	ldr	r3, [r0, #8]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8002df8:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 8002dfa:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	680d      	ldr	r5, [r1, #0]
	  _M_finish = __x._M_finish;
 8002e00:	e9cd 4201 	strd	r4, r2, [sp, #4]
	  _M_start = __x._M_start;
 8002e04:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 8002e06:	684d      	ldr	r5, [r1, #4]
 8002e08:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8002e0a:	688d      	ldr	r5, [r1, #8]
 8002e0c:	6085      	str	r5, [r0, #8]
	  _M_finish = __x._M_finish;
 8002e0e:	e9c1 3300 	strd	r3, r3, [r1]
	  _M_end_of_storage = __x._M_end_of_storage;
 8002e12:	608b      	str	r3, [r1, #8]
      }
 8002e14:	a801      	add	r0, sp, #4
 8002e16:	f7fe fedb 	bl	8001bd0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      }
 8002e1a:	b005      	add	sp, #20
 8002e1c:	bd30      	pop	{r4, r5, pc}

08002e1e <_ZNSt6vectorIPN5astra4MenuESaIS2_EE5clearEv>:
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8002e1e:	e9d0 3200 	ldrd	r3, r2, [r0]
 8002e22:	4293      	cmp	r3, r2
	    this->_M_impl._M_finish = __pos;
 8002e24:	bf18      	it	ne
 8002e26:	6043      	strne	r3, [r0, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8002e28:	4770      	bx	lr

08002e2a <_ZNSt6vectorIPN5astra6WidgetESaIS2_EE5clearEv>:
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8002e2a:	e9d0 3200 	ldrd	r3, r2, [r0]
 8002e2e:	4293      	cmp	r3, r2
	    this->_M_impl._M_finish = __pos;
 8002e30:	bf18      	it	ne
 8002e32:	6043      	strne	r3, [r0, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8002e34:	4770      	bx	lr
	...

08002e38 <_ZNSt6vectorIPN5astra4MenuESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8002e38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002e3c:	e9d0 8a00 	ldrd	r8, sl, [r0]
	if (max_size() - size() < __n)
 8002e40:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8002e44:	4693      	mov	fp, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002e46:	ebaa 0208 	sub.w	r2, sl, r8
	if (max_size() - size() < __n)
 8002e4a:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
 8002e4e:	4607      	mov	r7, r0
 8002e50:	4689      	mov	r9, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002e52:	ea4f 04a2 	mov.w	r4, r2, asr #2
	if (max_size() - size() < __n)
 8002e56:	d102      	bne.n	8002e5e <_ZNSt6vectorIPN5astra4MenuESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8002e58:	481e      	ldr	r0, [pc, #120]	@ (8002ed4 <_ZNSt6vectorIPN5astra4MenuESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x9c>)
 8002e5a:	f005 fa85 	bl	8008368 <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 8002e5e:	45c2      	cmp	sl, r8
 8002e60:	bf14      	ite	ne
 8002e62:	4622      	movne	r2, r4
 8002e64:	2201      	moveq	r2, #1
 8002e66:	18a4      	adds	r4, r4, r2
    { return __lhs.base() - __rhs.base(); }
 8002e68:	eba1 0508 	sub.w	r5, r1, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8002e6c:	d22e      	bcs.n	8002ecc <_ZNSt6vectorIPN5astra4MenuESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x94>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002e6e:	b37c      	cbz	r4, 8002ed0 <_ZNSt6vectorIPN5astra4MenuESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x98>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8002e70:	429c      	cmp	r4, r3
 8002e72:	bf28      	it	cs
 8002e74:	461c      	movcs	r4, r3
 8002e76:	00a0      	lsls	r0, r4, #2
 8002e78:	f003 fd98 	bl	80069ac <_Znwj>
 8002e7c:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002e7e:	f8db 3000 	ldr.w	r3, [fp]
      if (__count > 0)
 8002e82:	2d00      	cmp	r5, #0
 8002e84:	5173      	str	r3, [r6, r5]
 8002e86:	dd04      	ble.n	8002e92 <_ZNSt6vectorIPN5astra4MenuESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x5a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8002e88:	462a      	mov	r2, r5
 8002e8a:	4641      	mov	r1, r8
 8002e8c:	4630      	mov	r0, r6
 8002e8e:	f005 fe1c 	bl	8008aca <memmove>
      ptrdiff_t __count = __last - __first;
 8002e92:	ebaa 0a09 	sub.w	sl, sl, r9
	      ++__new_finish;
 8002e96:	3504      	adds	r5, #4
      if (__count > 0)
 8002e98:	f1ba 0f00 	cmp.w	sl, #0
 8002e9c:	4435      	add	r5, r6
 8002e9e:	dd04      	ble.n	8002eaa <_ZNSt6vectorIPN5astra4MenuESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x72>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8002ea0:	4652      	mov	r2, sl
 8002ea2:	4649      	mov	r1, r9
 8002ea4:	4628      	mov	r0, r5
 8002ea6:	f005 fef8 	bl	8008c9a <memcpy>
      return __result + __count;
 8002eaa:	4455      	add	r5, sl
	if (__p)
 8002eac:	f1b8 0f00 	cmp.w	r8, #0
 8002eb0:	d005      	beq.n	8002ebe <_ZNSt6vectorIPN5astra4MenuESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x86>
		    this->_M_impl._M_end_of_storage - __old_start);
 8002eb2:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8002eb4:	4640      	mov	r0, r8
 8002eb6:	eba1 0108 	sub.w	r1, r1, r8
 8002eba:	f004 ff25 	bl	8007d08 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8002ebe:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8002ec2:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8002ec6:	60be      	str	r6, [r7, #8]
    }
 8002ec8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8002ecc:	461c      	mov	r4, r3
 8002ece:	e7d2      	b.n	8002e76 <_ZNSt6vectorIPN5astra4MenuESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002ed0:	4626      	mov	r6, r4
 8002ed2:	e7d4      	b.n	8002e7e <_ZNSt6vectorIPN5astra4MenuESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x46>
 8002ed4:	08009b0c 	.word	0x08009b0c

08002ed8 <_ZN5astra4Menu7addItemEPS0_>:
bool Menu::addItem(Menu *_page) {
 8002ed8:	b513      	push	{r0, r1, r4, lr}
 8002eda:	4604      	mov	r4, r0
 8002edc:	9101      	str	r1, [sp, #4]
  if (_page == nullptr) return false;
 8002ede:	4608      	mov	r0, r1
 8002ee0:	b191      	cbz	r1, 8002f08 <_ZN5astra4Menu7addItemEPS0_+0x30>
  if (!_page->childWidget.empty()) return false;
 8002ee2:	e9d1 234e 	ldrd	r2, r3, [r1, #312]	@ 0x138
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d116      	bne.n	8002f18 <_ZN5astra4Menu7addItemEPS0_+0x40>
    _page->parent = this;
 8002eea:	f8c1 4128 	str.w	r4, [r1, #296]	@ 0x128
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8002eee:	e9d4 134c 	ldrd	r1, r3, [r4, #304]	@ 0x130
 8002ef2:	4299      	cmp	r1, r3
 8002ef4:	d00a      	beq.n	8002f0c <_ZN5astra4Menu7addItemEPS0_+0x34>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002ef6:	f841 0b04 	str.w	r0, [r1], #4
	    ++this->_M_impl._M_finish;
 8002efa:	f8c4 1130 	str.w	r1, [r4, #304]	@ 0x130
    this->forePosInit();
 8002efe:	6823      	ldr	r3, [r4, #0]
 8002f00:	4620      	mov	r0, r4
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	4798      	blx	r3
    return true;
 8002f06:	2001      	movs	r0, #1
}
 8002f08:	b002      	add	sp, #8
 8002f0a:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), __x);
 8002f0c:	aa01      	add	r2, sp, #4
 8002f0e:	f504 7096 	add.w	r0, r4, #300	@ 0x12c
 8002f12:	f7ff ff91 	bl	8002e38 <_ZNSt6vectorIPN5astra4MenuESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
 8002f16:	e7f2      	b.n	8002efe <_ZN5astra4Menu7addItemEPS0_+0x26>
  if (_page == nullptr) return false;
 8002f18:	2000      	movs	r0, #0
 8002f1a:	e7f5      	b.n	8002f08 <_ZN5astra4Menu7addItemEPS0_+0x30>

08002f1c <_ZNSt6vectorIPN5astra6WidgetESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8002f1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002f20:	e9d0 8a00 	ldrd	r8, sl, [r0]
	if (max_size() - size() < __n)
 8002f24:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8002f28:	4693      	mov	fp, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002f2a:	ebaa 0208 	sub.w	r2, sl, r8
	if (max_size() - size() < __n)
 8002f2e:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
 8002f32:	4607      	mov	r7, r0
 8002f34:	4689      	mov	r9, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002f36:	ea4f 04a2 	mov.w	r4, r2, asr #2
	if (max_size() - size() < __n)
 8002f3a:	d102      	bne.n	8002f42 <_ZNSt6vectorIPN5astra6WidgetESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8002f3c:	481e      	ldr	r0, [pc, #120]	@ (8002fb8 <_ZNSt6vectorIPN5astra6WidgetESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x9c>)
 8002f3e:	f005 fa13 	bl	8008368 <_ZSt20__throw_length_errorPKc>
 8002f42:	45c2      	cmp	sl, r8
 8002f44:	bf14      	ite	ne
 8002f46:	4622      	movne	r2, r4
 8002f48:	2201      	moveq	r2, #1
 8002f4a:	18a4      	adds	r4, r4, r2
 8002f4c:	eba1 0508 	sub.w	r5, r1, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8002f50:	d22e      	bcs.n	8002fb0 <_ZNSt6vectorIPN5astra6WidgetESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x94>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002f52:	b37c      	cbz	r4, 8002fb4 <_ZNSt6vectorIPN5astra6WidgetESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x98>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8002f54:	429c      	cmp	r4, r3
 8002f56:	bf28      	it	cs
 8002f58:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8002f5a:	00a0      	lsls	r0, r4, #2
 8002f5c:	f003 fd26 	bl	80069ac <_Znwj>
 8002f60:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002f62:	f8db 3000 	ldr.w	r3, [fp]
      if (__count > 0)
 8002f66:	2d00      	cmp	r5, #0
 8002f68:	5173      	str	r3, [r6, r5]
 8002f6a:	dd04      	ble.n	8002f76 <_ZNSt6vectorIPN5astra6WidgetESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x5a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8002f6c:	462a      	mov	r2, r5
 8002f6e:	4641      	mov	r1, r8
 8002f70:	4630      	mov	r0, r6
 8002f72:	f005 fdaa 	bl	8008aca <memmove>
      ptrdiff_t __count = __last - __first;
 8002f76:	ebaa 0a09 	sub.w	sl, sl, r9
	      ++__new_finish;
 8002f7a:	3504      	adds	r5, #4
      if (__count > 0)
 8002f7c:	f1ba 0f00 	cmp.w	sl, #0
 8002f80:	4435      	add	r5, r6
 8002f82:	dd04      	ble.n	8002f8e <_ZNSt6vectorIPN5astra6WidgetESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x72>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8002f84:	4652      	mov	r2, sl
 8002f86:	4649      	mov	r1, r9
 8002f88:	4628      	mov	r0, r5
 8002f8a:	f005 fe86 	bl	8008c9a <memcpy>
      return __result + __count;
 8002f8e:	4455      	add	r5, sl
	if (__p)
 8002f90:	f1b8 0f00 	cmp.w	r8, #0
 8002f94:	d005      	beq.n	8002fa2 <_ZNSt6vectorIPN5astra6WidgetESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x86>
		    this->_M_impl._M_end_of_storage - __old_start);
 8002f96:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8002f98:	4640      	mov	r0, r8
 8002f9a:	eba1 0108 	sub.w	r1, r1, r8
 8002f9e:	f004 feb3 	bl	8007d08 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8002fa2:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8002fa6:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8002faa:	60be      	str	r6, [r7, #8]
    }
 8002fac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8002fb0:	461c      	mov	r4, r3
 8002fb2:	e7d2      	b.n	8002f5a <_ZNSt6vectorIPN5astra6WidgetESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002fb4:	4626      	mov	r6, r4
 8002fb6:	e7d4      	b.n	8002f62 <_ZNSt6vectorIPN5astra6WidgetESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x46>
 8002fb8:	08009b0c 	.word	0x08009b0c

08002fbc <_ZN5astra4Menu7addItemEPS0_PNS_6WidgetE>:
bool Menu::addItem(Menu *_page, Widget *_anyWidget) {
 8002fbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002fbe:	460d      	mov	r5, r1
  if (_anyWidget == nullptr) return false;
 8002fc0:	4614      	mov	r4, r2
bool Menu::addItem(Menu *_page, Widget *_anyWidget) {
 8002fc2:	9201      	str	r2, [sp, #4]
  if (_anyWidget == nullptr) return false;
 8002fc4:	b91a      	cbnz	r2, 8002fce <_ZN5astra4Menu7addItemEPS0_PNS_6WidgetE+0x12>
 8002fc6:	2600      	movs	r6, #0
}
 8002fc8:	4630      	mov	r0, r6
 8002fca:	b002      	add	sp, #8
 8002fcc:	bd70      	pop	{r4, r5, r6, pc}
  if (this->addItem(_page)) {
 8002fce:	f7ff ff83 	bl	8002ed8 <_ZN5astra4Menu7addItemEPS0_>
 8002fd2:	4606      	mov	r6, r0
 8002fd4:	2800      	cmp	r0, #0
 8002fd6:	d0f6      	beq.n	8002fc6 <_ZN5astra4Menu7addItemEPS0_PNS_6WidgetE+0xa>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8002fd8:	e9d5 134f 	ldrd	r1, r3, [r5, #316]	@ 0x13c
 8002fdc:	4299      	cmp	r1, r3
 8002fde:	d00a      	beq.n	8002ff6 <_ZN5astra4Menu7addItemEPS0_PNS_6WidgetE+0x3a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002fe0:	f841 4b04 	str.w	r4, [r1], #4
	    ++this->_M_impl._M_finish;
 8002fe4:	f8c5 113c 	str.w	r1, [r5, #316]	@ 0x13c
    _anyWidget->init();
 8002fe8:	6823      	ldr	r3, [r4, #0]
    _anyWidget->parent = _page;
 8002fea:	f8c4 50d8 	str.w	r5, [r4, #216]	@ 0xd8
    _anyWidget->init();
 8002fee:	4620      	mov	r0, r4
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	4798      	blx	r3
    return true;
 8002ff4:	e7e8      	b.n	8002fc8 <_ZN5astra4Menu7addItemEPS0_PNS_6WidgetE+0xc>
	  _M_realloc_insert(end(), __x);
 8002ff6:	aa01      	add	r2, sp, #4
 8002ff8:	f505 709c 	add.w	r0, r5, #312	@ 0x138
 8002ffc:	f7ff ff8e 	bl	8002f1c <_ZNSt6vectorIPN5astra6WidgetESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
 8003000:	e7f2      	b.n	8002fe8 <_ZN5astra4Menu7addItemEPS0_PNS_6WidgetE+0x2c>

08003002 <_ZNSt6vectorIhSaIhEEaSERKS1_.isra.0>:
      if (std::__addressof(__x) != this)
 8003002:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
 8003004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003008:	4604      	mov	r4, r0
 800300a:	460d      	mov	r5, r1
      if (std::__addressof(__x) != this)
 800300c:	d01d      	beq.n	800304a <_ZNSt6vectorIhSaIhEEaSERKS1_.isra.0+0x48>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800300e:	e9d1 7800 	ldrd	r7, r8, [r1]
			 - this->_M_impl._M_start); }
 8003012:	6802      	ldr	r2, [r0, #0]
 8003014:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8003016:	eba8 0607 	sub.w	r6, r8, r7
			 - this->_M_impl._M_start); }
 800301a:	1a9b      	subs	r3, r3, r2
	  if (__xlen > capacity())
 800301c:	429e      	cmp	r6, r3
 800301e:	d916      	bls.n	800304e <_ZNSt6vectorIhSaIhEEaSERKS1_.isra.0+0x4c>
	  pointer __result = this->_M_allocate(__n);
 8003020:	4630      	mov	r0, r6
 8003022:	f7ff fac5 	bl	80025b0 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
			      _Category>::__copy_m(__first, __last, __result);
 8003026:	4641      	mov	r1, r8
 8003028:	4602      	mov	r2, r0
 800302a:	4605      	mov	r5, r0
 800302c:	4638      	mov	r0, r7
 800302e:	f7ff f847 	bl	80020c0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003032:	6820      	ldr	r0, [r4, #0]
	if (__p)
 8003034:	b118      	cbz	r0, 800303e <_ZNSt6vectorIhSaIhEEaSERKS1_.isra.0+0x3c>
			    - this->_M_impl._M_start);
 8003036:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8003038:	1a09      	subs	r1, r1, r0
 800303a:	f004 fe65 	bl	8007d08 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
 800303e:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8003040:	4435      	add	r5, r6
 8003042:	60a5      	str	r5, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8003044:	6823      	ldr	r3, [r4, #0]
 8003046:	4433      	add	r3, r6
 8003048:	6063      	str	r3, [r4, #4]
    }
 800304a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800304e:	6843      	ldr	r3, [r0, #4]
 8003050:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
 8003052:	429e      	cmp	r6, r3
 8003054:	d804      	bhi.n	8003060 <_ZNSt6vectorIhSaIhEEaSERKS1_.isra.0+0x5e>
 8003056:	4641      	mov	r1, r8
 8003058:	4638      	mov	r0, r7
 800305a:	f7ff f831 	bl	80020c0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
      return std::uninitialized_copy(__first, __last, __result);
 800305e:	e7f1      	b.n	8003044 <_ZNSt6vectorIhSaIhEEaSERKS1_.isra.0+0x42>
 8003060:	18f9      	adds	r1, r7, r3
 8003062:	4638      	mov	r0, r7
 8003064:	f7ff f82c 	bl	80020c0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8003068:	e9d4 0200 	ldrd	r0, r2, [r4]
 800306c:	e9d5 3100 	ldrd	r3, r1, [r5]
 8003070:	1a10      	subs	r0, r2, r0
 8003072:	4418      	add	r0, r3
 8003074:	e7f1      	b.n	800305a <_ZNSt6vectorIhSaIhEEaSERKS1_.isra.0+0x58>
	...

08003078 <_ZN5astra4ListC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIhSaIhEE>:
List::List(const std::string &_title, const std::vector<unsigned char> &_pic) {
 8003078:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800307c:	4604      	mov	r4, r0
 800307e:	2610      	movs	r6, #16
 8003080:	2500      	movs	r5, #0
 8003082:	b085      	sub	sp, #20
 8003084:	4688      	mov	r8, r1
 8003086:	4617      	mov	r7, r2
 8003088:	f7ff fdf0 	bl	8002c6c <_ZN5astra4MenuC1Ev>
 800308c:	4b25      	ldr	r3, [pc, #148]	@ (8003124 <_ZN5astra4ListC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIhSaIhEE+0xac>)
 800308e:	f504 79a4 	add.w	r9, r4, #328	@ 0x148
 8003092:	4632      	mov	r2, r6
 8003094:	6023      	str	r3, [r4, #0]
 8003096:	2100      	movs	r1, #0
 8003098:	4648      	mov	r0, r9
 800309a:	f005 fd30 	bl	8008afe <memset>
 800309e:	7960      	ldrb	r0, [r4, #5]
 80030a0:	f88d 5004 	strb.w	r5, [sp, #4]
 80030a4:	f7fd fcfe 	bl	8000aa4 <__aeabi_i2f>
 80030a8:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 80030aa:	f7fd fe03 	bl	8000cb4 <__aeabi_fdiv>
 80030ae:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80030b2:	f7fd fc41 	bl	8000938 <__aeabi_fsub>
 80030b6:	f7fd ff35 	bl	8000f24 <__aeabi_f2uiz>
 80030ba:	ab01      	add	r3, sp, #4
 80030bc:	9302      	str	r3, [sp, #8]
 80030be:	2302      	movs	r3, #2
 80030c0:	eb0d 0206 	add.w	r2, sp, r6
 80030c4:	9303      	str	r3, [sp, #12]
 80030c6:	e912 0006 	ldmdb	r2, {r1, r2}
 80030ca:	466b      	mov	r3, sp
 80030cc:	f88d 0005 	strb.w	r0, [sp, #5]
 80030d0:	f504 70ac 	add.w	r0, r4, #344	@ 0x158
 80030d4:	f7fe fd86 	bl	8001be4 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
	this->_M_assign(__str);
 80030d8:	4641      	mov	r1, r8
 80030da:	f104 00f8 	add.w	r0, r4, #248	@ 0xf8
 80030de:	f005 f9c8 	bl	8008472 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
  this->pic = _pic;
 80030e2:	4639      	mov	r1, r7
 80030e4:	f504 7088 	add.w	r0, r4, #272	@ 0x110
 80030e8:	f7ff ff8b 	bl	8003002 <_ZNSt6vectorIhSaIhEEaSERKS1_.isra.0>
  this->childMenu.clear();
 80030ec:	f504 7096 	add.w	r0, r4, #300	@ 0x12c
  this->selectIndex = 0;
 80030f0:	f884 5144 	strb.w	r5, [r4, #324]	@ 0x144
  this->parent = nullptr;
 80030f4:	f8c4 5128 	str.w	r5, [r4, #296]	@ 0x128
  this->childMenu.clear();
 80030f8:	f7ff fe91 	bl	8002e1e <_ZNSt6vectorIPN5astra4MenuESaIS2_EE5clearEv>
  this->childWidget.clear();
 80030fc:	f504 709c 	add.w	r0, r4, #312	@ 0x138
 8003100:	f7ff fe93 	bl	8002e2a <_ZNSt6vectorIPN5astra6WidgetESaIS2_EE5clearEv>
  this->position = {};
 8003104:	4632      	mov	r2, r6
 8003106:	4629      	mov	r1, r5
 8003108:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 800310c:	f005 fcf7 	bl	8008afe <memset>
  this->positionForeground = {};
 8003110:	4632      	mov	r2, r6
 8003112:	4629      	mov	r1, r5
 8003114:	4648      	mov	r0, r9
 8003116:	f005 fcf2 	bl	8008afe <memset>
}
 800311a:	4620      	mov	r0, r4
 800311c:	b005      	add	sp, #20
 800311e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003122:	bf00      	nop
 8003124:	08009cd4 	.word	0x08009cd4

08003128 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003128:	b510      	push	{r4, lr}
	  if (_Num)
 800312a:	1a0c      	subs	r4, r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800312c:	4613      	mov	r3, r2
	  if (_Num)
 800312e:	d005      	beq.n	800313c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x14>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8003130:	4601      	mov	r1, r0
 8003132:	4622      	mov	r2, r4
 8003134:	4618      	mov	r0, r3
 8003136:	f005 fcc8 	bl	8008aca <memmove>
 800313a:	4603      	mov	r3, r0
	}
 800313c:	1918      	adds	r0, r3, r4
 800313e:	bd10      	pop	{r4, pc}

08003140 <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh>:

  template<typename _Tp, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    void
    vector<_Tp, _Alloc>::
 8003140:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003144:	4605      	mov	r5, r0
 8003146:	460e      	mov	r6, r1
 8003148:	469b      	mov	fp, r3
    _M_fill_insert(iterator __position, size_type __n, const value_type& __x)
    {
      if (__n != 0)
 800314a:	4614      	mov	r4, r2
 800314c:	2a00      	cmp	r2, #0
 800314e:	d074      	beq.n	800323a <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0xfa>
	{
	  if (size_type(this->_M_impl._M_end_of_storage
			- this->_M_impl._M_finish) >= __n)
 8003150:	e9d0 7301 	ldrd	r7, r3, [r0, #4]
 8003154:	1bdb      	subs	r3, r3, r7
	  if (size_type(this->_M_impl._M_end_of_storage
 8003156:	4293      	cmp	r3, r2
 8003158:	d334      	bcc.n	80031c4 <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0x84>
 800315a:	eba7 0801 	sub.w	r8, r7, r1
	      _Temporary_value __tmp(this, __x);
	      value_type& __x_copy = __tmp._M_val();
#endif
	      const size_type __elems_after = end() - __position;
	      pointer __old_finish(this->_M_impl._M_finish);
	      if (__elems_after > __n)
 800315e:	4542      	cmp	r2, r8
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003160:	f89b 9000 	ldrb.w	r9, [fp]
 8003164:	d217      	bcs.n	8003196 <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0x56>
		{
		  _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
		  std::__uninitialized_move_a(__old_finish - __n,
 8003166:	eba7 0802 	sub.w	r8, r7, r2
			      _Category>::__copy_m(__first, __last, __result);
 800316a:	4639      	mov	r1, r7
 800316c:	463a      	mov	r2, r7
 800316e:	4640      	mov	r0, r8
 8003170:	f7ff ffda 	bl	8003128 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
					      __old_finish,
					      __old_finish,
					      _M_get_Tp_allocator());
		  this->_M_impl._M_finish += __n;
 8003174:	686b      	ldr	r3, [r5, #4]
	  if (_Num)
 8003176:	ebb8 0206 	subs.w	r2, r8, r6
 800317a:	4423      	add	r3, r4
 800317c:	606b      	str	r3, [r5, #4]
 800317e:	d003      	beq.n	8003188 <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0x48>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8003180:	4631      	mov	r1, r6
 8003182:	1ab8      	subs	r0, r7, r2
 8003184:	f005 fca1 	bl	8008aca <memmove>
    { std::__fill_a1(__first, __last, __value); }
 8003188:	464a      	mov	r2, r9
 800318a:	1931      	adds	r1, r6, r4
 800318c:	4630      	mov	r0, r6
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_finish;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
 800318e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003192:	f7ff ba06 	b.w	80025a2 <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_.isra.0>
      if (__n <= 0)
 8003196:	ebb2 0408 	subs.w	r4, r2, r8
 800319a:	d011      	beq.n	80031c0 <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0x80>
      std::__fill_a(__first, __first + __n, __value);
 800319c:	443c      	add	r4, r7
    { std::__fill_a1(__first, __last, __value); }
 800319e:	464a      	mov	r2, r9
 80031a0:	4621      	mov	r1, r4
 80031a2:	4638      	mov	r0, r7
 80031a4:	f7ff f9fd 	bl	80025a2 <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_.isra.0>
			      _Category>::__copy_m(__first, __last, __result);
 80031a8:	4622      	mov	r2, r4
 80031aa:	4639      	mov	r1, r7
 80031ac:	4630      	mov	r0, r6
		  this->_M_impl._M_finish =
 80031ae:	606c      	str	r4, [r5, #4]
 80031b0:	f7ff ffba 	bl	8003128 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		  this->_M_impl._M_finish += __elems_after;
 80031b4:	686b      	ldr	r3, [r5, #4]
    { std::__fill_a1(__first, __last, __value); }
 80031b6:	464a      	mov	r2, r9
 80031b8:	4443      	add	r3, r8
 80031ba:	4639      	mov	r1, r7
 80031bc:	606b      	str	r3, [r5, #4]
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 80031be:	e7e5      	b.n	800318c <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0x4c>
	return __first;
 80031c0:	463c      	mov	r4, r7
 80031c2:	e7f1      	b.n	80031a8 <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0x68>
	if (max_size() - size() < __n)
 80031c4:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
	      pointer __old_start = this->_M_impl._M_start;
 80031c8:	f8d0 a000 	ldr.w	sl, [r0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80031cc:	eba7 030a 	sub.w	r3, r7, sl
	if (max_size() - size() < __n)
 80031d0:	eba9 0203 	sub.w	r2, r9, r3
 80031d4:	4294      	cmp	r4, r2
 80031d6:	d902      	bls.n	80031de <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0x9e>
	  __throw_length_error(__N(__s));
 80031d8:	4819      	ldr	r0, [pc, #100]	@ (8003240 <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0x100>)
 80031da:	f005 f8c5 	bl	8008368 <_ZSt20__throw_length_errorPKc>
 80031de:	429c      	cmp	r4, r3
 80031e0:	4622      	mov	r2, r4
 80031e2:	bf38      	it	cc
 80031e4:	461a      	movcc	r2, r3
 80031e6:	18d2      	adds	r2, r2, r3
 80031e8:	d202      	bcs.n	80031f0 <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0xb0>
 80031ea:	4591      	cmp	r9, r2
 80031ec:	bf28      	it	cs
 80031ee:	4691      	movcs	r9, r2
	      pointer __new_start(this->_M_allocate(__len));
 80031f0:	4648      	mov	r0, r9
 80031f2:	f7ff f9dd 	bl	80025b0 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 80031f6:	4680      	mov	r8, r0
	      const size_type __elems_before = __pos - __old_start;
 80031f8:	eba6 000a 	sub.w	r0, r6, sl
		  std::__uninitialized_fill_n_a(__new_start + __elems_before,
 80031fc:	4440      	add	r0, r8
    { std::__fill_a1(__first, __last, __value); }
 80031fe:	1901      	adds	r1, r0, r4
 8003200:	f89b 2000 	ldrb.w	r2, [fp]
 8003204:	f7ff f9cd 	bl	80025a2 <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_.isra.0>
			      _Category>::__copy_m(__first, __last, __result);
 8003208:	4642      	mov	r2, r8
 800320a:	4631      	mov	r1, r6
 800320c:	4650      	mov	r0, sl
 800320e:	f7ff ff8b 	bl	8003128 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8003212:	4639      	mov	r1, r7
 8003214:	1902      	adds	r2, r0, r4
 8003216:	4630      	mov	r0, r6
 8003218:	f7ff ff86 	bl	8003128 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 800321c:	4604      	mov	r4, r0
	if (__p)
 800321e:	f1ba 0f00 	cmp.w	sl, #0
 8003222:	d005      	beq.n	8003230 <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0xf0>
			    this->_M_impl._M_end_of_storage - __old_start);
 8003224:	68a9      	ldr	r1, [r5, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8003226:	4650      	mov	r0, sl
 8003228:	eba1 010a 	sub.w	r1, r1, sl
 800322c:	f004 fd6c 	bl	8007d08 <_ZdlPvj>
	      this->_M_impl._M_finish = __new_finish;
 8003230:	e9c5 8400 	strd	r8, r4, [r5]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8003234:	eb08 0009 	add.w	r0, r8, r9
 8003238:	60a8      	str	r0, [r5, #8]
    }
 800323a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800323e:	bf00      	nop
 8003240:	08009c65 	.word	0x08009c65

08003244 <_ZN5astra4Menu18generateDefaultPicEv>:
  this->picDefault.resize(120, 0xFF);
 8003244:	23ff      	movs	r3, #255	@ 0xff
std::vector<unsigned char> Menu::generateDefaultPic() {
 8003246:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003248:	460d      	mov	r5, r1
  this->picDefault.resize(120, 0xFF);
 800324a:	f88d 3007 	strb.w	r3, [sp, #7]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800324e:	e9d1 3147 	ldrd	r3, r1, [r1, #284]	@ 0x11c
 8003252:	1aca      	subs	r2, r1, r3
	if (__new_size > size())
 8003254:	2a77      	cmp	r2, #119	@ 0x77
std::vector<unsigned char> Menu::generateDefaultPic() {
 8003256:	4604      	mov	r4, r0
 8003258:	d81e      	bhi.n	8003298 <_ZN5astra4Menu18generateDefaultPicEv+0x54>
	  _M_fill_insert(end(), __new_size - size(), __x);
 800325a:	f10d 0307 	add.w	r3, sp, #7
 800325e:	f1c2 0278 	rsb	r2, r2, #120	@ 0x78
 8003262:	f505 708e 	add.w	r0, r5, #284	@ 0x11c
 8003266:	f7ff ff6b 	bl	8003140 <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800326a:	e9d5 3647 	ldrd	r3, r6, [r5, #284]	@ 0x11c
 800326e:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8003270:	2300      	movs	r3, #0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8003272:	4630      	mov	r0, r6
	: _M_start(), _M_finish(), _M_end_of_storage()
 8003274:	e9c4 3300 	strd	r3, r3, [r4]
 8003278:	60a3      	str	r3, [r4, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800327a:	f7ff f999 	bl	80025b0 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800327e:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8003282:	4406      	add	r6, r0
 8003284:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8003286:	4602      	mov	r2, r0
 8003288:	e9d5 0147 	ldrd	r0, r1, [r5, #284]	@ 0x11c
 800328c:	f7fe ff18 	bl	80020c0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
 8003290:	6060      	str	r0, [r4, #4]
}
 8003292:	4620      	mov	r0, r4
 8003294:	b002      	add	sp, #8
 8003296:	bd70      	pop	{r4, r5, r6, pc}
	else if (__new_size < size())
 8003298:	2a78      	cmp	r2, #120	@ 0x78
 800329a:	d0e6      	beq.n	800326a <_ZN5astra4Menu18generateDefaultPicEv+0x26>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 800329c:	3378      	adds	r3, #120	@ 0x78
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800329e:	4299      	cmp	r1, r3
	    this->_M_impl._M_finish = __pos;
 80032a0:	bf18      	it	ne
 80032a2:	f8c5 3120 	strne.w	r3, [r5, #288]	@ 0x120
 80032a6:	e7e0      	b.n	800326a <_ZN5astra4Menu18generateDefaultPicEv+0x26>

080032a8 <_ZN5astra4ListC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
List::List(const std::string &_title) {
 80032a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032ac:	4604      	mov	r4, r0
 80032ae:	2610      	movs	r6, #16
 80032b0:	2500      	movs	r5, #0
 80032b2:	b086      	sub	sp, #24
 80032b4:	460f      	mov	r7, r1
 80032b6:	f7ff fcd9 	bl	8002c6c <_ZN5astra4MenuC1Ev>
 80032ba:	4b28      	ldr	r3, [pc, #160]	@ (800335c <_ZN5astra4ListC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb4>)
 80032bc:	f504 78a4 	add.w	r8, r4, #328	@ 0x148
 80032c0:	4632      	mov	r2, r6
 80032c2:	6023      	str	r3, [r4, #0]
 80032c4:	2100      	movs	r1, #0
 80032c6:	4640      	mov	r0, r8
 80032c8:	f005 fc19 	bl	8008afe <memset>
 80032cc:	7960      	ldrb	r0, [r4, #5]
 80032ce:	f88d 5000 	strb.w	r5, [sp]
 80032d2:	f7fd fbe7 	bl	8000aa4 <__aeabi_i2f>
 80032d6:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 80032d8:	f7fd fcec 	bl	8000cb4 <__aeabi_fdiv>
 80032dc:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80032e0:	f7fd fb2a 	bl	8000938 <__aeabi_fsub>
 80032e4:	f7fd fe1e 	bl	8000f24 <__aeabi_f2uiz>
 80032e8:	2302      	movs	r3, #2
 80032ea:	2202      	movs	r2, #2
 80032ec:	4669      	mov	r1, sp
 80032ee:	f88d 0001 	strb.w	r0, [sp, #1]
 80032f2:	9302      	str	r3, [sp, #8]
 80032f4:	f504 70ac 	add.w	r0, r4, #344	@ 0x158
 80032f8:	ab03      	add	r3, sp, #12
 80032fa:	f8cd d004 	str.w	sp, [sp, #4]
 80032fe:	f7fe fc71 	bl	8001be4 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8003302:	4639      	mov	r1, r7
 8003304:	f104 00f8 	add.w	r0, r4, #248	@ 0xf8
 8003308:	f005 f8b3 	bl	8008472 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
  this->pic = generateDefaultPic();
 800330c:	4621      	mov	r1, r4
 800330e:	a803      	add	r0, sp, #12
 8003310:	f7ff ff98 	bl	8003244 <_ZN5astra4Menu18generateDefaultPicEv>
 8003314:	a903      	add	r1, sp, #12
 8003316:	f504 7088 	add.w	r0, r4, #272	@ 0x110
 800331a:	f7ff fd69 	bl	8002df0 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 800331e:	a803      	add	r0, sp, #12
 8003320:	f7fe fc56 	bl	8001bd0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
  this->childMenu.clear();
 8003324:	f504 7096 	add.w	r0, r4, #300	@ 0x12c
  this->selectIndex = 0;
 8003328:	f884 5144 	strb.w	r5, [r4, #324]	@ 0x144
  this->parent = nullptr;
 800332c:	f8c4 5128 	str.w	r5, [r4, #296]	@ 0x128
  this->childMenu.clear();
 8003330:	f7ff fd75 	bl	8002e1e <_ZNSt6vectorIPN5astra4MenuESaIS2_EE5clearEv>
  this->childWidget.clear();
 8003334:	f504 709c 	add.w	r0, r4, #312	@ 0x138
 8003338:	f7ff fd77 	bl	8002e2a <_ZNSt6vectorIPN5astra6WidgetESaIS2_EE5clearEv>
  this->position = {};
 800333c:	4632      	mov	r2, r6
 800333e:	4629      	mov	r1, r5
 8003340:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 8003344:	f005 fbdb 	bl	8008afe <memset>
  this->positionForeground = {};
 8003348:	4632      	mov	r2, r6
 800334a:	4629      	mov	r1, r5
 800334c:	4640      	mov	r0, r8
 800334e:	f005 fbd6 	bl	8008afe <memset>
}
 8003352:	4620      	mov	r0, r4
 8003354:	b006      	add	sp, #24
 8003356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800335a:	bf00      	nop
 800335c:	08009cd4 	.word	0x08009cd4

08003360 <_ZN5astra4TileC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
Tile::Tile(const std::string &_title) {
 8003360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003362:	4604      	mov	r4, r0
 8003364:	2720      	movs	r7, #32
 8003366:	460d      	mov	r5, r1
 8003368:	b085      	sub	sp, #20
 800336a:	f7ff fc7f 	bl	8002c6c <_ZN5astra4MenuC1Ev>
 800336e:	4b1a      	ldr	r3, [pc, #104]	@ (80033d8 <_ZN5astra4TileC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x78>)
 8003370:	f504 76a4 	add.w	r6, r4, #328	@ 0x148
 8003374:	6023      	str	r3, [r4, #0]
 8003376:	463a      	mov	r2, r7
 8003378:	2100      	movs	r1, #0
 800337a:	4630      	mov	r0, r6
 800337c:	f005 fbbf 	bl	8008afe <memset>
 8003380:	4629      	mov	r1, r5
  this->selectIndex = 0;
 8003382:	2500      	movs	r5, #0
 8003384:	f104 00f8 	add.w	r0, r4, #248	@ 0xf8
 8003388:	f005 f873 	bl	8008472 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
  this->pic = generateDefaultPic();
 800338c:	4621      	mov	r1, r4
 800338e:	a801      	add	r0, sp, #4
 8003390:	f7ff ff58 	bl	8003244 <_ZN5astra4Menu18generateDefaultPicEv>
 8003394:	a901      	add	r1, sp, #4
 8003396:	f504 7088 	add.w	r0, r4, #272	@ 0x110
 800339a:	f7ff fd29 	bl	8002df0 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 800339e:	a801      	add	r0, sp, #4
 80033a0:	f7fe fc16 	bl	8001bd0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
  this->childMenu.clear();
 80033a4:	f504 7096 	add.w	r0, r4, #300	@ 0x12c
  this->selectIndex = 0;
 80033a8:	f884 5144 	strb.w	r5, [r4, #324]	@ 0x144
  this->parent = nullptr;
 80033ac:	f8c4 5128 	str.w	r5, [r4, #296]	@ 0x128
  this->childMenu.clear();
 80033b0:	f7ff fd35 	bl	8002e1e <_ZNSt6vectorIPN5astra4MenuESaIS2_EE5clearEv>
  this->childWidget.clear();
 80033b4:	f504 709c 	add.w	r0, r4, #312	@ 0x138
 80033b8:	f7ff fd37 	bl	8002e2a <_ZNSt6vectorIPN5astra6WidgetESaIS2_EE5clearEv>
  this->position = {};
 80033bc:	4629      	mov	r1, r5
 80033be:	2210      	movs	r2, #16
 80033c0:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 80033c4:	f005 fb9b 	bl	8008afe <memset>
  this->positionForeground = {};
 80033c8:	463a      	mov	r2, r7
 80033ca:	4629      	mov	r1, r5
 80033cc:	4630      	mov	r0, r6
 80033ce:	f005 fb96 	bl	8008afe <memset>
}
 80033d2:	4620      	mov	r0, r4
 80033d4:	b005      	add	sp, #20
 80033d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033d8:	08009cec 	.word	0x08009cec

080033dc <_ZN5astra8Selector11setPositionEv>:

#include "selector.h"

namespace astra {

void Selector::setPosition() {
 80033dc:	b570      	push	{r4, r5, r6, lr}
  //在go的时候改变trg的值
  if (menu->getType() == "Tile") {
 80033de:	f8d0 10d4 	ldr.w	r1, [r0, #212]	@ 0xd4
void Selector::setPosition() {
 80033e2:	b086      	sub	sp, #24
  if (menu->getType() == "Tile") {
 80033e4:	680b      	ldr	r3, [r1, #0]
void Selector::setPosition() {
 80033e6:	4604      	mov	r4, r0
  if (menu->getType() == "Tile") {
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4668      	mov	r0, sp
 80033ec:	4798      	blx	r3
    { return __lhs.compare(__rhs) == 0; }
 80033ee:	4937      	ldr	r1, [pc, #220]	@ (80034cc <_ZN5astra8Selector11setPositionEv+0xf0>)
 80033f0:	4668      	mov	r0, sp
 80033f2:	f005 f863 	bl	80084bc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 80033f6:	4605      	mov	r5, r0
      { _M_dispose(); }
 80033f8:	4668      	mov	r0, sp
 80033fa:	f004 ffe9 	bl	80083d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80033fe:	f8d4 10d4 	ldr.w	r1, [r4, #212]	@ 0xd4
 8003402:	bb6d      	cbnz	r5, 8003460 <_ZN5astra8Selector11setPositionEv+0x84>
//    xTrg = menu->child[_index]->position.xTrg - (astraConfig.tileSelectBoxWeight - astraConfig.tilePicWidth) / 2;
//    yTrg = menu->child[_index]->position.yTrg - (astraConfig.tileSelectBoxHeight - astraConfig.tilePicHeight) / 2;
    xTrg = menu->childMenu[menu->selectIndex]->position.xTrg - astraConfig.tileSelectBoxMargin;
 8003404:	f8d1 312c 	ldr.w	r3, [r1, #300]	@ 0x12c
 8003408:	f891 2144 	ldrb.w	r2, [r1, #324]	@ 0x144
 800340c:	f8d4 6084 	ldr.w	r6, [r4, #132]	@ 0x84
 8003410:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8003414:	4631      	mov	r1, r6
 8003416:	f8d5 00ec 	ldr.w	r0, [r5, #236]	@ 0xec
 800341a:	f7fd fa8d 	bl	8000938 <__aeabi_fsub>
    yTrg = menu->childMenu[menu->selectIndex]->position.yTrg - astraConfig.tileSelectBoxMargin;
 800341e:	4631      	mov	r1, r6
    xTrg = menu->childMenu[menu->selectIndex]->position.xTrg - astraConfig.tileSelectBoxMargin;
 8003420:	f8c4 00dc 	str.w	r0, [r4, #220]	@ 0xdc
    yTrg = menu->childMenu[menu->selectIndex]->position.yTrg - astraConfig.tileSelectBoxMargin;
 8003424:	f8d5 00f4 	ldr.w	r0, [r5, #244]	@ 0xf4
 8003428:	f7fd fa86 	bl	8000938 <__aeabi_fsub>

    yText = systemConfig.screenHeight; //给磁贴文字归零 从屏幕外滑入
 800342c:	7865      	ldrb	r5, [r4, #1]
    yTrg = menu->childMenu[menu->selectIndex]->position.yTrg - astraConfig.tileSelectBoxMargin;
 800342e:	f8c4 00e4 	str.w	r0, [r4, #228]	@ 0xe4
    yText = systemConfig.screenHeight; //给磁贴文字归零 从屏幕外滑入
 8003432:	4628      	mov	r0, r5
 8003434:	f7fd fb32 	bl	8000a9c <__aeabi_ui2f>
 8003438:	f8c4 00f8 	str.w	r0, [r4, #248]	@ 0xf8
    yTextTrg = systemConfig.screenHeight - astraConfig.tileTextBottomMargin;
 800343c:	4628      	mov	r0, r5
 800343e:	f7fd fb31 	bl	8000aa4 <__aeabi_i2f>
 8003442:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8003444:	f7fd fa78 	bl	8000938 <__aeabi_fsub>

    wTrg = astraConfig.tileSelectBoxWidth;
 8003448:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
    yTextTrg = systemConfig.screenHeight - astraConfig.tileTextBottomMargin;
 800344c:	f8c4 00fc 	str.w	r0, [r4, #252]	@ 0xfc
    wTrg = astraConfig.tileSelectBoxWidth;
 8003450:	f8c4 30ec 	str.w	r3, [r4, #236]	@ 0xec
    hTrg = astraConfig.tileSelectBoxHeight;
 8003454:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
  } else if (menu->getType() == "List") {
    xTrg = menu->childMenu[menu->selectIndex]->position.xTrg - astraConfig.selectorMargin;
    yTrg = menu->childMenu[menu->selectIndex]->position.yTrg;

    wTrg = (float) HAL::getFontWidth(menu->childMenu[menu->selectIndex]->title) + astraConfig.listTextMargin * 2;
    hTrg = astraConfig.listLineHeight;
 8003458:	f8c4 30f4 	str.w	r3, [r4, #244]	@ 0xf4
  }
}
 800345c:	b006      	add	sp, #24
 800345e:	bd70      	pop	{r4, r5, r6, pc}
  } else if (menu->getType() == "List") {
 8003460:	680b      	ldr	r3, [r1, #0]
 8003462:	4668      	mov	r0, sp
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4798      	blx	r3
    { return __lhs.compare(__rhs) == 0; }
 8003468:	4668      	mov	r0, sp
 800346a:	4919      	ldr	r1, [pc, #100]	@ (80034d0 <_ZN5astra8Selector11setPositionEv+0xf4>)
 800346c:	f005 f826 	bl	80084bc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 8003470:	4605      	mov	r5, r0
      { _M_dispose(); }
 8003472:	4668      	mov	r0, sp
 8003474:	f004 ffac 	bl	80083d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8003478:	2d00      	cmp	r5, #0
 800347a:	d1ef      	bne.n	800345c <_ZN5astra8Selector11setPositionEv+0x80>
    xTrg = menu->childMenu[menu->selectIndex]->position.xTrg - astraConfig.selectorMargin;
 800347c:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 8003480:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8003482:	f893 2144 	ldrb.w	r2, [r3, #324]	@ 0x144
 8003486:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800348a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800348e:	f8d5 00ec 	ldr.w	r0, [r5, #236]	@ 0xec
 8003492:	f7fd fa51 	bl	8000938 <__aeabi_fsub>
    yTrg = menu->childMenu[menu->selectIndex]->position.yTrg;
 8003496:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
    xTrg = menu->childMenu[menu->selectIndex]->position.xTrg - astraConfig.selectorMargin;
 800349a:	f8c4 00dc 	str.w	r0, [r4, #220]	@ 0xdc
    yTrg = menu->childMenu[menu->selectIndex]->position.yTrg;
 800349e:	f8c4 30e4 	str.w	r3, [r4, #228]	@ 0xe4
    wTrg = (float) HAL::getFontWidth(menu->childMenu[menu->selectIndex]->title) + astraConfig.listTextMargin * 2;
 80034a2:	f105 00f8 	add.w	r0, r5, #248	@ 0xf8
 80034a6:	f7fd fdba 	bl	800101e <_ZN3HAL12getFontWidthERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80034aa:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80034ac:	4606      	mov	r6, r0
 80034ae:	4608      	mov	r0, r1
 80034b0:	f7fd fa44 	bl	800093c <__addsf3>
 80034b4:	4605      	mov	r5, r0
 80034b6:	4630      	mov	r0, r6
 80034b8:	f7fd faf0 	bl	8000a9c <__aeabi_ui2f>
 80034bc:	4601      	mov	r1, r0
 80034be:	4628      	mov	r0, r5
 80034c0:	f7fd fa3c 	bl	800093c <__addsf3>
    hTrg = astraConfig.listLineHeight;
 80034c4:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
    wTrg = (float) HAL::getFontWidth(menu->childMenu[menu->selectIndex]->title) + astraConfig.listTextMargin * 2;
 80034c6:	f8c4 00ec 	str.w	r0, [r4, #236]	@ 0xec
    hTrg = astraConfig.listLineHeight;
 80034ca:	e7c5      	b.n	8003458 <_ZN5astra8Selector11setPositionEv+0x7c>
 80034cc:	08009c1c 	.word	0x08009c1c
 80034d0:	08009c17 	.word	0x08009c17

080034d4 <_ZN5astra8Selector2goEh>:
 *
 * @param _index
 * @note selector接管了移动选择指针的功能
 * @warning not support in loop. 不支持在循环内执行
 */
void Selector::go(unsigned char _index) {
 80034d4:	b538      	push	{r3, r4, r5, lr}
 80034d6:	4604      	mov	r4, r0
 80034d8:	460d      	mov	r5, r1
  Item::updateConfig();
 80034da:	f7ff f8d7 	bl	800268c <_ZN5astra4Item12updateConfigEv>
//  } else if (_index < 0) {
//    if (astraConfig.menuLoop) _index = menu->childMenu.size() - 1;
//    else return;
//  }

  if (_index > menu->childMenu.size() - 1) return;
 80034de:	f8d4 20d4 	ldr.w	r2, [r4, #212]	@ 0xd4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80034e2:	e9d2 134b 	ldrd	r1, r3, [r2, #300]	@ 0x12c
 80034e6:	1a5b      	subs	r3, r3, r1
 80034e8:	109b      	asrs	r3, r3, #2
 80034ea:	3b01      	subs	r3, #1
 80034ec:	429d      	cmp	r5, r3
 80034ee:	d806      	bhi.n	80034fe <_ZN5astra8Selector2goEh+0x2a>
  if (_index < 0) return;
  menu->selectIndex = _index;
 80034f0:	f882 5144 	strb.w	r5, [r2, #324]	@ 0x144

  setPosition();
 80034f4:	4620      	mov	r0, r4
}
 80034f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  setPosition();
 80034fa:	f7ff bf6f 	b.w	80033dc <_ZN5astra8Selector11setPositionEv>
}
 80034fe:	bd38      	pop	{r3, r4, r5, pc}

08003500 <_ZN5astra8Selector6goNextEv>:

void Selector::goNext() {
 8003500:	b510      	push	{r4, lr}
  if (this->menu->selectIndex == this->menu->childMenu.size() - 1) {
 8003502:	f8d0 20d4 	ldr.w	r2, [r0, #212]	@ 0xd4
void Selector::goNext() {
 8003506:	4604      	mov	r4, r0
  if (this->menu->selectIndex == this->menu->childMenu.size() - 1) {
 8003508:	f892 1144 	ldrb.w	r1, [r2, #324]	@ 0x144
 800350c:	f8d2 3130 	ldr.w	r3, [r2, #304]	@ 0x130
 8003510:	f8d2 212c 	ldr.w	r2, [r2, #300]	@ 0x12c
 8003514:	1a9b      	subs	r3, r3, r2
 8003516:	109b      	asrs	r3, r3, #2
 8003518:	3b01      	subs	r3, #1
 800351a:	4299      	cmp	r1, r3
 800351c:	d10a      	bne.n	8003534 <_ZN5astra8Selector6goNextEv+0x34>
    if (astraConfig.menuLoop) go(0);
 800351e:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 8003522:	b153      	cbz	r3, 800353a <_ZN5astra8Selector6goNextEv+0x3a>
 8003524:	2100      	movs	r1, #0
    else return;
  } else go(menu->selectIndex + 1);
 8003526:	f7ff ffd5 	bl	80034d4 <_ZN5astra8Selector2goEh>
  setPosition();
 800352a:	4620      	mov	r0, r4
}
 800352c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  setPosition();
 8003530:	f7ff bf54 	b.w	80033dc <_ZN5astra8Selector11setPositionEv>
  } else go(menu->selectIndex + 1);
 8003534:	3101      	adds	r1, #1
 8003536:	b2c9      	uxtb	r1, r1
 8003538:	e7f5      	b.n	8003526 <_ZN5astra8Selector6goNextEv+0x26>
}
 800353a:	bd10      	pop	{r4, pc}

0800353c <_ZN5astra8Selector9goPreviewEv>:

void Selector::goPreview() {
 800353c:	b510      	push	{r4, lr}
  if (this->menu->selectIndex == 0) {
 800353e:	f8d0 30d4 	ldr.w	r3, [r0, #212]	@ 0xd4
void Selector::goPreview() {
 8003542:	4604      	mov	r4, r0
  if (this->menu->selectIndex == 0) {
 8003544:	f893 1144 	ldrb.w	r1, [r3, #324]	@ 0x144
 8003548:	b941      	cbnz	r1, 800355c <_ZN5astra8Selector9goPreviewEv+0x20>
    if (astraConfig.menuLoop) go(this->menu->childMenu.size() - 1);
 800354a:	f890 2036 	ldrb.w	r2, [r0, #54]	@ 0x36
 800354e:	b172      	cbz	r2, 800356e <_ZN5astra8Selector9goPreviewEv+0x32>
 8003550:	f8d3 1130 	ldr.w	r1, [r3, #304]	@ 0x130
 8003554:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8003558:	1ac9      	subs	r1, r1, r3
 800355a:	1089      	asrs	r1, r1, #2
    else return;
  } else go(menu->selectIndex - 1);
 800355c:	3901      	subs	r1, #1
 800355e:	b2c9      	uxtb	r1, r1
 8003560:	f7ff ffb8 	bl	80034d4 <_ZN5astra8Selector2goEh>
  setPosition();
 8003564:	4620      	mov	r0, r4
}
 8003566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  setPosition();
 800356a:	f7ff bf37 	b.w	80033dc <_ZN5astra8Selector11setPositionEv>
}
 800356e:	bd10      	pop	{r4, pc}

08003570 <_ZN5astra8Selector6injectEPNS_4MenuE>:

bool Selector::inject(Menu *_menu) {
 8003570:	b508      	push	{r3, lr}
  if (_menu == nullptr) return false;
 8003572:	b139      	cbz	r1, 8003584 <_ZN5astra8Selector6injectEPNS_4MenuE+0x14>

  //if (this->menu != nullptr) return false;
  this->menu = _menu;
 8003574:	f8c0 10d4 	str.w	r1, [r0, #212]	@ 0xd4

  go(this->menu->selectIndex);  //注入之后要初始化选择框的位置
 8003578:	f891 1144 	ldrb.w	r1, [r1, #324]	@ 0x144
 800357c:	f7ff ffaa 	bl	80034d4 <_ZN5astra8Selector2goEh>

  return true;
 8003580:	2001      	movs	r0, #1
}
 8003582:	bd08      	pop	{r3, pc}
  if (_menu == nullptr) return false;
 8003584:	4608      	mov	r0, r1
 8003586:	e7fc      	b.n	8003582 <_ZN5astra8Selector6injectEPNS_4MenuE+0x12>

08003588 <_ZN5astra8Selector6renderESt6vectorIfSaIfEE>:

  delete this->menu;
  this->menu = nullptr;
}

void Selector::render(std::vector<float> _camera) {
 8003588:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800358c:	4604      	mov	r4, r0
 800358e:	b089      	sub	sp, #36	@ 0x24
 8003590:	460d      	mov	r5, r1
  Item::updateConfig();
 8003592:	f7ff f87b 	bl	800268c <_ZN5astra4Item12updateConfigEv>

  //实际上 这里已经实现过渡动画了
  Animation::move(&x, xTrg, astraConfig.selectorXAnimationSpeed);
 8003596:	6962      	ldr	r2, [r4, #20]
 8003598:	f8d4 10dc 	ldr.w	r1, [r4, #220]	@ 0xdc
 800359c:	f104 00d8 	add.w	r0, r4, #216	@ 0xd8
 80035a0:	f7fe fc82 	bl	8001ea8 <_ZN5astra9Animation4moveEPfff>
  Animation::move(&y, yTrg, astraConfig.selectorYAnimationSpeed);
 80035a4:	6922      	ldr	r2, [r4, #16]
 80035a6:	f8d4 10e4 	ldr.w	r1, [r4, #228]	@ 0xe4
 80035aa:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 80035ae:	f7fe fc7b 	bl	8001ea8 <_ZN5astra9Animation4moveEPfff>
  Animation::move(&h, hTrg, astraConfig.selectorHeightAnimationSpeed);
 80035b2:	69e2      	ldr	r2, [r4, #28]
 80035b4:	f8d4 10f4 	ldr.w	r1, [r4, #244]	@ 0xf4
 80035b8:	f104 00f0 	add.w	r0, r4, #240	@ 0xf0
 80035bc:	f7fe fc74 	bl	8001ea8 <_ZN5astra9Animation4moveEPfff>
  Animation::move(&w, wTrg, astraConfig.selectorWidthAnimationSpeed);
 80035c0:	69a2      	ldr	r2, [r4, #24]
 80035c2:	f8d4 10ec 	ldr.w	r1, [r4, #236]	@ 0xec
 80035c6:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 80035ca:	f7fe fc6d 	bl	8001ea8 <_ZN5astra9Animation4moveEPfff>

  if (menu->getType() == "Tile") {
 80035ce:	f8d4 10d4 	ldr.w	r1, [r4, #212]	@ 0xd4
 80035d2:	a802      	add	r0, sp, #8
 80035d4:	680b      	ldr	r3, [r1, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4798      	blx	r3
    { return __lhs.compare(__rhs) == 0; }
 80035da:	49c2      	ldr	r1, [pc, #776]	@ (80038e4 <_ZN5astra8Selector6renderESt6vectorIfSaIfEE+0x35c>)
 80035dc:	a802      	add	r0, sp, #8
 80035de:	f004 ff6d 	bl	80084bc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 80035e2:	4606      	mov	r6, r0
      { _M_dispose(); }
 80035e4:	a802      	add	r0, sp, #8
 80035e6:	f004 fef3 	bl	80083d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80035ea:	2e00      	cmp	r6, #0
 80035ec:	f040 817c 	bne.w	80038e8 <_ZN5astra8Selector6renderESt6vectorIfSaIfEE+0x360>
    Animation::move(&yText, yTextTrg, astraConfig.selectorYAnimationSpeed);
 80035f0:	f8d4 10fc 	ldr.w	r1, [r4, #252]	@ 0xfc
 80035f4:	6922      	ldr	r2, [r4, #16]
 80035f6:	f104 00f8 	add.w	r0, r4, #248	@ 0xf8
 80035fa:	f7fe fc55 	bl	8001ea8 <_ZN5astra9Animation4moveEPfff>

    //draw text.
    //文字不受摄像机的影响
    HAL::setDrawType(1);
 80035fe:	2001      	movs	r0, #1
 8003600:	f7fd fd17 	bl	8001032 <_ZN3HAL11setDrawTypeEh>
    HAL::drawChinese((systemConfig.screenWeight -
 8003604:	7820      	ldrb	r0, [r4, #0]
 8003606:	f7fd fa4d 	bl	8000aa4 <__aeabi_i2f>
                      (float) HAL::getFontWidth(menu->childMenu[menu->selectIndex]->title)) / 2.0,
 800360a:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
    HAL::drawChinese((systemConfig.screenWeight -
 800360e:	4606      	mov	r6, r0
                      (float) HAL::getFontWidth(menu->childMenu[menu->selectIndex]->title)) / 2.0,
 8003610:	f893 2144 	ldrb.w	r2, [r3, #324]	@ 0x144
 8003614:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8003618:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800361c:	30f8      	adds	r0, #248	@ 0xf8
 800361e:	f7fd fcfe 	bl	800101e <_ZN3HAL12getFontWidthERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003622:	f7fd fa3b 	bl	8000a9c <__aeabi_ui2f>
 8003626:	4601      	mov	r1, r0
    HAL::drawChinese((systemConfig.screenWeight -
 8003628:	4630      	mov	r0, r6
 800362a:	f7fd f985 	bl	8000938 <__aeabi_fsub>
 800362e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003632:	f7fd fa8b 	bl	8000b4c <__aeabi_fmul>
 8003636:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 800363a:	4606      	mov	r6, r0
 800363c:	f8d4 00f8 	ldr.w	r0, [r4, #248]	@ 0xf8
 8003640:	f7fd f97c 	bl	800093c <__addsf3>
                     yText + astraConfig.tileTitleHeight,
                     menu->childMenu[menu->selectIndex]->title);
 8003644:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
    HAL::drawChinese((systemConfig.screenWeight -
 8003648:	4607      	mov	r7, r0
                     menu->childMenu[menu->selectIndex]->title);
 800364a:	f893 2144 	ldrb.w	r2, [r3, #324]	@ 0x144
 800364e:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8003652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003656:	f103 08f8 	add.w	r8, r3, #248	@ 0xf8
  //notice: _x和_y是字体左下角的坐标 _x and _y is the coordinate the lower left corner of the font
  static void drawEnglish(float _x, float _y, const std::string &_text) { get()->_drawEnglish(_x, _y, _text); }

  virtual void _drawEnglish(float _x, float _y, const std::string &_text) {}

  static void drawChinese(float _x, float _y, const std::string &_text) { get()->_drawChinese(_x, _y, _text); }
 800365a:	f001 fa49 	bl	8004af0 <_ZN3HAL3getEv>
 800365e:	6803      	ldr	r3, [r0, #0]
 8003660:	463a      	mov	r2, r7
 8003662:	4631      	mov	r1, r6
 8003664:	f8d3 903c 	ldr.w	r9, [r3, #60]	@ 0x3c
 8003668:	4643      	mov	r3, r8
 800366a:	47c8      	blx	r9

    //draw box.
    //大框需要受摄像机的影响
    HAL::setDrawType(2);
 800366c:	2002      	movs	r0, #2
 800366e:	f7fd fce0 	bl	8001032 <_ZN3HAL11setDrawTypeEh>
	return *(this->_M_impl._M_start + __n);
 8003672:	682f      	ldr	r7, [r5, #0]
    HAL::drawPixel(x + _camera[0], y + _camera[1]);
 8003674:	f8d4 00e0 	ldr.w	r0, [r4, #224]	@ 0xe0
 8003678:	6879      	ldr	r1, [r7, #4]
 800367a:	f7fd f95f 	bl	800093c <__addsf3>
 800367e:	4606      	mov	r6, r0
 8003680:	6839      	ldr	r1, [r7, #0]
 8003682:	f8d4 00d8 	ldr.w	r0, [r4, #216]	@ 0xd8
 8003686:	f7fd f959 	bl	800093c <__addsf3>
 800368a:	4631      	mov	r1, r6
 800368c:	f7fe ffe2 	bl	8002654 <_ZN3HAL9drawPixelEff>
    //左上角
    HAL::drawHLine(x + _camera[0], y + _camera[1], astraConfig.tileSelectBoxLineLength + 1);
 8003690:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003694:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8003698:	f7fd f950 	bl	800093c <__addsf3>
 800369c:	f8d5 8000 	ldr.w	r8, [r5]
 80036a0:	4607      	mov	r7, r0
 80036a2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80036a6:	f8d4 00e0 	ldr.w	r0, [r4, #224]	@ 0xe0
 80036aa:	f7fd f947 	bl	800093c <__addsf3>
 80036ae:	4606      	mov	r6, r0
 80036b0:	f8d8 1000 	ldr.w	r1, [r8]
 80036b4:	f8d4 00d8 	ldr.w	r0, [r4, #216]	@ 0xd8
 80036b8:	f7fd f940 	bl	800093c <__addsf3>
 80036bc:	463a      	mov	r2, r7
 80036be:	4631      	mov	r1, r6
 80036c0:	f7fd fce1 	bl	8001086 <_ZN3HAL9drawHLineEfff>
    HAL::drawVLine(x + _camera[0], y + _camera[1], astraConfig.tileSelectBoxLineLength + 1);
 80036c4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80036c8:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 80036cc:	f7fd f936 	bl	800093c <__addsf3>
 80036d0:	f8d5 8000 	ldr.w	r8, [r5]
 80036d4:	4607      	mov	r7, r0
 80036d6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80036da:	f8d4 00e0 	ldr.w	r0, [r4, #224]	@ 0xe0
 80036de:	f7fd f92d 	bl	800093c <__addsf3>
 80036e2:	4606      	mov	r6, r0
 80036e4:	f8d8 1000 	ldr.w	r1, [r8]
 80036e8:	f8d4 00d8 	ldr.w	r0, [r4, #216]	@ 0xd8
 80036ec:	f7fd f926 	bl	800093c <__addsf3>
 80036f0:	463a      	mov	r2, r7
 80036f2:	4631      	mov	r1, r6
 80036f4:	f7fd fcb7 	bl	8001066 <_ZN3HAL9drawVLineEfff>
    //左下角
    HAL::drawHLine(x + _camera[0], y + _camera[1] + h - 1, astraConfig.tileSelectBoxLineLength + 1);
 80036f8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80036fc:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8003700:	f7fd f91c 	bl	800093c <__addsf3>
 8003704:	f8d5 8000 	ldr.w	r8, [r5]
 8003708:	4607      	mov	r7, r0
 800370a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800370e:	f8d4 00e0 	ldr.w	r0, [r4, #224]	@ 0xe0
 8003712:	f7fd f913 	bl	800093c <__addsf3>
 8003716:	f8d4 10f0 	ldr.w	r1, [r4, #240]	@ 0xf0
 800371a:	f7fd f90f 	bl	800093c <__addsf3>
 800371e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003722:	f7fd f909 	bl	8000938 <__aeabi_fsub>
 8003726:	4606      	mov	r6, r0
 8003728:	f8d8 1000 	ldr.w	r1, [r8]
 800372c:	f8d4 00d8 	ldr.w	r0, [r4, #216]	@ 0xd8
 8003730:	f7fd f904 	bl	800093c <__addsf3>
 8003734:	463a      	mov	r2, r7
 8003736:	4631      	mov	r1, r6
 8003738:	f7fd fca5 	bl	8001086 <_ZN3HAL9drawHLineEfff>
 800373c:	f8d5 8000 	ldr.w	r8, [r5]
    HAL::drawVLine(x + _camera[0],
                   y + _camera[1] + h - astraConfig.tileSelectBoxLineLength - 1,
 8003740:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 8003744:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003748:	f8d4 00e0 	ldr.w	r0, [r4, #224]	@ 0xe0
 800374c:	f7fd f8f6 	bl	800093c <__addsf3>
 8003750:	f8d4 10f0 	ldr.w	r1, [r4, #240]	@ 0xf0
 8003754:	f7fd f8f2 	bl	800093c <__addsf3>
 8003758:	4639      	mov	r1, r7
 800375a:	f7fd f8ed 	bl	8000938 <__aeabi_fsub>
    HAL::drawVLine(x + _camera[0],
 800375e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003762:	f7fd f8e9 	bl	8000938 <__aeabi_fsub>
 8003766:	4606      	mov	r6, r0
 8003768:	f8d8 1000 	ldr.w	r1, [r8]
 800376c:	f8d4 00d8 	ldr.w	r0, [r4, #216]	@ 0xd8
 8003770:	f7fd f8e4 	bl	800093c <__addsf3>
 8003774:	463a      	mov	r2, r7
 8003776:	4631      	mov	r1, r6
 8003778:	f7fd fc75 	bl	8001066 <_ZN3HAL9drawVLineEfff>
 800377c:	f8d5 8000 	ldr.w	r8, [r5]
                   astraConfig.tileSelectBoxLineLength);
    //右上角
    HAL::drawHLine(x + _camera[0] + w - astraConfig.tileSelectBoxLineLength - 1,
 8003780:	f8d4 00e0 	ldr.w	r0, [r4, #224]	@ 0xe0
 8003784:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003788:	f7fd f8d8 	bl	800093c <__addsf3>
 800378c:	4606      	mov	r6, r0
 800378e:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 8003792:	f8d8 1000 	ldr.w	r1, [r8]
 8003796:	f8d4 00d8 	ldr.w	r0, [r4, #216]	@ 0xd8
 800379a:	f7fd f8cf 	bl	800093c <__addsf3>
 800379e:	f8d4 10e8 	ldr.w	r1, [r4, #232]	@ 0xe8
 80037a2:	f7fd f8cb 	bl	800093c <__addsf3>
 80037a6:	4639      	mov	r1, r7
 80037a8:	f7fd f8c6 	bl	8000938 <__aeabi_fsub>
 80037ac:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80037b0:	f7fd f8c2 	bl	8000938 <__aeabi_fsub>
 80037b4:	463a      	mov	r2, r7
 80037b6:	4631      	mov	r1, r6
 80037b8:	f7fd fc65 	bl	8001086 <_ZN3HAL9drawHLineEfff>
                   y + _camera[1],
                   astraConfig.tileSelectBoxLineLength);
    HAL::drawVLine(x + _camera[0] + w - 1, y + _camera[1], astraConfig.tileSelectBoxLineLength + 1);
 80037bc:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80037c0:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 80037c4:	f7fd f8ba 	bl	800093c <__addsf3>
 80037c8:	f8d5 8000 	ldr.w	r8, [r5]
 80037cc:	4607      	mov	r7, r0
 80037ce:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80037d2:	f8d4 00e0 	ldr.w	r0, [r4, #224]	@ 0xe0
 80037d6:	f7fd f8b1 	bl	800093c <__addsf3>
 80037da:	4606      	mov	r6, r0
 80037dc:	f8d8 1000 	ldr.w	r1, [r8]
 80037e0:	f8d4 00d8 	ldr.w	r0, [r4, #216]	@ 0xd8
 80037e4:	f7fd f8aa 	bl	800093c <__addsf3>
 80037e8:	f8d4 10e8 	ldr.w	r1, [r4, #232]	@ 0xe8
 80037ec:	f7fd f8a6 	bl	800093c <__addsf3>
 80037f0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80037f4:	f7fd f8a0 	bl	8000938 <__aeabi_fsub>
 80037f8:	463a      	mov	r2, r7
 80037fa:	4631      	mov	r1, r6
 80037fc:	f7fd fc33 	bl	8001066 <_ZN3HAL9drawVLineEfff>
 8003800:	f8d5 8000 	ldr.w	r8, [r5]
    //右下角
    HAL::drawHLine(x + _camera[0] + w - astraConfig.tileSelectBoxLineLength - 1,
                   y + _camera[1] + h - 1,
 8003804:	f8d4 00e0 	ldr.w	r0, [r4, #224]	@ 0xe0
 8003808:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800380c:	f7fd f896 	bl	800093c <__addsf3>
 8003810:	f8d4 10f0 	ldr.w	r1, [r4, #240]	@ 0xf0
 8003814:	f7fd f892 	bl	800093c <__addsf3>
    HAL::drawHLine(x + _camera[0] + w - astraConfig.tileSelectBoxLineLength - 1,
 8003818:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800381c:	f7fd f88c 	bl	8000938 <__aeabi_fsub>
 8003820:	4606      	mov	r6, r0
 8003822:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 8003826:	f8d8 1000 	ldr.w	r1, [r8]
 800382a:	f8d4 00d8 	ldr.w	r0, [r4, #216]	@ 0xd8
 800382e:	f7fd f885 	bl	800093c <__addsf3>
 8003832:	f8d4 10e8 	ldr.w	r1, [r4, #232]	@ 0xe8
 8003836:	f7fd f881 	bl	800093c <__addsf3>
 800383a:	4639      	mov	r1, r7
 800383c:	f7fd f87c 	bl	8000938 <__aeabi_fsub>
 8003840:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003844:	f7fd f878 	bl	8000938 <__aeabi_fsub>
 8003848:	463a      	mov	r2, r7
 800384a:	4631      	mov	r1, r6
 800384c:	f7fd fc1b 	bl	8001086 <_ZN3HAL9drawHLineEfff>
 8003850:	f8d5 8000 	ldr.w	r8, [r5]
                   astraConfig.tileSelectBoxLineLength);
    HAL::drawVLine(x + _camera[0] + w - 1,
                   y + _camera[1] + h - astraConfig.tileSelectBoxLineLength - 1,
 8003854:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 8003858:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800385c:	f8d4 00e0 	ldr.w	r0, [r4, #224]	@ 0xe0
 8003860:	f7fd f86c 	bl	800093c <__addsf3>
 8003864:	f8d4 10f0 	ldr.w	r1, [r4, #240]	@ 0xf0
 8003868:	f7fd f868 	bl	800093c <__addsf3>
 800386c:	4639      	mov	r1, r7
 800386e:	f7fd f863 	bl	8000938 <__aeabi_fsub>
    HAL::drawVLine(x + _camera[0] + w - 1,
 8003872:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003876:	f7fd f85f 	bl	8000938 <__aeabi_fsub>
 800387a:	4606      	mov	r6, r0
 800387c:	f8d8 1000 	ldr.w	r1, [r8]
 8003880:	f8d4 00d8 	ldr.w	r0, [r4, #216]	@ 0xd8
 8003884:	f7fd f85a 	bl	800093c <__addsf3>
 8003888:	f8d4 10e8 	ldr.w	r1, [r4, #232]	@ 0xe8
 800388c:	f7fd f856 	bl	800093c <__addsf3>
 8003890:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003894:	f7fd f850 	bl	8000938 <__aeabi_fsub>
 8003898:	463a      	mov	r2, r7
 800389a:	4631      	mov	r1, r6
 800389c:	f7fd fbe3 	bl	8001066 <_ZN3HAL9drawVLineEfff>
 80038a0:	682e      	ldr	r6, [r5, #0]
                   astraConfig.tileSelectBoxLineLength);

    HAL::drawPixel(x + _camera[0] + w - 1, y + _camera[1] + h - 1);
 80038a2:	f8d4 00e0 	ldr.w	r0, [r4, #224]	@ 0xe0
 80038a6:	6871      	ldr	r1, [r6, #4]
 80038a8:	f7fd f848 	bl	800093c <__addsf3>
 80038ac:	f8d4 10f0 	ldr.w	r1, [r4, #240]	@ 0xf0
 80038b0:	f7fd f844 	bl	800093c <__addsf3>
 80038b4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80038b8:	f7fd f83e 	bl	8000938 <__aeabi_fsub>
 80038bc:	4605      	mov	r5, r0
 80038be:	6831      	ldr	r1, [r6, #0]
 80038c0:	f8d4 00d8 	ldr.w	r0, [r4, #216]	@ 0xd8
 80038c4:	f7fd f83a 	bl	800093c <__addsf3>
 80038c8:	f8d4 10e8 	ldr.w	r1, [r4, #232]	@ 0xe8
 80038cc:	f7fd f836 	bl	800093c <__addsf3>
 80038d0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80038d4:	f7fd f830 	bl	8000938 <__aeabi_fsub>
 80038d8:	4629      	mov	r1, r5
 80038da:	f7fe febb 	bl	8002654 <_ZN3HAL9drawPixelEff>
    HAL::setDrawType(2);
    HAL::drawRBox(x + _camera[0], y + _camera[1], w, h - 1, astraConfig.selectorRadius);
    //HAL::drawRBox(x, y, w, astraConfig.listLineHeight, astraConfig.selectorRadius);
    HAL::setDrawType(1);
  }
}
 80038de:	b009      	add	sp, #36	@ 0x24
 80038e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80038e4:	08009c1c 	.word	0x08009c1c
  } else if (menu->getType() == "List") {
 80038e8:	f8d4 10d4 	ldr.w	r1, [r4, #212]	@ 0xd4
 80038ec:	a802      	add	r0, sp, #8
 80038ee:	680b      	ldr	r3, [r1, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4798      	blx	r3
    { return __lhs.compare(__rhs) == 0; }
 80038f4:	4918      	ldr	r1, [pc, #96]	@ (8003958 <_ZN5astra8Selector6renderESt6vectorIfSaIfEE+0x3d0>)
 80038f6:	a802      	add	r0, sp, #8
 80038f8:	f004 fde0 	bl	80084bc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 80038fc:	4606      	mov	r6, r0
      { _M_dispose(); }
 80038fe:	a802      	add	r0, sp, #8
 8003900:	f004 fd66 	bl	80083d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8003904:	2e00      	cmp	r6, #0
 8003906:	d1ea      	bne.n	80038de <_ZN5astra8Selector6renderESt6vectorIfSaIfEE+0x356>
    HAL::setDrawType(2);
 8003908:	2002      	movs	r0, #2
 800390a:	f7fd fb92 	bl	8001032 <_ZN3HAL11setDrawTypeEh>
 800390e:	682e      	ldr	r6, [r5, #0]
    HAL::drawRBox(x + _camera[0], y + _camera[1], w, h - 1, astraConfig.selectorRadius);
 8003910:	f8d4 00d8 	ldr.w	r0, [r4, #216]	@ 0xd8
 8003914:	6831      	ldr	r1, [r6, #0]
 8003916:	f7fd f811 	bl	800093c <__addsf3>
 800391a:	6871      	ldr	r1, [r6, #4]
 800391c:	4605      	mov	r5, r0
 800391e:	f8d4 00e0 	ldr.w	r0, [r4, #224]	@ 0xe0
 8003922:	f7fd f80b 	bl	800093c <__addsf3>
 8003926:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800392a:	4606      	mov	r6, r0
 800392c:	f8d4 00f0 	ldr.w	r0, [r4, #240]	@ 0xf0
 8003930:	f7fd f802 	bl	8000938 <__aeabi_fsub>
 8003934:	f8d4 80e8 	ldr.w	r8, [r4, #232]	@ 0xe8
 8003938:	4607      	mov	r7, r0
 800393a:	6ce4      	ldr	r4, [r4, #76]	@ 0x4c
  static void drawBox(float _x, float _y, float _w, float _h) { get()->_drawBox(_x, _y, _w, _h); }

  virtual void _drawBox(float _x, float _y, float _w, float _h) {}

  static void drawRBox(float _x, float _y, float _w, float _h, float _r) {
    get()->_drawRBox(_x,
 800393c:	f001 f8d8 	bl	8004af0 <_ZN3HAL3getEv>
 8003940:	6803      	ldr	r3, [r0, #0]
 8003942:	9401      	str	r4, [sp, #4]
 8003944:	9700      	str	r7, [sp, #0]
 8003946:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
 8003948:	4632      	mov	r2, r6
 800394a:	4643      	mov	r3, r8
 800394c:	4629      	mov	r1, r5
 800394e:	47a0      	blx	r4
    HAL::setDrawType(1);
 8003950:	2001      	movs	r0, #1
 8003952:	f7fd fb6e 	bl	8001032 <_ZN3HAL11setDrawTypeEh>
}
 8003956:	e7c2      	b.n	80038de <_ZN5astra8Selector6renderESt6vectorIfSaIfEE+0x356>
 8003958:	08009c17 	.word	0x08009c17

0800395c <_ZN5astra6Widget4initEv>:

public:
  Widget() = default;

public:
  virtual void init() {}
 800395c:	4770      	bx	lr

0800395e <_ZN5astra6Widget6deInitEv>:
  virtual void deInit() {}
 800395e:	4770      	bx	lr

08003960 <_ZN5astra6Widget15renderIndicatorEffRKSt6vectorIfSaIfEE>:
  //open and close是启动器的事情 与控件无关

public:
  //绘制控件在列表中的指示器
  virtual void renderIndicator(float _x, float _y, const std::vector<float> &_camera) {}
 8003960:	4770      	bx	lr

08003962 <_ZN5astra6Widget6renderERKSt6vectorIfSaIfEE>:

public:
  virtual void render(const std::vector<float> &_camera) {}
 8003962:	4770      	bx	lr

08003964 <_ZN5astra8CheckBox4initEv>:
  isCheck = !isCheck;
  return isCheck;
}

void CheckBox::init() {
  if (value) isCheck = true;
 8003964:	f890 30dc 	ldrb.w	r3, [r0, #220]	@ 0xdc
 8003968:	3b00      	subs	r3, #0
 800396a:	bf18      	it	ne
 800396c:	2301      	movne	r3, #1
 800396e:	f880 30dd 	strb.w	r3, [r0, #221]	@ 0xdd
  else isCheck = false;
}
 8003972:	4770      	bx	lr

08003974 <_ZN5astra5PopUp6renderERKSt6vectorIfSaIfEE>:
                 astraConfig.checkBoxHeight / 2);
}

void CheckBox::render(const std::vector<float> &_camera) {
  //todo 选中复选框后弹出消息提醒 这玩意现在我倒觉得没啥必要 可以暂时不做
}
 8003974:	4770      	bx	lr

08003976 <_ZN5astra5PopUp4initEv>:
  if (_index < 0) return false;
  value = _index;
  return true;
}

void PopUp::init() { }
 8003976:	4770      	bx	lr

08003978 <_ZN5astra8CheckBox6deInitEv>:
  delete this;
 8003978:	21e0      	movs	r1, #224	@ 0xe0
 800397a:	f004 b9c5 	b.w	8007d08 <_ZdlPvj>
	...

08003980 <_ZN5astra6Slider6deInitEv>:
    position.lTrg = maxLength;
    lengthIndicator = 6;
  }
}

void Slider::deInit() {
 8003980:	b510      	push	{r4, lr}
 8003982:	4604      	mov	r4, r0

public:
  void render(const std::vector<float> &_camera) override;
};

class Slider : public Widget {
 8003984:	4b05      	ldr	r3, [pc, #20]	@ (800399c <_ZN5astra6Slider6deInitEv+0x1c>)
 8003986:	f840 3bf8 	str.w	r3, [r0], #248
 800398a:	f004 fd21 	bl	80083d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
  delete this;
 800398e:	4620      	mov	r0, r4
}
 8003990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delete this;
 8003994:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8003998:	f004 b9b6 	b.w	8007d08 <_ZdlPvj>
 800399c:	08009ec0 	.word	0x08009ec0

080039a0 <_ZN5astra6Slider4initEv>:
void Slider::init() {
 80039a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039a2:	4604      	mov	r4, r0

  /**
   * @brief system config.
   */
public:
  static sys::config &getSystemConfig() { return get()->config; }
 80039a4:	f001 f8a4 	bl	8004af0 <_ZN3HAL3getEv>
  maxLength = std::floor(HAL::getSystemConfig().screenWeight * 0.6);
 80039a8:	7900      	ldrb	r0, [r0, #4]
 80039aa:	f7fc fe5f 	bl	800066c <__aeabi_i2d>
 80039ae:	a320      	add	r3, pc, #128	@ (adr r3, 8003a30 <_ZN5astra6Slider4initEv+0x90>)
 80039b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b4:	f7fc fbde 	bl	8000174 <__aeabi_dmul>
 80039b8:	f004 fe12 	bl	80085e0 <floor>
 80039bc:	f7fc ff48 	bl	8000850 <__aeabi_d2uiz>
  position.lTrg = std::floor(((float)(value - min) / (max - min)) * maxLength); //计算目标长度
 80039c0:	f894 7111 	ldrb.w	r7, [r4, #273]	@ 0x111
  maxLength = std::floor(HAL::getSystemConfig().screenWeight * 0.6);
 80039c4:	b2c5      	uxtb	r5, r0
  position.lTrg = std::floor(((float)(value - min) / (max - min)) * maxLength); //计算目标长度
 80039c6:	f894 00dc 	ldrb.w	r0, [r4, #220]	@ 0xdc
  maxLength = std::floor(HAL::getSystemConfig().screenWeight * 0.6);
 80039ca:	f884 5110 	strb.w	r5, [r4, #272]	@ 0x110
  position.lTrg = std::floor(((float)(value - min) / (max - min)) * maxLength); //计算目标长度
 80039ce:	1bc0      	subs	r0, r0, r7
 80039d0:	f7fd f868 	bl	8000aa4 <__aeabi_i2f>
 80039d4:	4606      	mov	r6, r0
 80039d6:	f894 0112 	ldrb.w	r0, [r4, #274]	@ 0x112
 80039da:	1bc0      	subs	r0, r0, r7
 80039dc:	f7fd f862 	bl	8000aa4 <__aeabi_i2f>
 80039e0:	4601      	mov	r1, r0
 80039e2:	4630      	mov	r0, r6
 80039e4:	f7fd f966 	bl	8000cb4 <__aeabi_fdiv>
 80039e8:	4606      	mov	r6, r0
 80039ea:	4628      	mov	r0, r5
 80039ec:	f7fd f85a 	bl	8000aa4 <__aeabi_i2f>
 80039f0:	4631      	mov	r1, r6
 80039f2:	f7fd f8ab 	bl	8000b4c <__aeabi_fmul>
  using ::floor;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  floor(float __x)
  { return __builtin_floorf(__x); }
 80039f6:	f004 fe73 	bl	80086e0 <floorf>
  lengthIndicator = std::round(((float)(value - min) / (max - min)) * 6);  //映射在0-6个像素之间
 80039fa:	490f      	ldr	r1, [pc, #60]	@ (8003a38 <_ZN5astra6Slider4initEv+0x98>)
  position.lTrg = std::floor(((float)(value - min) / (max - min)) * maxLength); //计算目标长度
 80039fc:	f8c4 00f4 	str.w	r0, [r4, #244]	@ 0xf4
  lengthIndicator = std::round(((float)(value - min) / (max - min)) * 6);  //映射在0-6个像素之间
 8003a00:	4630      	mov	r0, r6
 8003a02:	f7fd f8a3 	bl	8000b4c <__aeabi_fmul>
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8003a06:	f004 fead 	bl	8008764 <roundf>
 8003a0a:	f7fd fa8b 	bl	8000f24 <__aeabi_f2uiz>
  if (valueOverflow) {
 8003a0e:	f894 3114 	ldrb.w	r3, [r4, #276]	@ 0x114
  lengthIndicator = std::round(((float)(value - min) / (max - min)) * 6);  //映射在0-6个像素之间
 8003a12:	f884 0115 	strb.w	r0, [r4, #277]	@ 0x115
  if (valueOverflow) {
 8003a16:	b13b      	cbz	r3, 8003a28 <_ZN5astra6Slider4initEv+0x88>
    position.lTrg = maxLength;
 8003a18:	4628      	mov	r0, r5
 8003a1a:	f7fd f83f 	bl	8000a9c <__aeabi_ui2f>
    lengthIndicator = 6;
 8003a1e:	2306      	movs	r3, #6
    position.lTrg = maxLength;
 8003a20:	f8c4 00f4 	str.w	r0, [r4, #244]	@ 0xf4
    lengthIndicator = 6;
 8003a24:	f884 3115 	strb.w	r3, [r4, #277]	@ 0x115
}
 8003a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	f3af 8000 	nop.w
 8003a30:	33333333 	.word	0x33333333
 8003a34:	3fe33333 	.word	0x3fe33333
 8003a38:	40c00000 	.word	0x40c00000

08003a3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>:
      basic_string(const basic_string& __str)
 8003a3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 8003a3e:	f100 0308 	add.w	r3, r0, #8
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 8003a42:	6003      	str	r3, [r0, #0]
      { return _M_string_length; }
 8003a44:	e9d1 5300 	ldrd	r5, r3, [r1]
	if (__dnew > size_type(_S_local_capacity))
 8003a48:	2b0f      	cmp	r3, #15
      basic_string(const basic_string& __str)
 8003a4a:	4604      	mov	r4, r0
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
 8003a4c:	eb05 0603 	add.w	r6, r5, r3
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8003a50:	9301      	str	r3, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
 8003a52:	d906      	bls.n	8003a62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x26>
	    _M_data(_M_create(__dnew, size_type(0)));
 8003a54:	2200      	movs	r2, #0
 8003a56:	a901      	add	r1, sp, #4
 8003a58:	f004 fc98 	bl	800838c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
 8003a5c:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
 8003a5e:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
 8003a60:	60a3      	str	r3, [r4, #8]
	this->_S_copy_chars(_M_data(), __beg, __end);
 8003a62:	4632      	mov	r2, r6
 8003a64:	4629      	mov	r1, r5
 8003a66:	6820      	ldr	r0, [r4, #0]
 8003a68:	f004 fcf0 	bl	800844c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8003a6c:	2100      	movs	r1, #0
	_M_set_length(__dnew);
 8003a6e:	9b01      	ldr	r3, [sp, #4]
 8003a70:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
 8003a72:	6063      	str	r3, [r4, #4]
 8003a74:	54d1      	strb	r1, [r2, r3]
      }
 8003a76:	b002      	add	sp, #8
 8003a78:	bd70      	pop	{r4, r5, r6, pc}
	...

08003a7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>:
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 8003a7c:	f100 0308 	add.w	r3, r0, #8
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 8003a80:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003a82:	4604      	mov	r4, r0
	if (__s == 0)
 8003a84:	460d      	mov	r5, r1
	: allocator_type(__a), _M_p(__dat) { }
 8003a86:	6003      	str	r3, [r0, #0]
	if (__s == 0)
 8003a88:	b911      	cbnz	r1, 8003a90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0+0x14>
	  std::__throw_logic_error(__N("basic_string: "
 8003a8a:	480f      	ldr	r0, [pc, #60]	@ (8003ac8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0+0x4c>)
 8003a8c:	f004 fc69 	bl	8008362 <_ZSt19__throw_logic_errorPKc>
	return __builtin_strlen(__s);
 8003a90:	4608      	mov	r0, r1
 8003a92:	f7fc fb67 	bl	8000164 <strlen>
	if (__dnew > size_type(_S_local_capacity))
 8003a96:	280f      	cmp	r0, #15
	const _CharT* __end = __s + traits_type::length(__s);
 8003a98:	eb05 0600 	add.w	r6, r5, r0
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8003a9c:	9001      	str	r0, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
 8003a9e:	d907      	bls.n	8003ab0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0+0x34>
	    _M_data(_M_create(__dnew, size_type(0)));
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	4620      	mov	r0, r4
 8003aa4:	a901      	add	r1, sp, #4
 8003aa6:	f004 fc71 	bl	800838c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
 8003aaa:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
 8003aac:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
 8003aae:	60a3      	str	r3, [r4, #8]
	this->_S_copy_chars(_M_data(), __beg, __end);
 8003ab0:	4632      	mov	r2, r6
 8003ab2:	4629      	mov	r1, r5
 8003ab4:	6820      	ldr	r0, [r4, #0]
 8003ab6:	f004 fcce 	bl	8008456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	__c1 = __c2;
 8003aba:	2100      	movs	r1, #0
	_M_set_length(__dnew);
 8003abc:	9b01      	ldr	r3, [sp, #4]
 8003abe:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
 8003ac0:	6063      	str	r3, [r4, #4]
 8003ac2:	54d1      	strb	r1, [r2, r3]
      }
 8003ac4:	b002      	add	sp, #8
 8003ac6:	bd70      	pop	{r4, r5, r6, pc}
 8003ac8:	08009b6b 	.word	0x08009b6b

08003acc <_ZNK5astra8CheckBox7getTypeB5cxx11Ev>:
  [[nodiscard]] std::string getType() const override { return "CheckBox"; }
 8003acc:	b510      	push	{r4, lr}
 8003ace:	4604      	mov	r4, r0
 8003ad0:	4902      	ldr	r1, [pc, #8]	@ (8003adc <_ZNK5astra8CheckBox7getTypeB5cxx11Ev+0x10>)
 8003ad2:	f7ff ffd3 	bl	8003a7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 8003ad6:	4620      	mov	r0, r4
 8003ad8:	bd10      	pop	{r4, pc}
 8003ada:	bf00      	nop
 8003adc:	08009dc8 	.word	0x08009dc8

08003ae0 <_ZNK5astra5PopUp7getTypeB5cxx11Ev>:
  [[nodiscard]] std::string getType() const override { return "PopUp"; }
 8003ae0:	b510      	push	{r4, lr}
 8003ae2:	4604      	mov	r4, r0
 8003ae4:	4902      	ldr	r1, [pc, #8]	@ (8003af0 <_ZNK5astra5PopUp7getTypeB5cxx11Ev+0x10>)
 8003ae6:	f7ff ffc9 	bl	8003a7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 8003aea:	4620      	mov	r0, r4
 8003aec:	bd10      	pop	{r4, pc}
 8003aee:	bf00      	nop
 8003af0:	08009dd1 	.word	0x08009dd1

08003af4 <_ZNK5astra6Slider7getTypeB5cxx11Ev>:
public:
  [[nodiscard]] std::string getType() const override { return "Slider"; }
 8003af4:	b510      	push	{r4, lr}
 8003af6:	4604      	mov	r4, r0
 8003af8:	4902      	ldr	r1, [pc, #8]	@ (8003b04 <_ZNK5astra6Slider7getTypeB5cxx11Ev+0x10>)
 8003afa:	f7ff ffbf 	bl	8003a7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 8003afe:	4620      	mov	r0, r4
 8003b00:	bd10      	pop	{r4, pc}
 8003b02:	bf00      	nop
 8003b04:	08009dd7 	.word	0x08009dd7

08003b08 <_ZNK5astra6Widget7getTypeB5cxx11Ev>:
  [[nodiscard]] virtual std::string getType() const { return "base"; }
 8003b08:	b510      	push	{r4, lr}
 8003b0a:	4604      	mov	r4, r0
 8003b0c:	4902      	ldr	r1, [pc, #8]	@ (8003b18 <_ZNK5astra6Widget7getTypeB5cxx11Ev+0x10>)
 8003b0e:	f7ff ffb5 	bl	8003a7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 8003b12:	4620      	mov	r0, r4
 8003b14:	bd10      	pop	{r4, pc}
 8003b16:	bf00      	nop
 8003b18:	08009dde 	.word	0x08009dde

08003b1c <_ZN5astra5PopUp6deInitEv>:
void PopUp::deInit() {
 8003b1c:	b570      	push	{r4, r5, r6, lr}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003b1e:	e9d0 5642 	ldrd	r5, r6, [r0, #264]	@ 0x108
 8003b22:	4604      	mov	r4, r0
class PopUp : public Widget {
 8003b24:	4b0d      	ldr	r3, [pc, #52]	@ (8003b5c <_ZN5astra5PopUp6deInitEv+0x40>)
 8003b26:	6003      	str	r3, [r0, #0]
 8003b28:	42ae      	cmp	r6, r5
 8003b2a:	d112      	bne.n	8003b52 <_ZN5astra5PopUp6deInitEv+0x36>
	_M_deallocate(_M_impl._M_start,
 8003b2c:	f8d4 0108 	ldr.w	r0, [r4, #264]	@ 0x108
	if (__p)
 8003b30:	b120      	cbz	r0, 8003b3c <_ZN5astra5PopUp6deInitEv+0x20>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8003b32:	f8d4 1110 	ldr.w	r1, [r4, #272]	@ 0x110
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8003b36:	1a09      	subs	r1, r1, r0
 8003b38:	f004 f8e6 	bl	8007d08 <_ZdlPvj>
      { _M_dispose(); }
 8003b3c:	f104 00f0 	add.w	r0, r4, #240	@ 0xf0
 8003b40:	f004 fc46 	bl	80083d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
  delete this;
 8003b44:	4620      	mov	r0, r4
}
 8003b46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  delete this;
 8003b4a:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8003b4e:	f004 b8db 	b.w	8007d08 <_ZdlPvj>
 8003b52:	4628      	mov	r0, r5
 8003b54:	f004 fc3c 	bl	80083d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8003b58:	3518      	adds	r5, #24
 8003b5a:	e7e5      	b.n	8003b28 <_ZN5astra5PopUp6deInitEv+0xc>
 8003b5c:	08009ea4 	.word	0x08009ea4

08003b60 <_ZN3HAL10drawRFrameEfffff>:
  static void drawRFrame(float _x, float _y, float _w, float _h, float _r) {
 8003b60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b62:	460d      	mov	r5, r1
 8003b64:	4616      	mov	r6, r2
 8003b66:	461f      	mov	r7, r3
 8003b68:	4604      	mov	r4, r0
    get()->_drawRFrame(_x,
 8003b6a:	f000 ffc1 	bl	8004af0 <_ZN3HAL3getEv>
 8003b6e:	9a08      	ldr	r2, [sp, #32]
 8003b70:	6803      	ldr	r3, [r0, #0]
 8003b72:	9201      	str	r2, [sp, #4]
 8003b74:	9700      	str	r7, [sp, #0]
 8003b76:	6e1f      	ldr	r7, [r3, #96]	@ 0x60
 8003b78:	462a      	mov	r2, r5
 8003b7a:	4633      	mov	r3, r6
 8003b7c:	4621      	mov	r1, r4
 8003b7e:	47b8      	blx	r7
  }
 8003b80:	b003      	add	sp, #12
 8003b82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b84 <_ZN5astra8CheckBox15renderIndicatorEffRKSt6vectorIfSaIfEE>:
void CheckBox::renderIndicator(float _x, float _y, const std::vector<float> &_camera) {
 8003b84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b88:	461f      	mov	r7, r3
 8003b8a:	4616      	mov	r6, r2
 8003b8c:	4604      	mov	r4, r0
  Item::updateConfig();
 8003b8e:	3004      	adds	r0, #4
void CheckBox::renderIndicator(float _x, float _y, const std::vector<float> &_camera) {
 8003b90:	460d      	mov	r5, r1
  Item::updateConfig();
 8003b92:	f7fe fd7b 	bl	800268c <_ZN5astra4Item12updateConfigEv>
  HAL::setDrawType(1);
 8003b96:	2001      	movs	r0, #1
 8003b98:	f7fd fa4b 	bl	8001032 <_ZN3HAL11setDrawTypeEh>
	return *(this->_M_impl._M_start + __n);
 8003b9c:	f8d7 9000 	ldr.w	r9, [r7]
  HAL::drawRFrame(_x + _camera[0],
 8003ba0:	4630      	mov	r0, r6
 8003ba2:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8003ba6:	f7fc fec9 	bl	800093c <__addsf3>
 8003baa:	4680      	mov	r8, r0
 8003bac:	f8d9 1000 	ldr.w	r1, [r9]
 8003bb0:	4628      	mov	r0, r5
 8003bb2:	f7fc fec3 	bl	800093c <__addsf3>
 8003bb6:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 8003bba:	4641      	mov	r1, r8
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
 8003bc2:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8003bc6:	f7ff ffcb 	bl	8003b60 <_ZN3HAL10drawRFrameEfffff>
  if (isCheck) //绘制复选框内的点
 8003bca:	f894 30dd 	ldrb.w	r3, [r4, #221]	@ 0xdd
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d035      	beq.n	8003c3e <_ZN5astra8CheckBox15renderIndicatorEffRKSt6vectorIfSaIfEE+0xba>
                 _y + _camera[1] + astraConfig.checkBoxHeight / 4,
 8003bd2:	f8d4 b0c8 	ldr.w	fp, [r4, #200]	@ 0xc8
    HAL::drawBox(_x + _camera[0] + astraConfig.checkBoxWidth / 4,
 8003bd6:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003bda:	4658      	mov	r0, fp
 8003bdc:	f7fc ffb6 	bl	8000b4c <__aeabi_fmul>
 8003be0:	f8d4 90c4 	ldr.w	r9, [r4, #196]	@ 0xc4
 8003be4:	4680      	mov	r8, r0
 8003be6:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003bea:	4648      	mov	r0, r9
 8003bec:	f7fc ffae 	bl	8000b4c <__aeabi_fmul>
 8003bf0:	f8d7 a000 	ldr.w	sl, [r7]
 8003bf4:	4607      	mov	r7, r0
                 _y + _camera[1] + astraConfig.checkBoxHeight / 4,
 8003bf6:	f8da 1004 	ldr.w	r1, [sl, #4]
 8003bfa:	4630      	mov	r0, r6
 8003bfc:	f7fc fe9e 	bl	800093c <__addsf3>
 8003c00:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8003c04:	4604      	mov	r4, r0
 8003c06:	4658      	mov	r0, fp
 8003c08:	f7fc ffa0 	bl	8000b4c <__aeabi_fmul>
 8003c0c:	4601      	mov	r1, r0
    HAL::drawBox(_x + _camera[0] + astraConfig.checkBoxWidth / 4,
 8003c0e:	4620      	mov	r0, r4
 8003c10:	f7fc fe94 	bl	800093c <__addsf3>
 8003c14:	f8da 1000 	ldr.w	r1, [sl]
 8003c18:	4604      	mov	r4, r0
 8003c1a:	4628      	mov	r0, r5
 8003c1c:	f7fc fe8e 	bl	800093c <__addsf3>
 8003c20:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8003c24:	4605      	mov	r5, r0
 8003c26:	4648      	mov	r0, r9
 8003c28:	f7fc ff90 	bl	8000b4c <__aeabi_fmul>
 8003c2c:	4601      	mov	r1, r0
 8003c2e:	4628      	mov	r0, r5
 8003c30:	f7fc fe84 	bl	800093c <__addsf3>
 8003c34:	4643      	mov	r3, r8
 8003c36:	463a      	mov	r2, r7
 8003c38:	4621      	mov	r1, r4
 8003c3a:	f7fe fd17 	bl	800266c <_ZN3HAL7drawBoxEffff>
}
 8003c3e:	b003      	add	sp, #12
 8003c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003c44 <_ZN5astra6Slider15renderIndicatorEffRKSt6vectorIfSaIfEE>:

void Slider::renderIndicator(float _x, float _y, const std::vector<float> &_camera) {
 8003c44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003c48:	461f      	mov	r7, r3
 8003c4a:	4615      	mov	r5, r2
 8003c4c:	4606      	mov	r6, r0
  Item::updateConfig();
 8003c4e:	3004      	adds	r0, #4
void Slider::renderIndicator(float _x, float _y, const std::vector<float> &_camera) {
 8003c50:	460c      	mov	r4, r1
  Item::updateConfig();
 8003c52:	f7fe fd1b 	bl	800268c <_ZN5astra4Item12updateConfigEv>
  HAL::setDrawType(1);
 8003c56:	2001      	movs	r0, #1
 8003c58:	f7fd f9eb 	bl	8001032 <_ZN3HAL11setDrawTypeEh>
 8003c5c:	f8d7 8000 	ldr.w	r8, [r7]
  HAL::drawRFrame(_x + _camera[0] - 1, _y + _camera[1] - 1, 10, 8, 1);
 8003c60:	4628      	mov	r0, r5
 8003c62:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003c66:	f7fc fe69 	bl	800093c <__addsf3>
 8003c6a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003c6e:	f7fc fe63 	bl	8000938 <__aeabi_fsub>
 8003c72:	f8d8 1000 	ldr.w	r1, [r8]
 8003c76:	4681      	mov	r9, r0
 8003c78:	f04f 587e 	mov.w	r8, #1065353216	@ 0x3f800000
 8003c7c:	4620      	mov	r0, r4
 8003c7e:	f7fc fe5d 	bl	800093c <__addsf3>
 8003c82:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003c86:	f7fc fe57 	bl	8000938 <__aeabi_fsub>
 8003c8a:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8003c8e:	4a12      	ldr	r2, [pc, #72]	@ (8003cd8 <_ZN5astra6Slider15renderIndicatorEffRKSt6vectorIfSaIfEE+0x94>)
 8003c90:	4649      	mov	r1, r9
 8003c92:	f8cd 8000 	str.w	r8, [sp]
 8003c96:	f7ff ff63 	bl	8003b60 <_ZN3HAL10drawRFrameEfffff>
  HAL::drawBox(_x + _camera[0] + 1, _y + _camera[1] + 1, lengthIndicator, 4);
 8003c9a:	f896 0115 	ldrb.w	r0, [r6, #277]	@ 0x115
 8003c9e:	f7fc fefd 	bl	8000a9c <__aeabi_ui2f>
 8003ca2:	683f      	ldr	r7, [r7, #0]
 8003ca4:	4606      	mov	r6, r0
 8003ca6:	6879      	ldr	r1, [r7, #4]
 8003ca8:	4628      	mov	r0, r5
 8003caa:	f7fc fe47 	bl	800093c <__addsf3>
 8003cae:	4641      	mov	r1, r8
 8003cb0:	f7fc fe44 	bl	800093c <__addsf3>
 8003cb4:	4605      	mov	r5, r0
 8003cb6:	6839      	ldr	r1, [r7, #0]
 8003cb8:	4620      	mov	r0, r4
 8003cba:	f7fc fe3f 	bl	800093c <__addsf3>
 8003cbe:	4641      	mov	r1, r8
 8003cc0:	f7fc fe3c 	bl	800093c <__addsf3>
 8003cc4:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8003cc8:	4632      	mov	r2, r6
 8003cca:	4629      	mov	r1, r5
 8003ccc:	f7fe fcce 	bl	800266c <_ZN3HAL7drawBoxEffff>
}
 8003cd0:	b003      	add	sp, #12
 8003cd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003cd6:	bf00      	nop
 8003cd8:	41200000 	.word	0x41200000

08003cdc <_ZN5astra5PopUp15renderIndicatorEffRKSt6vectorIfSaIfEE>:
void PopUp::renderIndicator(float _x, float _y, const std::vector<float> &_camera) {
 8003cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cde:	461f      	mov	r7, r3
 8003ce0:	460e      	mov	r6, r1
 8003ce2:	b087      	sub	sp, #28
 8003ce4:	4604      	mov	r4, r0
  Item::updateConfig();
 8003ce6:	3004      	adds	r0, #4
void PopUp::renderIndicator(float _x, float _y, const std::vector<float> &_camera) {
 8003ce8:	4615      	mov	r5, r2
  Item::updateConfig();
 8003cea:	f7fe fccf 	bl	800268c <_ZN5astra4Item12updateConfigEv>
  HAL::setDrawType(1);
 8003cee:	2001      	movs	r0, #1
 8003cf0:	f7fd f99f 	bl	8001032 <_ZN3HAL11setDrawTypeEh>
 8003cf4:	683f      	ldr	r7, [r7, #0]
  HAL::drawEnglish(_x + _camera[0] + 1, _y + _camera[1] + astraConfig.listTextHeight, std::to_string(value));
 8003cf6:	4630      	mov	r0, r6
 8003cf8:	6839      	ldr	r1, [r7, #0]
 8003cfa:	f7fc fe1f 	bl	800093c <__addsf3>
 8003cfe:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003d02:	f7fc fe1b 	bl	800093c <__addsf3>
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	4606      	mov	r6, r0
 8003d0a:	4628      	mov	r0, r5
 8003d0c:	f7fc fe16 	bl	800093c <__addsf3>
 8003d10:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003d12:	f7fc fe13 	bl	800093c <__addsf3>
#if _GLIBCXX_USE_CXX11_ABI && (__CHAR_BIT__ * __SIZEOF_INT__) <= 32
  noexcept // any 32-bit value fits in the SSO buffer
#endif
  {
    const bool __neg = __val < 0;
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
 8003d16:	f894 40dc 	ldrb.w	r4, [r4, #220]	@ 0xdc
 8003d1a:	4607      	mov	r7, r0
      const unsigned __b2 = __base  * __base;
      const unsigned __b3 = __b2 * __base;
      const unsigned long __b4 = __b3 * __base;
      for (;;)
	{
	  if (__value < (unsigned)__base) return __n;
 8003d1c:	2c09      	cmp	r4, #9
 8003d1e:	d924      	bls.n	8003d6a <_ZN5astra5PopUp15renderIndicatorEffRKSt6vectorIfSaIfEE+0x8e>
	  if (__value < __b2) return __n + 1;
	  if (__value < __b3) return __n + 2;
 8003d20:	2c64      	cmp	r4, #100	@ 0x64
 8003d22:	bf34      	ite	cc
 8003d24:	2502      	movcc	r5, #2
 8003d26:	2503      	movcs	r5, #3
      { _M_construct(__n, __c); }
 8003d28:	222d      	movs	r2, #45	@ 0x2d
 8003d2a:	4668      	mov	r0, sp
	: allocator_type(__a), _M_p(__dat) { }
 8003d2c:	ab02      	add	r3, sp, #8
      { _M_construct(__n, __c); }
 8003d2e:	4629      	mov	r1, r5
	: allocator_type(__a), _M_p(__dat) { }
 8003d30:	9300      	str	r3, [sp, #0]
      { _M_construct(__n, __c); }
 8003d32:	f004 fb71 	bl	8008418 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>
	"2021222324252627282930313233343536373839"
	"4041424344454647484950515253545556575859"
	"6061626364656667686970717273747576777879"
	"8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
      while (__val >= 100)
 8003d36:	2c63      	cmp	r4, #99	@ 0x63
      { return _M_dataplus._M_p; }
 8003d38:	9a00      	ldr	r2, [sp, #0]
      unsigned __pos = __len - 1;
 8003d3a:	f105 30ff 	add.w	r0, r5, #4294967295
      while (__val >= 100)
 8003d3e:	d916      	bls.n	8003d6e <_ZN5astra5PopUp15renderIndicatorEffRKSt6vectorIfSaIfEE+0x92>
	{
	  auto const __num = (__val % 100) * 2;
 8003d40:	2364      	movs	r3, #100	@ 0x64
 8003d42:	fbb4 f1f3 	udiv	r1, r4, r3
 8003d46:	fb03 4311 	mls	r3, r3, r1, r4
	  __val /= 100;
 8003d4a:	460c      	mov	r4, r1
	  __first[__pos] = __digits[__num + 1];
 8003d4c:	4913      	ldr	r1, [pc, #76]	@ (8003d9c <_ZN5astra5PopUp15renderIndicatorEffRKSt6vectorIfSaIfEE+0xc0>)
	  __first[__pos - 1] = __digits[__num];
 8003d4e:	4415      	add	r5, r2
	  __first[__pos] = __digits[__num + 1];
 8003d50:	eb01 0c43 	add.w	ip, r1, r3, lsl #1
 8003d54:	f89c c001 	ldrb.w	ip, [ip, #1]
	  __first[__pos - 1] = __digits[__num];
 8003d58:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
	  __first[__pos] = __digits[__num + 1];
 8003d5c:	f802 c000 	strb.w	ip, [r2, r0]
	  __first[__pos - 1] = __digits[__num];
 8003d60:	f805 3c02 	strb.w	r3, [r5, #-2]
	  auto const __num = __val * 2;
	  __first[1] = __digits[__num + 1];
	  __first[0] = __digits[__num];
	}
      else
	__first[0] = '0' + __val;
 8003d64:	3430      	adds	r4, #48	@ 0x30
 8003d66:	b2e4      	uxtb	r4, r4
 8003d68:	e00a      	b.n	8003d80 <_ZN5astra5PopUp15renderIndicatorEffRKSt6vectorIfSaIfEE+0xa4>
 8003d6a:	2501      	movs	r5, #1
 8003d6c:	e7dc      	b.n	8003d28 <_ZN5astra5PopUp15renderIndicatorEffRKSt6vectorIfSaIfEE+0x4c>
      if (__val >= 10)
 8003d6e:	2c09      	cmp	r4, #9
 8003d70:	d9f8      	bls.n	8003d64 <_ZN5astra5PopUp15renderIndicatorEffRKSt6vectorIfSaIfEE+0x88>
	  __first[1] = __digits[__num + 1];
 8003d72:	4b0a      	ldr	r3, [pc, #40]	@ (8003d9c <_ZN5astra5PopUp15renderIndicatorEffRKSt6vectorIfSaIfEE+0xc0>)
 8003d74:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 8003d78:	7849      	ldrb	r1, [r1, #1]
	  __first[0] = __digits[__num];
 8003d7a:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
	  __first[1] = __digits[__num + 1];
 8003d7e:	7051      	strb	r1, [r2, #1]
	  __first[0] = __digits[__num];
 8003d80:	7014      	strb	r4, [r2, #0]
  static void drawEnglish(float _x, float _y, const std::string &_text) { get()->_drawEnglish(_x, _y, _text); }
 8003d82:	f000 feb5 	bl	8004af0 <_ZN3HAL3getEv>
 8003d86:	6803      	ldr	r3, [r0, #0]
 8003d88:	463a      	mov	r2, r7
 8003d8a:	4631      	mov	r1, r6
 8003d8c:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8003d8e:	466b      	mov	r3, sp
 8003d90:	47a0      	blx	r4
      { _M_dispose(); }
 8003d92:	4668      	mov	r0, sp
 8003d94:	f004 fb1c 	bl	80083d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
}
 8003d98:	b007      	add	sp, #28
 8003d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d9c:	08009ed4 	.word	0x08009ed4

08003da0 <_ZN5astra6WidgetC1Ev>:
struct config {
 8003da0:	f44f 4281 	mov.w	r2, #16512	@ 0x4080
 8003da4:	8082      	strh	r2, [r0, #4]
 8003da6:	4a3f      	ldr	r2, [pc, #252]	@ (8003ea4 <_ZN5astra6WidgetC1Ev+0x104>)
  Widget() = default;
 8003da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003daa:	6082      	str	r2, [r0, #8]

namespace astra {
/**
 * @brief config of astra ui. astra ui的配置结构体
 */
struct config {
 8003dac:	4a3e      	ldr	r2, [pc, #248]	@ (8003ea8 <_ZN5astra6WidgetC1Ev+0x108>)
 8003dae:	f04f 547c 	mov.w	r4, #1056964608	@ 0x3f000000
 8003db2:	60c2      	str	r2, [r0, #12]
 8003db4:	6102      	str	r2, [r0, #16]
 8003db6:	6182      	str	r2, [r0, #24]
 8003db8:	61c2      	str	r2, [r0, #28]
 8003dba:	6342      	str	r2, [r0, #52]	@ 0x34
 8003dbc:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 8003dc0:	493a      	ldr	r1, [pc, #232]	@ (8003eac <_ZN5astra6WidgetC1Ev+0x10c>)
 8003dc2:	2500      	movs	r5, #0
 8003dc4:	6141      	str	r1, [r0, #20]
 8003dc6:	493a      	ldr	r1, [pc, #232]	@ (8003eb0 <_ZN5astra6WidgetC1Ev+0x110>)
 8003dc8:	f04f 4683 	mov.w	r6, #1098907648	@ 0x41800000
 8003dcc:	6201      	str	r1, [r0, #32]
 8003dce:	4939      	ldr	r1, [pc, #228]	@ (8003eb4 <_ZN5astra6WidgetC1Ev+0x114>)
 8003dd0:	6382      	str	r2, [r0, #56]	@ 0x38
 8003dd2:	6241      	str	r1, [r0, #36]	@ 0x24
 8003dd4:	4938      	ldr	r1, [pc, #224]	@ (8003eb8 <_ZN5astra6WidgetC1Ev+0x118>)
 8003dd6:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8003dda:	6281      	str	r1, [r0, #40]	@ 0x28
 8003ddc:	4937      	ldr	r1, [pc, #220]	@ (8003ebc <_ZN5astra6WidgetC1Ev+0x11c>)
 8003dde:	6504      	str	r4, [r0, #80]	@ 0x50
 8003de0:	62c1      	str	r1, [r0, #44]	@ 0x2c
 8003de2:	4937      	ldr	r1, [pc, #220]	@ (8003ec0 <_ZN5astra6WidgetC1Ev+0x120>)
 8003de4:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 8003de8:	6301      	str	r1, [r0, #48]	@ 0x30
 8003dea:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8003dee:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8003ec4 <_ZN5astra6WidgetC1Ev+0x124>
 8003df2:	4f35      	ldr	r7, [pc, #212]	@ (8003ec8 <_ZN5astra6WidgetC1Ev+0x128>)
 8003df4:	f8c0 c05c 	str.w	ip, [r0, #92]	@ 0x5c
 8003df8:	f8c0 c060 	str.w	ip, [r0, #96]	@ 0x60
 8003dfc:	f8df c0cc 	ldr.w	ip, [pc, #204]	@ 8003ecc <_ZN5astra6WidgetC1Ev+0x12c>
 8003e00:	6407      	str	r7, [r0, #64]	@ 0x40
 8003e02:	f8c0 c06c 	str.w	ip, [r0, #108]	@ 0x6c
 8003e06:	f8df c0c8 	ldr.w	ip, [pc, #200]	@ 8003ed0 <_ZN5astra6WidgetC1Ev+0x130>
 8003e0a:	6442      	str	r2, [r0, #68]	@ 0x44
 8003e0c:	f8c0 c074 	str.w	ip, [r0, #116]	@ 0x74
 8003e10:	f8df c0c0 	ldr.w	ip, [pc, #192]	@ 8003ed4 <_ZN5astra6WidgetC1Ev+0x134>
 8003e14:	64c6      	str	r6, [r0, #76]	@ 0x4c
 8003e16:	6584      	str	r4, [r0, #88]	@ 0x58
 8003e18:	6642      	str	r2, [r0, #100]	@ 0x64
 8003e1a:	6682      	str	r2, [r0, #104]	@ 0x68
 8003e1c:	6782      	str	r2, [r0, #120]	@ 0x78
 8003e1e:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
 8003e22:	6481      	str	r1, [r0, #72]	@ 0x48
 8003e24:	6541      	str	r1, [r0, #84]	@ 0x54
 8003e26:	6701      	str	r1, [r0, #112]	@ 0x70
 8003e28:	f8c0 c07c 	str.w	ip, [r0, #124]	@ 0x7c
 8003e2c:	f8c0 4080 	str.w	r4, [r0, #128]	@ 0x80
 8003e30:	f8c0 40a0 	str.w	r4, [r0, #160]	@ 0xa0
 8003e34:	f8c0 40a8 	str.w	r4, [r0, #168]	@ 0xa8
 8003e38:	4c27      	ldr	r4, [pc, #156]	@ (8003ed8 <_ZN5astra6WidgetC1Ev+0x138>)
 8003e3a:	f8c0 2094 	str.w	r2, [r0, #148]	@ 0x94
 8003e3e:	f8c0 40ac 	str.w	r4, [r0, #172]	@ 0xac
 8003e42:	f8c0 20b0 	str.w	r2, [r0, #176]	@ 0xb0
 8003e46:	2410      	movs	r4, #16
 8003e48:	f8c0 20c4 	str.w	r2, [r0, #196]	@ 0xc4
 8003e4c:	f8c0 20c8 	str.w	r2, [r0, #200]	@ 0xc8
 8003e50:	4a22      	ldr	r2, [pc, #136]	@ (8003edc <_ZN5astra6WidgetC1Ev+0x13c>)
 8003e52:	f8c0 7084 	str.w	r7, [r0, #132]	@ 0x84
 8003e56:	f8c0 20d0 	str.w	r2, [r0, #208]	@ 0xd0
 8003e5a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003e5e:	4f20      	ldr	r7, [pc, #128]	@ (8003ee0 <_ZN5astra6WidgetC1Ev+0x140>)
 8003e60:	f880 40b4 	strb.w	r4, [r0, #180]	@ 0xb4
 8003e64:	4c1f      	ldr	r4, [pc, #124]	@ (8003ee4 <_ZN5astra6WidgetC1Ev+0x144>)
 8003e66:	f8c0 7088 	str.w	r7, [r0, #136]	@ 0x88
 8003e6a:	f8c0 6098 	str.w	r6, [r0, #152]	@ 0x98
 8003e6e:	4f1e      	ldr	r7, [pc, #120]	@ (8003ee8 <_ZN5astra6WidgetC1Ev+0x148>)
 8003e70:	4e1e      	ldr	r6, [pc, #120]	@ (8003eec <_ZN5astra6WidgetC1Ev+0x14c>)
 8003e72:	f8c0 40b8 	str.w	r4, [r0, #184]	@ 0xb8
 8003e76:	f8c0 20d4 	str.w	r2, [r0, #212]	@ 0xd4
 8003e7a:	4c1d      	ldr	r4, [pc, #116]	@ (8003ef0 <_ZN5astra6WidgetC1Ev+0x150>)
 8003e7c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ef4 <_ZN5astra6WidgetC1Ev+0x154>)
 8003e7e:	e9c0 442f 	strd	r4, r4, [r0, #188]	@ 0xbc
 8003e82:	f8c0 708c 	str.w	r7, [r0, #140]	@ 0x8c
 8003e86:	f8c0 7090 	str.w	r7, [r0, #144]	@ 0x90
 8003e8a:	f8c0 109c 	str.w	r1, [r0, #156]	@ 0x9c
 8003e8e:	f8c0 60a4 	str.w	r6, [r0, #164]	@ 0xa4
 8003e92:	f8c0 10cc 	str.w	r1, [r0, #204]	@ 0xcc
 8003e96:	6002      	str	r2, [r0, #0]
 8003e98:	f8c0 50d8 	str.w	r5, [r0, #216]	@ 0xd8
 8003e9c:	f880 50dc 	strb.w	r5, [r0, #220]	@ 0xdc
 8003ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	437f0000 	.word	0x437f0000
 8003ea8:	428c0000 	.word	0x428c0000
 8003eac:	42700000 	.word	0x42700000
 8003eb0:	425c0000 	.word	0x425c0000
 8003eb4:	41c80000 	.word	0x41c80000
 8003eb8:	41700000 	.word	0x41700000
 8003ebc:	42c80000 	.word	0x42c80000
 8003ec0:	42a00000 	.word	0x42a00000
 8003ec4:	41f00000 	.word	0x41f00000
 8003ec8:	40a00000 	.word	0x40a00000
 8003ecc:	40c00000 	.word	0x40c00000
 8003ed0:	41900000 	.word	0x41900000
 8003ed4:	41400000 	.word	0x41400000
 8003ed8:	41600000 	.word	0x41600000
 8003edc:	41200000 	.word	0x41200000
 8003ee0:	40400000 	.word	0x40400000
 8003ee4:	08009fcc 	.word	0x08009fcc
 8003ee8:	42100000 	.word	0x42100000
 8003eec:	42b40000 	.word	0x42b40000
 8003ef0:	0800a81f 	.word	0x0800a81f
 8003ef4:	08009e6c 	.word	0x08009e6c

08003ef8 <_ZN5astra8CheckBoxC1ERb>:
CheckBox::CheckBox(bool &_value) {
 8003ef8:	b538      	push	{r3, r4, r5, lr}
 8003efa:	4604      	mov	r4, r0
 8003efc:	460d      	mov	r5, r1
 8003efe:	f7ff ff4f 	bl	8003da0 <_ZN5astra6WidgetC1Ev>
 8003f02:	4b06      	ldr	r3, [pc, #24]	@ (8003f1c <_ZN5astra8CheckBoxC1ERb+0x24>)
}
 8003f04:	4620      	mov	r0, r4
CheckBox::CheckBox(bool &_value) {
 8003f06:	6023      	str	r3, [r4, #0]
  value = _value;
 8003f08:	782b      	ldrb	r3, [r5, #0]
 8003f0a:	f884 30dc 	strb.w	r3, [r4, #220]	@ 0xdc
  if (value) isCheck = true;
 8003f0e:	f884 30dd 	strb.w	r3, [r4, #221]	@ 0xdd
  this->parent = nullptr;
 8003f12:	2300      	movs	r3, #0
 8003f14:	f8c4 30d8 	str.w	r3, [r4, #216]	@ 0xd8
}
 8003f18:	bd38      	pop	{r3, r4, r5, pc}
 8003f1a:	bf00      	nop
 8003f1c:	08009e88 	.word	0x08009e88

08003f20 <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh>:
PopUp::PopUp(unsigned char _direction,
 8003f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f24:	4604      	mov	r4, r0
 8003f26:	460e      	mov	r6, r1
 8003f28:	4615      	mov	r5, r2
 8003f2a:	4699      	mov	r9, r3
             unsigned char &_value) {
 8003f2c:	f7ff ff38 	bl	8003da0 <_ZN5astra6WidgetC1Ev>
 8003f30:	4620      	mov	r0, r4
 8003f32:	4b58      	ldr	r3, [pc, #352]	@ (8004094 <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh+0x174>)
 8003f34:	2210      	movs	r2, #16
 8003f36:	2100      	movs	r1, #0
 8003f38:	f840 3be0 	str.w	r3, [r0], #224
 8003f3c:	f004 fddf 	bl	8008afe <memset>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 8003f40:	f104 03f8 	add.w	r3, r4, #248	@ 0xf8
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 8003f44:	f8c4 30f0 	str.w	r3, [r4, #240]	@ 0xf0
      { _M_string_length = __length; }
 8003f48:	2300      	movs	r3, #0
	this->_M_assign(__str);
 8003f4a:	4629      	mov	r1, r5
	: _M_start(), _M_finish(), _M_end_of_storage()
 8003f4c:	e9c4 3342 	strd	r3, r3, [r4, #264]	@ 0x108
      { _M_string_length = __length; }
 8003f50:	f8c4 30f4 	str.w	r3, [r4, #244]	@ 0xf4
 8003f54:	f884 30f8 	strb.w	r3, [r4, #248]	@ 0xf8
 8003f58:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
  direction = _direction;
 8003f5c:	f884 6114 	strb.w	r6, [r4, #276]	@ 0x114
	this->_M_assign(__str);
 8003f60:	f104 00f0 	add.w	r0, r4, #240	@ 0xf0
 8003f64:	f004 fa85 	bl	8008472 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
             unsigned char &_value) {
 8003f68:	f504 7384 	add.w	r3, r4, #264	@ 0x108
      if (std::__addressof(__x) != this)
 8003f6c:	4599      	cmp	r9, r3
 8003f6e:	d02d      	beq.n	8003fcc <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh+0xac>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8003f70:	e9d9 5a00 	ldrd	r5, sl, [r9]
			 - this->_M_impl._M_start); }
 8003f74:	f8d4 8108 	ldr.w	r8, [r4, #264]	@ 0x108
 8003f78:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8003f7c:	ebaa 0705 	sub.w	r7, sl, r5
			 - this->_M_impl._M_start); }
 8003f80:	eba3 0308 	sub.w	r3, r3, r8
	  if (__xlen > capacity())
 8003f84:	42bb      	cmp	r3, r7
 8003f86:	d240      	bcs.n	800400a <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh+0xea>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8003f88:	4b43      	ldr	r3, [pc, #268]	@ (8004098 <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh+0x178>)
 8003f8a:	429f      	cmp	r7, r3
 8003f8c:	d901      	bls.n	8003f92 <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh+0x72>
	      std::__throw_bad_array_new_length();
 8003f8e:	f004 f9e5 	bl	800835c <_ZSt28__throw_bad_array_new_lengthv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8003f92:	4638      	mov	r0, r7
 8003f94:	f002 fd0a 	bl	80069ac <_Znwj>
 8003f98:	4606      	mov	r6, r0
      _ForwardIterator __cur = __result;
 8003f9a:	4680      	mov	r8, r0
	  for (; __first != __last; ++__first, (void)++__cur)
 8003f9c:	45aa      	cmp	sl, r5
 8003f9e:	d127      	bne.n	8003ff0 <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh+0xd0>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003fa0:	e9d4 5842 	ldrd	r5, r8, [r4, #264]	@ 0x108
 8003fa4:	45a8      	cmp	r8, r5
 8003fa6:	d12b      	bne.n	8004000 <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh+0xe0>
	      _M_deallocate(this->_M_impl._M_start,
 8003fa8:	f8d4 0108 	ldr.w	r0, [r4, #264]	@ 0x108
	if (__p)
 8003fac:	b120      	cbz	r0, 8003fb8 <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh+0x98>
			    - this->_M_impl._M_start);
 8003fae:	f8d4 1110 	ldr.w	r1, [r4, #272]	@ 0x110
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8003fb2:	1a09      	subs	r1, r1, r0
 8003fb4:	f003 fea8 	bl	8007d08 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
 8003fb8:	f8c4 6108 	str.w	r6, [r4, #264]	@ 0x108
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8003fbc:	443e      	add	r6, r7
 8003fbe:	f8c4 6110 	str.w	r6, [r4, #272]	@ 0x110
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8003fc2:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8003fc6:	443b      	add	r3, r7
 8003fc8:	f8c4 310c 	str.w	r3, [r4, #268]	@ 0x10c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8003fcc:	e9d4 2342 	ldrd	r2, r3, [r4, #264]	@ 0x108
 8003fd0:	1a9b      	subs	r3, r3, r2
 8003fd2:	4a32      	ldr	r2, [pc, #200]	@ (800409c <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh+0x17c>)
 8003fd4:	10db      	asrs	r3, r3, #3
 8003fd6:	4353      	muls	r3, r2
  boundary = options.size();
 8003fd8:	f884 3115 	strb.w	r3, [r4, #277]	@ 0x115
  value = _value;
 8003fdc:	9b08      	ldr	r3, [sp, #32]
}
 8003fde:	4620      	mov	r0, r4
  value = _value;
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	f884 30dc 	strb.w	r3, [r4, #220]	@ 0xdc
  this->parent = nullptr;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	f8c4 30d8 	str.w	r3, [r4, #216]	@ 0xd8
}
 8003fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8003ff0:	4629      	mov	r1, r5
 8003ff2:	4640      	mov	r0, r8
 8003ff4:	f7ff fd22 	bl	8003a3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
 8003ff8:	f108 0818 	add.w	r8, r8, #24
 8003ffc:	3518      	adds	r5, #24
 8003ffe:	e7cd      	b.n	8003f9c <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh+0x7c>
      { _M_dispose(); }
 8004000:	4628      	mov	r0, r5
 8004002:	f004 f9e5 	bl	80083d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
	  for (; __first != __last; ++__first)
 8004006:	3518      	adds	r5, #24
 8004008:	e7cc      	b.n	8003fa4 <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh+0x84>
 800400a:	f8d4 610c 	ldr.w	r6, [r4, #268]	@ 0x10c
 800400e:	4b23      	ldr	r3, [pc, #140]	@ (800409c <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh+0x17c>)
 8004010:	eba6 0608 	sub.w	r6, r6, r8
	  else if (size() >= __xlen)
 8004014:	42b7      	cmp	r7, r6
 8004016:	d81e      	bhi.n	8004056 <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh+0x136>
 8004018:	10fe      	asrs	r6, r7, #3
 800401a:	435e      	muls	r6, r3
 800401c:	46c2      	mov	sl, r8
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800401e:	46b1      	mov	r9, r6
 8004020:	f1b9 0f00 	cmp.w	r9, #0
 8004024:	dc0d      	bgt.n	8004042 <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh+0x122>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8004026:	2318      	movs	r3, #24
 8004028:	ea26 75e6 	bic.w	r5, r6, r6, asr #31
 800402c:	fb03 8505 	mla	r5, r3, r5, r8
      : _M_current(__i) { }
 8004030:	f8d4 910c 	ldr.w	r9, [r4, #268]	@ 0x10c
 8004034:	45a9      	cmp	r9, r5
 8004036:	d0c4      	beq.n	8003fc2 <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh+0xa2>
 8004038:	4628      	mov	r0, r5
 800403a:	f004 f9c9 	bl	80083d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      operator++() _GLIBCXX_NOEXCEPT
 800403e:	3518      	adds	r5, #24
	return *this;
 8004040:	e7f8      	b.n	8004034 <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh+0x114>
	this->_M_assign(__str);
 8004042:	4629      	mov	r1, r5
 8004044:	4650      	mov	r0, sl
 8004046:	f004 fa14 	bl	8008472 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	      ++__first;
 800404a:	3518      	adds	r5, #24
	      ++__result;
 800404c:	f10a 0a18 	add.w	sl, sl, #24
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8004050:	f109 39ff 	add.w	r9, r9, #4294967295
 8004054:	e7e4      	b.n	8004020 <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh+0x100>
 8004056:	10f6      	asrs	r6, r6, #3
 8004058:	435e      	muls	r6, r3
 800405a:	2e00      	cmp	r6, #0
 800405c:	dc10      	bgt.n	8004080 <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh+0x160>
 800405e:	e9d4 3642 	ldrd	r3, r6, [r4, #264]	@ 0x108
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8004062:	f8d9 5000 	ldr.w	r5, [r9]
 8004066:	1af3      	subs	r3, r6, r3
					  __x._M_impl._M_finish,
 8004068:	f8d9 8004 	ldr.w	r8, [r9, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800406c:	441d      	add	r5, r3
 800406e:	45a8      	cmp	r8, r5
 8004070:	d0a7      	beq.n	8003fc2 <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh+0xa2>
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8004072:	4629      	mov	r1, r5
 8004074:	4630      	mov	r0, r6
 8004076:	f7ff fce1 	bl	8003a3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
 800407a:	3518      	adds	r5, #24
 800407c:	3618      	adds	r6, #24
 800407e:	e7f6      	b.n	800406e <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh+0x14e>
 8004080:	4629      	mov	r1, r5
 8004082:	4640      	mov	r0, r8
 8004084:	f004 f9f5 	bl	8008472 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	      ++__first;
 8004088:	3518      	adds	r5, #24
	      ++__result;
 800408a:	f108 0818 	add.w	r8, r8, #24
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800408e:	3e01      	subs	r6, #1
 8004090:	e7e3      	b.n	800405a <_ZN5astra5PopUpC1EhRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS6_SaIS6_EERh+0x13a>
 8004092:	bf00      	nop
 8004094:	08009ea4 	.word	0x08009ea4
 8004098:	7ffffff8 	.word	0x7ffffff8
 800409c:	aaaaaaab 	.word	0xaaaaaaab

080040a0 <_ZN5astra6SliderC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhhRh>:
Slider::Slider(const std::string &_title,
 80040a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040a4:	4604      	mov	r4, r0
 80040a6:	461e      	mov	r6, r3
 80040a8:	4688      	mov	r8, r1
 80040aa:	4617      	mov	r7, r2
               unsigned char &_value) {
 80040ac:	f7ff fe78 	bl	8003da0 <_ZN5astra6WidgetC1Ev>
 80040b0:	4620      	mov	r0, r4
      { _M_string_length = __length; }
 80040b2:	2500      	movs	r5, #0
 80040b4:	4b17      	ldr	r3, [pc, #92]	@ (8004114 <_ZN5astra6SliderC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhhRh+0x74>)
 80040b6:	2218      	movs	r2, #24
 80040b8:	2100      	movs	r1, #0
 80040ba:	f840 3be0 	str.w	r3, [r0], #224
 80040be:	f004 fd1e 	bl	8008afe <memset>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 80040c2:	f504 7380 	add.w	r3, r4, #256	@ 0x100
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 80040c6:	f8c4 30f8 	str.w	r3, [r4, #248]	@ 0xf8
	this->_M_assign(__str);
 80040ca:	f104 00f8 	add.w	r0, r4, #248	@ 0xf8
 80040ce:	4641      	mov	r1, r8
      { _M_string_length = __length; }
 80040d0:	f8c4 50fc 	str.w	r5, [r4, #252]	@ 0xfc
 80040d4:	f884 5100 	strb.w	r5, [r4, #256]	@ 0x100
	this->_M_assign(__str);
 80040d8:	f004 f9cb 	bl	8008472 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
  step = _step;
 80040dc:	f89d 3018 	ldrb.w	r3, [sp, #24]
  maxLength = 0;
 80040e0:	f884 5110 	strb.w	r5, [r4, #272]	@ 0x110
  step = _step;
 80040e4:	f884 3113 	strb.w	r3, [r4, #275]	@ 0x113
  value = _value;
 80040e8:	9b07      	ldr	r3, [sp, #28]
  min = _min;
 80040ea:	f884 7111 	strb.w	r7, [r4, #273]	@ 0x111
  value = _value;
 80040ee:	781a      	ldrb	r2, [r3, #0]
  max = _max;
 80040f0:	f884 6112 	strb.w	r6, [r4, #274]	@ 0x112
  if (value > max) valueOverflow = true;
 80040f4:	42b2      	cmp	r2, r6
  value = _value;
 80040f6:	f884 20dc 	strb.w	r2, [r4, #220]	@ 0xdc
  if (value > max) valueOverflow = true;
 80040fa:	bf94      	ite	ls
 80040fc:	2200      	movls	r2, #0
 80040fe:	2201      	movhi	r2, #1
  lengthIndicator = 0;
 8004100:	f884 5115 	strb.w	r5, [r4, #277]	@ 0x115
}
 8004104:	4620      	mov	r0, r4
  this->parent = nullptr;
 8004106:	f8c4 50d8 	str.w	r5, [r4, #216]	@ 0xd8
  if (value > max) valueOverflow = true;
 800410a:	f884 2114 	strb.w	r2, [r4, #276]	@ 0x114
}
 800410e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004112:	bf00      	nop
 8004114:	08009ec0 	.word	0x08009ec0

08004118 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>:
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 8004118:	f100 0308 	add.w	r3, r0, #8
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 800411c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800411e:	4604      	mov	r4, r0
	if (__s == 0)
 8004120:	460d      	mov	r5, r1
	: allocator_type(__a), _M_p(__dat) { }
 8004122:	6003      	str	r3, [r0, #0]
	if (__s == 0)
 8004124:	b911      	cbnz	r1, 800412c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0+0x14>
	  std::__throw_logic_error(__N("basic_string: "
 8004126:	480f      	ldr	r0, [pc, #60]	@ (8004164 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0+0x4c>)
 8004128:	f004 f91b 	bl	8008362 <_ZSt19__throw_logic_errorPKc>
	return __builtin_strlen(__s);
 800412c:	4608      	mov	r0, r1
 800412e:	f7fc f819 	bl	8000164 <strlen>
	if (__dnew > size_type(_S_local_capacity))
 8004132:	280f      	cmp	r0, #15
	const _CharT* __end = __s + traits_type::length(__s);
 8004134:	eb05 0600 	add.w	r6, r5, r0
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8004138:	9001      	str	r0, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
 800413a:	d907      	bls.n	800414c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0+0x34>
	    _M_data(_M_create(__dnew, size_type(0)));
 800413c:	2200      	movs	r2, #0
 800413e:	4620      	mov	r0, r4
 8004140:	a901      	add	r1, sp, #4
 8004142:	f004 f923 	bl	800838c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
 8004146:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
 8004148:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
 800414a:	60a3      	str	r3, [r4, #8]
	this->_S_copy_chars(_M_data(), __beg, __end);
 800414c:	4632      	mov	r2, r6
 800414e:	4629      	mov	r1, r5
 8004150:	6820      	ldr	r0, [r4, #0]
 8004152:	f004 f980 	bl	8008456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	__c1 = __c2;
 8004156:	2100      	movs	r1, #0
	_M_set_length(__dnew);
 8004158:	9b01      	ldr	r3, [sp, #4]
 800415a:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
 800415c:	6063      	str	r3, [r4, #4]
 800415e:	54d1      	strb	r1, [r2, r3]
      }
 8004160:	b002      	add	sp, #8
 8004162:	bd70      	pop	{r4, r5, r6, pc}
 8004164:	08009b6b 	.word	0x08009b6b

08004168 <_ZN3HAL12canvasUpdateEv>:
  static void canvasUpdate() { get()->_canvasUpdate(); }
 8004168:	b510      	push	{r4, lr}
 800416a:	f000 fcc1 	bl	8004af0 <_ZN3HAL3getEv>
 800416e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004172:	6803      	ldr	r3, [r0, #0]
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	4718      	bx	r3

08004178 <_ZN3HAL11canvasClearEv>:
  static void canvasClear() { get()->_canvasClear(); }
 8004178:	b510      	push	{r4, lr}
 800417a:	f000 fcb9 	bl	8004af0 <_ZN3HAL3getEv>
 800417e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004182:	6803      	ldr	r3, [r0, #0]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	4718      	bx	r3

08004188 <_ZN3HAL13getFontHeightEv>:
  static unsigned char getFontHeight() { return get()->_getFontHeight(); }
 8004188:	b510      	push	{r4, lr}
 800418a:	f000 fcb1 	bl	8004af0 <_ZN3HAL3getEv>
 800418e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004192:	6803      	ldr	r3, [r0, #0]
 8004194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004196:	4718      	bx	r3

08004198 <_ZN3HAL7keyScanEv>:
  static void keyScan() { get()->_keyScan(); }
 8004198:	b510      	push	{r4, lr}
 800419a:	f000 fca9 	bl	8004af0 <_ZN3HAL3getEv>
 800419e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041a2:	6803      	ldr	r3, [r0, #0]
 80041a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041a8:	4718      	bx	r3
	...

080041ac <_ZN5astra8Launcher7popInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>:
#include "launcher.h"
#include "main.h"

namespace astra {

void Launcher::popInfo(std::string _info, uint16_t _time) {
 80041ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041b0:	b08d      	sub	sp, #52	@ 0x34
 80041b2:	e9cd 1204 	strd	r1, r2, [sp, #16]
  static bool init = false;
  static unsigned long long int beginTime = this->time;;
 80041b6:	4daa      	ldr	r5, [pc, #680]	@ (8004460 <_ZN5astra8Launcher7popInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x2b4>)
void Launcher::popInfo(std::string _info, uint16_t _time) {
 80041b8:	4604      	mov	r4, r0
  static unsigned long long int beginTime = this->time;;
 80041ba:	682b      	ldr	r3, [r5, #0]
 80041bc:	f3bf 8f5b 	dmb	ish
 80041c0:	07db      	lsls	r3, r3, #31
 80041c2:	d40b      	bmi.n	80041dc <_ZN5astra8Launcher7popInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x30>
 80041c4:	4628      	mov	r0, r5
 80041c6:	f003 fdf6 	bl	8007db6 <__cxa_guard_acquire>
 80041ca:	b138      	cbz	r0, 80041dc <_ZN5astra8Launcher7popInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x30>
 80041cc:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80041d0:	49a4      	ldr	r1, [pc, #656]	@ (8004464 <_ZN5astra8Launcher7popInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x2b8>)
 80041d2:	4628      	mov	r0, r5
 80041d4:	e9c1 2300 	strd	r2, r3, [r1]
 80041d8:	f003 fdf9 	bl	8007dce <__cxa_guard_release>
  static bool onRender = false;

  if (!init) {
 80041dc:	4ba2      	ldr	r3, [pc, #648]	@ (8004468 <_ZN5astra8Launcher7popInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x2bc>)
 80041de:	781a      	ldrb	r2, [r3, #0]
 80041e0:	b942      	cbnz	r2, 80041f4 <_ZN5astra8Launcher7popInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x48>
    init = true;
 80041e2:	2101      	movs	r1, #1
    beginTime = this->time;
 80041e4:	489f      	ldr	r0, [pc, #636]	@ (8004464 <_ZN5astra8Launcher7popInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x2b8>)
    init = true;
 80041e6:	7019      	strb	r1, [r3, #0]
    beginTime = this->time;
 80041e8:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80041ec:	e9c0 2300 	strd	r2, r3, [r0]
    onRender = true;
 80041f0:	4b9e      	ldr	r3, [pc, #632]	@ (800446c <_ZN5astra8Launcher7popInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x2c0>)
 80041f2:	7019      	strb	r1, [r3, #0]
  static unsigned char getFontWidth(std::string &_text) { return get()->_getFontWidth(_text); }
 80041f4:	f000 fc7c 	bl	8004af0 <_ZN3HAL3getEv>
 80041f8:	6803      	ldr	r3, [r0, #0]
 80041fa:	9904      	ldr	r1, [sp, #16]
 80041fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041fe:	4798      	blx	r3
  }

  float wPop = HAL::getFontWidth(_info) + 2 * getUIConfig().popMargin;  //宽度
 8004200:	f7fc fc50 	bl	8000aa4 <__aeabi_i2f>
 8004204:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8004208:	f7fc fb98 	bl	800093c <__addsf3>
 800420c:	9002      	str	r0, [sp, #8]
  float hPop = HAL::getFontHeight() + 2 * getUIConfig().popMargin;  //高度
 800420e:	f7ff ffbb 	bl	8004188 <_ZN3HAL13getFontHeightEv>
 8004212:	f7fc fc47 	bl	8000aa4 <__aeabi_i2f>
 8004216:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 800421a:	f7fc fb8f 	bl	800093c <__addsf3>
  float yPop = 0 - hPop - 8; //从屏幕上方滑入
 800421e:	4601      	mov	r1, r0
  float hPop = HAL::getFontHeight() + 2 * getUIConfig().popMargin;  //高度
 8004220:	4680      	mov	r8, r0
  float yPop = 0 - hPop - 8; //从屏幕上方滑入
 8004222:	2000      	movs	r0, #0
 8004224:	f7fc fb88 	bl	8000938 <__aeabi_fsub>
 8004228:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 800422c:	f7fc fb84 	bl	8000938 <__aeabi_fsub>
 8004230:	4607      	mov	r7, r0
  static sys::config &getSystemConfig() { return get()->config; }
 8004232:	f000 fc5d 	bl	8004af0 <_ZN3HAL3getEv>
  float yPopTrg = (HAL::getSystemConfig().screenHeight - hPop) / 3;  //目标位置 中间偏上
 8004236:	7940      	ldrb	r0, [r0, #5]
 8004238:	f7fc fc34 	bl	8000aa4 <__aeabi_i2f>
 800423c:	4641      	mov	r1, r8
 800423e:	f7fc fb7b 	bl	8000938 <__aeabi_fsub>
 8004242:	498b      	ldr	r1, [pc, #556]	@ (8004470 <_ZN5astra8Launcher7popInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x2c4>)
 8004244:	f7fc fd36 	bl	8000cb4 <__aeabi_fdiv>
 8004248:	4606      	mov	r6, r0
 800424a:	f000 fc51 	bl	8004af0 <_ZN3HAL3getEv>
  float xPop = (HAL::getSystemConfig().screenWeight - wPop) / 2;  //居中
 800424e:	7900      	ldrb	r0, [r0, #4]
 8004250:	f7fc fc28 	bl	8000aa4 <__aeabi_i2f>
 8004254:	9902      	ldr	r1, [sp, #8]
 8004256:	f7fc fb6f 	bl	8000938 <__aeabi_fsub>
 800425a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800425e:	f7fc fc75 	bl	8000b4c <__aeabi_fmul>
  float yPop = 0 - hPop - 8; //从屏幕上方滑入
 8004262:	463d      	mov	r5, r7
    selector->render(camera->getPosition());
    camera->update(currentMenu, selector);
    /*渲染一帧*/

    HAL::setDrawType(0);
    HAL::drawRBox(xPop - 4, yPop - 4, wPop + 8, hPop + 8, getUIConfig().popRadius + 2);
 8004264:	f04f 4981 	mov.w	r9, #1082130432	@ 0x40800000
  float xPop = (HAL::getSystemConfig().screenWeight - wPop) / 2;  //居中
 8004268:	9003      	str	r0, [sp, #12]
  while (onRender) {
 800426a:	4b80      	ldr	r3, [pc, #512]	@ (800446c <_ZN5astra8Launcher7popInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x2c0>)
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	b913      	cbnz	r3, 8004276 <_ZN5astra8Launcher7popInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0xca>
    if (yPop == 0 - hPop - 8) {
      onRender = false;  //退出条件
      init = false;
    }
  }
}
 8004270:	b00d      	add	sp, #52	@ 0x34
 8004272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    time++;
 8004276:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800427a:	3301      	adds	r3, #1
 800427c:	f142 0200 	adc.w	r2, r2, #0
 8004280:	e9c4 3204 	strd	r3, r2, [r4, #16]
    HAL::canvasClear();
 8004284:	f7ff ff78 	bl	8004178 <_ZN3HAL11canvasClearEv>
    currentMenu->render(camera->getPosition());
 8004288:	f8d4 a000 	ldr.w	sl, [r4]
 800428c:	68e1      	ldr	r1, [r4, #12]
 800428e:	f8da 3000 	ldr.w	r3, [sl]
 8004292:	a809      	add	r0, sp, #36	@ 0x24
 8004294:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8004298:	f7fd feff 	bl	800209a <_ZN5astra6Camera11getPositionEv>
 800429c:	4650      	mov	r0, sl
 800429e:	a909      	add	r1, sp, #36	@ 0x24
 80042a0:	47d8      	blx	fp
      }
 80042a2:	a809      	add	r0, sp, #36	@ 0x24
 80042a4:	f7fc feff 	bl	80010a6 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
    selector->render(camera->getPosition());
 80042a8:	e9d4 a102 	ldrd	sl, r1, [r4, #8]
 80042ac:	a809      	add	r0, sp, #36	@ 0x24
 80042ae:	f7fd fef4 	bl	800209a <_ZN5astra6Camera11getPositionEv>
 80042b2:	4650      	mov	r0, sl
 80042b4:	a909      	add	r1, sp, #36	@ 0x24
 80042b6:	f7ff f967 	bl	8003588 <_ZN5astra8Selector6renderESt6vectorIfSaIfEE>
 80042ba:	a809      	add	r0, sp, #36	@ 0x24
 80042bc:	f7fc fef3 	bl	80010a6 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
    camera->update(currentMenu, selector);
 80042c0:	68a2      	ldr	r2, [r4, #8]
 80042c2:	6821      	ldr	r1, [r4, #0]
 80042c4:	68e0      	ldr	r0, [r4, #12]
 80042c6:	f7fd fff7 	bl	80022b8 <_ZN5astra6Camera6updateEPNS_4MenuEPNS_8SelectorE>
    HAL::setDrawType(0);
 80042ca:	2000      	movs	r0, #0
 80042cc:	f7fc feb1 	bl	8001032 <_ZN3HAL11setDrawTypeEh>
    HAL::drawRBox(xPop - 4, yPop - 4, wPop + 8, hPop + 8, getUIConfig().popRadius + 2);
 80042d0:	4649      	mov	r1, r9
 80042d2:	9803      	ldr	r0, [sp, #12]
 80042d4:	f7fc fb30 	bl	8000938 <__aeabi_fsub>
 80042d8:	4649      	mov	r1, r9
 80042da:	4682      	mov	sl, r0
 80042dc:	4628      	mov	r0, r5
 80042de:	f7fc fb2b 	bl	8000938 <__aeabi_fsub>
 80042e2:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 80042e6:	9007      	str	r0, [sp, #28]
 80042e8:	9802      	ldr	r0, [sp, #8]
 80042ea:	f7fc fb27 	bl	800093c <__addsf3>
 80042ee:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 80042f2:	9006      	str	r0, [sp, #24]
 80042f4:	4640      	mov	r0, r8
 80042f6:	f7fc fb21 	bl	800093c <__addsf3>
 80042fa:	4683      	mov	fp, r0
    get()->_drawRBox(_x,
 80042fc:	f000 fbf8 	bl	8004af0 <_ZN3HAL3getEv>
 8004300:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8004304:	6801      	ldr	r1, [r0, #0]
 8004306:	f8cd 9004 	str.w	r9, [sp, #4]
 800430a:	f8cd b000 	str.w	fp, [sp]
 800430e:	f8d1 b058 	ldr.w	fp, [r1, #88]	@ 0x58
 8004312:	4651      	mov	r1, sl
 8004314:	47d8      	blx	fp
    HAL::setDrawType(1);  //反色显示
 8004316:	2001      	movs	r0, #1
 8004318:	f7fc fe8b 	bl	8001032 <_ZN3HAL11setDrawTypeEh>
    HAL::drawRFrame(xPop - 1, yPop - 1, wPop + 2, hPop + 2, getUIConfig().popRadius);  //绘制一个圆角矩形
 800431c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004320:	9803      	ldr	r0, [sp, #12]
 8004322:	f7fc fb09 	bl	8000938 <__aeabi_fsub>
 8004326:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800432a:	4682      	mov	sl, r0
 800432c:	4628      	mov	r0, r5
 800432e:	f7fc fb03 	bl	8000938 <__aeabi_fsub>
 8004332:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004336:	9007      	str	r0, [sp, #28]
 8004338:	9802      	ldr	r0, [sp, #8]
 800433a:	f7fc faff 	bl	800093c <__addsf3>
 800433e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004342:	9006      	str	r0, [sp, #24]
 8004344:	4640      	mov	r0, r8
 8004346:	f7fc faf9 	bl	800093c <__addsf3>
 800434a:	4683      	mov	fp, r0
    get()->_drawRFrame(_x,
 800434c:	f000 fbd0 	bl	8004af0 <_ZN3HAL3getEv>
 8004350:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8004354:	f04f 4c80 	mov.w	ip, #1073741824	@ 0x40000000
 8004358:	6801      	ldr	r1, [r0, #0]
 800435a:	f8cd c004 	str.w	ip, [sp, #4]
 800435e:	f8cd b000 	str.w	fp, [sp]
 8004362:	f8d1 b060 	ldr.w	fp, [r1, #96]	@ 0x60
 8004366:	4651      	mov	r1, sl
 8004368:	47d8      	blx	fp
    HAL::drawEnglish(xPop + getUIConfig().popMargin,
 800436a:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 800436e:	9803      	ldr	r0, [sp, #12]
 8004370:	f7fc fae4 	bl	800093c <__addsf3>
                     yPop + getUIConfig().popMargin + HAL::getFontHeight(),
 8004374:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
    HAL::drawEnglish(xPop + getUIConfig().popMargin,
 8004378:	4682      	mov	sl, r0
                     yPop + getUIConfig().popMargin + HAL::getFontHeight(),
 800437a:	4628      	mov	r0, r5
 800437c:	f7fc fade 	bl	800093c <__addsf3>
 8004380:	4683      	mov	fp, r0
 8004382:	f7ff ff01 	bl	8004188 <_ZN3HAL13getFontHeightEv>
    HAL::drawEnglish(xPop + getUIConfig().popMargin,
 8004386:	f7fc fb8d 	bl	8000aa4 <__aeabi_i2f>
 800438a:	4659      	mov	r1, fp
 800438c:	f7fc fad6 	bl	800093c <__addsf3>
 8004390:	9006      	str	r0, [sp, #24]
  static void drawEnglish(float _x, float _y, const std::string &_text) { get()->_drawEnglish(_x, _y, _text); }
 8004392:	f000 fbad 	bl	8004af0 <_ZN3HAL3getEv>
 8004396:	6803      	ldr	r3, [r0, #0]
 8004398:	4651      	mov	r1, sl
 800439a:	f8d3 b038 	ldr.w	fp, [r3, #56]	@ 0x38
 800439e:	9a06      	ldr	r2, [sp, #24]
 80043a0:	9b04      	ldr	r3, [sp, #16]
 80043a2:	47d8      	blx	fp
    HAL::canvasUpdate();
 80043a4:	f7ff fee0 	bl	8004168 <_ZN3HAL12canvasUpdateEv>

  for (uint16_t i = 0; i < bufferLen; ++i) bufferPointer[i] = bufferPointer[i] & (i % 2 == 0 ? 0x55 : 0xAA);
}

inline void Animation::move(float *_pos, float _posTrg, float _speed) {
  if (*_pos != _posTrg) {
 80043a8:	4629      	mov	r1, r5
 80043aa:	4630      	mov	r0, r6
 80043ac:	f7fc fd62 	bl	8000e74 <__aeabi_fcmpeq>
 80043b0:	b9b8      	cbnz	r0, 80043e2 <_ZN5astra8Launcher7popInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x236>
    if (std::fabs(*_pos - _posTrg) <= 1.0f) *_pos = _posTrg;
 80043b2:	4631      	mov	r1, r6
 80043b4:	4628      	mov	r0, r5
 80043b6:	f7fc fabf 	bl	8000938 <__aeabi_fsub>
 80043ba:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
  { return __builtin_fabsf(__x); }
 80043be:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80043c2:	f7fc fd6b 	bl	8000e9c <__aeabi_fcmple>
 80043c6:	2800      	cmp	r0, #0
 80043c8:	d148      	bne.n	800445c <_ZN5astra8Launcher7popInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x2b0>
    else *_pos += (_posTrg - *_pos) / ((100 - _speed) / 1.0f);
 80043ca:	4629      	mov	r1, r5
 80043cc:	4630      	mov	r0, r6
 80043ce:	f7fc fab3 	bl	8000938 <__aeabi_fsub>
 80043d2:	4928      	ldr	r1, [pc, #160]	@ (8004474 <_ZN5astra8Launcher7popInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x2c8>)
 80043d4:	f7fc fc6e 	bl	8000cb4 <__aeabi_fdiv>
 80043d8:	4601      	mov	r1, r0
 80043da:	4628      	mov	r0, r5
 80043dc:	f7fc faae 	bl	800093c <__addsf3>
 80043e0:	4605      	mov	r5, r0
    if (time - beginTime >= _time) yPopTrg = 0 - hPop - 8;  //滑出
 80043e2:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80043e6:	481f      	ldr	r0, [pc, #124]	@ (8004464 <_ZN5astra8Launcher7popInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x2b8>)
 80043e8:	e9d0 1000 	ldrd	r1, r0, [r0]
 80043ec:	1a52      	subs	r2, r2, r1
 80043ee:	9905      	ldr	r1, [sp, #20]
 80043f0:	eb63 0300 	sbc.w	r3, r3, r0
 80043f4:	428a      	cmp	r2, r1
 80043f6:	f173 0300 	sbcs.w	r3, r3, #0
 80043fa:	bf28      	it	cs
 80043fc:	463e      	movcs	r6, r7
    HAL::keyScan();
 80043fe:	f7ff fecb 	bl	8004198 <_ZN3HAL7keyScanEv>
  static bool getAnyKey() { return get()->_getAnyKey(); }
 8004402:	f000 fb75 	bl	8004af0 <_ZN3HAL3getEv>
 8004406:	6803      	ldr	r3, [r0, #0]
 8004408:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800440c:	4798      	blx	r3
    if (HAL::getAnyKey()) {
 800440e:	b1c0      	cbz	r0, 8004442 <_ZN5astra8Launcher7popInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x296>
  static key::KEY_ACTION *getKeyMap() { return get()->key; }
 8004410:	f000 fb6e 	bl	8004af0 <_ZN3HAL3getEv>
        if (HAL::getKeyMap()[i] == key::CLICK) yPopTrg = 0 - hPop - 8;  //滑出
 8004414:	7b03      	ldrb	r3, [r0, #12]
 8004416:	2b01      	cmp	r3, #1
 8004418:	bf08      	it	eq
 800441a:	463e      	moveq	r6, r7
 800441c:	f000 fb68 	bl	8004af0 <_ZN3HAL3getEv>
 8004420:	7b43      	ldrb	r3, [r0, #13]
 8004422:	2b01      	cmp	r3, #1
 8004424:	bf08      	it	eq
 8004426:	463e      	moveq	r6, r7
 8004428:	f000 fb62 	bl	8004af0 <_ZN3HAL3getEv>
 800442c:	4682      	mov	sl, r0
 800442e:	f000 fb5f 	bl	8004af0 <_ZN3HAL3getEv>
	*__first = __value;
 8004432:	1c82      	adds	r2, r0, #2
 8004434:	2100      	movs	r1, #0
 8004436:	eba2 020a 	sub.w	r2, r2, sl
 800443a:	f10a 000c 	add.w	r0, sl, #12
 800443e:	f004 fb5e 	bl	8008afe <memset>
    if (yPop == 0 - hPop - 8) {
 8004442:	4629      	mov	r1, r5
 8004444:	4638      	mov	r0, r7
 8004446:	f7fc fd15 	bl	8000e74 <__aeabi_fcmpeq>
 800444a:	2800      	cmp	r0, #0
 800444c:	f43f af0d 	beq.w	800426a <_ZN5astra8Launcher7popInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0xbe>
      onRender = false;  //退出条件
 8004450:	2300      	movs	r3, #0
 8004452:	4a06      	ldr	r2, [pc, #24]	@ (800446c <_ZN5astra8Launcher7popInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x2c0>)
 8004454:	7013      	strb	r3, [r2, #0]
      init = false;
 8004456:	4a04      	ldr	r2, [pc, #16]	@ (8004468 <_ZN5astra8Launcher7popInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x2bc>)
 8004458:	7013      	strb	r3, [r2, #0]
 800445a:	e706      	b.n	800426a <_ZN5astra8Launcher7popInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0xbe>
    if (std::fabs(*_pos - _posTrg) <= 1.0f) *_pos = _posTrg;
 800445c:	4635      	mov	r5, r6
 800445e:	e7c0      	b.n	80043e2 <_ZN5astra8Launcher7popInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x236>
 8004460:	200001ac 	.word	0x200001ac
 8004464:	200001b0 	.word	0x200001b0
 8004468:	200001b8 	.word	0x200001b8
 800446c:	200001a9 	.word	0x200001a9
 8004470:	40400000 	.word	0x40400000
 8004474:	41200000 	.word	0x41200000

08004478 <_ZN5astra8Launcher4initEPNS_4MenuE>:

void Launcher::init(Menu *_rootPage) {
 8004478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800447a:	4606      	mov	r6, r0
 800447c:	b087      	sub	sp, #28
  currentMenu = _rootPage;
 800447e:	6001      	str	r1, [r0, #0]

  camera = new Camera(0, 0);
 8004480:	20ec      	movs	r0, #236	@ 0xec
void Launcher::init(Menu *_rootPage) {
 8004482:	460d      	mov	r5, r1
  camera = new Camera(0, 0);
 8004484:	f002 fa92 	bl	80069ac <_Znwj>
 8004488:	2200      	movs	r2, #0
 800448a:	4604      	mov	r4, r0
 800448c:	4611      	mov	r1, r2
 800448e:	f7fd fd35 	bl	8001efc <_ZN5astra6CameraC1Eff>
  _rootPage->childPosInit(camera->getPosition());
 8004492:	682b      	ldr	r3, [r5, #0]
 8004494:	4621      	mov	r1, r4
 8004496:	4668      	mov	r0, sp
  camera = new Camera(0, 0);
 8004498:	60f4      	str	r4, [r6, #12]
  _rootPage->childPosInit(camera->getPosition());
 800449a:	685f      	ldr	r7, [r3, #4]
 800449c:	f7fd fdfd 	bl	800209a <_ZN5astra6Camera11getPositionEv>
 80044a0:	4669      	mov	r1, sp
 80044a2:	4628      	mov	r0, r5
 80044a4:	47b8      	blx	r7
 80044a6:	4668      	mov	r0, sp
 80044a8:	f7fc fdfd 	bl	80010a6 <_ZNSt12_Vector_baseIfSaIfEED1Ev>

  selector = new Selector();
 80044ac:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80044b0:	f002 fa7c 	bl	80069ac <_Znwj>
 80044b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80044b8:	2100      	movs	r1, #0
 80044ba:	4604      	mov	r4, r0
 80044bc:	f004 fb1f 	bl	8008afe <memset>
struct config {
 80044c0:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80044c4:	8023      	strh	r3, [r4, #0]
 80044c6:	4b43      	ldr	r3, [pc, #268]	@ (80045d4 <_ZN5astra8Launcher4initEPNS_4MenuE+0x15c>)
 80044c8:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80044cc:	6063      	str	r3, [r4, #4]
 80044ce:	4b42      	ldr	r3, [pc, #264]	@ (80045d8 <_ZN5astra8Launcher4initEPNS_4MenuE+0x160>)
 80044d0:	4a42      	ldr	r2, [pc, #264]	@ (80045dc <_ZN5astra8Launcher4initEPNS_4MenuE+0x164>)
 80044d2:	60a3      	str	r3, [r4, #8]
 80044d4:	60e3      	str	r3, [r4, #12]
 80044d6:	6163      	str	r3, [r4, #20]
 80044d8:	61a3      	str	r3, [r4, #24]
 80044da:	6323      	str	r3, [r4, #48]	@ 0x30
 80044dc:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 80044e0:	6122      	str	r2, [r4, #16]
 80044e2:	4a3f      	ldr	r2, [pc, #252]	@ (80045e0 <_ZN5astra8Launcher4initEPNS_4MenuE+0x168>)
 80044e4:	f04f 4083 	mov.w	r0, #1098907648	@ 0x41800000
 80044e8:	61e2      	str	r2, [r4, #28]
 80044ea:	4a3e      	ldr	r2, [pc, #248]	@ (80045e4 <_ZN5astra8Launcher4initEPNS_4MenuE+0x16c>)
 80044ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80044ee:	6222      	str	r2, [r4, #32]
 80044f0:	4a3d      	ldr	r2, [pc, #244]	@ (80045e8 <_ZN5astra8Launcher4initEPNS_4MenuE+0x170>)
 80044f2:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80044f6:	6262      	str	r2, [r4, #36]	@ 0x24
 80044f8:	4a3c      	ldr	r2, [pc, #240]	@ (80045ec <_ZN5astra8Launcher4initEPNS_4MenuE+0x174>)
 80044fa:	64e1      	str	r1, [r4, #76]	@ 0x4c
 80044fc:	62a2      	str	r2, [r4, #40]	@ 0x28
 80044fe:	4a3c      	ldr	r2, [pc, #240]	@ (80045f0 <_ZN5astra8Launcher4initEPNS_4MenuE+0x178>)
 8004500:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004504:	62e2      	str	r2, [r4, #44]	@ 0x2c
 8004506:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 800450a:	f8df c0e8 	ldr.w	ip, [pc, #232]	@ 80045f4 <_ZN5astra8Launcher4initEPNS_4MenuE+0x17c>
 800450e:	4f3a      	ldr	r7, [pc, #232]	@ (80045f8 <_ZN5astra8Launcher4initEPNS_4MenuE+0x180>)
 8004510:	f8c4 c058 	str.w	ip, [r4, #88]	@ 0x58
 8004514:	f8c4 c05c 	str.w	ip, [r4, #92]	@ 0x5c
 8004518:	f8df c0e0 	ldr.w	ip, [pc, #224]	@ 80045fc <_ZN5astra8Launcher4initEPNS_4MenuE+0x184>
 800451c:	63e7      	str	r7, [r4, #60]	@ 0x3c
 800451e:	f8c4 c068 	str.w	ip, [r4, #104]	@ 0x68
 8004522:	f8df c0dc 	ldr.w	ip, [pc, #220]	@ 8004600 <_ZN5astra8Launcher4initEPNS_4MenuE+0x188>
 8004526:	f8c4 7080 	str.w	r7, [r4, #128]	@ 0x80
 800452a:	f8c4 c070 	str.w	ip, [r4, #112]	@ 0x70
 800452e:	4f35      	ldr	r7, [pc, #212]	@ (8004604 <_ZN5astra8Launcher4initEPNS_4MenuE+0x18c>)
 8004530:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8004608 <_ZN5astra8Launcher4initEPNS_4MenuE+0x190>
 8004534:	6462      	str	r2, [r4, #68]	@ 0x44
 8004536:	6522      	str	r2, [r4, #80]	@ 0x50
 8004538:	66e2      	str	r2, [r4, #108]	@ 0x6c
 800453a:	f8c4 c078 	str.w	ip, [r4, #120]	@ 0x78
 800453e:	6423      	str	r3, [r4, #64]	@ 0x40
 8004540:	64a0      	str	r0, [r4, #72]	@ 0x48
 8004542:	6561      	str	r1, [r4, #84]	@ 0x54
 8004544:	6623      	str	r3, [r4, #96]	@ 0x60
 8004546:	6663      	str	r3, [r4, #100]	@ 0x64
 8004548:	6763      	str	r3, [r4, #116]	@ 0x74
 800454a:	67e1      	str	r1, [r4, #124]	@ 0x7c
 800454c:	f8c4 7084 	str.w	r7, [r4, #132]	@ 0x84
 8004550:	f8c4 109c 	str.w	r1, [r4, #156]	@ 0x9c
 8004554:	f8c4 10a4 	str.w	r1, [r4, #164]	@ 0xa4
 8004558:	492c      	ldr	r1, [pc, #176]	@ (800460c <_ZN5astra8Launcher4initEPNS_4MenuE+0x194>)
 800455a:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 800455e:	f8c4 10a8 	str.w	r1, [r4, #168]	@ 0xa8
 8004562:	2110      	movs	r1, #16
 8004564:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
 8004568:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
 800456c:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8004570:	4b27      	ldr	r3, [pc, #156]	@ (8004610 <_ZN5astra8Launcher4initEPNS_4MenuE+0x198>)
 8004572:	f884 10b0 	strb.w	r1, [r4, #176]	@ 0xb0
 8004576:	f8c4 30cc 	str.w	r3, [r4, #204]	@ 0xcc
 800457a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800457e:	4925      	ldr	r1, [pc, #148]	@ (8004614 <_ZN5astra8Launcher4initEPNS_4MenuE+0x19c>)
 8004580:	4f25      	ldr	r7, [pc, #148]	@ (8004618 <_ZN5astra8Launcher4initEPNS_4MenuE+0x1a0>)
 8004582:	f8c4 0094 	str.w	r0, [r4, #148]	@ 0x94
 8004586:	f8c4 10b4 	str.w	r1, [r4, #180]	@ 0xb4
 800458a:	4824      	ldr	r0, [pc, #144]	@ (800461c <_ZN5astra8Launcher4initEPNS_4MenuE+0x1a4>)
 800458c:	4924      	ldr	r1, [pc, #144]	@ (8004620 <_ZN5astra8Launcher4initEPNS_4MenuE+0x1a8>)
 800458e:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 8004592:	f8c4 20c8 	str.w	r2, [r4, #200]	@ 0xc8
 8004596:	e9c4 112e 	strd	r1, r1, [r4, #184]	@ 0xb8
 800459a:	f8c4 7088 	str.w	r7, [r4, #136]	@ 0x88
  selector->inject(_rootPage);
 800459e:	4629      	mov	r1, r5
 80045a0:	f8c4 708c 	str.w	r7, [r4, #140]	@ 0x8c
 80045a4:	f8c4 00a0 	str.w	r0, [r4, #160]	@ 0xa0
 80045a8:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
  selector = new Selector();
 80045ac:	60b4      	str	r4, [r6, #8]
  selector->inject(_rootPage);
 80045ae:	4620      	mov	r0, r4
 80045b0:	f7fe ffde 	bl	8003570 <_ZN5astra8Selector6injectEPNS_4MenuE>

  camera->init(_rootPage->getType());
 80045b4:	682b      	ldr	r3, [r5, #0]
 80045b6:	68f4      	ldr	r4, [r6, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4629      	mov	r1, r5
 80045bc:	4668      	mov	r0, sp
 80045be:	4798      	blx	r3
 80045c0:	4669      	mov	r1, sp
 80045c2:	4620      	mov	r0, r4
 80045c4:	f7fd fcc0 	bl	8001f48 <_ZN5astra6Camera4initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
      { _M_dispose(); }
 80045c8:	4668      	mov	r0, sp
 80045ca:	f003 ff01 	bl	80083d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
}
 80045ce:	b007      	add	sp, #28
 80045d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045d2:	bf00      	nop
 80045d4:	437f0000 	.word	0x437f0000
 80045d8:	428c0000 	.word	0x428c0000
 80045dc:	42700000 	.word	0x42700000
 80045e0:	425c0000 	.word	0x425c0000
 80045e4:	41c80000 	.word	0x41c80000
 80045e8:	41700000 	.word	0x41700000
 80045ec:	42c80000 	.word	0x42c80000
 80045f0:	42a00000 	.word	0x42a00000
 80045f4:	41f00000 	.word	0x41f00000
 80045f8:	40a00000 	.word	0x40a00000
 80045fc:	40c00000 	.word	0x40c00000
 8004600:	41900000 	.word	0x41900000
 8004604:	40400000 	.word	0x40400000
 8004608:	41400000 	.word	0x41400000
 800460c:	41600000 	.word	0x41600000
 8004610:	41200000 	.word	0x41200000
 8004614:	08009fcc 	.word	0x08009fcc
 8004618:	42100000 	.word	0x42100000
 800461c:	42b40000 	.word	0x42b40000
 8004620:	0800a81f 	.word	0x0800a81f

08004624 <_ZNSt6vectorIfSaIfEEaSERKS1_.isra.0>:
      if (std::__addressof(__x) != this)
 8004624:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
 8004626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800462a:	4604      	mov	r4, r0
 800462c:	460d      	mov	r5, r1
      if (std::__addressof(__x) != this)
 800462e:	d022      	beq.n	8004676 <_ZNSt6vectorIfSaIfEEaSERKS1_.isra.0+0x52>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004630:	e9d1 7800 	ldrd	r7, r8, [r1]
			 - this->_M_impl._M_start); }
 8004634:	6802      	ldr	r2, [r0, #0]
 8004636:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004638:	eba8 0607 	sub.w	r6, r8, r7
			 - this->_M_impl._M_start); }
 800463c:	1a9b      	subs	r3, r3, r2
	  if (__xlen > capacity())
 800463e:	429e      	cmp	r6, r3
 8004640:	d91b      	bls.n	800467a <_ZNSt6vectorIfSaIfEEaSERKS1_.isra.0+0x56>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8004642:	4b18      	ldr	r3, [pc, #96]	@ (80046a4 <_ZNSt6vectorIfSaIfEEaSERKS1_.isra.0+0x80>)
 8004644:	429e      	cmp	r6, r3
 8004646:	d901      	bls.n	800464c <_ZNSt6vectorIfSaIfEEaSERKS1_.isra.0+0x28>
	      std::__throw_bad_array_new_length();
 8004648:	f003 fe88 	bl	800835c <_ZSt28__throw_bad_array_new_lengthv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800464c:	4630      	mov	r0, r6
 800464e:	f002 f9ad 	bl	80069ac <_Znwj>
			      _Category>::__copy_m(__first, __last, __result);
 8004652:	4641      	mov	r1, r8
 8004654:	4602      	mov	r2, r0
 8004656:	4605      	mov	r5, r0
 8004658:	4638      	mov	r0, r7
 800465a:	f7fd fcc5 	bl	8001fe8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800465e:	6820      	ldr	r0, [r4, #0]
	if (__p)
 8004660:	b118      	cbz	r0, 800466a <_ZNSt6vectorIfSaIfEEaSERKS1_.isra.0+0x46>
			    - this->_M_impl._M_start);
 8004662:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8004664:	1a09      	subs	r1, r1, r0
 8004666:	f003 fb4f 	bl	8007d08 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
 800466a:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 800466c:	4435      	add	r5, r6
 800466e:	60a5      	str	r5, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8004670:	6823      	ldr	r3, [r4, #0]
 8004672:	4433      	add	r3, r6
 8004674:	6063      	str	r3, [r4, #4]
    }
 8004676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800467a:	6843      	ldr	r3, [r0, #4]
 800467c:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
 800467e:	429e      	cmp	r6, r3
 8004680:	d804      	bhi.n	800468c <_ZNSt6vectorIfSaIfEEaSERKS1_.isra.0+0x68>
 8004682:	4641      	mov	r1, r8
 8004684:	4638      	mov	r0, r7
 8004686:	f7fd fcaf 	bl	8001fe8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
      return std::uninitialized_copy(__first, __last, __result);
 800468a:	e7f1      	b.n	8004670 <_ZNSt6vectorIfSaIfEEaSERKS1_.isra.0+0x4c>
 800468c:	18f9      	adds	r1, r7, r3
 800468e:	4638      	mov	r0, r7
 8004690:	f7fd fcaa 	bl	8001fe8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8004694:	e9d4 0200 	ldrd	r0, r2, [r4]
 8004698:	e9d5 3100 	ldrd	r3, r1, [r5]
 800469c:	1a10      	subs	r0, r2, r0
 800469e:	4418      	add	r0, r3
 80046a0:	e7f1      	b.n	8004686 <_ZNSt6vectorIfSaIfEEaSERKS1_.isra.0+0x62>
 80046a2:	bf00      	nop
 80046a4:	7ffffffc 	.word	0x7ffffffc

080046a8 <_ZN5astra8Launcher5closeEv>:
 * @brief 关闭选中的页面
 *
 * @return 是否成功关闭
 * @warning 仅可调用一次
 */
bool Launcher::close() {
 80046a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046aa:	4604      	mov	r4, r0
 80046ac:	b087      	sub	sp, #28
  if (currentMenu->getPreview() == nullptr) {
 80046ae:	6800      	ldr	r0, [r0, #0]
 80046b0:	f7fe fad5 	bl	8002c5e <_ZNK5astra4Menu10getPreviewEv>
 80046b4:	b978      	cbnz	r0, 80046d6 <_ZN5astra8Launcher5closeEv+0x2e>
    popInfo("unreferenced page!", 600);
 80046b6:	4922      	ldr	r1, [pc, #136]	@ (8004740 <_ZN5astra8Launcher5closeEv+0x98>)
    return false;
  }
  if (currentMenu->getPreview()->getItemNum() == 0) {
    popInfo("empty page!", 600);
 80046b8:	4668      	mov	r0, sp
 80046ba:	f7ff fd2d 	bl	8004118 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 80046be:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80046c2:	4669      	mov	r1, sp
 80046c4:	4620      	mov	r0, r4
 80046c6:	f7ff fd71 	bl	80041ac <_ZN5astra8Launcher7popInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 80046ca:	4668      	mov	r0, sp
 80046cc:	f003 fe80 	bl	80083d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
    return false;
 80046d0:	2000      	movs	r0, #0

  selector->inject(currentMenu);
  //selector->go(currentPage->selectIndex);

  return true;
}
 80046d2:	b007      	add	sp, #28
 80046d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (currentMenu->getPreview()->getItemNum() == 0) {
 80046d6:	6820      	ldr	r0, [r4, #0]
 80046d8:	f7fe fac1 	bl	8002c5e <_ZNK5astra4Menu10getPreviewEv>
 80046dc:	f7fe fab0 	bl	8002c40 <_ZNK5astra4Menu10getItemNumEv>
 80046e0:	b908      	cbnz	r0, 80046e6 <_ZN5astra8Launcher5closeEv+0x3e>
    popInfo("empty page!", 600);
 80046e2:	4918      	ldr	r1, [pc, #96]	@ (8004744 <_ZN5astra8Launcher5closeEv+0x9c>)
 80046e4:	e7e8      	b.n	80046b8 <_ZN5astra8Launcher5closeEv+0x10>
    cameraPosMemoryFlag = true;
 80046e6:	2501      	movs	r5, #1
  currentMenu->rememberCameraPos(camera->getPositionTrg());
 80046e8:	6826      	ldr	r6, [r4, #0]
 80046ea:	4668      	mov	r0, sp
 80046ec:	68e1      	ldr	r1, [r4, #12]
 80046ee:	f7fd fcc1 	bl	8002074 <_ZN5astra6Camera14getPositionTrgEv>
    cameraPosMemory = _camera;
 80046f2:	4669      	mov	r1, sp
 80046f4:	f106 00d8 	add.w	r0, r6, #216	@ 0xd8
 80046f8:	f7ff ff94 	bl	8004624 <_ZNSt6vectorIfSaIfEEaSERKS1_.isra.0>
    cameraPosMemoryFlag = true;
 80046fc:	f886 50e4 	strb.w	r5, [r6, #228]	@ 0xe4
      }
 8004700:	4668      	mov	r0, sp
 8004702:	f7fc fcd0 	bl	80010a6 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
  currentMenu->deInit();  //先析构（退场动画）再挪动指针
 8004706:	6820      	ldr	r0, [r4, #0]
 8004708:	f7fe faac 	bl	8002c64 <_ZN5astra4Menu6deInitEv>
  currentMenu = currentMenu->getPreview();
 800470c:	6820      	ldr	r0, [r4, #0]
 800470e:	f7fe faa6 	bl	8002c5e <_ZNK5astra4Menu10getPreviewEv>
  currentMenu->forePosInit();
 8004712:	6803      	ldr	r3, [r0, #0]
  currentMenu = currentMenu->getPreview();
 8004714:	6020      	str	r0, [r4, #0]
  currentMenu->forePosInit();
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	4798      	blx	r3
  currentMenu->childPosInit(camera->getPosition());
 800471a:	6826      	ldr	r6, [r4, #0]
 800471c:	4668      	mov	r0, sp
 800471e:	6833      	ldr	r3, [r6, #0]
 8004720:	68e1      	ldr	r1, [r4, #12]
 8004722:	685f      	ldr	r7, [r3, #4]
 8004724:	f7fd fcb9 	bl	800209a <_ZN5astra6Camera11getPositionEv>
 8004728:	4669      	mov	r1, sp
 800472a:	4630      	mov	r0, r6
 800472c:	47b8      	blx	r7
 800472e:	4668      	mov	r0, sp
 8004730:	f7fc fcb9 	bl	80010a6 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
  selector->inject(currentMenu);
 8004734:	6821      	ldr	r1, [r4, #0]
 8004736:	68a0      	ldr	r0, [r4, #8]
 8004738:	f7fe ff1a 	bl	8003570 <_ZN5astra8Selector6injectEPNS_4MenuE>
  return true;
 800473c:	4628      	mov	r0, r5
 800473e:	e7c8      	b.n	80046d2 <_ZN5astra8Launcher5closeEv+0x2a>
 8004740:	08009f9d 	.word	0x08009f9d
 8004744:	08009fb0 	.word	0x08009fb0

08004748 <_ZN5astra8Launcher4openEv>:
bool Launcher::open() {
 8004748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800474a:	4604      	mov	r4, r0
 800474c:	b087      	sub	sp, #28
  if (currentMenu->getNextMenu() == nullptr) {
 800474e:	6800      	ldr	r0, [r0, #0]
 8004750:	f7fe fa7e 	bl	8002c50 <_ZNK5astra4Menu11getNextMenuEv>
 8004754:	b978      	cbnz	r0, 8004776 <_ZN5astra8Launcher4openEv+0x2e>
    popInfo("unreferenced page!", 600);
 8004756:	4922      	ldr	r1, [pc, #136]	@ (80047e0 <_ZN5astra8Launcher4openEv+0x98>)
    popInfo("empty page!", 600);
 8004758:	4668      	mov	r0, sp
 800475a:	f7ff fcdd 	bl	8004118 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
 800475e:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8004762:	4669      	mov	r1, sp
 8004764:	4620      	mov	r0, r4
 8004766:	f7ff fd21 	bl	80041ac <_ZN5astra8Launcher7popInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 800476a:	4668      	mov	r0, sp
 800476c:	f003 fe30 	bl	80083d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
    return false;
 8004770:	2000      	movs	r0, #0
}
 8004772:	b007      	add	sp, #28
 8004774:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (currentMenu->getNextMenu()->getItemNum() == 0) {
 8004776:	6820      	ldr	r0, [r4, #0]
 8004778:	f7fe fa6a 	bl	8002c50 <_ZNK5astra4Menu11getNextMenuEv>
 800477c:	f7fe fa60 	bl	8002c40 <_ZNK5astra4Menu10getItemNumEv>
 8004780:	b908      	cbnz	r0, 8004786 <_ZN5astra8Launcher4openEv+0x3e>
    popInfo("empty page!", 600);
 8004782:	4918      	ldr	r1, [pc, #96]	@ (80047e4 <_ZN5astra8Launcher4openEv+0x9c>)
 8004784:	e7e8      	b.n	8004758 <_ZN5astra8Launcher4openEv+0x10>
 8004786:	2501      	movs	r5, #1
  currentMenu->rememberCameraPos(camera->getPositionTrg());
 8004788:	6826      	ldr	r6, [r4, #0]
 800478a:	4668      	mov	r0, sp
 800478c:	68e1      	ldr	r1, [r4, #12]
 800478e:	f7fd fc71 	bl	8002074 <_ZN5astra6Camera14getPositionTrgEv>
    cameraPosMemory = _camera;
 8004792:	4669      	mov	r1, sp
 8004794:	f106 00d8 	add.w	r0, r6, #216	@ 0xd8
 8004798:	f7ff ff44 	bl	8004624 <_ZNSt6vectorIfSaIfEEaSERKS1_.isra.0>
    cameraPosMemoryFlag = true;
 800479c:	f886 50e4 	strb.w	r5, [r6, #228]	@ 0xe4
 80047a0:	4668      	mov	r0, sp
 80047a2:	f7fc fc80 	bl	80010a6 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
  currentMenu->deInit();  //先析构（退场动画）再挪动指针
 80047a6:	6820      	ldr	r0, [r4, #0]
 80047a8:	f7fe fa5c 	bl	8002c64 <_ZN5astra4Menu6deInitEv>
  currentMenu = currentMenu->getNextMenu();
 80047ac:	6820      	ldr	r0, [r4, #0]
 80047ae:	f7fe fa4f 	bl	8002c50 <_ZNK5astra4Menu11getNextMenuEv>
  currentMenu->forePosInit();
 80047b2:	6803      	ldr	r3, [r0, #0]
  currentMenu = currentMenu->getNextMenu();
 80047b4:	6020      	str	r0, [r4, #0]
  currentMenu->forePosInit();
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	4798      	blx	r3
  currentMenu->childPosInit(camera->getPosition());
 80047ba:	6826      	ldr	r6, [r4, #0]
 80047bc:	4668      	mov	r0, sp
 80047be:	6833      	ldr	r3, [r6, #0]
 80047c0:	68e1      	ldr	r1, [r4, #12]
 80047c2:	685f      	ldr	r7, [r3, #4]
 80047c4:	f7fd fc69 	bl	800209a <_ZN5astra6Camera11getPositionEv>
 80047c8:	4669      	mov	r1, sp
 80047ca:	4630      	mov	r0, r6
 80047cc:	47b8      	blx	r7
 80047ce:	4668      	mov	r0, sp
 80047d0:	f7fc fc69 	bl	80010a6 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
  selector->inject(currentMenu);
 80047d4:	6821      	ldr	r1, [r4, #0]
 80047d6:	68a0      	ldr	r0, [r4, #8]
 80047d8:	f7fe feca 	bl	8003570 <_ZN5astra8Selector6injectEPNS_4MenuE>
  return true;
 80047dc:	4628      	mov	r0, r5
 80047de:	e7c8      	b.n	8004772 <_ZN5astra8Launcher4openEv+0x2a>
 80047e0:	08009f9d 	.word	0x08009f9d
 80047e4:	08009fb0 	.word	0x08009fb0

080047e8 <_ZN5astra8Launcher6updateEv>:

void Launcher::update() {
 80047e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80047ea:	4604      	mov	r4, r0
  HAL::canvasClear();
 80047ec:	f7ff fcc4 	bl	8004178 <_ZN3HAL11canvasClearEv>

  currentMenu->render(camera->getPosition());
 80047f0:	6825      	ldr	r5, [r4, #0]
 80047f2:	68e1      	ldr	r1, [r4, #12]
 80047f4:	682b      	ldr	r3, [r5, #0]
 80047f6:	a801      	add	r0, sp, #4
 80047f8:	68de      	ldr	r6, [r3, #12]
 80047fa:	f7fd fc4e 	bl	800209a <_ZN5astra6Camera11getPositionEv>
 80047fe:	4628      	mov	r0, r5
 8004800:	a901      	add	r1, sp, #4
 8004802:	47b0      	blx	r6
 8004804:	a801      	add	r0, sp, #4
 8004806:	f7fc fc4e 	bl	80010a6 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
  if (currentWidget != nullptr) currentWidget->render(camera->getPosition());
 800480a:	6865      	ldr	r5, [r4, #4]
 800480c:	b15d      	cbz	r5, 8004826 <_ZN5astra8Launcher6updateEv+0x3e>
 800480e:	682b      	ldr	r3, [r5, #0]
 8004810:	68e1      	ldr	r1, [r4, #12]
 8004812:	a801      	add	r0, sp, #4
 8004814:	691e      	ldr	r6, [r3, #16]
 8004816:	f7fd fc40 	bl	800209a <_ZN5astra6Camera11getPositionEv>
 800481a:	4628      	mov	r0, r5
 800481c:	a901      	add	r1, sp, #4
 800481e:	47b0      	blx	r6
 8004820:	a801      	add	r0, sp, #4
 8004822:	f7fc fc40 	bl	80010a6 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
  selector->render(camera->getPosition());
 8004826:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
 800482a:	a801      	add	r0, sp, #4
 800482c:	f7fd fc35 	bl	800209a <_ZN5astra6Camera11getPositionEv>
 8004830:	a901      	add	r1, sp, #4
 8004832:	4628      	mov	r0, r5
 8004834:	f7fe fea8 	bl	8003588 <_ZN5astra8Selector6renderESt6vectorIfSaIfEE>
 8004838:	a801      	add	r0, sp, #4
 800483a:	f7fc fc34 	bl	80010a6 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
  camera->update(currentMenu, selector);
 800483e:	68a2      	ldr	r2, [r4, #8]
 8004840:	6821      	ldr	r1, [r4, #0]
 8004842:	68e0      	ldr	r0, [r4, #12]
 8004844:	f7fd fd38 	bl	80022b8 <_ZN5astra6Camera6updateEPNS_4MenuEPNS_8SelectorE>
//  if (time == 2500) open();  //test
//  if (time == 2900) close();
//  if (time == 3200) selector->go(0);  //test
//  if (time >= 3250) time = 0;  //test

  if (time > 2) {
 8004848:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800484c:	2a03      	cmp	r2, #3
 800484e:	f173 0300 	sbcs.w	r3, r3, #0
 8004852:	d305      	bcc.n	8004860 <_ZN5astra8Launcher6updateEv+0x78>
    HAL::keyScan();
 8004854:	f7ff fca0 	bl	8004198 <_ZN3HAL7keyScanEv>
    time = 0;
 8004858:	2200      	movs	r2, #0
 800485a:	2300      	movs	r3, #0
 800485c:	e9c4 2304 	strd	r2, r3, [r4, #16]
  static key::KEY_TYPE *getKeyFlag() { return &get()->keyFlag; }
 8004860:	f000 f946 	bl	8004af0 <_ZN3HAL3getEv>
  }

  if (*HAL::getKeyFlag() == key::KEY_PRESSED) {
 8004864:	7b83      	ldrb	r3, [r0, #14]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d12d      	bne.n	80048c6 <_ZN5astra8Launcher6updateEv+0xde>
 800486a:	f000 f941 	bl	8004af0 <_ZN3HAL3getEv>
    *HAL::getKeyFlag() = key::KEY_NOT_PRESSED;
 800486e:	2300      	movs	r3, #0
 8004870:	7383      	strb	r3, [r0, #14]
  static key::KEY_ACTION *getKeyMap() { return get()->key; }
 8004872:	f000 f93d 	bl	8004af0 <_ZN3HAL3getEv>
    for (unsigned char i = 0; i < key::KEY_NUM; i++) {
      if (HAL::getKeyMap()[i] == key::CLICK) {
 8004876:	7b03      	ldrb	r3, [r0, #12]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d034      	beq.n	80048e6 <_ZN5astra8Launcher6updateEv+0xfe>
 800487c:	f000 f938 	bl	8004af0 <_ZN3HAL3getEv>
        if (i == 0) { selector->goPreview(); }//selector去到上一个项目
        else if (i == 1) { selector->goNext(); }//selector去到下一个项目
      } else if (HAL::getKeyMap()[i] == key::PRESS) {
 8004880:	7b03      	ldrb	r3, [r0, #12]
 8004882:	2b02      	cmp	r3, #2
 8004884:	d102      	bne.n	800488c <_ZN5astra8Launcher6updateEv+0xa4>
        if (i == 0) { close(); }//退出当前项目
 8004886:	4620      	mov	r0, r4
 8004888:	f7ff ff0e 	bl	80046a8 <_ZN5astra8Launcher5closeEv>
 800488c:	f000 f930 	bl	8004af0 <_ZN3HAL3getEv>
      if (HAL::getKeyMap()[i] == key::CLICK) {
 8004890:	7b43      	ldrb	r3, [r0, #13]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d02b      	beq.n	80048ee <_ZN5astra8Launcher6updateEv+0x106>
 8004896:	f000 f92b 	bl	8004af0 <_ZN3HAL3getEv>
      } else if (HAL::getKeyMap()[i] == key::PRESS) {
 800489a:	7b43      	ldrb	r3, [r0, #13]
 800489c:	2b02      	cmp	r3, #2
 800489e:	d102      	bne.n	80048a6 <_ZN5astra8Launcher6updateEv+0xbe>
        else if (i == 1) { open(); }//打开当前项目
 80048a0:	4620      	mov	r0, r4
 80048a2:	f7ff ff51 	bl	8004748 <_ZN5astra8Launcher4openEv>
 80048a6:	f000 f923 	bl	8004af0 <_ZN3HAL3getEv>
 80048aa:	4605      	mov	r5, r0
 80048ac:	f000 f920 	bl	8004af0 <_ZN3HAL3getEv>
	*__first = __value;
 80048b0:	1c82      	adds	r2, r0, #2
 80048b2:	2100      	movs	r1, #0
 80048b4:	1b52      	subs	r2, r2, r5
 80048b6:	f105 000c 	add.w	r0, r5, #12
 80048ba:	f004 f920 	bl	8008afe <memset>
  static key::KEY_TYPE *getKeyFlag() { return &get()->keyFlag; }
 80048be:	f000 f917 	bl	8004af0 <_ZN3HAL3getEv>
      }
    }
    std::fill(HAL::getKeyMap(), HAL::getKeyMap() + key::KEY_NUM, key::INVALID);
    *HAL::getKeyFlag() = key::KEY_NOT_PRESSED;
 80048c2:	2300      	movs	r3, #0
 80048c4:	7383      	strb	r3, [r0, #14]
  }

  HAL::canvasUpdate();
 80048c6:	f7ff fc4f 	bl	8004168 <_ZN3HAL12canvasUpdateEv>
  static unsigned long millis() { return get()->_millis(); }
 80048ca:	f000 f911 	bl	8004af0 <_ZN3HAL3getEv>
 80048ce:	6803      	ldr	r3, [r0, #0]
 80048d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048d2:	4798      	blx	r3

  //time++;
  time = HAL::millis() / 1000;
 80048d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80048d8:	fbb0 f0f3 	udiv	r0, r0, r3
 80048dc:	2300      	movs	r3, #0
 80048de:	6120      	str	r0, [r4, #16]
 80048e0:	6163      	str	r3, [r4, #20]
}
 80048e2:	b004      	add	sp, #16
 80048e4:	bd70      	pop	{r4, r5, r6, pc}
        if (i == 0) { selector->goPreview(); }//selector去到上一个项目
 80048e6:	68a0      	ldr	r0, [r4, #8]
 80048e8:	f7fe fe28 	bl	800353c <_ZN5astra8Selector9goPreviewEv>
 80048ec:	e7ce      	b.n	800488c <_ZN5astra8Launcher6updateEv+0xa4>
        else if (i == 1) { selector->goNext(); }//selector去到下一个项目
 80048ee:	68a0      	ldr	r0, [r4, #8]
 80048f0:	f7fe fe06 	bl	8003500 <_ZN5astra8Selector6goNextEv>
 80048f4:	e7d7      	b.n	80048a6 <_ZN5astra8Launcher6updateEv+0xbe>

080048f6 <_ZN3HAL14_getRandomSeedEv>:
  virtual unsigned long _getTick() { return 0; }

  static unsigned long getRandomSeed() { return get()->_getRandomSeed(); }

  /**optional**/
  virtual unsigned long _getRandomSeed() { return 0; }
 80048f6:	2000      	movs	r0, #0
 80048f8:	4770      	bx	lr

080048fa <_ZN3HAL5_beepEf>:
   * @brief buzzer.
   * */
public:
  static void beep(float _freq) { get()->_beep(_freq); }

  virtual void _beep(float _freq) {}
 80048fa:	4770      	bx	lr

080048fc <_ZN3HAL9_beepStopEv>:

  static void beepStop() { get()->_beepStop(); }

  virtual void _beepStop() {}
 80048fc:	4770      	bx	lr

080048fe <_ZN3HAL11_setBeepVolEh>:

  static void setBeepVol(unsigned char _vol) { get()->_setBeepVol(_vol); }

  virtual void _setBeepVol(unsigned char _vol) {}
 80048fe:	4770      	bx	lr

08004900 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>:
      basic_string(const basic_string& __str)
 8004900:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 8004902:	f100 0308 	add.w	r3, r0, #8
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 8004906:	6003      	str	r3, [r0, #0]
      { return _M_string_length; }
 8004908:	e9d1 5300 	ldrd	r5, r3, [r1]
	if (__dnew > size_type(_S_local_capacity))
 800490c:	2b0f      	cmp	r3, #15
      basic_string(const basic_string& __str)
 800490e:	4604      	mov	r4, r0
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
 8004910:	eb05 0603 	add.w	r6, r5, r3
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8004914:	9301      	str	r3, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
 8004916:	d906      	bls.n	8004926 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x26>
	    _M_data(_M_create(__dnew, size_type(0)));
 8004918:	2200      	movs	r2, #0
 800491a:	a901      	add	r1, sp, #4
 800491c:	f003 fd36 	bl	800838c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
 8004920:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
 8004922:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
 8004924:	60a3      	str	r3, [r4, #8]
	this->_S_copy_chars(_M_data(), __beg, __end);
 8004926:	4632      	mov	r2, r6
 8004928:	4629      	mov	r1, r5
 800492a:	6820      	ldr	r0, [r4, #0]
 800492c:	f003 fd8e 	bl	800844c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8004930:	2100      	movs	r1, #0
	_M_set_length(__dnew);
 8004932:	9b01      	ldr	r3, [sp, #4]
 8004934:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
 8004936:	6063      	str	r3, [r4, #4]
 8004938:	54d1      	strb	r1, [r2, r3]
      }
 800493a:	b002      	add	sp, #8
 800493c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004940 <_ZN3HAL4typeB5cxx11Ev>:
  virtual std::string type() { return "Base"; }
 8004940:	b510      	push	{r4, lr}
 8004942:	4604      	mov	r4, r0
	this->_S_copy_chars(_M_data(), __beg, __end);
 8004944:	4a06      	ldr	r2, [pc, #24]	@ (8004960 <_ZN3HAL4typeB5cxx11Ev+0x20>)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 8004946:	3008      	adds	r0, #8
	: allocator_type(__a), _M_p(__dat) { }
 8004948:	6020      	str	r0, [r4, #0]
 800494a:	1f11      	subs	r1, r2, #4
 800494c:	f003 fd83 	bl	8008456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
      { _M_string_length = __length; }
 8004950:	2304      	movs	r3, #4
 8004952:	2200      	movs	r2, #0
 8004954:	6063      	str	r3, [r4, #4]
      { return _M_dataplus._M_p; }
 8004956:	6823      	ldr	r3, [r4, #0]
 8004958:	4620      	mov	r0, r4
 800495a:	711a      	strb	r2, [r3, #4]
 800495c:	bd10      	pop	{r4, pc}
 800495e:	bf00      	nop
 8004960:	08009c64 	.word	0x08009c64

08004964 <__tcf_0>:
 *
 * @param _msg message want to print. 要输出的信息
 * @note cannot execute within a loop. 不能在循环内执行
 */
void HAL::_printInfo(std::string _msg) {
  static std::vector<std::string> _infoCache = {};
 8004964:	b570      	push	{r4, r5, r6, lr}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004966:	4c09      	ldr	r4, [pc, #36]	@ (800498c <__tcf_0+0x28>)
 8004968:	e9d4 5600 	ldrd	r5, r6, [r4]
	  for (; __first != __last; ++__first)
 800496c:	42ae      	cmp	r6, r5
 800496e:	d107      	bne.n	8004980 <__tcf_0+0x1c>
	_M_deallocate(_M_impl._M_start,
 8004970:	6820      	ldr	r0, [r4, #0]
	if (__p)
 8004972:	b150      	cbz	r0, 800498a <__tcf_0+0x26>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8004974:	68a1      	ldr	r1, [r4, #8]
 8004976:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800497a:	1a09      	subs	r1, r1, r0
 800497c:	f003 b9c4 	b.w	8007d08 <_ZdlPvj>
      { _M_dispose(); }
 8004980:	4628      	mov	r0, r5
 8004982:	f003 fd25 	bl	80083d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8004986:	3518      	adds	r5, #24
 8004988:	e7f0      	b.n	800496c <__tcf_0+0x8>
 800498a:	bd70      	pop	{r4, r5, r6, pc}
 800498c:	200001d0 	.word	0x200001d0

08004990 <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 8004990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004994:	4604      	mov	r4, r0
 8004996:	460e      	mov	r6, r1
      { _M_string_length = __length; }
 8004998:	2700      	movs	r7, #0
 800499a:	f102 0508 	add.w	r5, r2, #8
      for (; __first != __last; ++__first, (void)++__cur)
 800499e:	42b4      	cmp	r4, r6
 80049a0:	f1a5 0008 	sub.w	r0, r5, #8
 80049a4:	d101      	bne.n	80049aa <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0x1a>
    }
 80049a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (__str._M_is_local())
 80049aa:	4620      	mov	r0, r4
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 80049ac:	f845 5c08 	str.w	r5, [r5, #-8]
	if (__str._M_is_local())
 80049b0:	f003 fce6 	bl	8008380 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
 80049b4:	f104 0808 	add.w	r8, r4, #8
      { return _M_string_length; }
 80049b8:	6862      	ldr	r2, [r4, #4]
	if (__str._M_is_local())
 80049ba:	b188      	cbz	r0, 80049e0 <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0x50>
      }

      static _GLIBCXX20_CONSTEXPR char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
	if (__n == 0)
 80049bc:	3201      	adds	r2, #1
 80049be:	d003      	beq.n	80049c8 <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0x38>
	  return __s1;
#if __cplusplus >= 202002L
	if (std::__is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
#endif
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
 80049c0:	4641      	mov	r1, r8
 80049c2:	4628      	mov	r0, r5
 80049c4:	f004 f969 	bl	8008c9a <memcpy>
      { _M_string_length = __length; }
 80049c8:	6863      	ldr	r3, [r4, #4]
      { _M_dispose(); }
 80049ca:	4620      	mov	r0, r4
      { _M_string_length = __length; }
 80049cc:	f845 3c04 	str.w	r3, [r5, #-4]
 80049d0:	e9c4 8700 	strd	r8, r7, [r4]
	__c1 = __c2;
 80049d4:	7227      	strb	r7, [r4, #8]
      { _M_dispose(); }
 80049d6:	f003 fcfb 	bl	80083d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      for (; __first != __last; ++__first, (void)++__cur)
 80049da:	3418      	adds	r4, #24
 80049dc:	3518      	adds	r5, #24
 80049de:	e7de      	b.n	800499e <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0xe>
      { _M_dataplus._M_p = __p; }
 80049e0:	6823      	ldr	r3, [r4, #0]
 80049e2:	f845 3c08 	str.w	r3, [r5, #-8]
      { _M_allocated_capacity = __capacity; }
 80049e6:	68a3      	ldr	r3, [r4, #8]
 80049e8:	602b      	str	r3, [r5, #0]
 80049ea:	e7ed      	b.n	80049c8 <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0x38>

080049ec <_ZN3HAL6getKeyEN3key8keyIndexE>:
  return hal;
 80049ec:	4b03      	ldr	r3, [pc, #12]	@ (80049fc <_ZN3HAL6getKeyEN3key8keyIndexE+0x10>)
public:
  key::KEY_ACTION key[key::KEY_NUM] = {static_cast<key::keyAction>(0)};
  key::KEY_TYPE keyFlag { static_cast<key::KEY_TYPE>(0) };

public:
  static bool getKey(key::KEY_INDEX _keyIndex) { return get()->_getKey(_keyIndex); }
 80049ee:	4601      	mov	r1, r0
 80049f0:	6818      	ldr	r0, [r3, #0]
 80049f2:	6802      	ldr	r2, [r0, #0]
 80049f4:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 80049f8:	4710      	bx	r2
 80049fa:	bf00      	nop
 80049fc:	200001dc 	.word	0x200001dc

08004a00 <_ZN3HAL10_getAnyKeyEv>:
  }
  canvasUpdate();
  setDrawType(1); //回归实色显示
}

bool HAL::_getAnyKey() {
 8004a00:	b508      	push	{r3, lr}
  for (int i = 0; i < key::KEY_NUM; i++) {
    if (getKey(static_cast<key::KEY_INDEX>(i))) return true;
 8004a02:	2000      	movs	r0, #0
 8004a04:	f7ff fff2 	bl	80049ec <_ZN3HAL6getKeyEN3key8keyIndexE>
 8004a08:	b910      	cbnz	r0, 8004a10 <_ZN3HAL10_getAnyKeyEv+0x10>
 8004a0a:	2001      	movs	r0, #1
 8004a0c:	f7ff ffee 	bl	80049ec <_ZN3HAL6getKeyEN3key8keyIndexE>
  }
  return false;
}
 8004a10:	bd08      	pop	{r3, pc}
	...

08004a14 <_ZN3HAL9getAnyKeyEv>:
  return hal;
 8004a14:	4b02      	ldr	r3, [pc, #8]	@ (8004a20 <_ZN3HAL9getAnyKeyEv+0xc>)
 8004a16:	6818      	ldr	r0, [r3, #0]

  virtual bool _getKey(key::KEY_INDEX _keyIndex) { return false; }

  static bool getAnyKey() { return get()->_getAnyKey(); }
 8004a18:	6803      	ldr	r3, [r0, #0]
 8004a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a1e:	4718      	bx	r3
 8004a20:	200001dc 	.word	0x200001dc

08004a24 <_ZN3HAL8_keyScanEv>:
 * @brief key scanner default. 默认按键扫描函数
 *
 * @note run per 5 ms.
 * @return key::keyValue
 */
void HAL::_keyScan() {
 8004a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  static unsigned char _timeCnt = 0;
  static bool _lock = false;
  static key::KEY_FILTER _keyFilter = key::CHECKING;
  switch (_keyFilter) {
 8004a26:	4d2b      	ldr	r5, [pc, #172]	@ (8004ad4 <_ZN3HAL8_keyScanEv+0xb0>)
void HAL::_keyScan() {
 8004a28:	4604      	mov	r4, r0
  switch (_keyFilter) {
 8004a2a:	782f      	ldrb	r7, [r5, #0]
 8004a2c:	2f02      	cmp	r7, #2
 8004a2e:	d824      	bhi.n	8004a7a <_ZN3HAL8_keyScanEv+0x56>
 8004a30:	4e29      	ldr	r6, [pc, #164]	@ (8004ad8 <_ZN3HAL8_keyScanEv+0xb4>)
 8004a32:	b32f      	cbz	r7, 8004a80 <_ZN3HAL8_keyScanEv+0x5c>
      break;

    case key::KEY_0_CONFIRM:
    case key::KEY_1_CONFIRM:
      //filter
      if (getAnyKey()) {
 8004a34:	f7ff ffee 	bl	8004a14 <_ZN3HAL9getAnyKeyEv>
        if (!_lock) _lock = true;
 8004a38:	7833      	ldrb	r3, [r6, #0]
      if (getAnyKey()) {
 8004a3a:	b3a8      	cbz	r0, 8004aa8 <_ZN3HAL8_keyScanEv+0x84>
        if (!_lock) _lock = true;
 8004a3c:	b90b      	cbnz	r3, 8004a42 <_ZN3HAL8_keyScanEv+0x1e>
 8004a3e:	2301      	movs	r3, #1
 8004a40:	7033      	strb	r3, [r6, #0]
        _timeCnt++;
 8004a42:	4f26      	ldr	r7, [pc, #152]	@ (8004adc <_ZN3HAL8_keyScanEv+0xb8>)
 8004a44:	783b      	ldrb	r3, [r7, #0]
 8004a46:	3301      	adds	r3, #1
 8004a48:	b2db      	uxtb	r3, r3

        //timer
        if (_timeCnt > 100) {
 8004a4a:	2b64      	cmp	r3, #100	@ 0x64
        _timeCnt++;
 8004a4c:	703b      	strb	r3, [r7, #0]
        if (_timeCnt > 100) {
 8004a4e:	d916      	bls.n	8004a7e <_ZN3HAL8_keyScanEv+0x5a>
          keyFlag = key::KEY_PRESSED;
 8004a50:	2301      	movs	r3, #1
          //long press 1s
          if (getKey(key::KEY_0)) {
 8004a52:	2000      	movs	r0, #0
          keyFlag = key::KEY_PRESSED;
 8004a54:	73a3      	strb	r3, [r4, #14]
          if (getKey(key::KEY_0)) {
 8004a56:	f7ff ffc9 	bl	80049ec <_ZN3HAL6getKeyEN3key8keyIndexE>
 8004a5a:	b108      	cbz	r0, 8004a60 <_ZN3HAL8_keyScanEv+0x3c>
            key[key::KEY_0] = key::PRESS;
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	81a3      	strh	r3, [r4, #12]
            key[key::KEY_1] = key::INVALID;
          }
          if (getKey(key::KEY_1)) {
 8004a60:	2001      	movs	r0, #1
 8004a62:	f7ff ffc3 	bl	80049ec <_ZN3HAL6getKeyEN3key8keyIndexE>
 8004a66:	b110      	cbz	r0, 8004a6e <_ZN3HAL8_keyScanEv+0x4a>
            key[key::KEY_1] = key::PRESS;
            key[key::KEY_0] = key::INVALID;
 8004a68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004a6c:	81a3      	strh	r3, [r4, #12]
          }
          _timeCnt = 0;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	703b      	strb	r3, [r7, #0]
          _lock = false;
 8004a72:	7033      	strb	r3, [r6, #0]
          if (_keyFilter == key::KEY_1_CONFIRM) {
            key[key::KEY_1] = key::CLICK;
            key[key::KEY_0] = key::INVALID;
          }
          keyFlag = key::KEY_PRESSED;
          _keyFilter = key::RELEASED;
 8004a74:	2303      	movs	r3, #3
 8004a76:	702b      	strb	r3, [r5, #0]
 8004a78:	e001      	b.n	8004a7e <_ZN3HAL8_keyScanEv+0x5a>
  switch (_keyFilter) {
 8004a7a:	2f03      	cmp	r7, #3
 8004a7c:	d024      	beq.n	8004ac8 <_ZN3HAL8_keyScanEv+0xa4>
      if (!getAnyKey()) _keyFilter = key::CHECKING;
      break;

    default: break;
  }
}
 8004a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (getAnyKey()) {
 8004a80:	f7ff ffc8 	bl	8004a14 <_ZN3HAL9getAnyKeyEv>
 8004a84:	b158      	cbz	r0, 8004a9e <_ZN3HAL8_keyScanEv+0x7a>
        if (getKey(key::KEY_0)) _keyFilter = key::KEY_0_CONFIRM;
 8004a86:	4638      	mov	r0, r7
 8004a88:	f7ff ffb0 	bl	80049ec <_ZN3HAL6getKeyEN3key8keyIndexE>
 8004a8c:	b108      	cbz	r0, 8004a92 <_ZN3HAL8_keyScanEv+0x6e>
 8004a8e:	2301      	movs	r3, #1
 8004a90:	702b      	strb	r3, [r5, #0]
        if (getKey(key::KEY_1)) _keyFilter = key::KEY_1_CONFIRM;
 8004a92:	2001      	movs	r0, #1
 8004a94:	f7ff ffaa 	bl	80049ec <_ZN3HAL6getKeyEN3key8keyIndexE>
 8004a98:	b108      	cbz	r0, 8004a9e <_ZN3HAL8_keyScanEv+0x7a>
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	702b      	strb	r3, [r5, #0]
      _timeCnt = 0;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	4a0e      	ldr	r2, [pc, #56]	@ (8004adc <_ZN3HAL8_keyScanEv+0xb8>)
      _lock = false;
 8004aa2:	7033      	strb	r3, [r6, #0]
      _timeCnt = 0;
 8004aa4:	7013      	strb	r3, [r2, #0]
      break;
 8004aa6:	e7ea      	b.n	8004a7e <_ZN3HAL8_keyScanEv+0x5a>
        if (_lock) {
 8004aa8:	b15b      	cbz	r3, 8004ac2 <_ZN3HAL8_keyScanEv+0x9e>
          if (_keyFilter == key::KEY_0_CONFIRM) {
 8004aaa:	782b      	ldrb	r3, [r5, #0]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d103      	bne.n	8004ab8 <_ZN3HAL8_keyScanEv+0x94>
            key[key::KEY_0] = key::INVALID;
 8004ab0:	81a3      	strh	r3, [r4, #12]
          keyFlag = key::KEY_PRESSED;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	73a3      	strb	r3, [r4, #14]
 8004ab6:	e7dd      	b.n	8004a74 <_ZN3HAL8_keyScanEv+0x50>
          if (_keyFilter == key::KEY_1_CONFIRM) {
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d1fa      	bne.n	8004ab2 <_ZN3HAL8_keyScanEv+0x8e>
            key[key::KEY_0] = key::INVALID;
 8004abc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004ac0:	e7f6      	b.n	8004ab0 <_ZN3HAL8_keyScanEv+0x8c>
          _keyFilter = key::CHECKING;
 8004ac2:	702b      	strb	r3, [r5, #0]
          key[key::KEY_0] = key::INVALID;
 8004ac4:	81a3      	strh	r3, [r4, #12]
 8004ac6:	e7da      	b.n	8004a7e <_ZN3HAL8_keyScanEv+0x5a>
      if (!getAnyKey()) _keyFilter = key::CHECKING;
 8004ac8:	f7ff ffa4 	bl	8004a14 <_ZN3HAL9getAnyKeyEv>
 8004acc:	2800      	cmp	r0, #0
 8004ace:	d1d6      	bne.n	8004a7e <_ZN3HAL8_keyScanEv+0x5a>
 8004ad0:	7028      	strb	r0, [r5, #0]
}
 8004ad2:	e7d4      	b.n	8004a7e <_ZN3HAL8_keyScanEv+0x5a>
 8004ad4:	200001b9 	.word	0x200001b9
 8004ad8:	200001ba 	.word	0x200001ba
 8004adc:	200001bb 	.word	0x200001bb

08004ae0 <_ZN3HAL8_keyTestEv>:

/**
 * @brief default key tester. 默认按键测试函数
 */
void HAL::_keyTest() {
 8004ae0:	b510      	push	{r4, lr}
 8004ae2:	4604      	mov	r4, r0
  if (getAnyKey()) {
 8004ae4:	f7ff ff96 	bl	8004a14 <_ZN3HAL9getAnyKeyEv>
 8004ae8:	b108      	cbz	r0, 8004aee <_ZN3HAL8_keyTestEv+0xe>
        //do something when key pressed
        if (i == 0) break;
        if (i == 1) break;
      }
    }
    memset(key, key::INVALID, sizeof(key));
 8004aea:	2300      	movs	r3, #0
 8004aec:	81a3      	strh	r3, [r4, #12]
  }
}
 8004aee:	bd10      	pop	{r4, pc}

08004af0 <_ZN3HAL3getEv>:
}
 8004af0:	4b01      	ldr	r3, [pc, #4]	@ (8004af8 <_ZN3HAL3getEv+0x8>)
 8004af2:	6818      	ldr	r0, [r3, #0]
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	200001dc 	.word	0x200001dc

08004afc <_ZN3HAL6injectEPS_>:
bool HAL::inject(HAL *_hal) {
 8004afc:	b510      	push	{r4, lr}
  if (_hal == nullptr) {
 8004afe:	4604      	mov	r4, r0
 8004b00:	b128      	cbz	r0, 8004b0e <_ZN3HAL6injectEPS_+0x12>
  _hal->init();
 8004b02:	6803      	ldr	r3, [r0, #0]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	4798      	blx	r3
  return true;
 8004b08:	2001      	movs	r0, #1
  hal = _hal;
 8004b0a:	4b01      	ldr	r3, [pc, #4]	@ (8004b10 <_ZN3HAL6injectEPS_+0x14>)
 8004b0c:	601c      	str	r4, [r3, #0]
}
 8004b0e:	bd10      	pop	{r4, pc}
 8004b10:	200001dc 	.word	0x200001dc

08004b14 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8004b14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004b18:	e9d0 6800 	ldrd	r6, r8, [r0]
 8004b1c:	4b20      	ldr	r3, [pc, #128]	@ (8004ba0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x8c>)
 8004b1e:	eba8 0406 	sub.w	r4, r8, r6
 8004b22:	10e4      	asrs	r4, r4, #3
 8004b24:	435c      	muls	r4, r3
	if (max_size() - size() < __n)
 8004b26:	4b1f      	ldr	r3, [pc, #124]	@ (8004ba4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x90>)
 8004b28:	4605      	mov	r5, r0
 8004b2a:	429c      	cmp	r4, r3
 8004b2c:	460f      	mov	r7, r1
 8004b2e:	4691      	mov	r9, r2
 8004b30:	d102      	bne.n	8004b38 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
 8004b32:	481d      	ldr	r0, [pc, #116]	@ (8004ba8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x94>)
 8004b34:	f003 fc18 	bl	8008368 <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 8004b38:	45b0      	cmp	r8, r6
 8004b3a:	bf14      	ite	ne
 8004b3c:	4622      	movne	r2, r4
 8004b3e:	2201      	moveq	r2, #1
 8004b40:	18a4      	adds	r4, r4, r2
    { return __lhs.base() - __rhs.base(); }
 8004b42:	eba1 0b06 	sub.w	fp, r1, r6
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8004b46:	d227      	bcs.n	8004b98 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x84>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8004b48:	b344      	cbz	r4, 8004b9c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x88>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8004b4a:	429c      	cmp	r4, r3
 8004b4c:	bf28      	it	cs
 8004b4e:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8004b50:	2018      	movs	r0, #24
 8004b52:	4360      	muls	r0, r4
 8004b54:	f001 ff2a 	bl	80069ac <_Znwj>
 8004b58:	4682      	mov	sl, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004b5a:	4649      	mov	r1, r9
 8004b5c:	eb0a 000b 	add.w	r0, sl, fp
 8004b60:	f7ff fece 	bl	8004900 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 8004b64:	4639      	mov	r1, r7
 8004b66:	4652      	mov	r2, sl
 8004b68:	4630      	mov	r0, r6
 8004b6a:	f7ff ff11 	bl	8004990 <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0>
 8004b6e:	4641      	mov	r1, r8
 8004b70:	f100 0218 	add.w	r2, r0, #24
 8004b74:	4638      	mov	r0, r7
 8004b76:	f7ff ff0b 	bl	8004990 <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0>
 8004b7a:	4607      	mov	r7, r0
	if (__p)
 8004b7c:	b126      	cbz	r6, 8004b88 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x74>
		    this->_M_impl._M_end_of_storage - __old_start);
 8004b7e:	68a9      	ldr	r1, [r5, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8004b80:	4630      	mov	r0, r6
 8004b82:	1b89      	subs	r1, r1, r6
 8004b84:	f003 f8c0 	bl	8007d08 <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8004b88:	2318      	movs	r3, #24
 8004b8a:	fb03 a304 	mla	r3, r3, r4, sl
      this->_M_impl._M_finish = __new_finish;
 8004b8e:	e9c5 a700 	strd	sl, r7, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8004b92:	60ab      	str	r3, [r5, #8]
    }
 8004b94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b98:	461c      	mov	r4, r3
 8004b9a:	e7d9      	b.n	8004b50 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8004b9c:	46a2      	mov	sl, r4
 8004b9e:	e7dc      	b.n	8004b5a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x46>
 8004ba0:	aaaaaaab 	.word	0xaaaaaaab
 8004ba4:	05555555 	.word	0x05555555
 8004ba8:	08009b0c 	.word	0x08009b0c

08004bac <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
void HAL::_printInfo(std::string _msg) {
 8004bac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  static std::vector<std::string> _infoCache = {};
 8004bb0:	4f4f      	ldr	r7, [pc, #316]	@ (8004cf0 <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x144>)
void HAL::_printInfo(std::string _msg) {
 8004bb2:	460e      	mov	r6, r1
  static std::vector<std::string> _infoCache = {};
 8004bb4:	683d      	ldr	r5, [r7, #0]
 8004bb6:	4c4f      	ldr	r4, [pc, #316]	@ (8004cf4 <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x148>)
 8004bb8:	f015 0501 	ands.w	r5, r5, #1
 8004bbc:	f3bf 8f5b 	dmb	ish
 8004bc0:	d10c      	bne.n	8004bdc <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x30>
 8004bc2:	4638      	mov	r0, r7
 8004bc4:	f003 f8f7 	bl	8007db6 <__cxa_guard_acquire>
 8004bc8:	b140      	cbz	r0, 8004bdc <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x30>
 8004bca:	484b      	ldr	r0, [pc, #300]	@ (8004cf8 <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x14c>)
	: _M_start(), _M_finish(), _M_end_of_storage()
 8004bcc:	e9c4 5500 	strd	r5, r5, [r4]
 8004bd0:	60a5      	str	r5, [r4, #8]
 8004bd2:	f003 fdf2 	bl	80087ba <atexit>
 8004bd6:	4638      	mov	r0, r7
 8004bd8:	f003 f8f9 	bl	8007dce <__cxa_guard_release>
  static const unsigned char _max = getSystemConfig().screenHeight / getFontHeight();
 8004bdc:	4d47      	ldr	r5, [pc, #284]	@ (8004cfc <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x150>)
 8004bde:	f8df 9120 	ldr.w	r9, [pc, #288]	@ 8004d00 <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x154>
 8004be2:	682b      	ldr	r3, [r5, #0]
 8004be4:	f3bf 8f5b 	dmb	ish
 8004be8:	f013 0f01 	tst.w	r3, #1
 8004bec:	d10f      	bne.n	8004c0e <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x62>
 8004bee:	4628      	mov	r0, r5
 8004bf0:	f003 f8e1 	bl	8007db6 <__cxa_guard_acquire>
 8004bf4:	b158      	cbz	r0, 8004c0e <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x62>
 8004bf6:	4b43      	ldr	r3, [pc, #268]	@ (8004d04 <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x158>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	795f      	ldrb	r7, [r3, #5]
 8004bfc:	f7ff fac4 	bl	8004188 <_ZN3HAL13getFontHeightEv>
 8004c00:	fbb7 f7f0 	udiv	r7, r7, r0
 8004c04:	4628      	mov	r0, r5
 8004c06:	f889 7000 	strb.w	r7, [r9]
 8004c0a:	f003 f8e0 	bl	8007dce <__cxa_guard_release>
  static const unsigned char _fontHeight = getFontHeight();
 8004c0e:	4d3e      	ldr	r5, [pc, #248]	@ (8004d08 <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x15c>)
 8004c10:	682b      	ldr	r3, [r5, #0]
 8004c12:	f3bf 8f5b 	dmb	ish
 8004c16:	07db      	lsls	r3, r3, #31
 8004c18:	d40a      	bmi.n	8004c30 <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x84>
 8004c1a:	4628      	mov	r0, r5
 8004c1c:	f003 f8cb 	bl	8007db6 <__cxa_guard_acquire>
 8004c20:	b130      	cbz	r0, 8004c30 <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x84>
 8004c22:	f7ff fab1 	bl	8004188 <_ZN3HAL13getFontHeightEv>
 8004c26:	4b39      	ldr	r3, [pc, #228]	@ (8004d0c <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x160>)
 8004c28:	7018      	strb	r0, [r3, #0]
 8004c2a:	4628      	mov	r0, r5
 8004c2c:	f003 f8cf 	bl	8007dce <__cxa_guard_release>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004c30:	e9d4 5800 	ldrd	r5, r8, [r4]
 8004c34:	4936      	ldr	r1, [pc, #216]	@ (8004d10 <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x164>)
 8004c36:	eba8 0305 	sub.w	r3, r8, r5
 8004c3a:	10db      	asrs	r3, r3, #3
 8004c3c:	434b      	muls	r3, r1
  if (_infoCache.size() >= _max) _infoCache.clear();
 8004c3e:	f899 2000 	ldrb.w	r2, [r9]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d809      	bhi.n	8004c5a <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xae>
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8004c46:	4545      	cmp	r5, r8
 8004c48:	d007      	beq.n	8004c5a <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xae>
 8004c4a:	462f      	mov	r7, r5
      { _M_dispose(); }
 8004c4c:	4638      	mov	r0, r7
 8004c4e:	3718      	adds	r7, #24
 8004c50:	f003 fbbe 	bl	80083d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8004c54:	45b8      	cmp	r8, r7
 8004c56:	d1f9      	bne.n	8004c4c <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa0>
	    this->_M_impl._M_finish = __pos;
 8004c58:	6065      	str	r5, [r4, #4]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8004c5a:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
 8004c5e:	4298      	cmp	r0, r3
 8004c60:	d02c      	beq.n	8004cbc <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x110>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004c62:	4631      	mov	r1, r6
 8004c64:	f7ff fe4c 	bl	8004900 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
	    ++this->_M_impl._M_finish;
 8004c68:	6863      	ldr	r3, [r4, #4]
 8004c6a:	3318      	adds	r3, #24
 8004c6c:	6063      	str	r3, [r4, #4]
  return hal;
 8004c6e:	4f25      	ldr	r7, [pc, #148]	@ (8004d04 <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x158>)
  for (unsigned char i = 0; i < _infoCache.size(); i++) {
 8004c70:	2600      	movs	r6, #0
  return hal;
 8004c72:	6838      	ldr	r0, [r7, #0]
  static void drawEnglish(float _x, float _y, const std::string &_text) { get()->_drawEnglish(_x, _y, _text); }
 8004c74:	f04f 0a00 	mov.w	sl, #0
  static void canvasClear() { get()->_canvasClear(); }
 8004c78:	6803      	ldr	r3, [r0, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004c7a:	f8df 8094 	ldr.w	r8, [pc, #148]	@ 8004d10 <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x164>
 8004c7e:	6a1b      	ldr	r3, [r3, #32]
 8004c80:	4798      	blx	r3
  setDrawType(2); //反色显示
 8004c82:	2002      	movs	r0, #2
 8004c84:	f7fc f9d5 	bl	8001032 <_ZN3HAL11setDrawTypeEh>
    drawEnglish(0, _fontHeight + i * (1 + _fontHeight), _infoCache[i]);
 8004c88:	f8df 9080 	ldr.w	r9, [pc, #128]	@ 8004d0c <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x160>
 8004c8c:	6823      	ldr	r3, [r4, #0]
 8004c8e:	6862      	ldr	r2, [r4, #4]
 8004c90:	b2f1      	uxtb	r1, r6
 8004c92:	1ad2      	subs	r2, r2, r3
 8004c94:	10d2      	asrs	r2, r2, #3
 8004c96:	fb08 f202 	mul.w	r2, r8, r2
  return hal;
 8004c9a:	683d      	ldr	r5, [r7, #0]
  for (unsigned char i = 0; i < _infoCache.size(); i++) {
 8004c9c:	428a      	cmp	r2, r1
  static void drawEnglish(float _x, float _y, const std::string &_text) { get()->_drawEnglish(_x, _y, _text); }
 8004c9e:	f8d5 b000 	ldr.w	fp, [r5]
 8004ca2:	f106 0601 	add.w	r6, r6, #1
 8004ca6:	d80f      	bhi.n	8004cc8 <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11c>
  static void canvasUpdate() { get()->_canvasUpdate(); }
 8004ca8:	4628      	mov	r0, r5
 8004caa:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004cae:	4798      	blx	r3
  setDrawType(1); //回归实色显示
 8004cb0:	2001      	movs	r0, #1
 8004cb2:	f7fc f9be 	bl	8001032 <_ZN3HAL11setDrawTypeEh>
}
 8004cb6:	b003      	add	sp, #12
 8004cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  _M_realloc_insert(end(), __x);
 8004cbc:	4601      	mov	r1, r0
 8004cbe:	4632      	mov	r2, r6
 8004cc0:	480c      	ldr	r0, [pc, #48]	@ (8004cf4 <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x148>)
 8004cc2:	f7ff ff27 	bl	8004b14 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>
 8004cc6:	e7d2      	b.n	8004c6e <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc2>
	return *(this->_M_impl._M_start + __n);
 8004cc8:	2018      	movs	r0, #24
    drawEnglish(0, _fontHeight + i * (1 + _fontHeight), _infoCache[i]);
 8004cca:	f899 2000 	ldrb.w	r2, [r9]
 8004cce:	fb00 3301 	mla	r3, r0, r1, r3
 8004cd2:	fb02 1101 	mla	r1, r2, r1, r1
 8004cd6:	1888      	adds	r0, r1, r2
 8004cd8:	9301      	str	r3, [sp, #4]
 8004cda:	f7fb fee3 	bl	8000aa4 <__aeabi_i2f>
  static void drawEnglish(float _x, float _y, const std::string &_text) { get()->_drawEnglish(_x, _y, _text); }
 8004cde:	4651      	mov	r1, sl
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	f8db b038 	ldr.w	fp, [fp, #56]	@ 0x38
 8004ce6:	4628      	mov	r0, r5
 8004ce8:	9b01      	ldr	r3, [sp, #4]
 8004cea:	47d8      	blx	fp
  for (unsigned char i = 0; i < _infoCache.size(); i++) {
 8004cec:	e7ce      	b.n	8004c8c <_ZN3HAL10_printInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe0>
 8004cee:	bf00      	nop
 8004cf0:	200001cc 	.word	0x200001cc
 8004cf4:	200001d0 	.word	0x200001d0
 8004cf8:	08004965 	.word	0x08004965
 8004cfc:	200001c4 	.word	0x200001c4
 8004d00:	200001c8 	.word	0x200001c8
 8004d04:	200001dc 	.word	0x200001dc
 8004d08:	200001bc 	.word	0x200001bc
 8004d0c:	200001c0 	.word	0x200001c0
 8004d10:	aaaaaaab 	.word	0xaaaaaaab

08004d14 <_ZN12HALDreamCore13_updateConfigEv>:
//
#include "../hal_dreamCore.h"

void HALDreamCore::_updateConfig() {

 8004d14:	4770      	bx	lr
	...

08004d18 <_ZN12HALDreamCore7_getKeyEN3key8keyIndexE>:
#include "../hal_dreamCore.h"
#include "main.h"

bool HALDreamCore::_getKey(key::KEY_INDEX _keyIndex) {
 8004d18:	b508      	push	{r3, lr}
  if (_keyIndex == key::KEY_0) return !HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin);
 8004d1a:	b939      	cbnz	r1, 8004d2c <_ZN12HALDreamCore7_getKeyEN3key8keyIndexE+0x14>
 8004d1c:	2110      	movs	r1, #16
  if (_keyIndex == key::KEY_1) return !HAL_GPIO_ReadPin(KEY2_GPIO_Port, KEY2_Pin);
 8004d1e:	4804      	ldr	r0, [pc, #16]	@ (8004d30 <_ZN12HALDreamCore7_getKeyEN3key8keyIndexE+0x18>)
 8004d20:	f002 fa9c 	bl	800725c <HAL_GPIO_ReadPin>
 8004d24:	fab0 f080 	clz	r0, r0
 8004d28:	0940      	lsrs	r0, r0, #5
}
 8004d2a:	bd08      	pop	{r3, pc}
  if (_keyIndex == key::KEY_1) return !HAL_GPIO_ReadPin(KEY2_GPIO_Port, KEY2_Pin);
 8004d2c:	2140      	movs	r1, #64	@ 0x40
 8004d2e:	e7f6      	b.n	8004d1e <_ZN12HALDreamCore7_getKeyEN3key8keyIndexE+0x6>
 8004d30:	40010800 	.word	0x40010800

08004d34 <_ZN12HALDreamCore6_delayEm>:
#include "../hal_dreamCore.h"
#include "main.h"

void HALDreamCore::_delay(unsigned long _mill) {
  HAL_Delay(_mill);
 8004d34:	4608      	mov	r0, r1
 8004d36:	f002 b841 	b.w	8006dbc <HAL_Delay>

08004d3a <_ZN12HALDreamCore7_millisEv>:
}

unsigned long HALDreamCore::_millis() {
  return HAL_GetTick();
 8004d3a:	f002 b839 	b.w	8006db0 <HAL_GetTick>
	...

08004d40 <_ZN12HALDreamCore8_getTickEv>:
}

unsigned long HALDreamCore::_getTick() {
  return (uwTick * 1000 + (SysTick->LOAD - SysTick->VAL) / (SystemCoreClock/1000000U));
 8004d40:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8004d44:	4b08      	ldr	r3, [pc, #32]	@ (8004d68 <_ZN12HALDreamCore8_getTickEv+0x28>)
 8004d46:	4809      	ldr	r0, [pc, #36]	@ (8004d6c <_ZN12HALDreamCore8_getTickEv+0x2c>)
 8004d48:	6819      	ldr	r1, [r3, #0]
 8004d4a:	6953      	ldr	r3, [r2, #20]
 8004d4c:	6992      	ldr	r2, [r2, #24]
 8004d4e:	1a9b      	subs	r3, r3, r2
 8004d50:	4a07      	ldr	r2, [pc, #28]	@ (8004d70 <_ZN12HALDreamCore8_getTickEv+0x30>)
 8004d52:	6812      	ldr	r2, [r2, #0]
 8004d54:	fbb2 f2f0 	udiv	r2, r2, r0
}
 8004d58:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
  return (uwTick * 1000 + (SysTick->LOAD - SysTick->VAL) / (SystemCoreClock/1000000U));
 8004d5c:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8004d60:	fb00 3001 	mla	r0, r0, r1, r3
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	20003f90 	.word	0x20003f90
 8004d6c:	000f4240 	.word	0x000f4240
 8004d70:	20000018 	.word	0x20000018

08004d74 <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8004d74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
  uint8_t ncolor = (color == 0 ? 1 : 0);
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8004d78:	18cf      	adds	r7, r1, r3
 8004d7a:	1c53      	adds	r3, r2, #1
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	b2bf      	uxth	r7, r7
  uint8_t color = u8g2->draw_color;
 8004d80:	f890 9092 	ldrb.w	r9, [r0, #146]	@ 0x92
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	463b      	mov	r3, r7
{
 8004d88:	4605      	mov	r5, r0
 8004d8a:	460c      	mov	r4, r1
 8004d8c:	4690      	mov	r8, r2
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8004d8e:	f000 fed4 	bl	8005b3a <u8g2_IsIntersection>
 8004d92:	b150      	cbz	r0, 8004daa <u8g2_DrawHXBM+0x36>
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8004d94:	fab9 fa89 	clz	sl, r9
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 8004d98:	2601      	movs	r6, #1
  while(len > 0) {
    if ( *b & mask ) {
      u8g2->draw_color = color;
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8004d9a:	f04f 0b00 	mov.w	fp, #0
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8004d9e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
  while(len > 0) {
 8004da2:	42a7      	cmp	r7, r4
 8004da4:	d104      	bne.n	8004db0 <u8g2_DrawHXBM+0x3c>
      mask = 1;
      b++;
    }
    len--;
  }
  u8g2->draw_color = color;
 8004da6:	f885 9092 	strb.w	r9, [r5, #146]	@ 0x92
}
 8004daa:	b003      	add	sp, #12
 8004dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( *b & mask ) {
 8004db0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	421e      	tst	r6, r3
 8004db6:	d017      	beq.n	8004de8 <u8g2_DrawHXBM+0x74>
      u8g2->draw_color = color;
 8004db8:	f885 9092 	strb.w	r9, [r5, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8004dbc:	f8cd b000 	str.w	fp, [sp]
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	4642      	mov	r2, r8
 8004dc4:	4621      	mov	r1, r4
 8004dc6:	4628      	mov	r0, r5
 8004dc8:	f000 fe14 	bl	80059f4 <u8g2_DrawHVLine>
    mask <<= 1;
 8004dcc:	0076      	lsls	r6, r6, #1
    if ( mask == 0 )
 8004dce:	f016 06ff 	ands.w	r6, r6, #255	@ 0xff
      b++;
 8004dd2:	bf08      	it	eq
 8004dd4:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
    x++;
 8004dd6:	f104 0401 	add.w	r4, r4, #1
      b++;
 8004dda:	bf04      	itt	eq
 8004ddc:	3301      	addeq	r3, #1
      mask = 1;
 8004dde:	2601      	moveq	r6, #1
    x++;
 8004de0:	b2a4      	uxth	r4, r4
      b++;
 8004de2:	bf08      	it	eq
 8004de4:	930c      	streq	r3, [sp, #48]	@ 0x30
    len--;
 8004de6:	e7dc      	b.n	8004da2 <u8g2_DrawHXBM+0x2e>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 8004de8:	f895 3091 	ldrb.w	r3, [r5, #145]	@ 0x91
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1ed      	bne.n	8004dcc <u8g2_DrawHXBM+0x58>
      u8g2->draw_color = ncolor;
 8004df0:	f885 a092 	strb.w	sl, [r5, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8004df4:	9300      	str	r3, [sp, #0]
 8004df6:	e7e3      	b.n	8004dc0 <u8g2_DrawHXBM+0x4c>

08004df8 <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 8004df8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  u8g2_uint_t blen;
  blen = w;
  blen += 7;
  blen >>= 3;
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8004dfc:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
{
 8004e00:	461e      	mov	r6, r3
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8004e02:	4415      	add	r5, r2
 8004e04:	b2ad      	uxth	r5, r5
 8004e06:	440b      	add	r3, r1
 8004e08:	9500      	str	r5, [sp, #0]
 8004e0a:	b29b      	uxth	r3, r3
{
 8004e0c:	4681      	mov	r9, r0
 8004e0e:	460f      	mov	r7, r1
 8004e10:	4614      	mov	r4, r2
 8004e12:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8004e16:	f000 fe90 	bl	8005b3a <u8g2_IsIntersection>
 8004e1a:	b128      	cbz	r0, 8004e28 <u8g2_DrawXBM+0x30>
  blen += 7;
 8004e1c:	f106 0807 	add.w	r8, r6, #7
  blen >>= 3;
 8004e20:	f3c8 08cc 	ubfx	r8, r8, #3, #13
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8004e24:	42a5      	cmp	r5, r4
 8004e26:	d102      	bne.n	8004e2e <u8g2_DrawXBM+0x36>
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
    bitmap += blen;
    y++;
    h--;
  }
}
 8004e28:	b002      	add	sp, #8
 8004e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 8004e2e:	4622      	mov	r2, r4
 8004e30:	f8cd a000 	str.w	sl, [sp]
 8004e34:	4633      	mov	r3, r6
 8004e36:	4639      	mov	r1, r7
 8004e38:	4648      	mov	r0, r9
    y++;
 8004e3a:	3401      	adds	r4, #1
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 8004e3c:	f7ff ff9a 	bl	8004d74 <u8g2_DrawHXBM>
    bitmap += blen;
 8004e40:	44c2      	add	sl, r8
    y++;
 8004e42:	b2a4      	uxth	r4, r4
    h--;
 8004e44:	e7ee      	b.n	8004e24 <u8g2_DrawXBM+0x2c>

08004e46 <u8g2_DrawXBMP>:
  }
  u8g2->draw_color = color;
}


void u8g2_DrawXBMP(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
 8004e46:	b410      	push	{r4}
 8004e48:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 8004e4c:	9401      	str	r4, [sp, #4]
 8004e4e:	bc10      	pop	{r4}
 8004e50:	f7ff bfd2 	b.w	8004df8 <u8g2_DrawXBM>

08004e54 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8004e54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8004e58:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
{
 8004e5c:	461f      	mov	r7, r3
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8004e5e:	4415      	add	r5, r2
 8004e60:	b2ad      	uxth	r5, r5
 8004e62:	18cb      	adds	r3, r1, r3
 8004e64:	9500      	str	r5, [sp, #0]
 8004e66:	b29b      	uxth	r3, r3
{
 8004e68:	4680      	mov	r8, r0
 8004e6a:	460e      	mov	r6, r1
 8004e6c:	4614      	mov	r4, r2
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8004e6e:	f000 fe64 	bl	8005b3a <u8g2_IsIntersection>
 8004e72:	b118      	cbz	r0, 8004e7c <u8g2_DrawBox+0x28>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8004e74:	f04f 0900 	mov.w	r9, #0
  while( h != 0 )
 8004e78:	42a5      	cmp	r5, r4
 8004e7a:	d102      	bne.n	8004e82 <u8g2_DrawBox+0x2e>
    y++;    
    h--;
  }
}
 8004e7c:	b003      	add	sp, #12
 8004e7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8004e82:	4622      	mov	r2, r4
 8004e84:	463b      	mov	r3, r7
 8004e86:	4631      	mov	r1, r6
 8004e88:	4640      	mov	r0, r8
 8004e8a:	f8cd 9000 	str.w	r9, [sp]
    y++;    
 8004e8e:	3401      	adds	r4, #1
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8004e90:	f000 fdb0 	bl	80059f4 <u8g2_DrawHVLine>
    y++;    
 8004e94:	b2a4      	uxth	r4, r4
    h--;
 8004e96:	e7ef      	b.n	8004e78 <u8g2_DrawBox+0x24>

08004e98 <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8004e98:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e9c:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
  u8g2_uint_t xtmp = x;
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8004ea0:	eb01 0903 	add.w	r9, r1, r3
{
 8004ea4:	4698      	mov	r8, r3
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8004ea6:	1953      	adds	r3, r2, r5
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	fa1f f989 	uxth.w	r9, r9
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	464b      	mov	r3, r9
{
 8004eb2:	4606      	mov	r6, r0
 8004eb4:	460f      	mov	r7, r1
 8004eb6:	4614      	mov	r4, r2
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8004eb8:	f000 fe3f 	bl	8005b3a <u8g2_IsIntersection>
 8004ebc:	b378      	cbz	r0, 8004f1e <u8g2_DrawFrame+0x86>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	4622      	mov	r2, r4
 8004ec2:	9300      	str	r3, [sp, #0]
 8004ec4:	4639      	mov	r1, r7
 8004ec6:	4643      	mov	r3, r8
 8004ec8:	4630      	mov	r0, r6
 8004eca:	f000 fd93 	bl	80059f4 <u8g2_DrawHVLine>
  if (h >= 2) {
 8004ece:	2d01      	cmp	r5, #1
 8004ed0:	d925      	bls.n	8004f1e <u8g2_DrawFrame+0x86>
    h-=2;
 8004ed2:	3d02      	subs	r5, #2
    y++;
 8004ed4:	3401      	adds	r4, #1
    h-=2;
 8004ed6:	b2ad      	uxth	r5, r5
    y++;
 8004ed8:	b2a4      	uxth	r4, r4
    if (h > 0) {
 8004eda:	b1ad      	cbz	r5, 8004f08 <u8g2_DrawFrame+0x70>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8004edc:	f04f 0a01 	mov.w	sl, #1
 8004ee0:	4622      	mov	r2, r4
 8004ee2:	462b      	mov	r3, r5
 8004ee4:	4639      	mov	r1, r7
 8004ee6:	4630      	mov	r0, r6
 8004ee8:	f8cd a000 	str.w	sl, [sp]
 8004eec:	f000 fd82 	bl	80059f4 <u8g2_DrawHVLine>
      x+=w;
      x--;
 8004ef0:	f109 31ff 	add.w	r1, r9, #4294967295
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8004ef4:	4622      	mov	r2, r4
 8004ef6:	462b      	mov	r3, r5
 8004ef8:	4630      	mov	r0, r6
 8004efa:	f8cd a000 	str.w	sl, [sp]
 8004efe:	b289      	uxth	r1, r1
 8004f00:	f000 fd78 	bl	80059f4 <u8g2_DrawHVLine>
      y+=h;
 8004f04:	442c      	add	r4, r5
 8004f06:	b2a4      	uxth	r4, r4
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8004f08:	2300      	movs	r3, #0
 8004f0a:	4622      	mov	r2, r4
 8004f0c:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f0e:	4639      	mov	r1, r7
 8004f10:	4643      	mov	r3, r8
 8004f12:	4630      	mov	r0, r6
  }
}
 8004f14:	b002      	add	sp, #8
 8004f16:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8004f1a:	f000 bd6b 	b.w	80059f4 <u8g2_DrawHVLine>
}
 8004f1e:	b002      	add	sp, #8
 8004f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004f24 <u8g2_DrawRBox>:




void u8g2_DrawRBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
 8004f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f28:	469a      	mov	sl, r3
 8004f2a:	b087      	sub	sp, #28
 8004f2c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
  u8g2_uint_t xl, yu;
  u8g2_uint_t yl, xr;

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8004f30:	eb01 060a 	add.w	r6, r1, sl
 8004f34:	18d5      	adds	r5, r2, r3
 8004f36:	b2b6      	uxth	r6, r6
 8004f38:	b2ad      	uxth	r5, r5
{
 8004f3a:	9304      	str	r3, [sp, #16]
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8004f3c:	9500      	str	r5, [sp, #0]
 8004f3e:	4633      	mov	r3, r6
{
 8004f40:	4680      	mov	r8, r0
 8004f42:	4689      	mov	r9, r1
 8004f44:	4693      	mov	fp, r2
 8004f46:	f8bd 4044 	ldrh.w	r4, [sp, #68]	@ 0x44
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8004f4a:	f000 fdf6 	bl	8005b3a <u8g2_IsIntersection>
 8004f4e:	2800      	cmp	r0, #0
 8004f50:	d05a      	beq.n	8005008 <u8g2_DrawRBox+0xe4>
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
  xl += r;
  yu = y;
  yu += r;
 8004f52:	eb0b 0304 	add.w	r3, fp, r4
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	9303      	str	r3, [sp, #12]
  yl = y;
  yl += h;
  yl -= r; 
  yl -= 1;

  u8g2_DrawDisc(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
 8004f5a:	2302      	movs	r3, #2
  xl += r;
 8004f5c:	eb09 0704 	add.w	r7, r9, r4
 8004f60:	b2bf      	uxth	r7, r7
  u8g2_DrawDisc(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
 8004f62:	4639      	mov	r1, r7
 8004f64:	4640      	mov	r0, r8
 8004f66:	9a03      	ldr	r2, [sp, #12]
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	4623      	mov	r3, r4
 8004f6c:	f000 fa05 	bl	800537a <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
 8004f70:	2301      	movs	r3, #1
  xr -= 1;
 8004f72:	1b36      	subs	r6, r6, r4
 8004f74:	3e01      	subs	r6, #1
 8004f76:	b2b6      	uxth	r6, r6
  u8g2_DrawDisc(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
 8004f78:	4631      	mov	r1, r6
 8004f7a:	4640      	mov	r0, r8
 8004f7c:	9a03      	ldr	r2, [sp, #12]
 8004f7e:	9300      	str	r3, [sp, #0]
 8004f80:	4623      	mov	r3, r4
 8004f82:	f000 f9fa 	bl	800537a <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
 8004f86:	2304      	movs	r3, #4
  yl -= 1;
 8004f88:	1b2d      	subs	r5, r5, r4
 8004f8a:	3d01      	subs	r5, #1
 8004f8c:	b2ad      	uxth	r5, r5
  u8g2_DrawDisc(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
 8004f8e:	462a      	mov	r2, r5
 8004f90:	4639      	mov	r1, r7
 8004f92:	4640      	mov	r0, r8
 8004f94:	9300      	str	r3, [sp, #0]
 8004f96:	4623      	mov	r3, r4
 8004f98:	f000 f9ef 	bl	800537a <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
 8004f9c:	2308      	movs	r3, #8
 8004f9e:	4631      	mov	r1, r6
 8004fa0:	0066      	lsls	r6, r4, #1
 8004fa2:	9300      	str	r3, [sp, #0]
 8004fa4:	462a      	mov	r2, r5
 8004fa6:	4623      	mov	r3, r4
 8004fa8:	4640      	mov	r0, r8
 8004faa:	b2b6      	uxth	r6, r6
 8004fac:	f000 f9e5 	bl	800537a <u8g2_DrawDisc>
  {
    u8g2_uint_t ww, hh;

    ww = w;
    ww -= r;
    ww -= r;
 8004fb0:	ebaa 0306 	sub.w	r3, sl, r6
 8004fb4:	b29b      	uxth	r3, r3
    xl++;
    yu++;
    
    if ( ww >= 3 )
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d913      	bls.n	8004fe2 <u8g2_DrawRBox+0xbe>
    xl++;
 8004fba:	3701      	adds	r7, #1
 8004fbc:	b2b9      	uxth	r1, r7
    {
      ww -= 2;
      u8g2_DrawBox(u8g2, xl, y, ww, r+1);
 8004fbe:	3401      	adds	r4, #1
      ww -= 2;
 8004fc0:	1e9f      	subs	r7, r3, #2
 8004fc2:	b2bf      	uxth	r7, r7
      u8g2_DrawBox(u8g2, xl, y, ww, r+1);
 8004fc4:	b2a4      	uxth	r4, r4
 8004fc6:	463b      	mov	r3, r7
 8004fc8:	465a      	mov	r2, fp
 8004fca:	4640      	mov	r0, r8
 8004fcc:	9400      	str	r4, [sp, #0]
 8004fce:	9105      	str	r1, [sp, #20]
 8004fd0:	f7ff ff40 	bl	8004e54 <u8g2_DrawBox>
      u8g2_DrawBox(u8g2, xl, yl, ww, r+1);
 8004fd4:	463b      	mov	r3, r7
 8004fd6:	462a      	mov	r2, r5
 8004fd8:	4640      	mov	r0, r8
 8004fda:	9905      	ldr	r1, [sp, #20]
 8004fdc:	9400      	str	r4, [sp, #0]
 8004fde:	f7ff ff39 	bl	8004e54 <u8g2_DrawBox>
    }
    
    hh = h;
    hh -= r;
    hh -= r;
 8004fe2:	9b04      	ldr	r3, [sp, #16]
 8004fe4:	1b9b      	subs	r3, r3, r6
 8004fe6:	b29b      	uxth	r3, r3
    //h--;
    if ( hh >= 3 )
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d90d      	bls.n	8005008 <u8g2_DrawRBox+0xe4>
    {
      hh -= 2;
 8004fec:	3b02      	subs	r3, #2
      u8g2_DrawBox(u8g2, x, yu, w, hh);
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	9310      	str	r3, [sp, #64]	@ 0x40
 8004ff2:	4649      	mov	r1, r9
 8004ff4:	4653      	mov	r3, sl
 8004ff6:	4640      	mov	r0, r8
    yu++;
 8004ff8:	9a03      	ldr	r2, [sp, #12]
 8004ffa:	3201      	adds	r2, #1
      u8g2_DrawBox(u8g2, x, yu, w, hh);
 8004ffc:	b292      	uxth	r2, r2
    }
  }
}
 8004ffe:	b007      	add	sp, #28
 8005000:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      u8g2_DrawBox(u8g2, x, yu, w, hh);
 8005004:	f7ff bf26 	b.w	8004e54 <u8g2_DrawBox>
}
 8005008:	b007      	add	sp, #28
 800500a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800500e <u8g2_DrawRFrame>:


void u8g2_DrawRFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
 800500e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005012:	b085      	sub	sp, #20
 8005014:	f8bd b038 	ldrh.w	fp, [sp, #56]	@ 0x38
 8005018:	469a      	mov	sl, r3
  u8g2_uint_t xl, yu;

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800501a:	eb02 050b 	add.w	r5, r2, fp
 800501e:	18cb      	adds	r3, r1, r3
 8005020:	b2ad      	uxth	r5, r5
 8005022:	b29b      	uxth	r3, r3
 8005024:	9500      	str	r5, [sp, #0]
{
 8005026:	4606      	mov	r6, r0
 8005028:	4688      	mov	r8, r1
 800502a:	4691      	mov	r9, r2
 800502c:	f8bd 403c 	ldrh.w	r4, [sp, #60]	@ 0x3c
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8005030:	9303      	str	r3, [sp, #12]
 8005032:	f000 fd82 	bl	8005b3a <u8g2_IsIntersection>
 8005036:	2800      	cmp	r0, #0
 8005038:	d066      	beq.n	8005108 <u8g2_DrawRFrame+0xfa>
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
  xl += r;
  yu = y;
  yu += r;
 800503a:	eb09 0204 	add.w	r2, r9, r4
 800503e:	b293      	uxth	r3, r2
 8005040:	9302      	str	r3, [sp, #8]
    u8g2_uint_t yl, xr;
      
    xr = x;
    xr += w;
    xr -= r;
    xr -= 1;
 8005042:	9b03      	ldr	r3, [sp, #12]
  xl += r;
 8005044:	eb08 0704 	add.w	r7, r8, r4
    xr -= 1;
 8005048:	1b1b      	subs	r3, r3, r4
 800504a:	3b01      	subs	r3, #1
 800504c:	b29b      	uxth	r3, r3
 800504e:	9303      	str	r3, [sp, #12]
    yl = y;
    yl += h;
    yl -= r; 
    yl -= 1;

    u8g2_DrawCircle(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
 8005050:	2302      	movs	r3, #2
  xl += r;
 8005052:	b2bf      	uxth	r7, r7
    u8g2_DrawCircle(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
 8005054:	4639      	mov	r1, r7
 8005056:	4630      	mov	r0, r6
 8005058:	9a02      	ldr	r2, [sp, #8]
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	4623      	mov	r3, r4
 800505e:	f000 f949 	bl	80052f4 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
 8005062:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005066:	2301      	movs	r3, #1
 8005068:	4630      	mov	r0, r6
 800506a:	9300      	str	r3, [sp, #0]
 800506c:	4623      	mov	r3, r4
 800506e:	f000 f941 	bl	80052f4 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
 8005072:	2304      	movs	r3, #4
    yl -= 1;
 8005074:	1b2d      	subs	r5, r5, r4
 8005076:	3d01      	subs	r5, #1
 8005078:	b2ad      	uxth	r5, r5
    u8g2_DrawCircle(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
 800507a:	462a      	mov	r2, r5
 800507c:	4639      	mov	r1, r7
 800507e:	4630      	mov	r0, r6
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	4623      	mov	r3, r4
 8005084:	f000 f936 	bl	80052f4 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
 8005088:	2308      	movs	r3, #8
 800508a:	9300      	str	r3, [sp, #0]
 800508c:	4623      	mov	r3, r4
 800508e:	0064      	lsls	r4, r4, #1
 8005090:	b2a4      	uxth	r4, r4
 8005092:	462a      	mov	r2, r5
  {
    u8g2_uint_t ww, hh;

    ww = w;
    ww -= r;
    ww -= r;
 8005094:	ebaa 0504 	sub.w	r5, sl, r4
    u8g2_DrawCircle(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
 8005098:	4630      	mov	r0, r6
 800509a:	9903      	ldr	r1, [sp, #12]
    ww -= r;
 800509c:	b2ad      	uxth	r5, r5
    u8g2_DrawCircle(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
 800509e:	f000 f929 	bl	80052f4 <u8g2_DrawCircle>
    hh = h;
    hh -= r;
    hh -= r;
 80050a2:	ebab 0404 	sub.w	r4, fp, r4
    
    xl++;
    yu++;
    
    if ( ww >= 3 )
 80050a6:	2d02      	cmp	r5, #2
    hh -= r;
 80050a8:	b2a4      	uxth	r4, r4
    if ( ww >= 3 )
 80050aa:	d913      	bls.n	80050d4 <u8g2_DrawRFrame+0xc6>
    xl++;
 80050ac:	3701      	adds	r7, #1
    {
      ww -= 2;
 80050ae:	3d02      	subs	r5, #2
    xl++;
 80050b0:	b2bf      	uxth	r7, r7
      ww -= 2;
 80050b2:	b2ad      	uxth	r5, r5
      h--;
      u8g2_DrawHLine(u8g2, xl, y, ww);
 80050b4:	462b      	mov	r3, r5
 80050b6:	464a      	mov	r2, r9
 80050b8:	4639      	mov	r1, r7
 80050ba:	4630      	mov	r0, r6
      h--;
 80050bc:	f10b 3bff 	add.w	fp, fp, #4294967295
      u8g2_DrawHLine(u8g2, xl, y, ww);
 80050c0:	f000 fd00 	bl	8005ac4 <u8g2_DrawHLine>
      u8g2_DrawHLine(u8g2, xl, y+h, ww);
 80050c4:	eb09 020b 	add.w	r2, r9, fp
 80050c8:	462b      	mov	r3, r5
 80050ca:	4639      	mov	r1, r7
 80050cc:	4630      	mov	r0, r6
 80050ce:	b292      	uxth	r2, r2
 80050d0:	f000 fcf8 	bl	8005ac4 <u8g2_DrawHLine>
    }
    
    if ( hh >= 3 )
 80050d4:	2c02      	cmp	r4, #2
 80050d6:	d917      	bls.n	8005108 <u8g2_DrawRFrame+0xfa>
    yu++;
 80050d8:	9d02      	ldr	r5, [sp, #8]
    {
      hh -= 2;
 80050da:	3c02      	subs	r4, #2
    yu++;
 80050dc:	3501      	adds	r5, #1
 80050de:	b2ad      	uxth	r5, r5
      hh -= 2;
 80050e0:	b2a4      	uxth	r4, r4
      w--;
      u8g2_DrawVLine(u8g2, x, yu, hh);
 80050e2:	4623      	mov	r3, r4
 80050e4:	462a      	mov	r2, r5
 80050e6:	4641      	mov	r1, r8
 80050e8:	4630      	mov	r0, r6
 80050ea:	f000 fcf2 	bl	8005ad2 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x+w, yu, hh);
 80050ee:	4623      	mov	r3, r4
 80050f0:	462a      	mov	r2, r5
 80050f2:	4630      	mov	r0, r6
      w--;
 80050f4:	f10a 3aff 	add.w	sl, sl, #4294967295
      u8g2_DrawVLine(u8g2, x+w, yu, hh);
 80050f8:	eb08 010a 	add.w	r1, r8, sl
 80050fc:	b289      	uxth	r1, r1
    }
  }
}
 80050fe:	b005      	add	sp, #20
 8005100:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      u8g2_DrawVLine(u8g2, x+w, yu, hh);
 8005104:	f000 bce5 	b.w	8005ad2 <u8g2_DrawVLine>
}
 8005108:	b005      	add	sp, #20
 800510a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800510e <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 800510e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005112:	4604      	mov	r4, r0
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
  dest_row = u8g2->tile_curr_row;
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8005114:	2600      	movs	r6, #0
 8005116:	6803      	ldr	r3, [r0, #0]
  src_max = u8g2->tile_buf_height;
 8005118:	f890 9038 	ldrb.w	r9, [r0, #56]	@ 0x38
  dest_row = u8g2->tile_curr_row;
 800511c:	f890 7039 	ldrb.w	r7, [r0, #57]	@ 0x39
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8005120:	f893 8011 	ldrb.w	r8, [r3, #17]
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8005124:	6823      	ldr	r3, [r4, #0]
  ptr = u8g2->tile_buf_ptr;
 8005126:	6b60      	ldr	r0, [r4, #52]	@ 0x34
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8005128:	7c1b      	ldrb	r3, [r3, #16]
 800512a:	b2f5      	uxtb	r5, r6
  offset *= 8;
 800512c:	fb06 f103 	mul.w	r1, r6, r3
 8005130:	00c9      	lsls	r1, r1, #3
  ptr += offset;
 8005132:	b289      	uxth	r1, r1
 8005134:	4408      	add	r0, r1
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8005136:	197a      	adds	r2, r7, r5
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
    src_row++;
    dest_row++;
  } while( src_row < src_max && dest_row < dest_max );
 8005138:	3501      	adds	r5, #1
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800513a:	9000      	str	r0, [sp, #0]
 800513c:	2100      	movs	r1, #0
 800513e:	4620      	mov	r0, r4
 8005140:	b2d2      	uxtb	r2, r2
  } while( src_row < src_max && dest_row < dest_max );
 8005142:	b2ed      	uxtb	r5, r5
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8005144:	f000 ff89 	bl	800605a <u8x8_DrawTile>
  } while( src_row < src_max && dest_row < dest_max );
 8005148:	45a9      	cmp	r9, r5
 800514a:	d904      	bls.n	8005156 <u8g2_send_buffer+0x48>
 800514c:	3601      	adds	r6, #1
 800514e:	19bb      	adds	r3, r7, r6
 8005150:	b2db      	uxtb	r3, r3
 8005152:	4598      	cmp	r8, r3
 8005154:	d8e6      	bhi.n	8005124 <u8g2_send_buffer+0x16>
}
 8005156:	b003      	add	sp, #12
 8005158:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800515c <u8g2_ClearBuffer>:
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800515c:	6803      	ldr	r3, [r0, #0]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800515e:	2100      	movs	r1, #0
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8005160:	7c1a      	ldrb	r2, [r3, #16]
  cnt *= u8g2->tile_buf_height;
 8005162:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8005166:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8005168:	435a      	muls	r2, r3
 800516a:	00d2      	lsls	r2, r2, #3
 800516c:	f003 bcc7 	b.w	8008afe <memset>

08005170 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8005170:	b510      	push	{r4, lr}
 8005172:	4604      	mov	r4, r0
  u8g2_send_buffer(u8g2);
 8005174:	f7ff ffcb 	bl	800510e <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8005178:	4620      	mov	r0, r4
}
 800517a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 800517e:	f000 bf94 	b.w	80060aa <u8x8_RefreshDisplay>

08005182 <u8g2_draw_circle_section>:
/* Circle */

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 8005182:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005186:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800518a:	4607      	mov	r7, r0
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 800518c:	f019 0f01 	tst.w	r9, #1
{
 8005190:	460d      	mov	r5, r1
 8005192:	4616      	mov	r6, r2
 8005194:	461c      	mov	r4, r3
 8005196:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 800519a:	d00e      	beq.n	80051ba <u8g2_draw_circle_section+0x38>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 - y);
 800519c:	1859      	adds	r1, r3, r1
 800519e:	eba8 0202 	sub.w	r2, r8, r2
 80051a2:	b292      	uxth	r2, r2
 80051a4:	b289      	uxth	r1, r1
 80051a6:	f000 fc9b 	bl	8005ae0 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 - x);
 80051aa:	eba8 0205 	sub.w	r2, r8, r5
 80051ae:	19a1      	adds	r1, r4, r6
 80051b0:	4638      	mov	r0, r7
 80051b2:	b292      	uxth	r2, r2
 80051b4:	b289      	uxth	r1, r1
 80051b6:	f000 fc93 	bl	8005ae0 <u8g2_DrawPixel>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 80051ba:	f019 0f02 	tst.w	r9, #2
 80051be:	d00f      	beq.n	80051e0 <u8g2_draw_circle_section+0x5e>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 - y);
 80051c0:	eba8 0206 	sub.w	r2, r8, r6
 80051c4:	1b61      	subs	r1, r4, r5
 80051c6:	4638      	mov	r0, r7
 80051c8:	b292      	uxth	r2, r2
 80051ca:	b289      	uxth	r1, r1
 80051cc:	f000 fc88 	bl	8005ae0 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 - x);
 80051d0:	eba8 0205 	sub.w	r2, r8, r5
 80051d4:	1ba1      	subs	r1, r4, r6
 80051d6:	4638      	mov	r0, r7
 80051d8:	b292      	uxth	r2, r2
 80051da:	b289      	uxth	r1, r1
 80051dc:	f000 fc80 	bl	8005ae0 <u8g2_DrawPixel>
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 80051e0:	f019 0f08 	tst.w	r9, #8
 80051e4:	d00f      	beq.n	8005206 <u8g2_draw_circle_section+0x84>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 + y);
 80051e6:	eb08 0206 	add.w	r2, r8, r6
 80051ea:	1961      	adds	r1, r4, r5
 80051ec:	4638      	mov	r0, r7
 80051ee:	b292      	uxth	r2, r2
 80051f0:	b289      	uxth	r1, r1
 80051f2:	f000 fc75 	bl	8005ae0 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 + x);
 80051f6:	eb05 0208 	add.w	r2, r5, r8
 80051fa:	19a1      	adds	r1, r4, r6
 80051fc:	4638      	mov	r0, r7
 80051fe:	b292      	uxth	r2, r2
 8005200:	b289      	uxth	r1, r1
 8005202:	f000 fc6d 	bl	8005ae0 <u8g2_DrawPixel>
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 8005206:	f019 0f04 	tst.w	r9, #4
 800520a:	d010      	beq.n	800522e <u8g2_draw_circle_section+0xac>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 + y);
 800520c:	1b61      	subs	r1, r4, r5
 800520e:	eb08 0206 	add.w	r2, r8, r6
 8005212:	4638      	mov	r0, r7
 8005214:	b292      	uxth	r2, r2
 8005216:	b289      	uxth	r1, r1
 8005218:	f000 fc62 	bl	8005ae0 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 + x);
 800521c:	4445      	add	r5, r8
 800521e:	1ba1      	subs	r1, r4, r6
 8005220:	4638      	mov	r0, r7
 8005222:	b2aa      	uxth	r2, r5
 8005224:	b289      	uxth	r1, r1
    }
}
 8005226:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      u8g2_DrawPixel(u8g2, x0 - y, y0 + x);
 800522a:	f000 bc59 	b.w	8005ae0 <u8g2_DrawPixel>
}
 800522e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005232 <u8g2_draw_disc_section>:
/* Disk */

static void u8g2_draw_disc_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_disc_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 8005232:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005236:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800523a:	4607      	mov	r7, r0
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 800523c:	f019 0f01 	tst.w	r9, #1
{
 8005240:	460c      	mov	r4, r1
 8005242:	4616      	mov	r6, r2
 8005244:	461d      	mov	r5, r3
 8005246:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 800524a:	d012      	beq.n	8005272 <u8g2_draw_disc_section+0x40>
    {
      u8g2_DrawVLine(u8g2, x0+x, y0-y, y+1);
 800524c:	1c53      	adds	r3, r2, #1
 800524e:	1869      	adds	r1, r5, r1
 8005250:	eba8 0202 	sub.w	r2, r8, r2
 8005254:	b29b      	uxth	r3, r3
 8005256:	b292      	uxth	r2, r2
 8005258:	b289      	uxth	r1, r1
 800525a:	f000 fc3a 	bl	8005ad2 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0+y, y0-x, x+1);
 800525e:	1c63      	adds	r3, r4, #1
 8005260:	eba8 0204 	sub.w	r2, r8, r4
 8005264:	19a9      	adds	r1, r5, r6
 8005266:	4638      	mov	r0, r7
 8005268:	b29b      	uxth	r3, r3
 800526a:	b292      	uxth	r2, r2
 800526c:	b289      	uxth	r1, r1
 800526e:	f000 fc30 	bl	8005ad2 <u8g2_DrawVLine>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 8005272:	f019 0f02 	tst.w	r9, #2
 8005276:	d013      	beq.n	80052a0 <u8g2_draw_disc_section+0x6e>
    {
      u8g2_DrawVLine(u8g2, x0-x, y0-y, y+1);
 8005278:	1c73      	adds	r3, r6, #1
 800527a:	eba8 0206 	sub.w	r2, r8, r6
 800527e:	1b29      	subs	r1, r5, r4
 8005280:	4638      	mov	r0, r7
 8005282:	b29b      	uxth	r3, r3
 8005284:	b292      	uxth	r2, r2
 8005286:	b289      	uxth	r1, r1
 8005288:	f000 fc23 	bl	8005ad2 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0-y, y0-x, x+1);
 800528c:	1c63      	adds	r3, r4, #1
 800528e:	eba8 0204 	sub.w	r2, r8, r4
 8005292:	1ba9      	subs	r1, r5, r6
 8005294:	4638      	mov	r0, r7
 8005296:	b29b      	uxth	r3, r3
 8005298:	b292      	uxth	r2, r2
 800529a:	b289      	uxth	r1, r1
 800529c:	f000 fc19 	bl	8005ad2 <u8g2_DrawVLine>
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 80052a0:	f019 0f08 	tst.w	r9, #8
 80052a4:	d00f      	beq.n	80052c6 <u8g2_draw_disc_section+0x94>
    {
      u8g2_DrawVLine(u8g2, x0+x, y0, y+1);
 80052a6:	1c73      	adds	r3, r6, #1
 80052a8:	1929      	adds	r1, r5, r4
 80052aa:	4642      	mov	r2, r8
 80052ac:	4638      	mov	r0, r7
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	b289      	uxth	r1, r1
 80052b2:	f000 fc0e 	bl	8005ad2 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0+y, y0, x+1);
 80052b6:	1c63      	adds	r3, r4, #1
 80052b8:	19a9      	adds	r1, r5, r6
 80052ba:	4642      	mov	r2, r8
 80052bc:	4638      	mov	r0, r7
 80052be:	b29b      	uxth	r3, r3
 80052c0:	b289      	uxth	r1, r1
 80052c2:	f000 fc06 	bl	8005ad2 <u8g2_DrawVLine>
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 80052c6:	f019 0f04 	tst.w	r9, #4
 80052ca:	d011      	beq.n	80052f0 <u8g2_draw_disc_section+0xbe>
    {
      u8g2_DrawVLine(u8g2, x0-x, y0, y+1);
 80052cc:	1b29      	subs	r1, r5, r4
 80052ce:	1c73      	adds	r3, r6, #1
 80052d0:	4642      	mov	r2, r8
 80052d2:	4638      	mov	r0, r7
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	b289      	uxth	r1, r1
 80052d8:	f000 fbfb 	bl	8005ad2 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0-y, y0, x+1);
 80052dc:	3401      	adds	r4, #1
 80052de:	1ba9      	subs	r1, r5, r6
 80052e0:	4642      	mov	r2, r8
 80052e2:	4638      	mov	r0, r7
 80052e4:	b2a3      	uxth	r3, r4
 80052e6:	b289      	uxth	r1, r1
    }
}
 80052e8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      u8g2_DrawVLine(u8g2, x0-y, y0, x+1);
 80052ec:	f000 bbf1 	b.w	8005ad2 <u8g2_DrawVLine>
}
 80052f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080052f4 <u8g2_DrawCircle>:
{
 80052f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052f8:	4691      	mov	r9, r2
 80052fa:	461c      	mov	r4, r3
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 80052fc:	f109 0501 	add.w	r5, r9, #1
 8005300:	3301      	adds	r3, #1
 8005302:	4425      	add	r5, r4
 8005304:	440b      	add	r3, r1
{
 8005306:	4688      	mov	r8, r1
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 8005308:	1b12      	subs	r2, r2, r4
 800530a:	1b09      	subs	r1, r1, r4
 800530c:	b2ad      	uxth	r5, r5
 800530e:	9500      	str	r5, [sp, #0]
 8005310:	b29b      	uxth	r3, r3
 8005312:	b292      	uxth	r2, r2
 8005314:	b289      	uxth	r1, r1
{
 8005316:	4682      	mov	sl, r0
 8005318:	f89d b030 	ldrb.w	fp, [sp, #48]	@ 0x30
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 800531c:	f000 fc0d 	bl	8005b3a <u8g2_IsIntersection>
 8005320:	b188      	cbz	r0, 8005346 <u8g2_DrawCircle+0x52>
    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
 8005322:	4643      	mov	r3, r8
 8005324:	4622      	mov	r2, r4
 8005326:	2100      	movs	r1, #0
 8005328:	4650      	mov	r0, sl
 800532a:	e9cd 9b00 	strd	r9, fp, [sp]
 800532e:	f7ff ff28 	bl	8005182 <u8g2_draw_circle_section>
    x = 0;
 8005332:	2600      	movs	r6, #0
    ddF_y *= 2;
 8005334:	ebc4 37c4 	rsb	r7, r4, r4, lsl #15
    f -= rad;
 8005338:	f1c4 0501 	rsb	r5, r4, #1
    ddF_y *= 2;
 800533c:	007f      	lsls	r7, r7, #1
    f -= rad;
 800533e:	b22d      	sxth	r5, r5
    ddF_y *= 2;
 8005340:	b23f      	sxth	r7, r7
    while ( x < y )
 8005342:	42b4      	cmp	r4, r6
 8005344:	d802      	bhi.n	800534c <u8g2_DrawCircle+0x58>
}
 8005346:	b003      	add	sp, #12
 8005348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (f >= 0) 
 800534c:	2d00      	cmp	r5, #0
 800534e:	db05      	blt.n	800535c <u8g2_DrawCircle+0x68>
        ddF_y += 2;
 8005350:	1cbb      	adds	r3, r7, #2
        y--;
 8005352:	3c01      	subs	r4, #1
        ddF_y += 2;
 8005354:	b21f      	sxth	r7, r3
        f += ddF_y;
 8005356:	442b      	add	r3, r5
        y--;
 8005358:	b2a4      	uxth	r4, r4
        f += ddF_y;
 800535a:	b21d      	sxth	r5, r3
      x++;
 800535c:	3601      	adds	r6, #1
 800535e:	b2b6      	uxth	r6, r6
      ddF_x += 2;
 8005360:	eb05 0546 	add.w	r5, r5, r6, lsl #1
      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
 8005364:	4643      	mov	r3, r8
 8005366:	4622      	mov	r2, r4
 8005368:	4631      	mov	r1, r6
 800536a:	4650      	mov	r0, sl
 800536c:	e9cd 9b00 	strd	r9, fp, [sp]
      f += ddF_x;
 8005370:	3501      	adds	r5, #1
 8005372:	b22d      	sxth	r5, r5
      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
 8005374:	f7ff ff05 	bl	8005182 <u8g2_draw_circle_section>
 8005378:	e7e3      	b.n	8005342 <u8g2_DrawCircle+0x4e>

0800537a <u8g2_DrawDisc>:
    u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);    
  }
}

void u8g2_DrawDisc(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 800537a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800537e:	4691      	mov	r9, r2
 8005380:	461c      	mov	r4, r3
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 8005382:	f109 0501 	add.w	r5, r9, #1
 8005386:	3301      	adds	r3, #1
 8005388:	4425      	add	r5, r4
 800538a:	440b      	add	r3, r1
{
 800538c:	4688      	mov	r8, r1
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 800538e:	1b12      	subs	r2, r2, r4
 8005390:	1b09      	subs	r1, r1, r4
 8005392:	b2ad      	uxth	r5, r5
 8005394:	9500      	str	r5, [sp, #0]
 8005396:	b29b      	uxth	r3, r3
 8005398:	b292      	uxth	r2, r2
 800539a:	b289      	uxth	r1, r1
{
 800539c:	4682      	mov	sl, r0
 800539e:	f89d b030 	ldrb.w	fp, [sp, #48]	@ 0x30
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 80053a2:	f000 fbca 	bl	8005b3a <u8g2_IsIntersection>
 80053a6:	b188      	cbz	r0, 80053cc <u8g2_DrawDisc+0x52>
  u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);
 80053a8:	4643      	mov	r3, r8
 80053aa:	4622      	mov	r2, r4
 80053ac:	2100      	movs	r1, #0
 80053ae:	4650      	mov	r0, sl
 80053b0:	e9cd 9b00 	strd	r9, fp, [sp]
 80053b4:	f7ff ff3d 	bl	8005232 <u8g2_draw_disc_section>
  x = 0;
 80053b8:	2600      	movs	r6, #0
  ddF_y *= 2;
 80053ba:	ebc4 37c4 	rsb	r7, r4, r4, lsl #15
  f -= rad;
 80053be:	f1c4 0501 	rsb	r5, r4, #1
  ddF_y *= 2;
 80053c2:	007f      	lsls	r7, r7, #1
  f -= rad;
 80053c4:	b22d      	sxth	r5, r5
  ddF_y *= 2;
 80053c6:	b23f      	sxth	r7, r7
  while ( x < y )
 80053c8:	42b4      	cmp	r4, r6
 80053ca:	d802      	bhi.n	80053d2 <u8g2_DrawDisc+0x58>
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  /* draw disc */
  u8g2_draw_disc(u8g2, x0, y0, rad, option);
}
 80053cc:	b003      	add	sp, #12
 80053ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (f >= 0) 
 80053d2:	2d00      	cmp	r5, #0
 80053d4:	db05      	blt.n	80053e2 <u8g2_DrawDisc+0x68>
      ddF_y += 2;
 80053d6:	1cbb      	adds	r3, r7, #2
      y--;
 80053d8:	3c01      	subs	r4, #1
      ddF_y += 2;
 80053da:	b21f      	sxth	r7, r3
      f += ddF_y;
 80053dc:	442b      	add	r3, r5
      y--;
 80053de:	b2a4      	uxth	r4, r4
      f += ddF_y;
 80053e0:	b21d      	sxth	r5, r3
    x++;
 80053e2:	3601      	adds	r6, #1
 80053e4:	b2b6      	uxth	r6, r6
    ddF_x += 2;
 80053e6:	eb05 0546 	add.w	r5, r5, r6, lsl #1
    u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);    
 80053ea:	4643      	mov	r3, r8
 80053ec:	4622      	mov	r2, r4
 80053ee:	4631      	mov	r1, r6
 80053f0:	4650      	mov	r0, sl
 80053f2:	e9cd 9b00 	strd	r9, fp, [sp]
    f += ddF_x;
 80053f6:	3501      	adds	r5, #1
 80053f8:	b22d      	sxth	r5, r5
    u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);    
 80053fa:	f7ff ff1a 	bl	8005232 <u8g2_draw_disc_section>
 80053fe:	e7e3      	b.n	80053c8 <u8g2_DrawDisc+0x4e>

08005400 <u8g2_m_16_8_f>:
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8005400:	2308      	movs	r3, #8
 8005402:	7003      	strb	r3, [r0, #0]
  return buf;
  #endif
}
 8005404:	4800      	ldr	r0, [pc, #0]	@ (8005408 <u8g2_m_16_8_f+0x8>)
 8005406:	4770      	bx	lr
 8005408:	200001e0 	.word	0x200001e0

0800540c <u8g2_Setup_ssd1306_128x64_noname_f>:

#include "u8g2.h"

/* ssd1306 f */
void u8g2_Setup_ssd1306_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800540c:	b530      	push	{r4, r5, lr}
 800540e:	b085      	sub	sp, #20
 8005410:	460d      	mov	r5, r1
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8005412:	9300      	str	r3, [sp, #0]
 8005414:	4909      	ldr	r1, [pc, #36]	@ (800543c <u8g2_Setup_ssd1306_128x64_noname_f+0x30>)
 8005416:	4613      	mov	r3, r2
 8005418:	4a09      	ldr	r2, [pc, #36]	@ (8005440 <u8g2_Setup_ssd1306_128x64_noname_f+0x34>)
{
 800541a:	4604      	mov	r4, r0
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 800541c:	f000 fe6a 	bl	80060f4 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8005420:	f10d 000f 	add.w	r0, sp, #15
 8005424:	f7ff ffec 	bl	8005400 <u8g2_m_16_8_f>
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8005428:	4b06      	ldr	r3, [pc, #24]	@ (8005444 <u8g2_Setup_ssd1306_128x64_noname_f+0x38>)
  buf = u8g2_m_16_8_f(&tile_buf_height);
 800542a:	4601      	mov	r1, r0
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 800542c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8005430:	4620      	mov	r0, r4
 8005432:	9500      	str	r5, [sp, #0]
 8005434:	f000 fc50 	bl	8005cd8 <u8g2_SetupBuffer>
 8005438:	b005      	add	sp, #20
 800543a:	bd30      	pop	{r4, r5, pc}
 800543c:	08005fb9 	.word	0x08005fb9
 8005440:	08005e97 	.word	0x08005e97
 8005444:	08005b6b 	.word	0x08005b6b

08005448 <u8g2_font_get_word>:
    font += offset;
    pos = u8x8_pgm_read( font );
    font++;
    pos <<= 8;
    pos += u8x8_pgm_read( font);
    return pos;
 8005448:	5a40      	ldrh	r0, [r0, r1]
 800544a:	ba40      	rev16	r0, r0
}
 800544c:	b280      	uxth	r0, r0
 800544e:	4770      	bx	lr

08005450 <u8g2_font_calc_vref_font>:
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
  return 0;
}
 8005450:	2000      	movs	r0, #0
 8005452:	4770      	bx	lr

08005454 <u8g2_read_font_info>:
{
 8005454:	460a      	mov	r2, r1
 8005456:	b508      	push	{r3, lr}
  return u8x8_pgm_read( font );  
 8005458:	7809      	ldrb	r1, [r1, #0]
{
 800545a:	4603      	mov	r3, r0
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 800545c:	7001      	strb	r1, [r0, #0]
  return u8x8_pgm_read( font );  
 800545e:	7851      	ldrb	r1, [r2, #1]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8005460:	7041      	strb	r1, [r0, #1]
  return u8x8_pgm_read( font );  
 8005462:	7891      	ldrb	r1, [r2, #2]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8005464:	7081      	strb	r1, [r0, #2]
  return u8x8_pgm_read( font );  
 8005466:	78d1      	ldrb	r1, [r2, #3]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8005468:	70c1      	strb	r1, [r0, #3]
  return u8x8_pgm_read( font );  
 800546a:	7911      	ldrb	r1, [r2, #4]
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 800546c:	7101      	strb	r1, [r0, #4]
  return u8x8_pgm_read( font );  
 800546e:	7951      	ldrb	r1, [r2, #5]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8005470:	7141      	strb	r1, [r0, #5]
  return u8x8_pgm_read( font );  
 8005472:	7991      	ldrb	r1, [r2, #6]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8005474:	7181      	strb	r1, [r0, #6]
  return u8x8_pgm_read( font );  
 8005476:	79d1      	ldrb	r1, [r2, #7]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8005478:	71c1      	strb	r1, [r0, #7]
  return u8x8_pgm_read( font );  
 800547a:	7a11      	ldrb	r1, [r2, #8]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800547c:	7201      	strb	r1, [r0, #8]
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 800547e:	7a51      	ldrb	r1, [r2, #9]
 8005480:	7241      	strb	r1, [r0, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8005482:	7a91      	ldrb	r1, [r2, #10]
 8005484:	7281      	strb	r1, [r0, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8005486:	7ad1      	ldrb	r1, [r2, #11]
 8005488:	72c1      	strb	r1, [r0, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 800548a:	7b11      	ldrb	r1, [r2, #12]
 800548c:	7301      	strb	r1, [r0, #12]
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 800548e:	7b51      	ldrb	r1, [r2, #13]
 8005490:	7341      	strb	r1, [r0, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8005492:	7b91      	ldrb	r1, [r2, #14]
 8005494:	7381      	strb	r1, [r0, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8005496:	7bd1      	ldrb	r1, [r2, #15]
 8005498:	73c1      	strb	r1, [r0, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 800549a:	7c11      	ldrb	r1, [r2, #16]
 800549c:	7401      	strb	r1, [r0, #16]
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800549e:	2111      	movs	r1, #17
 80054a0:	4610      	mov	r0, r2
 80054a2:	f7ff ffd1 	bl	8005448 <u8g2_font_get_word>
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80054a6:	2113      	movs	r1, #19
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80054a8:	8258      	strh	r0, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80054aa:	4610      	mov	r0, r2
 80054ac:	f7ff ffcc 	bl	8005448 <u8g2_font_get_word>
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 80054b0:	2115      	movs	r1, #21
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80054b2:	8298      	strh	r0, [r3, #20]
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 80054b4:	4610      	mov	r0, r2
 80054b6:	f7ff ffc7 	bl	8005448 <u8g2_font_get_word>
 80054ba:	82d8      	strh	r0, [r3, #22]
}
 80054bc:	bd08      	pop	{r3, pc}

080054be <u8g2_font_decode_get_unsigned_bits>:
{
 80054be:	b570      	push	{r4, r5, r6, lr}
  uint8_t bit_pos = f->decode_bit_pos;
 80054c0:	7b04      	ldrb	r4, [r0, #12]
  val = u8x8_pgm_read( f->decode_ptr );  
 80054c2:	6803      	ldr	r3, [r0, #0]
  bit_pos_plus_cnt += cnt;
 80054c4:	1862      	adds	r2, r4, r1
  val >>= bit_pos;
 80054c6:	781d      	ldrb	r5, [r3, #0]
  bit_pos_plus_cnt += cnt;
 80054c8:	b2d2      	uxtb	r2, r2
  if ( bit_pos_plus_cnt >= 8 )
 80054ca:	2a07      	cmp	r2, #7
  val >>= bit_pos;
 80054cc:	fa45 f504 	asr.w	r5, r5, r4
  if ( bit_pos_plus_cnt >= 8 )
 80054d0:	d807      	bhi.n	80054e2 <u8g2_font_decode_get_unsigned_bits+0x24>
  val >>= bit_pos;
 80054d2:	b2eb      	uxtb	r3, r5
  f->decode_bit_pos = bit_pos_plus_cnt;
 80054d4:	7302      	strb	r2, [r0, #12]
  val &= (1U<<cnt)-1;
 80054d6:	f04f 30ff 	mov.w	r0, #4294967295
 80054da:	4088      	lsls	r0, r1
}
 80054dc:	ea23 0000 	bic.w	r0, r3, r0
 80054e0:	bd70      	pop	{r4, r5, r6, pc}
    f->decode_ptr++;
 80054e2:	1c5e      	adds	r6, r3, #1
 80054e4:	6006      	str	r6, [r0, #0]
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80054e6:	785b      	ldrb	r3, [r3, #1]
    s -= bit_pos;
 80054e8:	f1c4 0408 	rsb	r4, r4, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80054ec:	b2e4      	uxtb	r4, r4
 80054ee:	40a3      	lsls	r3, r4
 80054f0:	432b      	orrs	r3, r5
    bit_pos_plus_cnt -= 8;
 80054f2:	3a08      	subs	r2, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80054f4:	b2db      	uxtb	r3, r3
    bit_pos_plus_cnt -= 8;
 80054f6:	b2d2      	uxtb	r2, r2
 80054f8:	e7ec      	b.n	80054d4 <u8g2_font_decode_get_unsigned_bits+0x16>

080054fa <u8g2_font_setup_decode>:
{
 80054fa:	b538      	push	{r3, r4, r5, lr}
  decode->decode_bit_pos = 0;
 80054fc:	2300      	movs	r3, #0
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80054fe:	f100 0560 	add.w	r5, r0, #96	@ 0x60
{
 8005502:	4604      	mov	r4, r0
  decode->decode_bit_pos = 0;
 8005504:	f880 306c 	strb.w	r3, [r0, #108]	@ 0x6c
  decode->decode_ptr = glyph_data;
 8005508:	6601      	str	r1, [r0, #96]	@ 0x60
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 800550a:	f890 1078 	ldrb.w	r1, [r0, #120]	@ 0x78
 800550e:	4628      	mov	r0, r5
 8005510:	f7ff ffd5 	bl	80054be <u8g2_font_decode_get_unsigned_bits>
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8005514:	f894 1079 	ldrb.w	r1, [r4, #121]	@ 0x79
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8005518:	f884 006a 	strb.w	r0, [r4, #106]	@ 0x6a
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 800551c:	4628      	mov	r0, r5
 800551e:	f7ff ffce 	bl	80054be <u8g2_font_decode_get_unsigned_bits>
  decode->fg_color = u8g2->draw_color;
 8005522:	f894 3092 	ldrb.w	r3, [r4, #146]	@ 0x92
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8005526:	f884 006b 	strb.w	r0, [r4, #107]	@ 0x6b
  decode->fg_color = u8g2->draw_color;
 800552a:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 800552e:	fab3 f383 	clz	r3, r3
 8005532:	095b      	lsrs	r3, r3, #5
 8005534:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
}
 8005538:	bd38      	pop	{r3, r4, r5, pc}

0800553a <u8g2_font_decode_get_signed_bits>:
{
 800553a:	b510      	push	{r4, lr}
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 800553c:	f7ff ffbf 	bl	80054be <u8g2_font_decode_get_unsigned_bits>
  d <<= cnt;
 8005540:	2301      	movs	r3, #1
  cnt--;
 8005542:	1e4c      	subs	r4, r1, #1
  d <<= cnt;
 8005544:	b2e4      	uxtb	r4, r4
 8005546:	40a3      	lsls	r3, r4
  v -= d;
 8005548:	1ac0      	subs	r0, r0, r3
}
 800554a:	b240      	sxtb	r0, r0
 800554c:	bd10      	pop	{r4, pc}

0800554e <u8g2_add_vector_y>:
  switch(dir)
 800554e:	2b01      	cmp	r3, #1
 8005550:	d005      	beq.n	800555e <u8g2_add_vector_y+0x10>
 8005552:	2b02      	cmp	r3, #2
 8005554:	d005      	beq.n	8005562 <u8g2_add_vector_y+0x14>
 8005556:	b933      	cbnz	r3, 8005566 <u8g2_add_vector_y+0x18>
      dy += y;
 8005558:	4410      	add	r0, r2
      dy -= x;
 800555a:	b280      	uxth	r0, r0
}
 800555c:	4770      	bx	lr
      dy += x;
 800555e:	4408      	add	r0, r1
 8005560:	e7fb      	b.n	800555a <u8g2_add_vector_y+0xc>
      dy -= y;
 8005562:	1a80      	subs	r0, r0, r2
 8005564:	e7f9      	b.n	800555a <u8g2_add_vector_y+0xc>
      dy -= x;
 8005566:	1a40      	subs	r0, r0, r1
 8005568:	e7f7      	b.n	800555a <u8g2_add_vector_y+0xc>

0800556a <u8g2_add_vector_x>:
  switch(dir)
 800556a:	2b01      	cmp	r3, #1
 800556c:	d005      	beq.n	800557a <u8g2_add_vector_x+0x10>
 800556e:	2b02      	cmp	r3, #2
 8005570:	d005      	beq.n	800557e <u8g2_add_vector_x+0x14>
 8005572:	b933      	cbnz	r3, 8005582 <u8g2_add_vector_x+0x18>
      dx += x;
 8005574:	4408      	add	r0, r1
      dx += y;
 8005576:	b280      	uxth	r0, r0
}
 8005578:	4770      	bx	lr
      dx -= y;
 800557a:	1a80      	subs	r0, r0, r2
 800557c:	e7fb      	b.n	8005576 <u8g2_add_vector_x+0xc>
      dx -= x;
 800557e:	1a40      	subs	r0, r0, r1
 8005580:	e7f9      	b.n	8005576 <u8g2_add_vector_x+0xc>
      dx += y;
 8005582:	4410      	add	r0, r2
 8005584:	e7f7      	b.n	8005576 <u8g2_add_vector_x+0xc>

08005586 <u8g2_font_decode_len>:
{
 8005586:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800558a:	4604      	mov	r4, r0
 800558c:	460e      	mov	r6, r1
 800558e:	b087      	sub	sp, #28
  lx = decode->x;
 8005590:	f890 5068 	ldrb.w	r5, [r0, #104]	@ 0x68
  ly = decode->y;
 8005594:	f890 7069 	ldrb.w	r7, [r0, #105]	@ 0x69
{
 8005598:	9205      	str	r2, [sp, #20]
    rem = decode->glyph_width;
 800559a:	f894 a06a 	ldrb.w	sl, [r4, #106]	@ 0x6a
    y = decode->target_y;
 800559e:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
    rem -= lx;
 80055a2:	ebaa 0805 	sub.w	r8, sl, r5
 80055a6:	fa5f f888 	uxtb.w	r8, r8
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80055aa:	fa4f f987 	sxtb.w	r9, r7
 80055ae:	464a      	mov	r2, r9
 80055b0:	4546      	cmp	r6, r8
 80055b2:	b269      	sxtb	r1, r5
    y = decode->target_y;
 80055b4:	9304      	str	r3, [sp, #16]
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80055b6:	f8b4 0064 	ldrh.w	r0, [r4, #100]	@ 0x64
 80055ba:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 80055be:	46b3      	mov	fp, r6
 80055c0:	bf28      	it	cs
 80055c2:	46c3      	movcs	fp, r8
 80055c4:	f7ff ffd1 	bl	800556a <u8g2_add_vector_x>
 80055c8:	9003      	str	r0, [sp, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80055ca:	9804      	ldr	r0, [sp, #16]
 80055cc:	f7ff ffbf 	bl	800554e <u8g2_add_vector_y>
    if ( is_foreground )
 80055d0:	9905      	ldr	r1, [sp, #20]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80055d2:	4602      	mov	r2, r0
    if ( is_foreground )
 80055d4:	b1a1      	cbz	r1, 8005600 <u8g2_font_decode_len+0x7a>
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80055d6:	f894 106e 	ldrb.w	r1, [r4, #110]	@ 0x6e
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80055da:	f884 1092 	strb.w	r1, [r4, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 80055de:	4620      	mov	r0, r4
 80055e0:	9300      	str	r3, [sp, #0]
 80055e2:	9903      	ldr	r1, [sp, #12]
 80055e4:	465b      	mov	r3, fp
 80055e6:	f000 fa05 	bl	80059f4 <u8g2_DrawHVLine>
    if ( cnt < rem )
 80055ea:	4435      	add	r5, r6
 80055ec:	4546      	cmp	r6, r8
 80055ee:	b2ed      	uxtb	r5, r5
 80055f0:	d30d      	bcc.n	800560e <u8g2_font_decode_len+0x88>
    cnt -= rem;
 80055f2:	eba5 050a 	sub.w	r5, r5, sl
    ly++;
 80055f6:	3701      	adds	r7, #1
    cnt -= rem;
 80055f8:	b2ee      	uxtb	r6, r5
    ly++;
 80055fa:	b2ff      	uxtb	r7, r7
    lx = 0;
 80055fc:	2500      	movs	r5, #0
    rem = decode->glyph_width;
 80055fe:	e7cc      	b.n	800559a <u8g2_font_decode_len+0x14>
    else if ( decode->is_transparent == 0 )    
 8005600:	f894 106d 	ldrb.w	r1, [r4, #109]	@ 0x6d
 8005604:	2900      	cmp	r1, #0
 8005606:	d1f0      	bne.n	80055ea <u8g2_font_decode_len+0x64>
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8005608:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 800560c:	e7e5      	b.n	80055da <u8g2_font_decode_len+0x54>
  decode->x = lx;
 800560e:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
  decode->y = ly;  
 8005612:	f884 9069 	strb.w	r9, [r4, #105]	@ 0x69
}
 8005616:	b007      	add	sp, #28
 8005618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800561c <u8g2_font_decode_glyph>:
{
 800561c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8005620:	4604      	mov	r4, r0
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8005622:	f100 0860 	add.w	r8, r0, #96	@ 0x60
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8005626:	f7ff ff68 	bl	80054fa <u8g2_font_setup_decode>
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 800562a:	f894 107a 	ldrb.w	r1, [r4, #122]	@ 0x7a
 800562e:	4640      	mov	r0, r8
  h = u8g2->font_decode.glyph_height;
 8005630:	f994 706b 	ldrsb.w	r7, [r4, #107]	@ 0x6b
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8005634:	f7ff ff81 	bl	800553a <u8g2_font_decode_get_signed_bits>
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8005638:	f894 107b 	ldrb.w	r1, [r4, #123]	@ 0x7b
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 800563c:	4682      	mov	sl, r0
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 800563e:	4640      	mov	r0, r8
 8005640:	f7ff ff7b 	bl	800553a <u8g2_font_decode_get_signed_bits>
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8005644:	f894 107c 	ldrb.w	r1, [r4, #124]	@ 0x7c
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8005648:	4606      	mov	r6, r0
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 800564a:	4640      	mov	r0, r8
 800564c:	f7ff ff75 	bl	800553a <u8g2_font_decode_get_signed_bits>
  if ( decode->glyph_width > 0 )
 8005650:	f994 506a 	ldrsb.w	r5, [r4, #106]	@ 0x6a
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8005654:	4681      	mov	r9, r0
  if ( decode->glyph_width > 0 )
 8005656:	2d00      	cmp	r5, #0
 8005658:	dd4a      	ble.n	80056f0 <u8g2_font_decode_glyph+0xd4>
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 800565a:	19ba      	adds	r2, r7, r6
 800565c:	4252      	negs	r2, r2
 800565e:	b252      	sxtb	r2, r2
 8005660:	4651      	mov	r1, sl
 8005662:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8005666:	f8b4 0064 	ldrh.w	r0, [r4, #100]	@ 0x64
 800566a:	f7ff ff7e 	bl	800556a <u8g2_add_vector_x>
 800566e:	f8a4 0064 	strh.w	r0, [r4, #100]	@ 0x64
 8005672:	4606      	mov	r6, r0
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8005674:	f8b4 0066 	ldrh.w	r0, [r4, #102]	@ 0x66
 8005678:	f7ff ff69 	bl	800554e <u8g2_add_vector_y>
 800567c:	4602      	mov	r2, r0
 800567e:	f8a4 0066 	strh.w	r0, [r4, #102]	@ 0x66
      switch(decode->dir)
 8005682:	2b03      	cmp	r3, #3
 8005684:	d857      	bhi.n	8005736 <u8g2_font_decode_glyph+0x11a>
 8005686:	e8df f003 	tbb	[pc, r3]
 800568a:	3702      	.short	0x3702
 800568c:	4d40      	.short	0x4d40
	    x1 += decode->glyph_width;
 800568e:	4435      	add	r5, r6
	    y1 += h;
 8005690:	19c1      	adds	r1, r0, r7
	    x1 += decode->glyph_width;
 8005692:	b2ab      	uxth	r3, r5
	    y1 += h;
 8005694:	b289      	uxth	r1, r1
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8005696:	9100      	str	r1, [sp, #0]
 8005698:	4620      	mov	r0, r4
 800569a:	4631      	mov	r1, r6
 800569c:	f000 fa4d 	bl	8005b3a <u8g2_IsIntersection>
 80056a0:	b330      	cbz	r0, 80056f0 <u8g2_font_decode_glyph+0xd4>
    decode->x = 0;
 80056a2:	2300      	movs	r3, #0
 80056a4:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80056a8:	f894 1076 	ldrb.w	r1, [r4, #118]	@ 0x76
 80056ac:	4640      	mov	r0, r8
 80056ae:	f7ff ff06 	bl	80054be <u8g2_font_decode_get_unsigned_bits>
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 80056b2:	f894 1077 	ldrb.w	r1, [r4, #119]	@ 0x77
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80056b6:	4606      	mov	r6, r0
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 80056b8:	4640      	mov	r0, r8
 80056ba:	f7ff ff00 	bl	80054be <u8g2_font_decode_get_unsigned_bits>
 80056be:	4605      	mov	r5, r0
	u8g2_font_decode_len(u8g2, a, 0);
 80056c0:	2200      	movs	r2, #0
 80056c2:	4631      	mov	r1, r6
 80056c4:	4620      	mov	r0, r4
 80056c6:	f7ff ff5e 	bl	8005586 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 80056ca:	4629      	mov	r1, r5
 80056cc:	4620      	mov	r0, r4
 80056ce:	2201      	movs	r2, #1
 80056d0:	f7ff ff59 	bl	8005586 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 80056d4:	2101      	movs	r1, #1
 80056d6:	4640      	mov	r0, r8
 80056d8:	f7ff fef1 	bl	80054be <u8g2_font_decode_get_unsigned_bits>
 80056dc:	2800      	cmp	r0, #0
 80056de:	d1ef      	bne.n	80056c0 <u8g2_font_decode_glyph+0xa4>
      if ( decode->y >= h )
 80056e0:	f994 3069 	ldrsb.w	r3, [r4, #105]	@ 0x69
 80056e4:	42bb      	cmp	r3, r7
 80056e6:	dbdf      	blt.n	80056a8 <u8g2_font_decode_glyph+0x8c>
    u8g2->draw_color = decode->fg_color;
 80056e8:	f894 306e 	ldrb.w	r3, [r4, #110]	@ 0x6e
 80056ec:	f884 3092 	strb.w	r3, [r4, #146]	@ 0x92
}
 80056f0:	4648      	mov	r0, r9
 80056f2:	b002      	add	sp, #8
 80056f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80056f8:	f1c7 0001 	rsb	r0, r7, #1
	    x1++;
 80056fc:	1c73      	adds	r3, r6, #1
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80056fe:	4430      	add	r0, r6
	    y1 += decode->glyph_width;
 8005700:	1951      	adds	r1, r2, r5
	    x1++;
 8005702:	b29b      	uxth	r3, r3
	    y1 += decode->glyph_width;
 8005704:	b289      	uxth	r1, r1
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8005706:	b286      	uxth	r6, r0
	    break;
 8005708:	e7c5      	b.n	8005696 <u8g2_font_decode_glyph+0x7a>
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800570a:	f1c5 0501 	rsb	r5, r5, #1
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800570e:	f1c7 0001 	rsb	r0, r7, #1
	    x1++;
 8005712:	1c73      	adds	r3, r6, #1
	    y1++;
 8005714:	1c51      	adds	r1, r2, #1
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8005716:	4435      	add	r5, r6
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8005718:	4410      	add	r0, r2
	    x1++;
 800571a:	b29b      	uxth	r3, r3
	    y1++;
 800571c:	b289      	uxth	r1, r1
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800571e:	b282      	uxth	r2, r0
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8005720:	b2ae      	uxth	r6, r5
	    break;	  
 8005722:	e7b8      	b.n	8005696 <u8g2_font_decode_glyph+0x7a>
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8005724:	f1c5 0501 	rsb	r5, r5, #1
	    x1 += h;
 8005728:	19f3      	adds	r3, r6, r7
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800572a:	4405      	add	r5, r0
	    y1++;
 800572c:	1c41      	adds	r1, r0, #1
	    x1 += h;
 800572e:	b29b      	uxth	r3, r3
	    y1++;
 8005730:	b289      	uxth	r1, r1
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8005732:	b2aa      	uxth	r2, r5
	    break;	  
 8005734:	e7af      	b.n	8005696 <u8g2_font_decode_glyph+0x7a>
      switch(decode->dir)
 8005736:	4601      	mov	r1, r0
 8005738:	4633      	mov	r3, r6
 800573a:	e7ac      	b.n	8005696 <u8g2_font_decode_glyph+0x7a>

0800573c <u8g2_font_get_glyph_data>:
  const uint8_t *font = u8g2->font;
 800573c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
  if ( encoding <= 255 )
 800573e:	29ff      	cmp	r1, #255	@ 0xff
{
 8005740:	460a      	mov	r2, r1
 8005742:	b510      	push	{r4, lr}
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8005744:	f103 0317 	add.w	r3, r3, #23
  if ( encoding <= 255 )
 8005748:	d812      	bhi.n	8005770 <u8g2_font_get_glyph_data+0x34>
    if ( encoding >= 'a' )
 800574a:	2960      	cmp	r1, #96	@ 0x60
 800574c:	d909      	bls.n	8005762 <u8g2_font_get_glyph_data+0x26>
      font += u8g2->font_info.start_pos_lower_a;
 800574e:	f8b0 1088 	ldrh.w	r1, [r0, #136]	@ 0x88
      font += u8g2->font_info.start_pos_upper_A;
 8005752:	440b      	add	r3, r1
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8005754:	7858      	ldrb	r0, [r3, #1]
 8005756:	b118      	cbz	r0, 8005760 <u8g2_font_get_glyph_data+0x24>
      if ( u8x8_pgm_read( font ) == encoding )
 8005758:	7819      	ldrb	r1, [r3, #0]
 800575a:	4291      	cmp	r1, r2
 800575c:	d106      	bne.n	800576c <u8g2_font_get_glyph_data+0x30>
	return font+2;	/* skip encoding and glyph size */
 800575e:	1c98      	adds	r0, r3, #2
}
 8005760:	bd10      	pop	{r4, pc}
    else if ( encoding >= 'A' )
 8005762:	2940      	cmp	r1, #64	@ 0x40
 8005764:	d9f6      	bls.n	8005754 <u8g2_font_get_glyph_data+0x18>
      font += u8g2->font_info.start_pos_upper_A;
 8005766:	f8b0 1086 	ldrh.w	r1, [r0, #134]	@ 0x86
 800576a:	e7f2      	b.n	8005752 <u8g2_font_get_glyph_data+0x16>
      font += u8x8_pgm_read( font + 1 );
 800576c:	4403      	add	r3, r0
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800576e:	e7f1      	b.n	8005754 <u8g2_font_get_glyph_data+0x18>
    font += u8g2->font_info.start_pos_unicode;
 8005770:	f8b0 108a 	ldrh.w	r1, [r0, #138]	@ 0x8a
 8005774:	440b      	add	r3, r1
    unicode_lookup_table = font; 
 8005776:	461c      	mov	r4, r3
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8005778:	2100      	movs	r1, #0
 800577a:	4620      	mov	r0, r4
 800577c:	f7ff fe64 	bl	8005448 <u8g2_font_get_word>
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8005780:	2102      	movs	r1, #2
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8005782:	4403      	add	r3, r0
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8005784:	4620      	mov	r0, r4
 8005786:	f7ff fe5f 	bl	8005448 <u8g2_font_get_word>
    } while( e < encoding );
 800578a:	4282      	cmp	r2, r0
      unicode_lookup_table+=4;
 800578c:	f104 0404 	add.w	r4, r4, #4
    } while( e < encoding );
 8005790:	d8f2      	bhi.n	8005778 <u8g2_font_get_glyph_data+0x3c>
      e |= u8x8_pgm_read( font + 1 );
 8005792:	8818      	ldrh	r0, [r3, #0]
 8005794:	ba41      	rev16	r1, r0
 8005796:	b289      	uxth	r1, r1
      if ( e == 0 )
 8005798:	2800      	cmp	r0, #0
 800579a:	d0e1      	beq.n	8005760 <u8g2_font_get_glyph_data+0x24>
      if ( e == encoding )
 800579c:	428a      	cmp	r2, r1
 800579e:	d101      	bne.n	80057a4 <u8g2_font_get_glyph_data+0x68>
	return font+3;	/* skip encoding and glyph size */
 80057a0:	1cd8      	adds	r0, r3, #3
 80057a2:	e7dd      	b.n	8005760 <u8g2_font_get_glyph_data+0x24>
      font += u8x8_pgm_read( font + 2 );
 80057a4:	7899      	ldrb	r1, [r3, #2]
 80057a6:	440b      	add	r3, r1
      e = u8x8_pgm_read( font );
 80057a8:	e7f3      	b.n	8005792 <u8g2_font_get_glyph_data+0x56>

080057aa <u8g2_GetGlyphWidth>:
{
 80057aa:	b538      	push	{r3, r4, r5, lr}
 80057ac:	4604      	mov	r4, r0
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, requested_encoding);
 80057ae:	f7ff ffc5 	bl	800573c <u8g2_font_get_glyph_data>
 80057b2:	4601      	mov	r1, r0
  if ( glyph_data == NULL )
 80057b4:	b1b8      	cbz	r0, 80057e6 <u8g2_GetGlyphWidth+0x3c>
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 80057b6:	f104 0560 	add.w	r5, r4, #96	@ 0x60
  u8g2_font_setup_decode(u8g2, glyph_data);
 80057ba:	4620      	mov	r0, r4
 80057bc:	f7ff fe9d 	bl	80054fa <u8g2_font_setup_decode>
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 80057c0:	f894 107a 	ldrb.w	r1, [r4, #122]	@ 0x7a
 80057c4:	4628      	mov	r0, r5
 80057c6:	f7ff feb8 	bl	800553a <u8g2_font_decode_get_signed_bits>
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
 80057ca:	f894 107b 	ldrb.w	r1, [r4, #123]	@ 0x7b
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 80057ce:	f884 0090 	strb.w	r0, [r4, #144]	@ 0x90
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
 80057d2:	4628      	mov	r0, r5
 80057d4:	f7ff feb1 	bl	800553a <u8g2_font_decode_get_signed_bits>
  return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 80057d8:	4628      	mov	r0, r5
 80057da:	f894 107c 	ldrb.w	r1, [r4, #124]	@ 0x7c
}
 80057de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 80057e2:	f7ff beaa 	b.w	800553a <u8g2_font_decode_get_signed_bits>
}
 80057e6:	bd38      	pop	{r3, r4, r5, pc}

080057e8 <u8g2_string_width>:


/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str)
{
 80057e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u8g2_uint_t  w, dx;
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
  int8_t initial_x_offset = -64;
#endif 
  
  u8g2->font_decode.glyph_width = 0;
 80057ec:	2500      	movs	r5, #0
{
 80057ee:	4688      	mov	r8, r1
  u8g2->font_decode.glyph_width = 0;
 80057f0:	f880 506a 	strb.w	r5, [r0, #106]	@ 0x6a
{
 80057f4:	4606      	mov	r6, r0
  int8_t initial_x_offset = -64;
 80057f6:	f06f 073f 	mvn.w	r7, #63	@ 0x3f
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80057fa:	f000 fad4 	bl	8005da6 <u8x8_utf8_init>
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
 80057fe:	462c      	mov	r4, r5
  // printf("str=<%s>\n", str);
	
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
    if ( e == 0x0ffff )
 8005800:	f64f 79ff 	movw	r9, #65535	@ 0xffff
      break;
    str++;
    if ( e != 0x0fffe )
 8005804:	f64f 7afe 	movw	sl, #65534	@ 0xfffe
 8005808:	f108 38ff 	add.w	r8, r8, #4294967295
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800580c:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 8005810:	4630      	mov	r0, r6
 8005812:	6873      	ldr	r3, [r6, #4]
 8005814:	4798      	blx	r3
    if ( e == 0x0ffff )
 8005816:	4548      	cmp	r0, r9
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8005818:	4601      	mov	r1, r0
    if ( e == 0x0ffff )
 800581a:	d00d      	beq.n	8005838 <u8g2_string_width+0x50>
    if ( e != 0x0fffe )
 800581c:	4550      	cmp	r0, sl
 800581e:	d0f5      	beq.n	800580c <u8g2_string_width+0x24>
    {
      dx = u8g2_GetGlyphWidth(u8g2, e);		/* delta x value of the glyph */
 8005820:	4630      	mov	r0, r6
 8005822:	f7ff ffc2 	bl	80057aa <u8g2_GetGlyphWidth>
 8005826:	b285      	uxth	r5, r0
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
      if ( initial_x_offset == -64 )
 8005828:	f117 0f40 	cmn.w	r7, #64	@ 0x40
        initial_x_offset = u8g2->glyph_x_offset;
#endif 
      //printf("'%c' x=%d dx=%d w=%d io=%d ", e, u8g2->glyph_x_offset, dx, u8g2->font_decode.glyph_width, initial_x_offset);
      w += dx;
 800582c:	442c      	add	r4, r5
        initial_x_offset = u8g2->glyph_x_offset;
 800582e:	bf08      	it	eq
 8005830:	f996 7090 	ldrsbeq.w	r7, [r6, #144]	@ 0x90
      w += dx;
 8005834:	b2a4      	uxth	r4, r4
 8005836:	e7e9      	b.n	800580c <u8g2_string_width+0x24>
    }
  }
  //printf("\n");
  
  /* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
  if ( u8g2->font_decode.glyph_width != 0 )
 8005838:	f996 206a 	ldrsb.w	r2, [r6, #106]	@ 0x6a
 800583c:	b152      	cbz	r2, 8005854 <u8g2_string_width+0x6c>
  {
    //printf("string width adjust dx=%d glyph_width=%d x-offset=%d\n", dx, u8g2->font_decode.glyph_width, u8g2->glyph_x_offset);
    w -= dx;
    w += u8g2->font_decode.glyph_width;  /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
    /* issue #46: we have to add the x offset also */
    w += u8g2->glyph_x_offset;	/* this value is set as a side effect of u8g2_GetGlyphWidth() */
 800583e:	f996 3090 	ldrsb.w	r3, [r6, #144]	@ 0x90
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
    /* https://github.com/olikraus/u8g2/issues/1561 */
    if ( initial_x_offset > 0 )
 8005842:	2f00      	cmp	r7, #0
 8005844:	4413      	add	r3, r2
 8005846:	4423      	add	r3, r4
    w += u8g2->glyph_x_offset;	/* this value is set as a side effect of u8g2_GetGlyphWidth() */
 8005848:	eba3 0305 	sub.w	r3, r3, r5
 800584c:	b29c      	uxth	r4, r3
      w+=initial_x_offset;
 800584e:	bfc4      	itt	gt
 8005850:	193f      	addgt	r7, r7, r4
 8005852:	b2bc      	uxthgt	r4, r7
#endif 
  }
  // printf("w=%d \n", w);
  
  return w;  
}
 8005854:	4620      	mov	r0, r4
 8005856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800585a <u8g2_SetFontMode>:
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 800585a:	f880 106d 	strb.w	r1, [r0, #109]	@ 0x6d
}
 800585e:	4770      	bx	lr

08005860 <u8g2_DrawGlyph>:
{
 8005860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005862:	461f      	mov	r7, r3
  switch(u8g2->font_decode.dir)
 8005864:	f890 3070 	ldrb.w	r3, [r0, #112]	@ 0x70
{
 8005868:	4604      	mov	r4, r0
 800586a:	460e      	mov	r6, r1
 800586c:	4615      	mov	r5, r2
  switch(u8g2->font_decode.dir)
 800586e:	2b03      	cmp	r3, #3
 8005870:	d807      	bhi.n	8005882 <u8g2_DrawGlyph+0x22>
 8005872:	e8df f003 	tbb	[pc, r3]
 8005876:	1502      	.short	0x1502
 8005878:	1e1a      	.short	0x1e1a
      y += u8g2->font_calc_vref(u8g2);
 800587a:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800587c:	4798      	blx	r3
 800587e:	4428      	add	r0, r5
      y -= u8g2->font_calc_vref(u8g2);
 8005880:	b285      	uxth	r5, r0
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8005882:	4639      	mov	r1, r7
 8005884:	4620      	mov	r0, r4
  u8g2->font_decode.target_x = x;
 8005886:	f8a4 6064 	strh.w	r6, [r4, #100]	@ 0x64
  u8g2->font_decode.target_y = y;
 800588a:	f8a4 5066 	strh.w	r5, [r4, #102]	@ 0x66
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 800588e:	f7ff ff55 	bl	800573c <u8g2_font_get_glyph_data>
  if ( glyph_data != NULL )
 8005892:	4601      	mov	r1, r0
 8005894:	b118      	cbz	r0, 800589e <u8g2_DrawGlyph+0x3e>
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8005896:	4620      	mov	r0, r4
 8005898:	f7ff fec0 	bl	800561c <u8g2_font_decode_glyph>
 800589c:	b280      	uxth	r0, r0
}
 800589e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      x -= u8g2->font_calc_vref(u8g2);
 80058a0:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 80058a2:	4798      	blx	r3
 80058a4:	1a30      	subs	r0, r6, r0
      x += u8g2->font_calc_vref(u8g2);
 80058a6:	b286      	uxth	r6, r0
      break;
 80058a8:	e7eb      	b.n	8005882 <u8g2_DrawGlyph+0x22>
      y -= u8g2->font_calc_vref(u8g2);
 80058aa:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 80058ac:	4798      	blx	r3
 80058ae:	1a28      	subs	r0, r5, r0
 80058b0:	e7e6      	b.n	8005880 <u8g2_DrawGlyph+0x20>
      x += u8g2->font_calc_vref(u8g2);
 80058b2:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 80058b4:	4798      	blx	r3
 80058b6:	4430      	add	r0, r6
 80058b8:	e7f5      	b.n	80058a6 <u8g2_DrawGlyph+0x46>

080058ba <u8g2_draw_string>:
{
 80058ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058be:	461e      	mov	r6, r3
 80058c0:	4607      	mov	r7, r0
 80058c2:	460c      	mov	r4, r1
 80058c4:	4615      	mov	r5, r2
  sum = 0;
 80058c6:	f04f 0a00 	mov.w	sl, #0
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80058ca:	f000 fa6c 	bl	8005da6 <u8x8_utf8_init>
    if ( e == 0x0ffff )
 80058ce:	f64f 78ff 	movw	r8, #65535	@ 0xffff
    if ( e != 0x0fffe )
 80058d2:	f64f 79fe 	movw	r9, #65534	@ 0xfffe
 80058d6:	3e01      	subs	r6, #1
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4638      	mov	r0, r7
 80058dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80058e0:	4798      	blx	r3
    if ( e == 0x0ffff )
 80058e2:	4540      	cmp	r0, r8
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80058e4:	4603      	mov	r3, r0
    if ( e == 0x0ffff )
 80058e6:	d01b      	beq.n	8005920 <u8g2_draw_string+0x66>
    if ( e != 0x0fffe )
 80058e8:	4548      	cmp	r0, r9
 80058ea:	d0f5      	beq.n	80058d8 <u8g2_draw_string+0x1e>
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 80058ec:	462a      	mov	r2, r5
 80058ee:	4621      	mov	r1, r4
 80058f0:	4638      	mov	r0, r7
 80058f2:	f7ff ffb5 	bl	8005860 <u8g2_DrawGlyph>
      switch(u8g2->font_decode.dir)
 80058f6:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80058fa:	2b03      	cmp	r3, #3
 80058fc:	d805      	bhi.n	800590a <u8g2_draw_string+0x50>
 80058fe:	e8df f003 	tbb	[pc, r3]
 8005902:	0802      	.short	0x0802
 8005904:	0d0b      	.short	0x0d0b
	  x += delta;
 8005906:	4404      	add	r4, r0
	  x -= delta;
 8005908:	b2a4      	uxth	r4, r4
      sum += delta;    
 800590a:	4450      	add	r0, sl
 800590c:	fa1f fa80 	uxth.w	sl, r0
 8005910:	e7e2      	b.n	80058d8 <u8g2_draw_string+0x1e>
	  y += delta;
 8005912:	4405      	add	r5, r0
	  y -= delta;
 8005914:	b2ad      	uxth	r5, r5
	  break;
 8005916:	e7f8      	b.n	800590a <u8g2_draw_string+0x50>
	  x -= delta;
 8005918:	1a24      	subs	r4, r4, r0
 800591a:	e7f5      	b.n	8005908 <u8g2_draw_string+0x4e>
	  y -= delta;
 800591c:	1a2d      	subs	r5, r5, r0
 800591e:	e7f9      	b.n	8005914 <u8g2_draw_string+0x5a>
}
 8005920:	4650      	mov	r0, sl
 8005922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08005928 <u8g2_DrawStr>:
{
 8005928:	b410      	push	{r4}
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 800592a:	4c02      	ldr	r4, [pc, #8]	@ (8005934 <u8g2_DrawStr+0xc>)
 800592c:	6044      	str	r4, [r0, #4]
}
 800592e:	bc10      	pop	{r4}
  return u8g2_draw_string(u8g2, x, y, str);
 8005930:	f7ff bfc3 	b.w	80058ba <u8g2_draw_string>
 8005934:	08005d1b 	.word	0x08005d1b

08005938 <u8g2_DrawUTF8>:
{
 8005938:	b410      	push	{r4}
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 800593a:	4c02      	ldr	r4, [pc, #8]	@ (8005944 <u8g2_DrawUTF8+0xc>)
 800593c:	6044      	str	r4, [r0, #4]
}
 800593e:	bc10      	pop	{r4}
  return u8g2_draw_string(u8g2, x, y, str);
 8005940:	f7ff bfbb 	b.w	80058ba <u8g2_draw_string>
 8005944:	08005d2b 	.word	0x08005d2b

08005948 <u8g2_UpdateRefHeight>:
  if ( u8g2->font == NULL )
 8005948:	6d83      	ldr	r3, [r0, #88]	@ 0x58
{
 800594a:	b510      	push	{r4, lr}
  if ( u8g2->font == NULL )
 800594c:	b1cb      	cbz	r3, 8005982 <u8g2_UpdateRefHeight+0x3a>
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 800594e:	f990 4081 	ldrsb.w	r4, [r0, #129]	@ 0x81
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8005952:	f990 1082 	ldrsb.w	r1, [r0, #130]	@ 0x82
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8005956:	f890 308d 	ldrb.w	r3, [r0, #141]	@ 0x8d
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 800595a:	f880 408e 	strb.w	r4, [r0, #142]	@ 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 800595e:	f880 108f 	strb.w	r1, [r0, #143]	@ 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8005962:	b173      	cbz	r3, 8005982 <u8g2_UpdateRefHeight+0x3a>
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8005964:	2b01      	cmp	r3, #1
 8005966:	d10d      	bne.n	8005984 <u8g2_UpdateRefHeight+0x3c>
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8005968:	f990 3083 	ldrsb.w	r3, [r0, #131]	@ 0x83
 800596c:	42a3      	cmp	r3, r4
 800596e:	bfb8      	it	lt
 8005970:	4623      	movlt	r3, r4
 8005972:	f880 308e 	strb.w	r3, [r0, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8005976:	f990 3084 	ldrsb.w	r3, [r0, #132]	@ 0x84
 800597a:	4299      	cmp	r1, r3
 800597c:	dd01      	ble.n	8005982 <u8g2_UpdateRefHeight+0x3a>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 800597e:	f880 308f 	strb.w	r3, [r0, #143]	@ 0x8f
}
 8005982:	bd10      	pop	{r4, pc}
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8005984:	f990 2080 	ldrsb.w	r2, [r0, #128]	@ 0x80
 8005988:	f990 307e 	ldrsb.w	r3, [r0, #126]	@ 0x7e
 800598c:	4413      	add	r3, r2
 800598e:	429c      	cmp	r4, r3
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8005990:	bfb8      	it	lt
 8005992:	f880 308e 	strblt.w	r3, [r0, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8005996:	4291      	cmp	r1, r2
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8005998:	bfc8      	it	gt
 800599a:	f880 208f 	strbgt.w	r2, [r0, #143]	@ 0x8f
 800599e:	e7f0      	b.n	8005982 <u8g2_UpdateRefHeight+0x3a>

080059a0 <u8g2_SetFontPosBaseline>:
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 80059a0:	4b01      	ldr	r3, [pc, #4]	@ (80059a8 <u8g2_SetFontPosBaseline+0x8>)
 80059a2:	65c3      	str	r3, [r0, #92]	@ 0x5c
}
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	08005451 	.word	0x08005451

080059ac <u8g2_SetFont>:
  if ( u8g2->font != font )
 80059ac:	6d82      	ldr	r2, [r0, #88]	@ 0x58
{
 80059ae:	b510      	push	{r4, lr}
  if ( u8g2->font != font )
 80059b0:	428a      	cmp	r2, r1
{
 80059b2:	4604      	mov	r4, r0
  if ( u8g2->font != font )
 80059b4:	d008      	beq.n	80059c8 <u8g2_SetFont+0x1c>
    u8g2->font = font;
 80059b6:	6581      	str	r1, [r0, #88]	@ 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 80059b8:	3074      	adds	r0, #116	@ 0x74
 80059ba:	f7ff fd4b 	bl	8005454 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 80059be:	4620      	mov	r0, r4
}
 80059c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    u8g2_UpdateRefHeight(u8g2);
 80059c4:	f7ff bfc0 	b.w	8005948 <u8g2_UpdateRefHeight>
}
 80059c8:	bd10      	pop	{r4, pc}
	...

080059cc <u8g2_GetUTF8Width>:
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_GetUTF8Width(u8g2_t *u8g2, const char *str)
{
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 80059cc:	4b01      	ldr	r3, [pc, #4]	@ (80059d4 <u8g2_GetUTF8Width+0x8>)
 80059ce:	6043      	str	r3, [r0, #4]
  return u8g2_string_width(u8g2, str);
 80059d0:	f7ff bf0a 	b.w	80057e8 <u8g2_string_width>
 80059d4:	08005d2b 	.word	0x08005d2b

080059d8 <u8g2_SetFontDirection>:


void u8g2_SetFontDirection(u8g2_t *u8g2, uint8_t dir)
{
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = dir;
 80059d8:	f880 1070 	strb.w	r1, [r0, #112]	@ 0x70
#endif
}
 80059dc:	4770      	bx	lr

080059de <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80059de:	b470      	push	{r4, r5, r6}

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 80059e0:	8fc6      	ldrh	r6, [r0, #62]	@ 0x3e
{
 80059e2:	f89d 500c 	ldrb.w	r5, [sp, #12]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 80059e6:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
  y -= u8g2->pixel_curr_row;
 80059e8:	1b92      	subs	r2, r2, r6
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 80059ea:	46a4      	mov	ip, r4
 80059ec:	9503      	str	r5, [sp, #12]
 80059ee:	b292      	uxth	r2, r2
}
 80059f0:	bc70      	pop	{r4, r5, r6}
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 80059f2:	4760      	bx	ip

080059f4 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80059f4:	b4f0      	push	{r4, r5, r6, r7}
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 80059f6:	f890 408c 	ldrb.w	r4, [r0, #140]	@ 0x8c
{
 80059fa:	f89d 5010 	ldrb.w	r5, [sp, #16]
  if ( u8g2->is_page_clip_window_intersection != 0 )
 80059fe:	2c00      	cmp	r4, #0
 8005a00:	d03a      	beq.n	8005a78 <u8g2_DrawHVLine+0x84>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d038      	beq.n	8005a78 <u8g2_DrawHVLine+0x84>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d004      	beq.n	8005a14 <u8g2_DrawHVLine+0x20>
      {
	if ( dir == 2 )
 8005a0a:	2d02      	cmp	r5, #2
 8005a0c:	d12b      	bne.n	8005a66 <u8g2_DrawHVLine+0x72>
	{
	  x -= len;
	  x++;
 8005a0e:	3101      	adds	r1, #1
 8005a10:	1ac9      	subs	r1, r1, r3
 8005a12:	b289      	uxth	r1, r1
	}
      }
      dir &= 1;  
      
      /* clip against the user window */
      if ( dir == 0 )
 8005a14:	f015 0501 	ands.w	r5, r5, #1
 8005a18:	d130      	bne.n	8005a7c <u8g2_DrawHVLine+0x88>
      {
	if ( y < u8g2->user_y0 )
 8005a1a:	f8b0 404c 	ldrh.w	r4, [r0, #76]	@ 0x4c
 8005a1e:	4294      	cmp	r4, r2
 8005a20:	d82a      	bhi.n	8005a78 <u8g2_DrawHVLine+0x84>
	  return;
	if ( y >= u8g2->user_y1 )
 8005a22:	f8b0 404e 	ldrh.w	r4, [r0, #78]	@ 0x4e
 8005a26:	4294      	cmp	r4, r2
 8005a28:	d926      	bls.n	8005a78 <u8g2_DrawHVLine+0x84>
  b += *len;
 8005a2a:	440b      	add	r3, r1
 8005a2c:	b29c      	uxth	r4, r3
  if ( a > b )
 8005a2e:	428c      	cmp	r4, r1
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8005a30:	f8b0 7048 	ldrh.w	r7, [r0, #72]	@ 0x48
 8005a34:	f8b0 604a 	ldrh.w	r6, [r0, #74]	@ 0x4a
  if ( a > b )
 8005a38:	d21c      	bcs.n	8005a74 <u8g2_DrawHVLine+0x80>
    if ( a < d )
 8005a3a:	428e      	cmp	r6, r1
 8005a3c:	d919      	bls.n	8005a72 <u8g2_DrawHVLine+0x7e>
      b--;
 8005a3e:	1e74      	subs	r4, r6, #1
 8005a40:	b2a4      	uxth	r4, r4
  if ( b <= c )
 8005a42:	42a7      	cmp	r7, r4
 8005a44:	d218      	bcs.n	8005a78 <u8g2_DrawHVLine+0x84>
  if ( a < c )		
 8005a46:	42b9      	cmp	r1, r7
 8005a48:	bf38      	it	cc
 8005a4a:	4639      	movcc	r1, r7
  b -= a;
 8005a4c:	42a6      	cmp	r6, r4
 8005a4e:	bf94      	ite	ls
 8005a50:	ebc1 0306 	rsbls	r3, r1, r6
 8005a54:	ebc1 0304 	rsbhi	r3, r1, r4
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8005a58:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8005a5a:	9504      	str	r5, [sp, #16]
 8005a5c:	68a4      	ldr	r4, [r4, #8]
  b -= a;
 8005a5e:	b29b      	uxth	r3, r3
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8005a60:	46a4      	mov	ip, r4
    }
}
 8005a62:	bcf0      	pop	{r4, r5, r6, r7}
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8005a64:	4760      	bx	ip
	else if ( dir == 3 )
 8005a66:	2d03      	cmp	r5, #3
	  y++;
 8005a68:	bf02      	ittt	eq
 8005a6a:	3201      	addeq	r2, #1
 8005a6c:	1ad2      	subeq	r2, r2, r3
 8005a6e:	b292      	uxtheq	r2, r2
 8005a70:	e7d0      	b.n	8005a14 <u8g2_DrawHVLine+0x20>
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8005a72:	4639      	mov	r1, r7
  if ( a >= d )
 8005a74:	428e      	cmp	r6, r1
 8005a76:	d8e4      	bhi.n	8005a42 <u8g2_DrawHVLine+0x4e>
}
 8005a78:	bcf0      	pop	{r4, r5, r6, r7}
 8005a7a:	4770      	bx	lr
	if ( x < u8g2->user_x0 )
 8005a7c:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
 8005a80:	428c      	cmp	r4, r1
 8005a82:	d8f9      	bhi.n	8005a78 <u8g2_DrawHVLine+0x84>
	if ( x >= u8g2->user_x1 )
 8005a84:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
 8005a88:	428c      	cmp	r4, r1
 8005a8a:	d9f5      	bls.n	8005a78 <u8g2_DrawHVLine+0x84>
  b += *len;
 8005a8c:	4413      	add	r3, r2
 8005a8e:	b29c      	uxth	r4, r3
  if ( a > b )
 8005a90:	4294      	cmp	r4, r2
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8005a92:	f8b0 704c 	ldrh.w	r7, [r0, #76]	@ 0x4c
 8005a96:	f8b0 604e 	ldrh.w	r6, [r0, #78]	@ 0x4e
  if ( a > b )
 8005a9a:	d210      	bcs.n	8005abe <u8g2_DrawHVLine+0xca>
    if ( a < d )
 8005a9c:	4296      	cmp	r6, r2
 8005a9e:	d90d      	bls.n	8005abc <u8g2_DrawHVLine+0xc8>
      b--;
 8005aa0:	1e74      	subs	r4, r6, #1
 8005aa2:	b2a4      	uxth	r4, r4
  if ( b <= c )
 8005aa4:	42a7      	cmp	r7, r4
 8005aa6:	d2e7      	bcs.n	8005a78 <u8g2_DrawHVLine+0x84>
  if ( a < c )		
 8005aa8:	42ba      	cmp	r2, r7
 8005aaa:	bf38      	it	cc
 8005aac:	463a      	movcc	r2, r7
  b -= a;
 8005aae:	42a6      	cmp	r6, r4
 8005ab0:	bf94      	ite	ls
 8005ab2:	ebc2 0306 	rsbls	r3, r2, r6
 8005ab6:	ebc2 0304 	rsbhi	r3, r2, r4
 8005aba:	e7cd      	b.n	8005a58 <u8g2_DrawHVLine+0x64>
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8005abc:	463a      	mov	r2, r7
  if ( a >= d )
 8005abe:	4296      	cmp	r6, r2
 8005ac0:	d8f0      	bhi.n	8005aa4 <u8g2_DrawHVLine+0xb0>
 8005ac2:	e7d9      	b.n	8005a78 <u8g2_DrawHVLine+0x84>

08005ac4 <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8005ac4:	b513      	push	{r0, r1, r4, lr}
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 8005ac6:	2400      	movs	r4, #0
 8005ac8:	9400      	str	r4, [sp, #0]
 8005aca:	f7ff ff93 	bl	80059f4 <u8g2_DrawHVLine>
}
 8005ace:	b002      	add	sp, #8
 8005ad0:	bd10      	pop	{r4, pc}

08005ad2 <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8005ad2:	b513      	push	{r0, r1, r4, lr}
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 8005ad4:	2401      	movs	r4, #1
 8005ad6:	9400      	str	r4, [sp, #0]
 8005ad8:	f7ff ff8c 	bl	80059f4 <u8g2_DrawHVLine>
}
 8005adc:	b002      	add	sp, #8
 8005ade:	bd10      	pop	{r4, pc}

08005ae0 <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 8005ae0:	b573      	push	{r0, r1, r4, r5, r6, lr}
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 8005ae2:	f8b0 604c 	ldrh.w	r6, [r0, #76]	@ 0x4c
 8005ae6:	4296      	cmp	r6, r2
 8005ae8:	d810      	bhi.n	8005b0c <u8g2_DrawPixel+0x2c>
    return;
  if ( y >= u8g2->user_y1 )
 8005aea:	f8b0 604e 	ldrh.w	r6, [r0, #78]	@ 0x4e
 8005aee:	4296      	cmp	r6, r2
 8005af0:	d90c      	bls.n	8005b0c <u8g2_DrawPixel+0x2c>
    return;
  if ( x < u8g2->user_x0 )
 8005af2:	f8b0 5048 	ldrh.w	r5, [r0, #72]	@ 0x48
 8005af6:	428d      	cmp	r5, r1
 8005af8:	d808      	bhi.n	8005b0c <u8g2_DrawPixel+0x2c>
    return;
  if ( x >= u8g2->user_x1 )
 8005afa:	f8b0 304a 	ldrh.w	r3, [r0, #74]	@ 0x4a
 8005afe:	428b      	cmp	r3, r1
 8005b00:	d904      	bls.n	8005b0c <u8g2_DrawPixel+0x2c>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8005b02:	2300      	movs	r3, #0
 8005b04:	9300      	str	r3, [sp, #0]
 8005b06:	2301      	movs	r3, #1
 8005b08:	f7ff ff74 	bl	80059f4 <u8g2_DrawHVLine>
}
 8005b0c:	b002      	add	sp, #8
 8005b0e:	bd70      	pop	{r4, r5, r6, pc}

08005b10 <u8g2_SetDrawColor>:
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
  if ( color >= 3 )
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8005b10:	2903      	cmp	r1, #3
 8005b12:	bf28      	it	cs
 8005b14:	2101      	movcs	r1, #1
 8005b16:	f880 1092 	strb.w	r1, [r0, #146]	@ 0x92
}
 8005b1a:	4770      	bx	lr

08005b1c <u8g2_is_intersection_decision_tree>:
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
 8005b1c:	428a      	cmp	r2, r1
 8005b1e:	d206      	bcs.n	8005b2e <u8g2_is_intersection_decision_tree+0x12>
  {
    if ( v1 > a0 )	// v1 >= a0
 8005b20:	4283      	cmp	r3, r0
 8005b22:	d808      	bhi.n	8005b36 <u8g2_is_intersection_decision_tree+0x1a>
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8005b24:	429a      	cmp	r2, r3
 8005b26:	bf94      	ite	ls
 8005b28:	2000      	movls	r0, #0
 8005b2a:	2001      	movhi	r0, #1
 8005b2c:	4770      	bx	lr
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8005b2e:	4283      	cmp	r3, r0
 8005b30:	d8f8      	bhi.n	8005b24 <u8g2_is_intersection_decision_tree+0x8>
	return 0;
 8005b32:	2000      	movs	r0, #0
 8005b34:	4770      	bx	lr
      return 1;
 8005b36:	2001      	movs	r0, #1
    else
    {
      return 0;
    }
  }
}
 8005b38:	4770      	bx	lr

08005b3a <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8005b3a:	b570      	push	{r4, r5, r6, lr}
 8005b3c:	4604      	mov	r4, r0
 8005b3e:	460d      	mov	r5, r1
 8005b40:	461e      	mov	r6, r3
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8005b42:	f8b0 104e 	ldrh.w	r1, [r0, #78]	@ 0x4e
 8005b46:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8005b4a:	f8b0 004c 	ldrh.w	r0, [r0, #76]	@ 0x4c
 8005b4e:	f7ff ffe5 	bl	8005b1c <u8g2_is_intersection_decision_tree>
 8005b52:	b148      	cbz	r0, 8005b68 <u8g2_IsIntersection+0x2e>
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8005b54:	4633      	mov	r3, r6
 8005b56:	462a      	mov	r2, r5
 8005b58:	f8b4 104a 	ldrh.w	r1, [r4, #74]	@ 0x4a
 8005b5c:	f8b4 0048 	ldrh.w	r0, [r4, #72]	@ 0x48
}
 8005b60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8005b64:	f7ff bfda 	b.w	8005b1c <u8g2_is_intersection_decision_tree>
}
 8005b68:	bd70      	pop	{r4, r5, r6, pc}

08005b6a <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8005b6a:	b5f0      	push	{r4, r5, r6, r7, lr}
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;
 8005b6c:	2401      	movs	r4, #1
{
 8005b6e:	468c      	mov	ip, r1

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
 8005b70:	f890 1092 	ldrb.w	r1, [r0, #146]	@ 0x92
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8005b74:	f002 0707 	and.w	r7, r2, #7
  mask <<= bit_pos;
 8005b78:	40bc      	lsls	r4, r7
  if ( u8g2->draw_color <= 1 )
 8005b7a:	2901      	cmp	r1, #1
{
 8005b7c:	f89d 6014 	ldrb.w	r6, [sp, #20]
  mask <<= bit_pos;
 8005b80:	b2e4      	uxtb	r4, r4
  if ( u8g2->draw_color <= 1 )
 8005b82:	d816      	bhi.n	8005bb2 <u8g2_ll_hvline_vertical_top_lsb+0x48>
    or_mask  = mask;
 8005b84:	4625      	mov	r5, r4
  if ( u8g2->draw_color != 1 )
 8005b86:	d100      	bne.n	8005b8a <u8g2_ll_hvline_vertical_top_lsb+0x20>
  xor_mask = 0;
 8005b88:	2400      	movs	r4, #0
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
 8005b8a:	f022 0107 	bic.w	r1, r2, #7
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8005b8e:	6802      	ldr	r2, [r0, #0]
 8005b90:	7c12      	ldrb	r2, [r2, #16]
 8005b92:	4351      	muls	r1, r2
  ptr = u8g2->tile_buf_ptr;
  ptr += offset;
  ptr += x;
 8005b94:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  ptr += offset;
 8005b96:	b289      	uxth	r1, r1
  ptr += x;
 8005b98:	4461      	add	r1, ip
 8005b9a:	4411      	add	r1, r2
  
  if ( dir == 0 )
 8005b9c:	b95e      	cbnz	r6, 8005bb6 <u8g2_ll_hvline_vertical_top_lsb+0x4c>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8005b9e:	780a      	ldrb	r2, [r1, #0]
	*ptr ^= xor_mask;
	ptr++;
	len--;
 8005ba0:	3b01      	subs	r3, #1
	*ptr |= or_mask;
 8005ba2:	432a      	orrs	r2, r5
	*ptr ^= xor_mask;
 8005ba4:	4062      	eors	r2, r4
	len--;
 8005ba6:	b29b      	uxth	r3, r3
	*ptr ^= xor_mask;
 8005ba8:	f801 2b01 	strb.w	r2, [r1], #1
      } while( len != 0 );
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d1f6      	bne.n	8005b9e <u8g2_ll_hvline_vertical_top_lsb+0x34>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8005bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  or_mask = 0;
 8005bb2:	2500      	movs	r5, #0
 8005bb4:	e7e9      	b.n	8005b8a <u8g2_ll_hvline_vertical_top_lsb+0x20>
      *ptr |= or_mask;
 8005bb6:	780a      	ldrb	r2, [r1, #0]
      bit_pos++;
 8005bb8:	3701      	adds	r7, #1
      *ptr |= or_mask;
 8005bba:	432a      	orrs	r2, r5
      *ptr ^= xor_mask;
 8005bbc:	4062      	eors	r2, r4
      len--;
 8005bbe:	3b01      	subs	r3, #1
      if ( bit_pos == 0 )
 8005bc0:	f017 0707 	ands.w	r7, r7, #7
      *ptr ^= xor_mask;
 8005bc4:	700a      	strb	r2, [r1, #0]
      len--;
 8005bc6:	b29b      	uxth	r3, r3
      if ( bit_pos == 0 )
 8005bc8:	d10a      	bne.n	8005be0 <u8g2_ll_hvline_vertical_top_lsb+0x76>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8005bca:	8f42      	ldrh	r2, [r0, #58]	@ 0x3a
 8005bcc:	4411      	add	r1, r2
	if ( u8g2->draw_color <= 1 )
 8005bce:	f890 2092 	ldrb.w	r2, [r0, #146]	@ 0x92
 8005bd2:	2a01      	cmp	r2, #1
 8005bd4:	d809      	bhi.n	8005bea <u8g2_ll_hvline_vertical_top_lsb+0x80>
	if ( u8g2->draw_color != 1 )
 8005bd6:	d10a      	bne.n	8005bee <u8g2_ll_hvline_vertical_top_lsb+0x84>
	  or_mask  = 1;
 8005bd8:	4615      	mov	r5, r2
    } while( len != 0 );
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1eb      	bne.n	8005bb6 <u8g2_ll_hvline_vertical_top_lsb+0x4c>
 8005bde:	e7e7      	b.n	8005bb0 <u8g2_ll_hvline_vertical_top_lsb+0x46>
	or_mask <<= 1;
 8005be0:	006d      	lsls	r5, r5, #1
	xor_mask <<= 1;
 8005be2:	0064      	lsls	r4, r4, #1
	or_mask <<= 1;
 8005be4:	b2ed      	uxtb	r5, r5
	xor_mask <<= 1;
 8005be6:	b2e4      	uxtb	r4, r4
 8005be8:	e7f7      	b.n	8005bda <u8g2_ll_hvline_vertical_top_lsb+0x70>
	  xor_mask = 1;
 8005bea:	2401      	movs	r4, #1
 8005bec:	e7f5      	b.n	8005bda <u8g2_ll_hvline_vertical_top_lsb+0x70>
 8005bee:	2401      	movs	r4, #1
	  or_mask  = 1;
 8005bf0:	4625      	mov	r5, r4
 8005bf2:	e7f2      	b.n	8005bda <u8g2_ll_hvline_vertical_top_lsb+0x70>

08005bf4 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8005bf4:	b570      	push	{r4, r5, r6, lr}
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8005bf6:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8005bfa:	6802      	ldr	r2, [r0, #0]
  t *= 8;
 8005bfc:	00cb      	lsls	r3, r1, #3
  u8g2->pixel_buf_height = t;
 8005bfe:	8783      	strh	r3, [r0, #60]	@ 0x3c
  
  t = display_info->tile_width;
 8005c00:	7c13      	ldrb	r3, [r2, #16]
    t = 31;
#endif
  t *= 8;
  u8g2->pixel_buf_width = t;
  
  t = u8g2->tile_curr_row;
 8005c02:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
  t *= 8;
 8005c06:	00db      	lsls	r3, r3, #3
  u8g2->pixel_buf_width = t;
 8005c08:	8743      	strh	r3, [r0, #58]	@ 0x3a
  t *= 8;
 8005c0a:	00eb      	lsls	r3, r5, #3
  u8g2->pixel_curr_row = t;
 8005c0c:	87c3      	strh	r3, [r0, #62]	@ 0x3e
  
  t = u8g2->tile_buf_height;
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8005c0e:	7c54      	ldrb	r4, [r2, #17]
 8005c10:	194e      	adds	r6, r1, r5
 8005c12:	42a6      	cmp	r6, r4
    t = display_info->tile_height - u8g2->tile_curr_row;
 8005c14:	bfc4      	itt	gt
 8005c16:	1b64      	subgt	r4, r4, r5
 8005c18:	b2a1      	uxthgt	r1, r4
  t *= 8;
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8005c1a:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
  u8g2->buf_y1 += t;
 8005c1e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005c22:	f8a0 3042 	strh.w	r3, [r0, #66]	@ 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8005c26:	8a93      	ldrh	r3, [r2, #20]
 8005c28:	f8a0 3044 	strh.w	r3, [r0, #68]	@ 0x44
  u8g2->height = display_info->pixel_height;
 8005c2c:	8ad3      	ldrh	r3, [r2, #22]
 8005c2e:	f8a0 3046 	strh.w	r3, [r0, #70]	@ 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8005c32:	bd70      	pop	{r4, r5, r6, pc}

08005c34 <u8g2_update_dimension_r0>:
/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
  u8g2_update_dimension_common(u8g2);  
 8005c34:	f7ff bfde 	b.w	8005bf4 <u8g2_update_dimension_common>

08005c38 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8005c38:	b410      	push	{r4}
 8005c3a:	f89d 4004 	ldrb.w	r4, [sp, #4]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8005c3e:	9401      	str	r4, [sp, #4]
}
 8005c40:	bc10      	pop	{r4}
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8005c42:	f7ff becc 	b.w	80059de <u8g2_draw_hv_line_2dir>

08005c46 <u8g2_apply_clip_window>:
{
 8005c46:	b513      	push	{r0, r1, r4, lr}
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8005c48:	f8b0 3056 	ldrh.w	r3, [r0, #86]	@ 0x56
{
 8005c4c:	4604      	mov	r4, r0
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8005c4e:	9300      	str	r3, [sp, #0]
 8005c50:	f8b0 3052 	ldrh.w	r3, [r0, #82]	@ 0x52
 8005c54:	f8b0 2054 	ldrh.w	r2, [r0, #84]	@ 0x54
 8005c58:	f8b0 1050 	ldrh.w	r1, [r0, #80]	@ 0x50
 8005c5c:	f7ff ff6d 	bl	8005b3a <u8g2_IsIntersection>
 8005c60:	b918      	cbnz	r0, 8005c6a <u8g2_apply_clip_window+0x24>
    u8g2->is_page_clip_window_intersection = 0;
 8005c62:	f884 008c 	strb.w	r0, [r4, #140]	@ 0x8c
}
 8005c66:	b002      	add	sp, #8
 8005c68:	bd10      	pop	{r4, pc}
    u8g2->is_page_clip_window_intersection = 1;
 8005c6a:	2301      	movs	r3, #1
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8005c6c:	f8b4 2048 	ldrh.w	r2, [r4, #72]	@ 0x48
    u8g2->is_page_clip_window_intersection = 1;
 8005c70:	f884 308c 	strb.w	r3, [r4, #140]	@ 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8005c74:	f8b4 3050 	ldrh.w	r3, [r4, #80]	@ 0x50
 8005c78:	429a      	cmp	r2, r3
      u8g2->user_x0 = u8g2->clip_x0;
 8005c7a:	bf38      	it	cc
 8005c7c:	f8a4 3048 	strhcc.w	r3, [r4, #72]	@ 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8005c80:	f8b4 204a 	ldrh.w	r2, [r4, #74]	@ 0x4a
 8005c84:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 8005c88:	429a      	cmp	r2, r3
      u8g2->user_x1 = u8g2->clip_x1;
 8005c8a:	bf88      	it	hi
 8005c8c:	f8a4 304a 	strhhi.w	r3, [r4, #74]	@ 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8005c90:	f8b4 204c 	ldrh.w	r2, [r4, #76]	@ 0x4c
 8005c94:	f8b4 3054 	ldrh.w	r3, [r4, #84]	@ 0x54
 8005c98:	429a      	cmp	r2, r3
      u8g2->user_y0 = u8g2->clip_y0;
 8005c9a:	bf38      	it	cc
 8005c9c:	f8a4 304c 	strhcc.w	r3, [r4, #76]	@ 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8005ca0:	f8b4 204e 	ldrh.w	r2, [r4, #78]	@ 0x4e
 8005ca4:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 8005ca8:	429a      	cmp	r2, r3
      u8g2->user_y1 = u8g2->clip_y1;
 8005caa:	bf88      	it	hi
 8005cac:	f8a4 304e 	strhhi.w	r3, [r4, #78]	@ 0x4e
}
 8005cb0:	e7d9      	b.n	8005c66 <u8g2_apply_clip_window+0x20>

08005cb2 <u8g2_update_page_win_r0>:
  u8g2->user_x0 = 0;
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f8a0 2048 	strh.w	r2, [r0, #72]	@ 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8005cb8:	f8b0 2044 	ldrh.w	r2, [r0, #68]	@ 0x44
 8005cbc:	f8a0 204a 	strh.w	r2, [r0, #74]	@ 0x4a
  u8g2->user_y0 = u8g2->buf_y0;
 8005cc0:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8005cc2:	64c2      	str	r2, [r0, #76]	@ 0x4c
  u8g2_apply_clip_window(u8g2);
 8005cc4:	f7ff bfbf 	b.w	8005c46 <u8g2_apply_clip_window>

08005cc8 <u8g2_SetMaxClipWindow>:
  u8g2->clip_x0 = 0;
 8005cc8:	4a02      	ldr	r2, [pc, #8]	@ (8005cd4 <u8g2_SetMaxClipWindow+0xc>)
  u8g2->cb->update_page_win(u8g2);
 8005cca:	6b03      	ldr	r3, [r0, #48]	@ 0x30
  u8g2->clip_y0 = 0;
 8005ccc:	e9c0 2214 	strd	r2, r2, [r0, #80]	@ 0x50
  u8g2->cb->update_page_win(u8g2);
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	4718      	bx	r3
 8005cd4:	ffff0000 	.word	0xffff0000

08005cd8 <u8g2_SetupBuffer>:
{
 8005cd8:	b570      	push	{r4, r5, r6, lr}
  u8g2->font = NULL;
 8005cda:	2500      	movs	r5, #0
  u8g2->ll_hvline = ll_hvline_cb;
 8005cdc:	62c3      	str	r3, [r0, #44]	@ 0x2c
  u8g2->draw_color = 1;
 8005cde:	f240 1301 	movw	r3, #257	@ 0x101
{
 8005ce2:	4604      	mov	r4, r0
 8005ce4:	9e04      	ldr	r6, [sp, #16]
  u8g2->tile_buf_height = tile_buf_height;
 8005ce6:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
  u8g2->tile_curr_row = 0;
 8005cea:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8005cee:	f880 506d 	strb.w	r5, [r0, #109]	@ 0x6d
  u8g2->font_height_mode = 0; /* issue 2046 */
 8005cf2:	f880 508d 	strb.w	r5, [r0, #141]	@ 0x8d
  u8g2->bitmap_transparency = 0;
 8005cf6:	f880 5091 	strb.w	r5, [r0, #145]	@ 0x91
  u8g2->draw_color = 1;
 8005cfa:	f8a0 3092 	strh.w	r3, [r0, #146]	@ 0x92
  u8g2->tile_buf_ptr = buf;
 8005cfe:	6341      	str	r1, [r0, #52]	@ 0x34
  u8g2->cb->update_dimension(u8g2);
 8005d00:	6833      	ldr	r3, [r6, #0]
  u8g2->font = NULL;
 8005d02:	6585      	str	r5, [r0, #88]	@ 0x58
  u8g2->cb = u8g2_cb;
 8005d04:	6306      	str	r6, [r0, #48]	@ 0x30
  u8g2->cb->update_dimension(u8g2);
 8005d06:	4798      	blx	r3
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8005d08:	4620      	mov	r0, r4
 8005d0a:	f7ff ffdd 	bl	8005cc8 <u8g2_SetMaxClipWindow>
  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8005d0e:	4620      	mov	r0, r4
 8005d10:	f7ff fe46 	bl	80059a0 <u8g2_SetFontPosBaseline>
  u8g2->font_decode.dir = 0;
 8005d14:	f884 5070 	strb.w	r5, [r4, #112]	@ 0x70
}
 8005d18:	bd70      	pop	{r4, r5, r6, pc}

08005d1a <u8x8_ascii_next>:
}

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
    return 0x0ffff;	/* end of string detected*/
 8005d1a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8005d1e:	b119      	cbz	r1, 8005d28 <u8x8_ascii_next+0xe>
  return b;
 8005d20:	290a      	cmp	r1, #10
 8005d22:	bf18      	it	ne
 8005d24:	4608      	movne	r0, r1
 8005d26:	4770      	bx	lr
}
 8005d28:	4770      	bx	lr

08005d2a <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 8005d2a:	4603      	mov	r3, r0
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 8005d2c:	2900      	cmp	r1, #0
 8005d2e:	d037      	beq.n	8005da0 <u8x8_utf8_next+0x76>
 8005d30:	290a      	cmp	r1, #10
 8005d32:	d035      	beq.n	8005da0 <u8x8_utf8_next+0x76>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
  if ( u8x8->utf8_state == 0 )
 8005d34:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 8005d38:	bb22      	cbnz	r2, 8005d84 <u8x8_utf8_next+0x5a>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 8005d3a:	29fb      	cmp	r1, #251	@ 0xfb
 8005d3c:	d908      	bls.n	8005d50 <u8x8_utf8_next+0x26>
    {
      u8x8->utf8_state = 5;
      b &= 1;
 8005d3e:	2205      	movs	r2, #5
 8005d40:	f001 0101 	and.w	r1, r1, #1
      u8x8->utf8_state = 5;
 8005d44:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
    }
    u8x8->encoding = b;
 8005d48:	8419      	strh	r1, [r3, #32]
    return 0x0fffe;
 8005d4a:	f64f 70fe 	movw	r0, #65534	@ 0xfffe
 8005d4e:	4770      	bx	lr
    else if ( b >= 0xf8 )
 8005d50:	29f7      	cmp	r1, #247	@ 0xf7
 8005d52:	d903      	bls.n	8005d5c <u8x8_utf8_next+0x32>
      b &= 3;
 8005d54:	2204      	movs	r2, #4
 8005d56:	f001 0103 	and.w	r1, r1, #3
 8005d5a:	e7f3      	b.n	8005d44 <u8x8_utf8_next+0x1a>
    else if ( b >= 0xf0 )
 8005d5c:	29ef      	cmp	r1, #239	@ 0xef
 8005d5e:	d903      	bls.n	8005d68 <u8x8_utf8_next+0x3e>
      b &= 7;      
 8005d60:	2203      	movs	r2, #3
 8005d62:	f001 0107 	and.w	r1, r1, #7
 8005d66:	e7ed      	b.n	8005d44 <u8x8_utf8_next+0x1a>
    else if ( b >= 0xe0 )
 8005d68:	29df      	cmp	r1, #223	@ 0xdf
 8005d6a:	d903      	bls.n	8005d74 <u8x8_utf8_next+0x4a>
      b &= 15;
 8005d6c:	2202      	movs	r2, #2
 8005d6e:	f001 010f 	and.w	r1, r1, #15
 8005d72:	e7e7      	b.n	8005d44 <u8x8_utf8_next+0x1a>
    else if ( b >= 0xc0 )
 8005d74:	29bf      	cmp	r1, #191	@ 0xbf
 8005d76:	d903      	bls.n	8005d80 <u8x8_utf8_next+0x56>
      b &= 0x01f;
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f001 011f 	and.w	r1, r1, #31
 8005d7e:	e7e1      	b.n	8005d44 <u8x8_utf8_next+0x1a>
      return b;
 8005d80:	4608      	mov	r0, r1
 8005d82:	4770      	bx	lr
  }
  else
  {
    u8x8->utf8_state--;
 8005d84:	3a01      	subs	r2, #1
 8005d86:	b2d2      	uxtb	r2, r2
 8005d88:	f880 2026 	strb.w	r2, [r0, #38]	@ 0x26
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 8005d8c:	8c00      	ldrh	r0, [r0, #32]
    b &= 0x03f;
    u8x8->encoding |= b;
 8005d8e:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 8005d92:	ea41 1180 	orr.w	r1, r1, r0, lsl #6
 8005d96:	b288      	uxth	r0, r1
 8005d98:	8418      	strh	r0, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 8005d9a:	2a00      	cmp	r2, #0
 8005d9c:	d1d5      	bne.n	8005d4a <u8x8_utf8_next+0x20>
      return 0x0fffe;	/* nothing to do yet */
  }
  return u8x8->encoding;
}
 8005d9e:	4770      	bx	lr
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 8005da0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8005da4:	e7fb      	b.n	8005d9e <u8x8_utf8_next+0x74>

08005da6 <u8x8_utf8_init>:
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8005da6:	2300      	movs	r3, #0
 8005da8:	f880 3026 	strb.w	r3, [r0, #38]	@ 0x26
}
 8005dac:	4770      	bx	lr

08005dae <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8005dae:	b410      	push	{r4}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8005db0:	6904      	ldr	r4, [r0, #16]
{
 8005db2:	460a      	mov	r2, r1
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8005db4:	46a4      	mov	ip, r4
 8005db6:	2300      	movs	r3, #0
 8005db8:	2120      	movs	r1, #32
}
 8005dba:	bc10      	pop	{r4}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8005dbc:	4760      	bx	ip

08005dbe <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8005dbe:	b410      	push	{r4}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8005dc0:	6904      	ldr	r4, [r0, #16]
{
 8005dc2:	4613      	mov	r3, r2
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8005dc4:	46a4      	mov	ip, r4
 8005dc6:	460a      	mov	r2, r1
}
 8005dc8:	bc10      	pop	{r4}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8005dca:	2117      	movs	r1, #23
 8005dcc:	4760      	bx	ip

08005dce <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8005dce:	b507      	push	{r0, r1, r2, lr}
 8005dd0:	f88d 1007 	strb.w	r1, [sp, #7]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8005dd4:	f10d 0207 	add.w	r2, sp, #7
 8005dd8:	2101      	movs	r1, #1
 8005dda:	f7ff fff0 	bl	8005dbe <u8x8_byte_SendBytes>
}
 8005dde:	b003      	add	sp, #12
 8005de0:	f85d fb04 	ldr.w	pc, [sp], #4

08005de4 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8005de4:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8005de6:	68c4      	ldr	r4, [r0, #12]
{
 8005de8:	460a      	mov	r2, r1
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8005dea:	46a4      	mov	ip, r4
 8005dec:	2300      	movs	r3, #0
 8005dee:	2115      	movs	r1, #21
}
 8005df0:	bc10      	pop	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8005df2:	4760      	bx	ip

08005df4 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8005df4:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8005df6:	68c4      	ldr	r4, [r0, #12]
{
 8005df8:	460a      	mov	r2, r1
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8005dfa:	46a4      	mov	ip, r4
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	2116      	movs	r1, #22
}
 8005e00:	bc10      	pop	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8005e02:	4760      	bx	ip

08005e04 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8005e04:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8005e06:	68c4      	ldr	r4, [r0, #12]
{
 8005e08:	4613      	mov	r3, r2
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8005e0a:	46a4      	mov	ip, r4
 8005e0c:	460a      	mov	r2, r1
}
 8005e0e:	bc10      	pop	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8005e10:	2117      	movs	r1, #23
 8005e12:	4760      	bx	ip

08005e14 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8005e14:	2300      	movs	r3, #0
{
 8005e16:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8005e18:	68c4      	ldr	r4, [r0, #12]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	46a4      	mov	ip, r4
 8005e1e:	2118      	movs	r1, #24
}
 8005e20:	bc10      	pop	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8005e22:	4760      	bx	ip

08005e24 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8005e24:	2300      	movs	r3, #0
{
 8005e26:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8005e28:	68c4      	ldr	r4, [r0, #12]
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	46a4      	mov	ip, r4
 8005e2e:	2119      	movs	r1, #25
}
 8005e30:	bc10      	pop	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8005e32:	4760      	bx	ip

08005e34 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8005e34:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e36:	4605      	mov	r5, r0
 8005e38:	460c      	mov	r4, r1
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8005e3a:	7821      	ldrb	r1, [r4, #0]
    data++;
    switch( cmd )
 8005e3c:	2919      	cmp	r1, #25
 8005e3e:	d80d      	bhi.n	8005e5c <u8x8_cad_SendSequence+0x28>
 8005e40:	2917      	cmp	r1, #23
 8005e42:	d819      	bhi.n	8005e78 <u8x8_cad_SendSequence+0x44>
 8005e44:	d00e      	beq.n	8005e64 <u8x8_cad_SendSequence+0x30>
 8005e46:	2914      	cmp	r1, #20
 8005e48:	d90a      	bls.n	8005e60 <u8x8_cad_SendSequence+0x2c>
    {
      case U8X8_MSG_CAD_SEND_CMD:
      case U8X8_MSG_CAD_SEND_ARG:
	  v = *data;
 8005e4a:	7862      	ldrb	r2, [r4, #1]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	4628      	mov	r0, r5
 8005e50:	68ee      	ldr	r6, [r5, #12]
	  v = *data;
 8005e52:	f88d 2007 	strb.w	r2, [sp, #7]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8005e56:	47b0      	blx	r6
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
	  break;
      case 0x0fe:
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
 8005e58:	3402      	adds	r4, #2
	  break;
 8005e5a:	e7ee      	b.n	8005e3a <u8x8_cad_SendSequence+0x6>
    switch( cmd )
 8005e5c:	29fe      	cmp	r1, #254	@ 0xfe
 8005e5e:	d012      	beq.n	8005e86 <u8x8_cad_SendSequence+0x52>
      default:
	return;
    }
  }
}
 8005e60:	b002      	add	sp, #8
 8005e62:	bd70      	pop	{r4, r5, r6, pc}
	  v = *data;
 8005e64:	7863      	ldrb	r3, [r4, #1]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8005e66:	2101      	movs	r1, #1
 8005e68:	4628      	mov	r0, r5
 8005e6a:	f10d 0207 	add.w	r2, sp, #7
	  v = *data;
 8005e6e:	f88d 3007 	strb.w	r3, [sp, #7]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8005e72:	f7ff ffc7 	bl	8005e04 <u8x8_cad_SendData>
	  data++;
 8005e76:	e7ef      	b.n	8005e58 <u8x8_cad_SendSequence+0x24>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8005e78:	2300      	movs	r3, #0
 8005e7a:	4628      	mov	r0, r5
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	68ee      	ldr	r6, [r5, #12]
    data++;
 8005e80:	3401      	adds	r4, #1
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8005e82:	47b0      	blx	r6
	  break;
 8005e84:	e7d9      	b.n	8005e3a <u8x8_cad_SendSequence+0x6>
	  v = *data;
 8005e86:	7862      	ldrb	r2, [r4, #1]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8005e88:	2129      	movs	r1, #41	@ 0x29
 8005e8a:	4628      	mov	r0, r5
	  v = *data;
 8005e8c:	f88d 2007 	strb.w	r2, [sp, #7]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8005e90:	f000 f913 	bl	80060ba <u8x8_gpio_call>
 8005e94:	e7e0      	b.n	8005e58 <u8x8_cad_SendSequence+0x24>

08005e96 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8005e96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e9a:	461f      	mov	r7, r3
  switch(msg)
 8005e9c:	f1a1 0314 	sub.w	r3, r1, #20
{
 8005ea0:	4604      	mov	r4, r0
 8005ea2:	460d      	mov	r5, r1
 8005ea4:	4616      	mov	r6, r2
  switch(msg)
 8005ea6:	2b05      	cmp	r3, #5
 8005ea8:	d81b      	bhi.n	8005ee2 <u8x8_cad_001+0x4c>
 8005eaa:	e8df f003 	tbb	[pc, r3]
 8005eae:	0310      	.short	0x0310
 8005eb0:	10100d03 	.word	0x10100d03
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	f7ff ff7a 	bl	8005dae <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8005eba:	4631      	mov	r1, r6
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	f7ff ff86 	bl	8005dce <u8x8_byte_SendByte>
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    default:
      return 0;
  }
  return 1;
 8005ec2:	2001      	movs	r0, #1
}
 8005ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      u8x8_byte_SetDC(u8x8, 1);
 8005ec8:	2101      	movs	r1, #1
 8005eca:	f7ff ff70 	bl	8005dae <u8x8_byte_SetDC>
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8005ece:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8005ed2:	463b      	mov	r3, r7
 8005ed4:	4632      	mov	r2, r6
 8005ed6:	4629      	mov	r1, r5
 8005ed8:	4620      	mov	r0, r4
 8005eda:	46f4      	mov	ip, lr
}
 8005edc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8005ee0:	4760      	bx	ip
  switch(msg)
 8005ee2:	2000      	movs	r0, #0
 8005ee4:	e7ee      	b.n	8005ec4 <u8x8_cad_001+0x2e>
	...

08005ee8 <u8x8_d_ssd1306_sh1106_generic>:

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8005ee8:	390b      	subs	r1, #11
{
 8005eea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eec:	4604      	mov	r4, r0
 8005eee:	4615      	mov	r5, r2
 8005ef0:	461e      	mov	r6, r3
  switch(msg)
 8005ef2:	2904      	cmp	r1, #4
 8005ef4:	d855      	bhi.n	8005fa2 <u8x8_d_ssd1306_sh1106_generic+0xba>
 8005ef6:	e8df f001 	tbb	[pc, r1]
 8005efa:	5403      	.short	0x5403
 8005efc:	1b0c      	.short	0x1b0c
 8005efe:	29          	.byte	0x29
 8005eff:	00          	.byte	0x00
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8005f00:	b92a      	cbnz	r2, 8005f0e <u8x8_d_ssd1306_sh1106_generic+0x26>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 8005f02:	4929      	ldr	r1, [pc, #164]	@ (8005fa8 <u8x8_d_ssd1306_sh1106_generic+0xc0>)
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8005f04:	4620      	mov	r0, r4
 8005f06:	f7ff ff95 	bl	8005e34 <u8x8_cad_SendSequence>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
 8005f0a:	2001      	movs	r0, #1
}
 8005f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8005f0e:	4927      	ldr	r1, [pc, #156]	@ (8005fac <u8x8_d_ssd1306_sh1106_generic+0xc4>)
 8005f10:	e7f8      	b.n	8005f04 <u8x8_d_ssd1306_sh1106_generic+0x1c>
      if ( arg_int == 0 )
 8005f12:	b93a      	cbnz	r2, 8005f24 <u8x8_d_ssd1306_sh1106_generic+0x3c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 8005f14:	4926      	ldr	r1, [pc, #152]	@ (8005fb0 <u8x8_d_ssd1306_sh1106_generic+0xc8>)
 8005f16:	f7ff ff8d 	bl	8005e34 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8005f1a:	6823      	ldr	r3, [r4, #0]
 8005f1c:	7c9b      	ldrb	r3, [r3, #18]
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8005f1e:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 8005f22:	e7f2      	b.n	8005f0a <u8x8_d_ssd1306_sh1106_generic+0x22>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 8005f24:	4923      	ldr	r1, [pc, #140]	@ (8005fb4 <u8x8_d_ssd1306_sh1106_generic+0xcc>)
 8005f26:	f7ff ff85 	bl	8005e34 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8005f2a:	6823      	ldr	r3, [r4, #0]
 8005f2c:	7cdb      	ldrb	r3, [r3, #19]
 8005f2e:	e7f6      	b.n	8005f1e <u8x8_d_ssd1306_sh1106_generic+0x36>
      u8x8_cad_StartTransfer(u8x8);
 8005f30:	f7ff ff70 	bl	8005e14 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8005f34:	2181      	movs	r1, #129	@ 0x81
 8005f36:	4620      	mov	r0, r4
 8005f38:	f7ff ff54 	bl	8005de4 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 8005f3c:	4629      	mov	r1, r5
 8005f3e:	4620      	mov	r0, r4
 8005f40:	f7ff ff58 	bl	8005df4 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8005f44:	4620      	mov	r0, r4
 8005f46:	f7ff ff6d 	bl	8005e24 <u8x8_cad_EndTransfer>
      break;
 8005f4a:	e7de      	b.n	8005f0a <u8x8_d_ssd1306_sh1106_generic+0x22>
      u8x8_cad_StartTransfer(u8x8);
 8005f4c:	f7ff ff62 	bl	8005e14 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8005f50:	7973      	ldrb	r3, [r6, #5]
      x += u8x8->x_offset;
 8005f52:	f894 7022 	ldrb.w	r7, [r4, #34]	@ 0x22
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8005f56:	2140      	movs	r1, #64	@ 0x40
      x += u8x8->x_offset;
 8005f58:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
 8005f5c:	f007 07ff 	and.w	r7, r7, #255	@ 0xff
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8005f60:	4620      	mov	r0, r4
 8005f62:	f7ff ff3f 	bl	8005de4 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8005f66:	0939      	lsrs	r1, r7, #4
 8005f68:	f041 0110 	orr.w	r1, r1, #16
 8005f6c:	4620      	mov	r0, r4
 8005f6e:	f7ff ff39 	bl	8005de4 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 8005f72:	f007 010f 	and.w	r1, r7, #15
 8005f76:	4620      	mov	r0, r4
 8005f78:	f7ff ff3c 	bl	8005df4 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 8005f7c:	79b1      	ldrb	r1, [r6, #6]
 8005f7e:	4620      	mov	r0, r4
 8005f80:	f041 01b0 	orr.w	r1, r1, #176	@ 0xb0
 8005f84:	f7ff ff36 	bl	8005df4 <u8x8_cad_SendArg>
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8005f88:	7931      	ldrb	r1, [r6, #4]
 8005f8a:	4620      	mov	r0, r4
 8005f8c:	00c9      	lsls	r1, r1, #3
 8005f8e:	6832      	ldr	r2, [r6, #0]
 8005f90:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
	arg_int--;
 8005f94:	3d01      	subs	r5, #1
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8005f96:	f7ff ff35 	bl	8005e04 <u8x8_cad_SendData>
      } while( arg_int > 0 );
 8005f9a:	f015 05ff 	ands.w	r5, r5, #255	@ 0xff
 8005f9e:	d1f3      	bne.n	8005f88 <u8x8_d_ssd1306_sh1106_generic+0xa0>
 8005fa0:	e7d0      	b.n	8005f44 <u8x8_d_ssd1306_sh1106_generic+0x5c>
  switch(msg)
 8005fa2:	2000      	movs	r0, #0
 8005fa4:	e7b2      	b.n	8005f0c <u8x8_d_ssd1306_sh1106_generic+0x24>
 8005fa6:	bf00      	nop
 8005fa8:	0800b323 	.word	0x0800b323
 8005fac:	0800b31e 	.word	0x0800b31e
 8005fb0:	0800b317 	.word	0x0800b317
 8005fb4:	0800b310 	.word	0x0800b310

08005fb8 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8005fb8:	b538      	push	{r3, r4, r5, lr}
 8005fba:	4604      	mov	r4, r0
 8005fbc:	460d      	mov	r5, r1
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8005fbe:	f7ff ff93 	bl	8005ee8 <u8x8_d_ssd1306_sh1106_generic>
 8005fc2:	b950      	cbnz	r0, 8005fda <u8x8_d_ssd1306_128x64_noname+0x22>
    return 1;
  
  switch(msg)
 8005fc4:	2d09      	cmp	r5, #9
 8005fc6:	d00a      	beq.n	8005fde <u8x8_d_ssd1306_128x64_noname+0x26>
 8005fc8:	2d0a      	cmp	r5, #10
 8005fca:	d107      	bne.n	8005fdc <u8x8_d_ssd1306_128x64_noname+0x24>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8005fcc:	4620      	mov	r0, r4
 8005fce:	f000 f814 	bl	8005ffa <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	4904      	ldr	r1, [pc, #16]	@ (8005fe8 <u8x8_d_ssd1306_128x64_noname+0x30>)
 8005fd6:	f7ff ff2d 	bl	8005e34 <u8x8_cad_SendSequence>
    return 1;
 8005fda:	2001      	movs	r0, #1
      break;
    default:
      return 0;
  }
  return 1;
}
 8005fdc:	bd38      	pop	{r3, r4, r5, pc}
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 8005fde:	4620      	mov	r0, r4
 8005fe0:	4902      	ldr	r1, [pc, #8]	@ (8005fec <u8x8_d_ssd1306_128x64_noname+0x34>)
 8005fe2:	f000 f805 	bl	8005ff0 <u8x8_d_helper_display_setup_memory>
      break;
 8005fe6:	e7f8      	b.n	8005fda <u8x8_d_ssd1306_128x64_noname+0x22>
 8005fe8:	0800b328 	.word	0x0800b328
 8005fec:	0800b2f8 	.word	0x0800b2f8

08005ff0 <u8x8_d_helper_display_setup_memory>:
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8005ff0:	6001      	str	r1, [r0, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8005ff2:	7c8b      	ldrb	r3, [r1, #18]
 8005ff4:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
}
 8005ff8:	4770      	bx	lr

08005ffa <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8005ffa:	b538      	push	{r3, r4, r5, lr}
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	2128      	movs	r1, #40	@ 0x28
 8006000:	461a      	mov	r2, r3
 8006002:	6945      	ldr	r5, [r0, #20]
{
 8006004:	4604      	mov	r4, r0
      u8x8_gpio_Init(u8x8);
 8006006:	47a8      	blx	r5
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8006008:	2300      	movs	r3, #0
 800600a:	2114      	movs	r1, #20
 800600c:	461a      	mov	r2, r3
 800600e:	4620      	mov	r0, r4
 8006010:	68e5      	ldr	r5, [r4, #12]
 8006012:	47a8      	blx	r5

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8006014:	4620      	mov	r0, r4
 8006016:	2201      	movs	r2, #1
 8006018:	214b      	movs	r1, #75	@ 0x4b
 800601a:	f000 f84e 	bl	80060ba <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800601e:	6823      	ldr	r3, [r4, #0]
 8006020:	4620      	mov	r0, r4
 8006022:	791a      	ldrb	r2, [r3, #4]
 8006024:	2129      	movs	r1, #41	@ 0x29
 8006026:	f000 f848 	bl	80060ba <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 800602a:	4620      	mov	r0, r4
 800602c:	2200      	movs	r2, #0
 800602e:	214b      	movs	r1, #75	@ 0x4b
 8006030:	f000 f843 	bl	80060ba <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8006034:	6823      	ldr	r3, [r4, #0]
 8006036:	4620      	mov	r0, r4
 8006038:	791a      	ldrb	r2, [r3, #4]
 800603a:	2129      	movs	r1, #41	@ 0x29
 800603c:	f000 f83d 	bl	80060ba <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8006040:	4620      	mov	r0, r4
 8006042:	2201      	movs	r2, #1
 8006044:	214b      	movs	r1, #75	@ 0x4b
 8006046:	f000 f838 	bl	80060ba <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800604a:	6823      	ldr	r3, [r4, #0]
 800604c:	4620      	mov	r0, r4
 800604e:	795a      	ldrb	r2, [r3, #5]
 8006050:	2129      	movs	r1, #41	@ 0x29
}    
 8006052:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8006056:	f000 b830 	b.w	80060ba <u8x8_gpio_call>

0800605a <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 800605a:	b513      	push	{r0, r1, r4, lr}
  u8x8_tile_t tile;
  tile.x_pos = x;
  tile.y_pos = y;
  tile.cnt = cnt;
 800605c:	f88d 3004 	strb.w	r3, [sp, #4]
  tile.tile_ptr = tile_ptr;
 8006060:	9b04      	ldr	r3, [sp, #16]
  tile.x_pos = x;
 8006062:	f88d 1005 	strb.w	r1, [sp, #5]
  tile.y_pos = y;
 8006066:	f88d 2006 	strb.w	r2, [sp, #6]
  tile.tile_ptr = tile_ptr;
 800606a:	9300      	str	r3, [sp, #0]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800606c:	2201      	movs	r2, #1
 800606e:	466b      	mov	r3, sp
 8006070:	210f      	movs	r1, #15
 8006072:	6884      	ldr	r4, [r0, #8]
 8006074:	47a0      	blx	r4
}
 8006076:	b002      	add	sp, #8
 8006078:	bd10      	pop	{r4, pc}

0800607a <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 800607a:	2300      	movs	r3, #0
{
 800607c:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 800607e:	6884      	ldr	r4, [r0, #8]
 8006080:	461a      	mov	r2, r3
 8006082:	46a4      	mov	ip, r4
 8006084:	2109      	movs	r1, #9
}
 8006086:	bc10      	pop	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8006088:	4760      	bx	ip

0800608a <u8x8_InitDisplay>:
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 800608a:	2300      	movs	r3, #0
{
 800608c:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 800608e:	6884      	ldr	r4, [r0, #8]
 8006090:	461a      	mov	r2, r3
 8006092:	46a4      	mov	ip, r4
 8006094:	210a      	movs	r1, #10
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 8006096:	bc10      	pop	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8006098:	4760      	bx	ip

0800609a <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 800609a:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800609c:	6884      	ldr	r4, [r0, #8]
{
 800609e:	460a      	mov	r2, r1
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80060a0:	46a4      	mov	ip, r4
 80060a2:	2300      	movs	r3, #0
 80060a4:	210b      	movs	r1, #11
}
 80060a6:	bc10      	pop	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80060a8:	4760      	bx	ip

080060aa <u8x8_RefreshDisplay>:
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);
 80060aa:	2300      	movs	r3, #0
{
 80060ac:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);
 80060ae:	6884      	ldr	r4, [r0, #8]
 80060b0:	461a      	mov	r2, r3
 80060b2:	46a4      	mov	ip, r4
 80060b4:	2110      	movs	r1, #16
  //++FPS_Count;
}
 80060b6:	bc10      	pop	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);
 80060b8:	4760      	bx	ip

080060ba <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80060ba:	b410      	push	{r4}
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80060bc:	6944      	ldr	r4, [r0, #20]
 80060be:	2300      	movs	r3, #0
 80060c0:	46a4      	mov	ip, r4
}
 80060c2:	bc10      	pop	{r4}
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80060c4:	4760      	bx	ip

080060c6 <u8x8_dummy_cb>:
/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
}
 80060c6:	2000      	movs	r0, #0
 80060c8:	4770      	bx	lr
	...

080060cc <u8x8_SetupDefaults>:
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    u8x8->display_info = NULL;
 80060cc:	2300      	movs	r3, #0
 80060ce:	6003      	str	r3, [r0, #0]
    u8x8->display_cb = u8x8_dummy_cb;
    u8x8->cad_cb = u8x8_dummy_cb;
    u8x8->byte_cb = u8x8_dummy_cb;
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
    u8x8->is_font_inverse_mode = 0;
 80060d0:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80060d4:	f880 3026 	strb.w	r3, [r0, #38]	@ 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 80060d8:	6183      	str	r3, [r0, #24]
    u8x8->i2c_address = 255;
 80060da:	23ff      	movs	r3, #255	@ 0xff
    u8x8->display_cb = u8x8_dummy_cb;
 80060dc:	4a04      	ldr	r2, [pc, #16]	@ (80060f0 <u8x8_SetupDefaults+0x24>)
    u8x8->i2c_address = 255;
 80060de:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    u8x8->cad_cb = u8x8_dummy_cb;
 80060e2:	e9c0 2202 	strd	r2, r2, [r0, #8]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 80060e6:	e9c0 2204 	strd	r2, r2, [r0, #16]
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80060ea:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 80060ee:	4770      	bx	lr
 80060f0:	080060c7 	.word	0x080060c7

080060f4 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80060f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f6:	4616      	mov	r6, r2
 80060f8:	461d      	mov	r5, r3
 80060fa:	9f06      	ldr	r7, [sp, #24]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 80060fc:	f7ff ffe6 	bl	80060cc <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
  u8x8->cad_cb = cad_cb;
 8006100:	e9c0 1602 	strd	r1, r6, [r0, #8]
  u8x8->byte_cb = byte_cb;
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8006104:	e9c0 5704 	strd	r5, r7, [r0, #16]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
}
 8006108:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  u8x8_SetupMemory(u8x8);
 800610c:	f7ff bfb5 	b.w	800607a <u8x8_SetupMemory>

08006110 <_ZN12HALDreamCore16_getCanvasBufferEv>:
  u8g2_SetFont(&canvasBuffer, u8g2_font_myfont); /*字库选择*/
}

void *HALDreamCore::_getCanvasBuffer() {
  return u8g2_GetBufferPtr(&canvasBuffer);
}
 8006110:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8006112:	4770      	bx	lr

08006114 <_ZN12HALDreamCore20_getBufferTileHeightEv>:

unsigned char HALDreamCore::_getBufferTileHeight() {
  return u8g2_GetBufferTileHeight(&canvasBuffer);
}
 8006114:	f890 0048 	ldrb.w	r0, [r0, #72]	@ 0x48
 8006118:	4770      	bx	lr

0800611a <_ZN12HALDreamCore19_getBufferTileWidthEv>:

unsigned char HALDreamCore::_getBufferTileWidth() {
  return u8g2_GetBufferTileWidth(&canvasBuffer);
 800611a:	6903      	ldr	r3, [r0, #16]
}
 800611c:	7c18      	ldrb	r0, [r3, #16]
 800611e:	4770      	bx	lr

08006120 <_ZN12HALDreamCore14_getFontHeightEv>:
  return u8g2_GetUTF8Width(&canvasBuffer, _text.c_str());
}

unsigned char HALDreamCore::_getFontHeight() {
  return u8g2_GetMaxCharHeight(&canvasBuffer);
}
 8006120:	f890 008e 	ldrb.w	r0, [r0, #142]	@ 0x8e
 8006124:	4770      	bx	lr

08006126 <_ZN12HALDreamCoreD1Ev>:
#ifndef ASTRA_CORE_SRC_HAL_HAL_DREAMCORE_HAL_DREAMCORE_H_
#define ASTRA_CORE_SRC_HAL_HAL_DREAMCORE_HAL_DREAMCORE_H_
#include "../hal.h"
#include "components/oled/graph_lib/u8g2/u8g2.h"

class HALDreamCore : public HAL {
 8006126:	4770      	bx	lr

08006128 <_ZN12HALDreamCore26_u8x8_byte_hw_spi_callbackEP11u8x8_structhhPv>:
unsigned char HALDreamCore::_u8x8_byte_hw_spi_callback(u8x8_t *_u8x8, unsigned char _msg, unsigned char _argInt, void *_argPtr) { //NOLINT
 8006128:	b538      	push	{r3, r4, r5, lr}
 800612a:	4604      	mov	r4, r0
 800612c:	4608      	mov	r0, r1
  switch (_msg) {
 800612e:	3814      	subs	r0, #20
unsigned char HALDreamCore::_u8x8_byte_hw_spi_callback(u8x8_t *_u8x8, unsigned char _msg, unsigned char _argInt, void *_argPtr) { //NOLINT
 8006130:	4619      	mov	r1, r3
  switch (_msg) {
 8006132:	280c      	cmp	r0, #12
 8006134:	d834      	bhi.n	80061a0 <_ZN12HALDreamCore26_u8x8_byte_hw_spi_callbackEP11u8x8_structhhPv+0x78>
 8006136:	e8df f000 	tbb	[pc, r0]
 800613a:	330f      	.short	0x330f
 800613c:	25170733 	.word	0x25170733
 8006140:	33333333 	.word	0x33333333
 8006144:	3333      	.short	0x3333
 8006146:	11          	.byte	0x11
 8006147:	00          	.byte	0x00
      HAL_SPI_Transmit_DMA(&hspi2, (unsigned char *) _argPtr, _argInt);
 8006148:	4816      	ldr	r0, [pc, #88]	@ (80061a4 <_ZN12HALDreamCore26_u8x8_byte_hw_spi_callbackEP11u8x8_structhhPv+0x7c>)
 800614a:	f001 fcbd 	bl	8007ac8 <HAL_SPI_Transmit_DMA>
      while (hspi2.TxXferCount);//DMA
 800614e:	4a15      	ldr	r2, [pc, #84]	@ (80061a4 <_ZN12HALDreamCore26_u8x8_byte_hw_spi_callbackEP11u8x8_structhhPv+0x7c>)
 8006150:	8ed3      	ldrh	r3, [r2, #54]	@ 0x36
 8006152:	b29b      	uxth	r3, r3
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1fb      	bne.n	8006150 <_ZN12HALDreamCore26_u8x8_byte_hw_spi_callbackEP11u8x8_structhhPv+0x28>
  return 1;
 8006158:	2001      	movs	r0, #1
}
 800615a:	bd38      	pop	{r3, r4, r5, pc}
      HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, static_cast<GPIO_PinState>(_argInt));
 800615c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006160:	4811      	ldr	r0, [pc, #68]	@ (80061a8 <_ZN12HALDreamCore26_u8x8_byte_hw_spi_callbackEP11u8x8_structhhPv+0x80>)
 8006162:	f001 f881 	bl	8007268 <HAL_GPIO_WritePin>
      break;
 8006166:	e7f7      	b.n	8006158 <_ZN12HALDreamCore26_u8x8_byte_hw_spi_callbackEP11u8x8_structhhPv+0x30>
      u8x8_gpio_SetCS(_u8x8, _u8x8->display_info->chip_enable_level);
 8006168:	6823      	ldr	r3, [r4, #0]
 800616a:	4620      	mov	r0, r4
 800616c:	781a      	ldrb	r2, [r3, #0]
 800616e:	2149      	movs	r1, #73	@ 0x49
 8006170:	f7ff ffa3 	bl	80060ba <u8x8_gpio_call>
      _u8x8->gpio_and_delay_cb(_u8x8, U8X8_MSG_DELAY_NANO, _u8x8->display_info->post_chip_enable_wait_ns, nullptr);
 8006174:	6822      	ldr	r2, [r4, #0]
 8006176:	2300      	movs	r3, #0
 8006178:	212c      	movs	r1, #44	@ 0x2c
 800617a:	4620      	mov	r0, r4
 800617c:	6965      	ldr	r5, [r4, #20]
 800617e:	7892      	ldrb	r2, [r2, #2]
 8006180:	47a8      	blx	r5
      break;
 8006182:	e7e9      	b.n	8006158 <_ZN12HALDreamCore26_u8x8_byte_hw_spi_callbackEP11u8x8_structhhPv+0x30>
                               _u8x8->display_info->pre_chip_disable_wait_ns,
 8006184:	6822      	ldr	r2, [r4, #0]
      _u8x8->gpio_and_delay_cb(_u8x8,
 8006186:	2300      	movs	r3, #0
 8006188:	212c      	movs	r1, #44	@ 0x2c
 800618a:	4620      	mov	r0, r4
 800618c:	6965      	ldr	r5, [r4, #20]
 800618e:	78d2      	ldrb	r2, [r2, #3]
 8006190:	47a8      	blx	r5
      u8x8_gpio_SetCS(_u8x8, _u8x8->display_info->chip_disable_level);
 8006192:	6823      	ldr	r3, [r4, #0]
 8006194:	2149      	movs	r1, #73	@ 0x49
 8006196:	4620      	mov	r0, r4
 8006198:	785a      	ldrb	r2, [r3, #1]
 800619a:	f7ff ff8e 	bl	80060ba <u8x8_gpio_call>
      break;
 800619e:	e7db      	b.n	8006158 <_ZN12HALDreamCore26_u8x8_byte_hw_spi_callbackEP11u8x8_structhhPv+0x30>
  switch (_msg) {
 80061a0:	2000      	movs	r0, #0
 80061a2:	e7da      	b.n	800615a <_ZN12HALDreamCore26_u8x8_byte_hw_spi_callbackEP11u8x8_structhhPv+0x32>
 80061a4:	20003ef4 	.word	0x20003ef4
 80061a8:	40010800 	.word	0x40010800

080061ac <_ZN12HALDreamCore12_canvasClearEv>:
  u8g2_ClearBuffer(&canvasBuffer);
 80061ac:	3010      	adds	r0, #16
 80061ae:	f7fe bfd5 	b.w	800515c <u8g2_ClearBuffer>

080061b2 <_ZN12HALDreamCore8_setFontEPKh>:
void HALDreamCore::_setFont(const unsigned char *_font) {
 80061b2:	b538      	push	{r3, r4, r5, lr}
 80061b4:	460d      	mov	r5, r1
  u8g2_SetFontMode(&canvasBuffer, 1); /*字体模式选择*/
 80061b6:	f100 0410 	add.w	r4, r0, #16
 80061ba:	4620      	mov	r0, r4
 80061bc:	2101      	movs	r1, #1
 80061be:	f7ff fb4c 	bl	800585a <u8g2_SetFontMode>
  u8g2_SetFontDirection(&canvasBuffer, 0); /*字体方向选择*/
 80061c2:	4620      	mov	r0, r4
 80061c4:	2100      	movs	r1, #0
 80061c6:	f7ff fc07 	bl	80059d8 <u8g2_SetFontDirection>
  u8g2_SetFont(&canvasBuffer, _font);
 80061ca:	4629      	mov	r1, r5
 80061cc:	4620      	mov	r0, r4
}
 80061ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  u8g2_SetFont(&canvasBuffer, _font);
 80061d2:	f7ff bbeb 	b.w	80059ac <u8g2_SetFont>

080061d6 <_ZN12HALDreamCore13_canvasUpdateEv>:
  u8g2_SendBuffer(&canvasBuffer);
 80061d6:	3010      	adds	r0, #16
 80061d8:	f7fe bfca 	b.w	8005170 <u8g2_SendBuffer>

080061dc <_ZN12HALDreamCore13_getFontWidthERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
unsigned char HALDreamCore::_getFontWidth(std::string &_text) {
 80061dc:	b508      	push	{r3, lr}
  return u8g2_GetUTF8Width(&canvasBuffer, _text.c_str());
 80061de:	6809      	ldr	r1, [r1, #0]
 80061e0:	3010      	adds	r0, #16
 80061e2:	f7ff fbf3 	bl	80059cc <u8g2_GetUTF8Width>
}
 80061e6:	b2c0      	uxtb	r0, r0
 80061e8:	bd08      	pop	{r3, pc}

080061ea <_ZN12HALDreamCore12_setDrawTypeEh>:

void HALDreamCore::_setDrawType(unsigned char _type) {
  u8g2_SetDrawColor(&canvasBuffer, _type);
 80061ea:	3010      	adds	r0, #16
 80061ec:	f7ff bc90 	b.w	8005b10 <u8g2_SetDrawColor>

080061f0 <_ZN12HALDreamCore10_drawPixelEff>:
}

void HALDreamCore::_drawPixel(float _x, float _y) {
 80061f0:	b570      	push	{r4, r5, r6, lr}
 80061f2:	4604      	mov	r4, r0
  { return __builtin_roundf(__x); }
 80061f4:	4608      	mov	r0, r1
 80061f6:	4615      	mov	r5, r2
 80061f8:	f002 fab4 	bl	8008764 <roundf>
 80061fc:	4606      	mov	r6, r0
 80061fe:	4628      	mov	r0, r5
 8006200:	f002 fab0 	bl	8008764 <roundf>
  u8g2_DrawPixel(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y));
 8006204:	f7fa fe68 	bl	8000ed8 <__aeabi_f2iz>
 8006208:	b285      	uxth	r5, r0
 800620a:	4630      	mov	r0, r6
 800620c:	f7fa fe64 	bl	8000ed8 <__aeabi_f2iz>
 8006210:	462a      	mov	r2, r5
 8006212:	b281      	uxth	r1, r0
 8006214:	f104 0010 	add.w	r0, r4, #16
}
 8006218:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  u8g2_DrawPixel(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y));
 800621c:	f7ff bc60 	b.w	8005ae0 <u8g2_DrawPixel>

08006220 <_ZN12HALDreamCore16_drawVDottedLineEfff>:

void HALDreamCore::_drawChinese(float _x, float _y, const std::string &_text) {
  u8g2_DrawUTF8(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y), _text.c_str());
}

void HALDreamCore::_drawVDottedLine(float _x, float _y, float _h) {
 8006220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006224:	4605      	mov	r5, r0
 8006226:	4618      	mov	r0, r3
 8006228:	460f      	mov	r7, r1
 800622a:	4690      	mov	r8, r2
 800622c:	f002 fa9a 	bl	8008764 <roundf>
  for (unsigned char i = 0; i < (unsigned char)std::round(_h); i++) {
 8006230:	f7fa fe78 	bl	8000f24 <__aeabi_f2uiz>
 8006234:	2400      	movs	r4, #0
 8006236:	fa5f fa80 	uxtb.w	sl, r0
    if (i % 8 == 0 | (i - 1) % 8 == 0 | (i - 2) % 8 == 0) continue;
    u8g2_DrawPixel(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y) + i);
 800623a:	3510      	adds	r5, #16
 800623c:	b2e2      	uxtb	r2, r4
  for (unsigned char i = 0; i < (unsigned char)std::round(_h); i++) {
 800623e:	4592      	cmp	sl, r2
 8006240:	d801      	bhi.n	8006246 <_ZN12HALDreamCore16_drawVDottedLineEfff+0x26>
  }
}
 8006242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (i % 8 == 0 | (i - 1) % 8 == 0 | (i - 2) % 8 == 0) continue;
 8006246:	1e63      	subs	r3, r4, #1
 8006248:	f013 0f07 	tst.w	r3, #7
 800624c:	bf0c      	ite	eq
 800624e:	2301      	moveq	r3, #1
 8006250:	2300      	movne	r3, #0
 8006252:	f012 0f07 	tst.w	r2, #7
 8006256:	bf08      	it	eq
 8006258:	f043 0301 	orreq.w	r3, r3, #1
 800625c:	b9ab      	cbnz	r3, 800628a <_ZN12HALDreamCore16_drawVDottedLineEfff+0x6a>
 800625e:	1ea3      	subs	r3, r4, #2
 8006260:	075b      	lsls	r3, r3, #29
 8006262:	d012      	beq.n	800628a <_ZN12HALDreamCore16_drawVDottedLineEfff+0x6a>
 8006264:	4638      	mov	r0, r7
 8006266:	f002 fa7d 	bl	8008764 <roundf>
 800626a:	4681      	mov	r9, r0
 800626c:	4640      	mov	r0, r8
 800626e:	f002 fa79 	bl	8008764 <roundf>
    u8g2_DrawPixel(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y) + i);
 8006272:	f7fa fe31 	bl	8000ed8 <__aeabi_f2iz>
 8006276:	1906      	adds	r6, r0, r4
 8006278:	4648      	mov	r0, r9
 800627a:	f7fa fe2d 	bl	8000ed8 <__aeabi_f2iz>
 800627e:	b2b6      	uxth	r6, r6
 8006280:	b281      	uxth	r1, r0
 8006282:	4632      	mov	r2, r6
 8006284:	4628      	mov	r0, r5
 8006286:	f7ff fc2b 	bl	8005ae0 <u8g2_DrawPixel>
  for (unsigned char i = 0; i < (unsigned char)std::round(_h); i++) {
 800628a:	3401      	adds	r4, #1
 800628c:	e7d6      	b.n	800623c <_ZN12HALDreamCore16_drawVDottedLineEfff+0x1c>

0800628e <_ZN12HALDreamCore16_drawHDottedLineEfff>:

void HALDreamCore::_drawHDottedLine(float _x, float _y, float _l) {
 800628e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006292:	460f      	mov	r7, r1
 8006294:	4690      	mov	r8, r2
 8006296:	461d      	mov	r5, r3
  for (unsigned char i = 0; i < _l; i++) {
 8006298:	2600      	movs	r6, #0
    if (i % 8 == 0 | (i - 1) % 8 == 0 | (i - 2) % 8 == 0) continue;
    u8g2_DrawPixel(&canvasBuffer, (int16_t)std::round(_x) + i, (int16_t)std::round(_y));
 800629a:	f100 0910 	add.w	r9, r0, #16
 800629e:	b2f4      	uxtb	r4, r6
  for (unsigned char i = 0; i < _l; i++) {
 80062a0:	4620      	mov	r0, r4
 80062a2:	f7fa fbff 	bl	8000aa4 <__aeabi_i2f>
 80062a6:	4629      	mov	r1, r5
 80062a8:	f7fa fdee 	bl	8000e88 <__aeabi_fcmplt>
 80062ac:	b908      	cbnz	r0, 80062b2 <_ZN12HALDreamCore16_drawHDottedLineEfff+0x24>
  }
}
 80062ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (i % 8 == 0 | (i - 1) % 8 == 0 | (i - 2) % 8 == 0) continue;
 80062b2:	1e63      	subs	r3, r4, #1
 80062b4:	f013 0f07 	tst.w	r3, #7
 80062b8:	bf0c      	ite	eq
 80062ba:	2301      	moveq	r3, #1
 80062bc:	2300      	movne	r3, #0
 80062be:	1ea2      	subs	r2, r4, #2
 80062c0:	f012 0f07 	tst.w	r2, #7
 80062c4:	bf08      	it	eq
 80062c6:	f043 0301 	orreq.w	r3, r3, #1
 80062ca:	b9ab      	cbnz	r3, 80062f8 <_ZN12HALDreamCore16_drawHDottedLineEfff+0x6a>
 80062cc:	0763      	lsls	r3, r4, #29
 80062ce:	d013      	beq.n	80062f8 <_ZN12HALDreamCore16_drawHDottedLineEfff+0x6a>
 80062d0:	4638      	mov	r0, r7
 80062d2:	f002 fa47 	bl	8008764 <roundf>
 80062d6:	4683      	mov	fp, r0
 80062d8:	4640      	mov	r0, r8
 80062da:	f002 fa43 	bl	8008764 <roundf>
    u8g2_DrawPixel(&canvasBuffer, (int16_t)std::round(_x) + i, (int16_t)std::round(_y));
 80062de:	f7fa fdfb 	bl	8000ed8 <__aeabi_f2iz>
 80062e2:	fa1f fa80 	uxth.w	sl, r0
 80062e6:	4658      	mov	r0, fp
 80062e8:	f7fa fdf6 	bl	8000ed8 <__aeabi_f2iz>
 80062ec:	1821      	adds	r1, r4, r0
 80062ee:	4652      	mov	r2, sl
 80062f0:	4648      	mov	r0, r9
 80062f2:	b289      	uxth	r1, r1
 80062f4:	f7ff fbf4 	bl	8005ae0 <u8g2_DrawPixel>
  for (unsigned char i = 0; i < _l; i++) {
 80062f8:	3601      	adds	r6, #1
 80062fa:	e7d0      	b.n	800629e <_ZN12HALDreamCore16_drawHDottedLineEfff+0x10>

080062fc <_ZN12HALDreamCore12_drawEnglishEffRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
void HALDreamCore::_drawEnglish(float _x, float _y, const std::string &_text) {
 80062fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006300:	4604      	mov	r4, r0
 8006302:	4608      	mov	r0, r1
 8006304:	4615      	mov	r5, r2
 8006306:	461e      	mov	r6, r3
 8006308:	f002 fa2c 	bl	8008764 <roundf>
 800630c:	4607      	mov	r7, r0
 800630e:	4628      	mov	r0, r5
 8006310:	f002 fa28 	bl	8008764 <roundf>
  u8g2_DrawStr(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y), _text.c_str());
 8006314:	f7fa fde0 	bl	8000ed8 <__aeabi_f2iz>
 8006318:	b285      	uxth	r5, r0
 800631a:	4638      	mov	r0, r7
 800631c:	f7fa fddc 	bl	8000ed8 <__aeabi_f2iz>
 8006320:	462a      	mov	r2, r5
 8006322:	6833      	ldr	r3, [r6, #0]
 8006324:	b281      	uxth	r1, r0
 8006326:	f104 0010 	add.w	r0, r4, #16
}
 800632a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  u8g2_DrawStr(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y), _text.c_str());
 800632e:	f7ff bafb 	b.w	8005928 <u8g2_DrawStr>

08006332 <_ZN12HALDreamCore12_drawChineseEffRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
void HALDreamCore::_drawChinese(float _x, float _y, const std::string &_text) {
 8006332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006336:	4604      	mov	r4, r0
 8006338:	4608      	mov	r0, r1
 800633a:	4615      	mov	r5, r2
 800633c:	461e      	mov	r6, r3
 800633e:	f002 fa11 	bl	8008764 <roundf>
 8006342:	4607      	mov	r7, r0
 8006344:	4628      	mov	r0, r5
 8006346:	f002 fa0d 	bl	8008764 <roundf>
  u8g2_DrawUTF8(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y), _text.c_str());
 800634a:	f7fa fdc5 	bl	8000ed8 <__aeabi_f2iz>
 800634e:	b285      	uxth	r5, r0
 8006350:	4638      	mov	r0, r7
 8006352:	f7fa fdc1 	bl	8000ed8 <__aeabi_f2iz>
 8006356:	462a      	mov	r2, r5
 8006358:	6833      	ldr	r3, [r6, #0]
 800635a:	b281      	uxth	r1, r0
 800635c:	f104 0010 	add.w	r0, r4, #16
}
 8006360:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  u8g2_DrawUTF8(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y), _text.c_str());
 8006364:	f7ff bae8 	b.w	8005938 <u8g2_DrawUTF8>

08006368 <_ZN12HALDreamCore10_drawVLineEfff>:

void HALDreamCore::_drawVLine(float _x, float _y, float _h) {
 8006368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800636c:	4604      	mov	r4, r0
 800636e:	4608      	mov	r0, r1
 8006370:	4615      	mov	r5, r2
 8006372:	461e      	mov	r6, r3
 8006374:	f002 f9f6 	bl	8008764 <roundf>
 8006378:	4607      	mov	r7, r0
 800637a:	4628      	mov	r0, r5
 800637c:	f002 f9f2 	bl	8008764 <roundf>
 8006380:	4605      	mov	r5, r0
 8006382:	4630      	mov	r0, r6
 8006384:	f002 f9ee 	bl	8008764 <roundf>
  u8g2_DrawVLine(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y), (int16_t)std::round(_h));
 8006388:	f7fa fda6 	bl	8000ed8 <__aeabi_f2iz>
 800638c:	b286      	uxth	r6, r0
 800638e:	4628      	mov	r0, r5
 8006390:	f7fa fda2 	bl	8000ed8 <__aeabi_f2iz>
 8006394:	b285      	uxth	r5, r0
 8006396:	4638      	mov	r0, r7
 8006398:	f7fa fd9e 	bl	8000ed8 <__aeabi_f2iz>
 800639c:	4633      	mov	r3, r6
 800639e:	462a      	mov	r2, r5
 80063a0:	b281      	uxth	r1, r0
 80063a2:	f104 0010 	add.w	r0, r4, #16
}
 80063a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  u8g2_DrawVLine(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y), (int16_t)std::round(_h));
 80063aa:	f7ff bb92 	b.w	8005ad2 <u8g2_DrawVLine>

080063ae <_ZN12HALDreamCore10_drawHLineEfff>:

void HALDreamCore::_drawHLine(float _x, float _y, float _l) {
 80063ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063b2:	4604      	mov	r4, r0
 80063b4:	4608      	mov	r0, r1
 80063b6:	4615      	mov	r5, r2
 80063b8:	461e      	mov	r6, r3
 80063ba:	f002 f9d3 	bl	8008764 <roundf>
 80063be:	4607      	mov	r7, r0
 80063c0:	4628      	mov	r0, r5
 80063c2:	f002 f9cf 	bl	8008764 <roundf>
 80063c6:	4605      	mov	r5, r0
 80063c8:	4630      	mov	r0, r6
 80063ca:	f002 f9cb 	bl	8008764 <roundf>
  u8g2_DrawHLine(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y), (int16_t)std::round(_l));
 80063ce:	f7fa fd83 	bl	8000ed8 <__aeabi_f2iz>
 80063d2:	b286      	uxth	r6, r0
 80063d4:	4628      	mov	r0, r5
 80063d6:	f7fa fd7f 	bl	8000ed8 <__aeabi_f2iz>
 80063da:	b285      	uxth	r5, r0
 80063dc:	4638      	mov	r0, r7
 80063de:	f7fa fd7b 	bl	8000ed8 <__aeabi_f2iz>
 80063e2:	4633      	mov	r3, r6
 80063e4:	462a      	mov	r2, r5
 80063e6:	b281      	uxth	r1, r0
 80063e8:	f104 0010 	add.w	r0, r4, #16
}
 80063ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  u8g2_DrawHLine(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y), (int16_t)std::round(_l));
 80063f0:	f7ff bb68 	b.w	8005ac4 <u8g2_DrawHLine>

080063f4 <_ZN12HALDreamCore8_drawBMPEffffPKh>:

void HALDreamCore::_drawBMP(float _x, float _y, float _w, float _h, const unsigned char *_bitMap) {
 80063f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063f8:	4604      	mov	r4, r0
 80063fa:	4608      	mov	r0, r1
 80063fc:	4616      	mov	r6, r2
 80063fe:	461f      	mov	r7, r3
 8006400:	f002 f9b0 	bl	8008764 <roundf>
 8006404:	4605      	mov	r5, r0
 8006406:	4630      	mov	r0, r6
 8006408:	f002 f9ac 	bl	8008764 <roundf>
 800640c:	4606      	mov	r6, r0
 800640e:	4638      	mov	r0, r7
 8006410:	f002 f9a8 	bl	8008764 <roundf>
 8006414:	4607      	mov	r7, r0
 8006416:	9806      	ldr	r0, [sp, #24]
 8006418:	f002 f9a4 	bl	8008764 <roundf>
 800641c:	4680      	mov	r8, r0
  u8g2_DrawXBMP(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y), (int16_t)std::round(_w), (int16_t)std::round(_h), _bitMap);
 800641e:	4638      	mov	r0, r7
 8006420:	f7fa fd5a 	bl	8000ed8 <__aeabi_f2iz>
 8006424:	b287      	uxth	r7, r0
 8006426:	4630      	mov	r0, r6
 8006428:	f7fa fd56 	bl	8000ed8 <__aeabi_f2iz>
 800642c:	b286      	uxth	r6, r0
 800642e:	4628      	mov	r0, r5
 8006430:	f7fa fd52 	bl	8000ed8 <__aeabi_f2iz>
 8006434:	9b07      	ldr	r3, [sp, #28]
 8006436:	b285      	uxth	r5, r0
 8006438:	4640      	mov	r0, r8
 800643a:	9307      	str	r3, [sp, #28]
 800643c:	f7fa fd4c 	bl	8000ed8 <__aeabi_f2iz>
 8006440:	3410      	adds	r4, #16
 8006442:	b280      	uxth	r0, r0
 8006444:	9006      	str	r0, [sp, #24]
 8006446:	463b      	mov	r3, r7
 8006448:	4632      	mov	r2, r6
 800644a:	4629      	mov	r1, r5
 800644c:	4620      	mov	r0, r4
}
 800644e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  u8g2_DrawXBMP(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y), (int16_t)std::round(_w), (int16_t)std::round(_h), _bitMap);
 8006452:	f7fe bcf8 	b.w	8004e46 <u8g2_DrawXBMP>

08006456 <_ZN12HALDreamCore8_drawBoxEffff>:

void HALDreamCore::_drawBox(float _x, float _y, float _w, float _h) {
 8006456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800645a:	4604      	mov	r4, r0
 800645c:	4608      	mov	r0, r1
 800645e:	4616      	mov	r6, r2
 8006460:	461f      	mov	r7, r3
 8006462:	f002 f97f 	bl	8008764 <roundf>
 8006466:	4605      	mov	r5, r0
 8006468:	4630      	mov	r0, r6
 800646a:	f002 f97b 	bl	8008764 <roundf>
 800646e:	4606      	mov	r6, r0
 8006470:	4638      	mov	r0, r7
 8006472:	f002 f977 	bl	8008764 <roundf>
 8006476:	4607      	mov	r7, r0
 8006478:	9806      	ldr	r0, [sp, #24]
 800647a:	f002 f973 	bl	8008764 <roundf>
 800647e:	4680      	mov	r8, r0
  u8g2_DrawBox(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y), (int16_t)std::round(_w), (int16_t)std::round(_h));
 8006480:	4638      	mov	r0, r7
 8006482:	f7fa fd29 	bl	8000ed8 <__aeabi_f2iz>
 8006486:	b287      	uxth	r7, r0
 8006488:	4630      	mov	r0, r6
 800648a:	f7fa fd25 	bl	8000ed8 <__aeabi_f2iz>
 800648e:	b286      	uxth	r6, r0
 8006490:	4628      	mov	r0, r5
 8006492:	f7fa fd21 	bl	8000ed8 <__aeabi_f2iz>
 8006496:	b285      	uxth	r5, r0
 8006498:	4640      	mov	r0, r8
 800649a:	f7fa fd1d 	bl	8000ed8 <__aeabi_f2iz>
 800649e:	3410      	adds	r4, #16
 80064a0:	b280      	uxth	r0, r0
 80064a2:	9006      	str	r0, [sp, #24]
 80064a4:	463b      	mov	r3, r7
 80064a6:	4632      	mov	r2, r6
 80064a8:	4629      	mov	r1, r5
 80064aa:	4620      	mov	r0, r4
}
 80064ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  u8g2_DrawBox(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y), (int16_t)std::round(_w), (int16_t)std::round(_h));
 80064b0:	f7fe bcd0 	b.w	8004e54 <u8g2_DrawBox>

080064b4 <_ZN12HALDreamCore9_drawRBoxEfffff>:

void HALDreamCore::_drawRBox(float _x, float _y, float _w, float _h, float _r) {
 80064b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064b8:	4604      	mov	r4, r0
 80064ba:	4608      	mov	r0, r1
 80064bc:	4616      	mov	r6, r2
 80064be:	461f      	mov	r7, r3
 80064c0:	f002 f950 	bl	8008764 <roundf>
 80064c4:	4605      	mov	r5, r0
 80064c6:	4630      	mov	r0, r6
 80064c8:	f002 f94c 	bl	8008764 <roundf>
 80064cc:	4606      	mov	r6, r0
 80064ce:	4638      	mov	r0, r7
 80064d0:	f002 f948 	bl	8008764 <roundf>
 80064d4:	4607      	mov	r7, r0
 80064d6:	9808      	ldr	r0, [sp, #32]
 80064d8:	f002 f944 	bl	8008764 <roundf>
 80064dc:	4680      	mov	r8, r0
 80064de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80064e0:	f002 f940 	bl	8008764 <roundf>
 80064e4:	4681      	mov	r9, r0
  u8g2_DrawRBox(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y), (int16_t)std::round(_w), (int16_t)std::round(_h), (int16_t)std::round(_r));
 80064e6:	4638      	mov	r0, r7
 80064e8:	f7fa fcf6 	bl	8000ed8 <__aeabi_f2iz>
 80064ec:	b287      	uxth	r7, r0
 80064ee:	4630      	mov	r0, r6
 80064f0:	f7fa fcf2 	bl	8000ed8 <__aeabi_f2iz>
 80064f4:	b286      	uxth	r6, r0
 80064f6:	4628      	mov	r0, r5
 80064f8:	f7fa fcee 	bl	8000ed8 <__aeabi_f2iz>
 80064fc:	b285      	uxth	r5, r0
 80064fe:	4648      	mov	r0, r9
 8006500:	f7fa fcea 	bl	8000ed8 <__aeabi_f2iz>
 8006504:	b280      	uxth	r0, r0
 8006506:	9009      	str	r0, [sp, #36]	@ 0x24
 8006508:	4640      	mov	r0, r8
 800650a:	f7fa fce5 	bl	8000ed8 <__aeabi_f2iz>
 800650e:	3410      	adds	r4, #16
 8006510:	b280      	uxth	r0, r0
 8006512:	9008      	str	r0, [sp, #32]
 8006514:	463b      	mov	r3, r7
 8006516:	4632      	mov	r2, r6
 8006518:	4629      	mov	r1, r5
 800651a:	4620      	mov	r0, r4
}
 800651c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u8g2_DrawRBox(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y), (int16_t)std::round(_w), (int16_t)std::round(_h), (int16_t)std::round(_r));
 8006520:	f7fe bd00 	b.w	8004f24 <u8g2_DrawRBox>

08006524 <_ZN12HALDreamCore10_drawFrameEffff>:

void HALDreamCore::_drawFrame(float _x, float _y, float _w, float _h) {
 8006524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006528:	4604      	mov	r4, r0
 800652a:	4608      	mov	r0, r1
 800652c:	4616      	mov	r6, r2
 800652e:	461f      	mov	r7, r3
 8006530:	f002 f918 	bl	8008764 <roundf>
 8006534:	4605      	mov	r5, r0
 8006536:	4630      	mov	r0, r6
 8006538:	f002 f914 	bl	8008764 <roundf>
 800653c:	4606      	mov	r6, r0
 800653e:	4638      	mov	r0, r7
 8006540:	f002 f910 	bl	8008764 <roundf>
 8006544:	4607      	mov	r7, r0
 8006546:	9806      	ldr	r0, [sp, #24]
 8006548:	f002 f90c 	bl	8008764 <roundf>
 800654c:	4680      	mov	r8, r0
  u8g2_DrawFrame(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y), (int16_t)std::round(_w), (int16_t)std::round(_h));
 800654e:	4638      	mov	r0, r7
 8006550:	f7fa fcc2 	bl	8000ed8 <__aeabi_f2iz>
 8006554:	b287      	uxth	r7, r0
 8006556:	4630      	mov	r0, r6
 8006558:	f7fa fcbe 	bl	8000ed8 <__aeabi_f2iz>
 800655c:	b286      	uxth	r6, r0
 800655e:	4628      	mov	r0, r5
 8006560:	f7fa fcba 	bl	8000ed8 <__aeabi_f2iz>
 8006564:	b285      	uxth	r5, r0
 8006566:	4640      	mov	r0, r8
 8006568:	f7fa fcb6 	bl	8000ed8 <__aeabi_f2iz>
 800656c:	3410      	adds	r4, #16
 800656e:	b280      	uxth	r0, r0
 8006570:	9006      	str	r0, [sp, #24]
 8006572:	463b      	mov	r3, r7
 8006574:	4632      	mov	r2, r6
 8006576:	4629      	mov	r1, r5
 8006578:	4620      	mov	r0, r4
}
 800657a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  u8g2_DrawFrame(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y), (int16_t)std::round(_w), (int16_t)std::round(_h));
 800657e:	f7fe bc8b 	b.w	8004e98 <u8g2_DrawFrame>

08006582 <_ZN12HALDreamCore11_drawRFrameEfffff>:

void HALDreamCore::_drawRFrame(float _x, float _y, float _w, float _h, float _r) {
 8006582:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006586:	4604      	mov	r4, r0
 8006588:	4608      	mov	r0, r1
 800658a:	4616      	mov	r6, r2
 800658c:	461f      	mov	r7, r3
 800658e:	f002 f8e9 	bl	8008764 <roundf>
 8006592:	4605      	mov	r5, r0
 8006594:	4630      	mov	r0, r6
 8006596:	f002 f8e5 	bl	8008764 <roundf>
 800659a:	4606      	mov	r6, r0
 800659c:	4638      	mov	r0, r7
 800659e:	f002 f8e1 	bl	8008764 <roundf>
 80065a2:	4607      	mov	r7, r0
 80065a4:	9808      	ldr	r0, [sp, #32]
 80065a6:	f002 f8dd 	bl	8008764 <roundf>
 80065aa:	4680      	mov	r8, r0
 80065ac:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80065ae:	f002 f8d9 	bl	8008764 <roundf>
 80065b2:	4681      	mov	r9, r0
  u8g2_DrawRFrame(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y), (int16_t)std::round(_w), (int16_t)std::round(_h), (int16_t)std::round(_r));
 80065b4:	4638      	mov	r0, r7
 80065b6:	f7fa fc8f 	bl	8000ed8 <__aeabi_f2iz>
 80065ba:	b287      	uxth	r7, r0
 80065bc:	4630      	mov	r0, r6
 80065be:	f7fa fc8b 	bl	8000ed8 <__aeabi_f2iz>
 80065c2:	b286      	uxth	r6, r0
 80065c4:	4628      	mov	r0, r5
 80065c6:	f7fa fc87 	bl	8000ed8 <__aeabi_f2iz>
 80065ca:	b285      	uxth	r5, r0
 80065cc:	4648      	mov	r0, r9
 80065ce:	f7fa fc83 	bl	8000ed8 <__aeabi_f2iz>
 80065d2:	b280      	uxth	r0, r0
 80065d4:	9009      	str	r0, [sp, #36]	@ 0x24
 80065d6:	4640      	mov	r0, r8
 80065d8:	f7fa fc7e 	bl	8000ed8 <__aeabi_f2iz>
 80065dc:	3410      	adds	r4, #16
 80065de:	b280      	uxth	r0, r0
 80065e0:	9008      	str	r0, [sp, #32]
 80065e2:	463b      	mov	r3, r7
 80065e4:	4632      	mov	r2, r6
 80065e6:	4629      	mov	r1, r5
 80065e8:	4620      	mov	r0, r4
}
 80065ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u8g2_DrawRFrame(&canvasBuffer, (int16_t)std::round(_x), (int16_t)std::round(_y), (int16_t)std::round(_w), (int16_t)std::round(_h), (int16_t)std::round(_r));
 80065ee:	f7fe bd0e 	b.w	800500e <u8g2_DrawRFrame>

080065f2 <_ZN12HALDreamCoreD0Ev>:
 80065f2:	b510      	push	{r4, lr}
 80065f4:	4604      	mov	r4, r0
 80065f6:	21a4      	movs	r1, #164	@ 0xa4
 80065f8:	f001 fb86 	bl	8007d08 <_ZdlPvj>
 80065fc:	4620      	mov	r0, r4
 80065fe:	bd10      	pop	{r4, pc}

08006600 <_ZN12HALDreamCore29_u8x8_gpio_and_delay_callbackEP11u8x8_structhhPv>:
  switch (_msg) {
 8006600:	2929      	cmp	r1, #41	@ 0x29
                                                    __attribute__((unused)) void *_argPtr) { //NOLINT
 8006602:	4610      	mov	r0, r2
 8006604:	b508      	push	{r3, lr}
  switch (_msg) {
 8006606:	d003      	beq.n	8006610 <_ZN12HALDreamCore29_u8x8_gpio_and_delay_callbackEP11u8x8_structhhPv+0x10>
 8006608:	2949      	cmp	r1, #73	@ 0x49
 800660a:	d004      	beq.n	8006616 <_ZN12HALDreamCore29_u8x8_gpio_and_delay_callbackEP11u8x8_structhhPv+0x16>
}
 800660c:	2001      	movs	r0, #1
 800660e:	bd08      	pop	{r3, pc}
      HAL_Delay(_argInt);
 8006610:	f000 fbd4 	bl	8006dbc <HAL_Delay>
      break;
 8006614:	e7fa      	b.n	800660c <_ZN12HALDreamCore29_u8x8_gpio_and_delay_callbackEP11u8x8_structhhPv+0xc>
      HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, static_cast<GPIO_PinState>(_argInt));
 8006616:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800661a:	4802      	ldr	r0, [pc, #8]	@ (8006624 <_ZN12HALDreamCore29_u8x8_gpio_and_delay_callbackEP11u8x8_structhhPv+0x24>)
 800661c:	f000 fe24 	bl	8007268 <HAL_GPIO_WritePin>
      break;
 8006620:	e7f4      	b.n	800660c <_ZN12HALDreamCore29_u8x8_gpio_and_delay_callbackEP11u8x8_structhhPv+0xc>
 8006622:	bf00      	nop
 8006624:	40010800 	.word	0x40010800

08006628 <_ZN12HALDreamCore21_ssd1306_transmit_cmdEh.constprop.0>:
void HALDreamCore::_ssd1306_transmit_cmd(unsigned char _cmd) { //NOLINT
 8006628:	b530      	push	{r4, r5, lr}
  unsigned char rxData = 0;
 800662a:	2500      	movs	r5, #0
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 800662c:	4c12      	ldr	r4, [pc, #72]	@ (8006678 <_ZN12HALDreamCore21_ssd1306_transmit_cmdEh.constprop.0+0x50>)
void HALDreamCore::_ssd1306_transmit_cmd(unsigned char _cmd) { //NOLINT
 800662e:	b087      	sub	sp, #28
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8006630:	462a      	mov	r2, r5
void HALDreamCore::_ssd1306_transmit_cmd(unsigned char _cmd) { //NOLINT
 8006632:	f88d 000f 	strb.w	r0, [sp, #15]
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8006636:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800663a:	4620      	mov	r0, r4
  unsigned char rxData = 0;
 800663c:	f88d 5017 	strb.w	r5, [sp, #23]
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8006640:	f000 fe12 	bl	8007268 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8006644:	462a      	mov	r2, r5
 8006646:	4620      	mov	r0, r4
 8006648:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800664c:	f000 fe0c 	bl	8007268 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi2, &_cmd, &rxData, 1, 1000);
 8006650:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006654:	f10d 0217 	add.w	r2, sp, #23
 8006658:	9300      	str	r3, [sp, #0]
 800665a:	f10d 010f 	add.w	r1, sp, #15
 800665e:	2301      	movs	r3, #1
 8006660:	4806      	ldr	r0, [pc, #24]	@ (800667c <_ZN12HALDreamCore21_ssd1306_transmit_cmdEh.constprop.0+0x54>)
 8006662:	f001 f935 	bl	80078d0 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8006666:	2201      	movs	r2, #1
 8006668:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800666c:	4620      	mov	r0, r4
 800666e:	f000 fdfb 	bl	8007268 <HAL_GPIO_WritePin>
}
 8006672:	b007      	add	sp, #28
 8006674:	bd30      	pop	{r4, r5, pc}
 8006676:	bf00      	nop
 8006678:	40010800 	.word	0x40010800
 800667c:	20003ef4 	.word	0x20003ef4

08006680 <_ZN12HALDreamCore10_screenOffEv>:
void HALDreamCore::_screenOff() {
 8006680:	b508      	push	{r3, lr}
  _ssd1306_transmit_cmd(0X8D);  //set dc-dc command.
 8006682:	208d      	movs	r0, #141	@ 0x8d
 8006684:	f7ff ffd0 	bl	8006628 <_ZN12HALDreamCore21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0X10);  //dc-dc disable.
 8006688:	2010      	movs	r0, #16
 800668a:	f7ff ffcd 	bl	8006628 <_ZN12HALDreamCore21_ssd1306_transmit_cmdEh.constprop.0>
}
 800668e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  _ssd1306_transmit_cmd(0XAE);  //display off.
 8006692:	20ae      	movs	r0, #174	@ 0xae
 8006694:	f7ff bfc8 	b.w	8006628 <_ZN12HALDreamCore21_ssd1306_transmit_cmdEh.constprop.0>

08006698 <_ZN12HALDreamCore9_screenOnEv>:
void HALDreamCore::_screenOn() {
 8006698:	b508      	push	{r3, lr}
  _ssd1306_transmit_cmd(0X8D);  //set dc-dc command.
 800669a:	208d      	movs	r0, #141	@ 0x8d
 800669c:	f7ff ffc4 	bl	8006628 <_ZN12HALDreamCore21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0X14);  //dc-dc enable.
 80066a0:	2014      	movs	r0, #20
 80066a2:	f7ff ffc1 	bl	8006628 <_ZN12HALDreamCore21_ssd1306_transmit_cmdEh.constprop.0>
}
 80066a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  _ssd1306_transmit_cmd(0XAF);  //display on.
 80066aa:	20af      	movs	r0, #175	@ 0xaf
 80066ac:	f7ff bfbc 	b.w	8006628 <_ZN12HALDreamCore21_ssd1306_transmit_cmdEh.constprop.0>

080066b0 <_ZN12HALDreamCore22_ssd1306_transmit_dataEhh>:
void HALDreamCore::_ssd1306_transmit_data(unsigned char _data, unsigned char _mode) { //NOLINT
 80066b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80066b2:	f88d 100f 	strb.w	r1, [sp, #15]
  if (!_mode) _data = ~_data;
 80066b6:	b91a      	cbnz	r2, 80066c0 <_ZN12HALDreamCore22_ssd1306_transmit_dataEhh+0x10>
 80066b8:	b2cb      	uxtb	r3, r1
 80066ba:	43db      	mvns	r3, r3
 80066bc:	f88d 300f 	strb.w	r3, [sp, #15]
  unsigned char rxData = 0;
 80066c0:	2200      	movs	r2, #0
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 80066c2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80066c6:	480f      	ldr	r0, [pc, #60]	@ (8006704 <_ZN12HALDreamCore22_ssd1306_transmit_dataEhh+0x54>)
  unsigned char rxData = 0;
 80066c8:	f88d 2017 	strb.w	r2, [sp, #23]
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 80066cc:	f000 fdcc 	bl	8007268 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_SET);
 80066d0:	2201      	movs	r2, #1
 80066d2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80066d6:	480b      	ldr	r0, [pc, #44]	@ (8006704 <_ZN12HALDreamCore22_ssd1306_transmit_dataEhh+0x54>)
 80066d8:	f000 fdc6 	bl	8007268 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi2, &_data, &rxData, 1, 1000);
 80066dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80066e0:	f10d 0217 	add.w	r2, sp, #23
 80066e4:	9300      	str	r3, [sp, #0]
 80066e6:	f10d 010f 	add.w	r1, sp, #15
 80066ea:	2301      	movs	r3, #1
 80066ec:	4806      	ldr	r0, [pc, #24]	@ (8006708 <_ZN12HALDreamCore22_ssd1306_transmit_dataEhh+0x58>)
 80066ee:	f001 f8ef 	bl	80078d0 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_SET);
 80066f2:	2201      	movs	r2, #1
 80066f4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80066f8:	4802      	ldr	r0, [pc, #8]	@ (8006704 <_ZN12HALDreamCore22_ssd1306_transmit_dataEhh+0x54>)
 80066fa:	f000 fdb5 	bl	8007268 <HAL_GPIO_WritePin>
}
 80066fe:	b007      	add	sp, #28
 8006700:	f85d fb04 	ldr.w	pc, [sp], #4
 8006704:	40010800 	.word	0x40010800
 8006708:	20003ef4 	.word	0x20003ef4

0800670c <_ZN12HALDreamCore14_ssd1306_resetEb>:
  if (_state) HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_SET);
 800670c:	460a      	mov	r2, r1
 800670e:	b101      	cbz	r1, 8006712 <_ZN12HALDreamCore14_ssd1306_resetEb+0x6>
 8006710:	2201      	movs	r2, #1
  else HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 8006712:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006716:	4801      	ldr	r0, [pc, #4]	@ (800671c <_ZN12HALDreamCore14_ssd1306_resetEb+0x10>)
 8006718:	f000 bda6 	b.w	8007268 <HAL_GPIO_WritePin>
 800671c:	40010800 	.word	0x40010800

08006720 <_ZN12HALDreamCore19_ssd1306_set_cursorEhh>:
void HALDreamCore::_ssd1306_set_cursor(unsigned char _x, unsigned char _y) {
 8006720:	b510      	push	{r4, lr}
 8006722:	460c      	mov	r4, r1
  _ssd1306_transmit_cmd(0xB0 | _y);
 8006724:	f042 00b0 	orr.w	r0, r2, #176	@ 0xb0
 8006728:	f7ff ff7e 	bl	8006628 <_ZN12HALDreamCore21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0x10 | ((_x & 0xF0) >> 4));
 800672c:	0920      	lsrs	r0, r4, #4
 800672e:	f040 0010 	orr.w	r0, r0, #16
 8006732:	f7ff ff79 	bl	8006628 <_ZN12HALDreamCore21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0x00 | (_x & 0x0F));
 8006736:	f004 000f 	and.w	r0, r4, #15
}
 800673a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  _ssd1306_transmit_cmd(0x00 | (_x & 0x0F));
 800673e:	f7ff bf73 	b.w	8006628 <_ZN12HALDreamCore21_ssd1306_transmit_cmdEh.constprop.0>

08006742 <_ZN12HALDreamCore13_ssd1306_fillEh>:
void HALDreamCore::_ssd1306_fill(unsigned char _data) {
 8006742:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006744:	4606      	mov	r6, r0
 8006746:	460f      	mov	r7, r1
 8006748:	2500      	movs	r5, #0
    _ssd1306_set_cursor(j, 0);
 800674a:	2200      	movs	r2, #0
 800674c:	4630      	mov	r0, r6
 800674e:	b2e9      	uxtb	r1, r5
 8006750:	f7ff ffe6 	bl	8006720 <_ZN12HALDreamCore19_ssd1306_set_cursorEhh>
 8006754:	2480      	movs	r4, #128	@ 0x80
      _ssd1306_transmit_data(_data, 1);
 8006756:	2201      	movs	r2, #1
 8006758:	4639      	mov	r1, r7
 800675a:	4630      	mov	r0, r6
    for(i = 0; i < 128; i++) {
 800675c:	3c01      	subs	r4, #1
      _ssd1306_transmit_data(_data, 1);
 800675e:	f7ff ffa7 	bl	80066b0 <_ZN12HALDreamCore22_ssd1306_transmit_dataEhh>
    for(i = 0; i < 128; i++) {
 8006762:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 8006766:	d1f6      	bne.n	8006756 <_ZN12HALDreamCore13_ssd1306_fillEh+0x14>
  for (j = 0; j < 8; j++) {
 8006768:	3501      	adds	r5, #1
 800676a:	2d08      	cmp	r5, #8
 800676c:	d1ed      	bne.n	800674a <_ZN12HALDreamCore13_ssd1306_fillEh+0x8>
}
 800676e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006770 <_ZN12HALDreamCore13_ssd1306_initEv>:
void HALDreamCore::_ssd1306_init() {
 8006770:	b510      	push	{r4, lr}
 8006772:	4604      	mov	r4, r0
  _ssd1306_fill(0x00);
 8006774:	2100      	movs	r1, #0
 8006776:	f7ff ffe4 	bl	8006742 <_ZN12HALDreamCore13_ssd1306_fillEh>
  _ssd1306_reset(false);
 800677a:	2100      	movs	r1, #0
 800677c:	4620      	mov	r0, r4
 800677e:	f7ff ffc5 	bl	800670c <_ZN12HALDreamCore14_ssd1306_resetEb>
  HAL_Delay(200);
 8006782:	20c8      	movs	r0, #200	@ 0xc8
 8006784:	f000 fb1a 	bl	8006dbc <HAL_Delay>
  if (_state) HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_SET);
 8006788:	2201      	movs	r2, #1
 800678a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800678e:	4825      	ldr	r0, [pc, #148]	@ (8006824 <_ZN12HALDreamCore13_ssd1306_initEv+0xb4>)
 8006790:	f000 fd6a 	bl	8007268 <HAL_GPIO_WritePin>
  _ssd1306_transmit_cmd(0xAE);
 8006794:	20ae      	movs	r0, #174	@ 0xae
 8006796:	f7ff ff47 	bl	8006628 <_ZN12HALDreamCore21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0xD5);
 800679a:	20d5      	movs	r0, #213	@ 0xd5
 800679c:	f7ff ff44 	bl	8006628 <_ZN12HALDreamCore21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0x80);
 80067a0:	2080      	movs	r0, #128	@ 0x80
 80067a2:	f7ff ff41 	bl	8006628 <_ZN12HALDreamCore21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0xA8);
 80067a6:	20a8      	movs	r0, #168	@ 0xa8
 80067a8:	f7ff ff3e 	bl	8006628 <_ZN12HALDreamCore21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0x3F);
 80067ac:	203f      	movs	r0, #63	@ 0x3f
 80067ae:	f7ff ff3b 	bl	8006628 <_ZN12HALDreamCore21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0xD3);
 80067b2:	20d3      	movs	r0, #211	@ 0xd3
 80067b4:	f7ff ff38 	bl	8006628 <_ZN12HALDreamCore21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0x00);
 80067b8:	2000      	movs	r0, #0
 80067ba:	f7ff ff35 	bl	8006628 <_ZN12HALDreamCore21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0x40);
 80067be:	2040      	movs	r0, #64	@ 0x40
 80067c0:	f7ff ff32 	bl	8006628 <_ZN12HALDreamCore21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0xA1);
 80067c4:	20a1      	movs	r0, #161	@ 0xa1
 80067c6:	f7ff ff2f 	bl	8006628 <_ZN12HALDreamCore21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0xC8);
 80067ca:	20c8      	movs	r0, #200	@ 0xc8
 80067cc:	f7ff ff2c 	bl	8006628 <_ZN12HALDreamCore21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0xDA);
 80067d0:	20da      	movs	r0, #218	@ 0xda
 80067d2:	f7ff ff29 	bl	8006628 <_ZN12HALDreamCore21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0x12);
 80067d6:	2012      	movs	r0, #18
 80067d8:	f7ff ff26 	bl	8006628 <_ZN12HALDreamCore21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0x81);
 80067dc:	2081      	movs	r0, #129	@ 0x81
 80067de:	f7ff ff23 	bl	8006628 <_ZN12HALDreamCore21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0xCF);
 80067e2:	20cf      	movs	r0, #207	@ 0xcf
 80067e4:	f7ff ff20 	bl	8006628 <_ZN12HALDreamCore21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0xD9);
 80067e8:	20d9      	movs	r0, #217	@ 0xd9
 80067ea:	f7ff ff1d 	bl	8006628 <_ZN12HALDreamCore21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0xF1);
 80067ee:	20f1      	movs	r0, #241	@ 0xf1
 80067f0:	f7ff ff1a 	bl	8006628 <_ZN12HALDreamCore21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0xDB);
 80067f4:	20db      	movs	r0, #219	@ 0xdb
 80067f6:	f7ff ff17 	bl	8006628 <_ZN12HALDreamCore21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0x30);
 80067fa:	2030      	movs	r0, #48	@ 0x30
 80067fc:	f7ff ff14 	bl	8006628 <_ZN12HALDreamCore21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0xA4);
 8006800:	20a4      	movs	r0, #164	@ 0xa4
 8006802:	f7ff ff11 	bl	8006628 <_ZN12HALDreamCore21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0xA6);
 8006806:	20a6      	movs	r0, #166	@ 0xa6
 8006808:	f7ff ff0e 	bl	8006628 <_ZN12HALDreamCore21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0x8D);
 800680c:	208d      	movs	r0, #141	@ 0x8d
 800680e:	f7ff ff0b 	bl	8006628 <_ZN12HALDreamCore21_ssd1306_transmit_cmdEh.constprop.0>
  _ssd1306_transmit_cmd(0x14);
 8006812:	2014      	movs	r0, #20
 8006814:	f7ff ff08 	bl	8006628 <_ZN12HALDreamCore21_ssd1306_transmit_cmdEh.constprop.0>
}
 8006818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  _ssd1306_transmit_cmd(0xAF);
 800681c:	20af      	movs	r0, #175	@ 0xaf
 800681e:	f7ff bf03 	b.w	8006628 <_ZN12HALDreamCore21_ssd1306_transmit_cmdEh.constprop.0>
 8006822:	bf00      	nop
 8006824:	40010800 	.word	0x40010800

08006828 <_ZN12HALDreamCore10_u8g2_initEv>:
void HALDreamCore::_u8g2_init() {
 8006828:	b510      	push	{r4, lr}
  u8g2_Setup_ssd1306_128x64_noname_f(&canvasBuffer,
 800682a:	f100 0410 	add.w	r4, r0, #16
 800682e:	4b0f      	ldr	r3, [pc, #60]	@ (800686c <_ZN12HALDreamCore10_u8g2_initEv+0x44>)
 8006830:	4a0f      	ldr	r2, [pc, #60]	@ (8006870 <_ZN12HALDreamCore10_u8g2_initEv+0x48>)
 8006832:	4620      	mov	r0, r4
 8006834:	490f      	ldr	r1, [pc, #60]	@ (8006874 <_ZN12HALDreamCore10_u8g2_initEv+0x4c>)
 8006836:	f7fe fde9 	bl	800540c <u8g2_Setup_ssd1306_128x64_noname_f>
  u8g2_InitDisplay(&canvasBuffer); // 根据所选的芯片进行初始化工作，初始化完成后，显示器处于关闭状态
 800683a:	4620      	mov	r0, r4
 800683c:	f7ff fc25 	bl	800608a <u8x8_InitDisplay>
  u8g2_SetPowerSave(&canvasBuffer, 0); // 打开显示器
 8006840:	2100      	movs	r1, #0
 8006842:	4620      	mov	r0, r4
 8006844:	f7ff fc29 	bl	800609a <u8x8_SetPowerSave>
  u8g2_ClearBuffer(&canvasBuffer);
 8006848:	4620      	mov	r0, r4
 800684a:	f7fe fc87 	bl	800515c <u8g2_ClearBuffer>
  u8g2_SetFontMode(&canvasBuffer, 1); /*字体模式选择*/
 800684e:	4620      	mov	r0, r4
 8006850:	2101      	movs	r1, #1
 8006852:	f7ff f802 	bl	800585a <u8g2_SetFontMode>
  u8g2_SetFontDirection(&canvasBuffer, 0); /*字体方向选择*/
 8006856:	4620      	mov	r0, r4
 8006858:	2100      	movs	r1, #0
 800685a:	f7ff f8bd 	bl	80059d8 <u8g2_SetFontDirection>
  u8g2_SetFont(&canvasBuffer, u8g2_font_myfont); /*字库选择*/
 800685e:	4620      	mov	r0, r4
}
 8006860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  u8g2_SetFont(&canvasBuffer, u8g2_font_myfont); /*字库选择*/
 8006864:	4904      	ldr	r1, [pc, #16]	@ (8006878 <_ZN12HALDreamCore10_u8g2_initEv+0x50>)
 8006866:	f7ff b8a1 	b.w	80059ac <u8g2_SetFont>
 800686a:	bf00      	nop
 800686c:	08006601 	.word	0x08006601
 8006870:	08006129 	.word	0x08006129
 8006874:	0800b2ec 	.word	0x0800b2ec
 8006878:	0800a81f 	.word	0x0800a81f

0800687c <_ZN12HALDreamCore4initEv>:
                                               U8X8_UNUSED unsigned char _msg,
                                               U8X8_UNUSED unsigned char _argInt,
                                               U8X8_UNUSED void* _argPtr);

public:
  inline void init() override {
 800687c:	b510      	push	{r4, lr}
 800687e:	4604      	mov	r4, r0
    _ssd1306_init();
 8006880:	f7ff ff76 	bl	8006770 <_ZN12HALDreamCore13_ssd1306_initEv>
    _u8g2_init();
 8006884:	4620      	mov	r0, r4
  }
 8006886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    _u8g2_init();
 800688a:	f7ff bfcd 	b.w	8006828 <_ZN12HALDreamCore10_u8g2_initEv>
	...

08006890 <memPerused>:
}

//获取内存使用率
//返回值:使用率(0~100)
unsigned char memPerused(void) {
  unsigned long used = 0;
 8006890:	2000      	movs	r0, #0
  unsigned long i;
  for (i = 0; i < memTblSize; i++) {
    if (malloc_dev.memMap[i]) used++;
 8006892:	4b09      	ldr	r3, [pc, #36]	@ (80068b8 <memPerused+0x28>)
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	1e9a      	subs	r2, r3, #2
 8006898:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 800689c:	f832 1f02 	ldrh.w	r1, [r2, #2]!
 80068a0:	b101      	cbz	r1, 80068a4 <memPerused+0x14>
 80068a2:	3001      	adds	r0, #1
  for (i = 0; i < memTblSize; i++) {
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d1f9      	bne.n	800689c <memPerused+0xc>
  }
  return (used * 100) / (memTblSize);
 80068a8:	2364      	movs	r3, #100	@ 0x64
 80068aa:	4358      	muls	r0, r3
 80068ac:	f240 139f 	movw	r3, #415	@ 0x19f
 80068b0:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80068b4:	b2c0      	uxtb	r0, r0
 80068b6:	4770      	bx	lr
 80068b8:	20000004 	.word	0x20000004

080068bc <myMemset>:
  while (count--)*xS++ = c;
 80068bc:	f002 b91f 	b.w	8008afe <memset>

080068c0 <memInit>:
void memInit(void) {
 80068c0:	b510      	push	{r4, lr}
  myMemset(malloc_dev.memMap, 0, memTblSize * 2);//内存状态表数据清零
 80068c2:	4c08      	ldr	r4, [pc, #32]	@ (80068e4 <memInit+0x24>)
 80068c4:	f240 323e 	movw	r2, #830	@ 0x33e
 80068c8:	2100      	movs	r1, #0
 80068ca:	68e0      	ldr	r0, [r4, #12]
 80068cc:	f7ff fff6 	bl	80068bc <myMemset>
  myMemset(malloc_dev.memBase, 0, memSize); //内存池所有数据清零
 80068d0:	f243 32f3 	movw	r2, #13299	@ 0x33f3
 80068d4:	2100      	movs	r1, #0
 80068d6:	68a0      	ldr	r0, [r4, #8]
 80068d8:	f7ff fff0 	bl	80068bc <myMemset>
  malloc_dev.memRdy = 1;
 80068dc:	2301      	movs	r3, #1
 80068de:	7423      	strb	r3, [r4, #16]
}
 80068e0:	bd10      	pop	{r4, pc}
 80068e2:	bf00      	nop
 80068e4:	20000004 	.word	0x20000004

080068e8 <memMalloc>:

//内存分配(内部调用)
//memx:所属内存块
//size:要分配的内存大小(字节)
//返回值:0XFFFFFFFF,代表错误;其他,内存偏移地址
unsigned long memMalloc(unsigned long size) {
 80068e8:	b538      	push	{r3, r4, r5, lr}
  signed long offset = 0;
  unsigned short nmemb; //需要的内存块数
  unsigned short cmemb = 0;//连续空内存块数
  unsigned long i;
  if (!malloc_dev.memRdy) malloc_dev.init(); //未初始化,先执行初始化
 80068ea:	4d16      	ldr	r5, [pc, #88]	@ (8006944 <memMalloc+0x5c>)
unsigned long memMalloc(unsigned long size) {
 80068ec:	4604      	mov	r4, r0
  if (!malloc_dev.memRdy) malloc_dev.init(); //未初始化,先执行初始化
 80068ee:	7c2b      	ldrb	r3, [r5, #16]
 80068f0:	b90b      	cbnz	r3, 80068f6 <memMalloc+0xe>
 80068f2:	682b      	ldr	r3, [r5, #0]
 80068f4:	4798      	blx	r3
  if (size == 0) return 0XFFFFFFFF; //不需要分配
 80068f6:	b314      	cbz	r4, 800693e <memMalloc+0x56>
  nmemb = size / memBlkSize; //获取需要分配的连续内存块数
  if (size % memBlkSize) nmemb++;
 80068f8:	06e2      	lsls	r2, r4, #27

  //搜索整个内存控制区
  for (offset = memTblSize - 1; offset >= 0; offset--) {
 80068fa:	f44f 70cf 	mov.w	r0, #414	@ 0x19e
  unsigned short cmemb = 0;//连续空内存块数
 80068fe:	f04f 0200 	mov.w	r2, #0
  nmemb = size / memBlkSize; //获取需要分配的连续内存块数
 8006902:	f3c4 134f 	ubfx	r3, r4, #5, #16
  if (size % memBlkSize) nmemb++;
 8006906:	bf18      	it	ne
 8006908:	3301      	addne	r3, #1
    if (!malloc_dev.memMap[offset]) cmemb++; //连续空内存块数增加
 800690a:	68e9      	ldr	r1, [r5, #12]
  if (size % memBlkSize) nmemb++;
 800690c:	bf18      	it	ne
 800690e:	b29b      	uxthne	r3, r3
    if (!malloc_dev.memMap[offset]) cmemb++; //连续空内存块数增加
 8006910:	f831 4010 	ldrh.w	r4, [r1, r0, lsl #1]
 8006914:	b954      	cbnz	r4, 800692c <memMalloc+0x44>
 8006916:	3201      	adds	r2, #1
 8006918:	b292      	uxth	r2, r2
    else cmemb = 0; //连续内存块清零

    //找到了连续 nmemb 个空内存块
    if (cmemb == nmemb) {
 800691a:	4293      	cmp	r3, r2
 800691c:	d10c      	bne.n	8006938 <memMalloc+0x50>
      //标注内存块非空
      for (i = 0; i < nmemb; i++) malloc_dev.memMap[offset + i] = nmemb;
 800691e:	2200      	movs	r2, #0
 8006920:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8006924:	4293      	cmp	r3, r2
 8006926:	d803      	bhi.n	8006930 <memMalloc+0x48>
      return (offset * memBlkSize); //返回偏移地址
 8006928:	0140      	lsls	r0, r0, #5
    }
  }
  return 0XFFFFFFFF;//未找到符合分配条件的内存块
}
 800692a:	bd38      	pop	{r3, r4, r5, pc}
    else cmemb = 0; //连续内存块清零
 800692c:	2200      	movs	r2, #0
 800692e:	e7f4      	b.n	800691a <memMalloc+0x32>
      for (i = 0; i < nmemb; i++) malloc_dev.memMap[offset + i] = nmemb;
 8006930:	f821 3b02 	strh.w	r3, [r1], #2
 8006934:	3201      	adds	r2, #1
 8006936:	e7f5      	b.n	8006924 <memMalloc+0x3c>
  for (offset = memTblSize - 1; offset >= 0; offset--) {
 8006938:	3801      	subs	r0, #1
 800693a:	d2e9      	bcs.n	8006910 <memMalloc+0x28>
 800693c:	e7f5      	b.n	800692a <memMalloc+0x42>
  if (size == 0) return 0XFFFFFFFF; //不需要分配
 800693e:	f04f 30ff 	mov.w	r0, #4294967295
 8006942:	e7f2      	b.n	800692a <memMalloc+0x42>
 8006944:	20000004 	.word	0x20000004

08006948 <memFree>:

//释放内存(内部调用)
//offset:内存地址偏移
//返回值:0,释放成功;1,释放失败;
unsigned char memFree(unsigned long offset) {
 8006948:	b508      	push	{r3, lr}
  int i;

  //未初始化,先执行初始化
  if (!malloc_dev.memRdy) {
 800694a:	4b0c      	ldr	r3, [pc, #48]	@ (800697c <memFree+0x34>)
 800694c:	7c1a      	ldrb	r2, [r3, #16]
 800694e:	b91a      	cbnz	r2, 8006958 <memFree+0x10>
    malloc_dev.init();
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4798      	blx	r3
 8006954:	2001      	movs	r0, #1

    //内存块清零
    for (i = 0; i < nMemB; i++) malloc_dev.memMap[index + i] = 0;
    return 0;
  } else return 2;//偏移超区了.
}
 8006956:	bd08      	pop	{r3, pc}
  if (offset < memSize) {
 8006958:	f243 32f2 	movw	r2, #13298	@ 0x33f2
 800695c:	4290      	cmp	r0, r2
 800695e:	d80b      	bhi.n	8006978 <memFree+0x30>
    int nMemB = malloc_dev.memMap[index];//内存块数量
 8006960:	68db      	ldr	r3, [r3, #12]
    int index = offset / memBlkSize; //偏移所在内存块号码
 8006962:	0940      	lsrs	r0, r0, #5
    for (i = 0; i < nMemB; i++) malloc_dev.memMap[index + i] = 0;
 8006964:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
 8006968:	2100      	movs	r1, #0
 800696a:	0052      	lsls	r2, r2, #1
 800696c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8006970:	f002 f8c5 	bl	8008afe <memset>
    return 0;
 8006974:	2000      	movs	r0, #0
 8006976:	e7ee      	b.n	8006956 <memFree+0xe>
  } else return 2;//偏移超区了.
 8006978:	2002      	movs	r0, #2
 800697a:	e7ec      	b.n	8006956 <memFree+0xe>
 800697c:	20000004 	.word	0x20000004

08006980 <myFree>:

//释放内存(外部调用)
//ptr:内存首地址
void myFree(void *ptr) {
  unsigned long offset;
  if (ptr == NULL)return;//地址为 0.
 8006980:	b120      	cbz	r0, 800698c <myFree+0xc>
  offset = (unsigned long) ptr - (unsigned long) malloc_dev.memBase;
 8006982:	4b03      	ldr	r3, [pc, #12]	@ (8006990 <myFree+0x10>)
 8006984:	689b      	ldr	r3, [r3, #8]
  memFree(offset); //释放内存
 8006986:	1ac0      	subs	r0, r0, r3
 8006988:	f7ff bfde 	b.w	8006948 <memFree>
}
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	20000004 	.word	0x20000004

08006994 <myMalloc>:

//分配内存(外部调用)
//size:内存大小(字节)
//返回值:分配到的内存首地址.
void *myMalloc(unsigned long size) {
 8006994:	b508      	push	{r3, lr}
  unsigned long offset;
  offset = memMalloc(size);
 8006996:	f7ff ffa7 	bl	80068e8 <memMalloc>
  if (offset == 0XFFFFFFFF) return NULL;
 800699a:	1c43      	adds	r3, r0, #1
  else return (void *) ((unsigned long) malloc_dev.memBase + offset);
 800699c:	bf17      	itett	ne
 800699e:	4b02      	ldrne	r3, [pc, #8]	@ (80069a8 <myMalloc+0x14>)
  if (offset == 0XFFFFFFFF) return NULL;
 80069a0:	2000      	moveq	r0, #0
  else return (void *) ((unsigned long) malloc_dev.memBase + offset);
 80069a2:	689b      	ldrne	r3, [r3, #8]
 80069a4:	18c0      	addne	r0, r0, r3
}
 80069a6:	bd08      	pop	{r3, pc}
 80069a8:	20000004 	.word	0x20000004

080069ac <_Znwj>:

void *operator new(std::size_t size) noexcept(false) {
  void *res;
  if (size == 0)
    size = 1;
  res = myMalloc(size);
 80069ac:	2801      	cmp	r0, #1
 80069ae:	bf38      	it	cc
 80069b0:	2001      	movcc	r0, #1
 80069b2:	f7ff bfef 	b.w	8006994 <myMalloc>

080069b6 <_ZdlPv>:
  if (res) return res; //到这里的时候 res是null 所以一直卡在循环里
  //else return nullptr;
}

 80069b6:	f7ff bfe3 	b.w	8006980 <myFree>

080069ba <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80069ba:	b510      	push	{r4, lr}
 80069bc:	b090      	sub	sp, #64	@ 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80069be:	2214      	movs	r2, #20
 80069c0:	2100      	movs	r1, #0
 80069c2:	a808      	add	r0, sp, #32
 80069c4:	f002 f89b 	bl	8008afe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80069c8:	2214      	movs	r2, #20
 80069ca:	2100      	movs	r1, #0
 80069cc:	a801      	add	r0, sp, #4
 80069ce:	f002 f896 	bl	8008afe <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80069d2:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80069d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80069d8:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80069da:	e9cd 430d 	strd	r4, r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80069de:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80069e2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80069e6:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80069e8:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80069ea:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80069ec:	f000 fc42 	bl	8007274 <HAL_RCC_OscConfig>
 80069f0:	b108      	cbz	r0, 80069f6 <SystemClock_Config+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80069f2:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80069f4:	e7fe      	b.n	80069f4 <SystemClock_Config+0x3a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80069f6:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80069f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80069fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006a00:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006a02:	e9cd 3004 	strd	r3, r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006a06:	4621      	mov	r1, r4
 8006a08:	a801      	add	r0, sp, #4
 8006a0a:	f000 fdf5 	bl	80075f8 <HAL_RCC_ClockConfig>
 8006a0e:	b108      	cbz	r0, 8006a14 <SystemClock_Config+0x5a>
 8006a10:	b672      	cpsid	i
  while (1)
 8006a12:	e7fe      	b.n	8006a12 <SystemClock_Config+0x58>
}
 8006a14:	b010      	add	sp, #64	@ 0x40
 8006a16:	bd10      	pop	{r4, pc}

08006a18 <main>:
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b088      	sub	sp, #32
  HAL_Init();
 8006a1c:	f000 f9aa 	bl	8006d74 <HAL_Init>
  SystemClock_Config();
 8006a20:	f7ff ffcb 	bl	80069ba <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a24:	2210      	movs	r2, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a26:	2601      	movs	r6, #1
 8006a28:	2702      	movs	r7, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006a2a:	4d3a      	ldr	r5, [pc, #232]	@ (8006b14 <main+0xfc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a2c:	2100      	movs	r1, #0
 8006a2e:	eb0d 0002 	add.w	r0, sp, r2
 8006a32:	f002 f864 	bl	8008afe <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006a36:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOA, StatusLED_Pin|OLED_RST_Pin|OLED_DC_Pin|OLED_CS_Pin, GPIO_PIN_RESET);
 8006a38:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006a3a:	f043 0320 	orr.w	r3, r3, #32
 8006a3e:	61ab      	str	r3, [r5, #24]
 8006a40:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOA, StatusLED_Pin|OLED_RST_Pin|OLED_DC_Pin|OLED_CS_Pin, GPIO_PIN_RESET);
 8006a42:	f640 6102 	movw	r1, #3586	@ 0xe02
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006a46:	f003 0320 	and.w	r3, r3, #32
 8006a4a:	9301      	str	r3, [sp, #4]
 8006a4c:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a4e:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOA, StatusLED_Pin|OLED_RST_Pin|OLED_DC_Pin|OLED_CS_Pin, GPIO_PIN_RESET);
 8006a50:	4831      	ldr	r0, [pc, #196]	@ (8006b18 <main+0x100>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a52:	f043 0304 	orr.w	r3, r3, #4
 8006a56:	61ab      	str	r3, [r5, #24]
 8006a58:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a5a:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a5c:	f003 0304 	and.w	r3, r3, #4
 8006a60:	9302      	str	r3, [sp, #8]
 8006a62:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a64:	69ab      	ldr	r3, [r5, #24]
 8006a66:	f043 0308 	orr.w	r3, r3, #8
 8006a6a:	61ab      	str	r3, [r5, #24]
 8006a6c:	69ab      	ldr	r3, [r5, #24]
 8006a6e:	f003 0308 	and.w	r3, r3, #8
 8006a72:	9303      	str	r3, [sp, #12]
 8006a74:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, StatusLED_Pin|OLED_RST_Pin|OLED_DC_Pin|OLED_CS_Pin, GPIO_PIN_RESET);
 8006a76:	f000 fbf7 	bl	8007268 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(StatusLED_GPIO_Port, &GPIO_InitStruct);
 8006a7a:	4827      	ldr	r0, [pc, #156]	@ (8006b18 <main+0x100>)
 8006a7c:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a7e:	e9cd 7604 	strd	r7, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a82:	e9cd 6706 	strd	r6, r7, [sp, #24]
  HAL_GPIO_Init(StatusLED_GPIO_Port, &GPIO_InitStruct);
 8006a86:	f000 fb11 	bl	80070ac <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a8a:	2350      	movs	r3, #80	@ 0x50
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a8c:	4822      	ldr	r0, [pc, #136]	@ (8006b18 <main+0x100>)
 8006a8e:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a90:	e9cd 3404 	strd	r3, r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a94:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a96:	f000 fb09 	bl	80070ac <HAL_GPIO_Init>
  HAL_GPIO_Init(KEY3_GPIO_Port, &GPIO_InitStruct);
 8006a9a:	4820      	ldr	r0, [pc, #128]	@ (8006b1c <main+0x104>)
 8006a9c:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a9e:	e9cd 6404 	strd	r6, r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006aa2:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(KEY3_GPIO_Port, &GPIO_InitStruct);
 8006aa4:	f000 fb02 	bl	80070ac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OLED_RST_Pin|OLED_DC_Pin|OLED_CS_Pin;
 8006aa8:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006aac:	481a      	ldr	r0, [pc, #104]	@ (8006b18 <main+0x100>)
 8006aae:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006ab0:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ab4:	e9cd 4706 	strd	r4, r7, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ab8:	f000 faf8 	bl	80070ac <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006abc:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8006abe:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006ac0:	4333      	orrs	r3, r6
 8006ac2:	616b      	str	r3, [r5, #20]
 8006ac4:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8006ac6:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006ac8:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8006aca:	200f      	movs	r0, #15
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006acc:	9304      	str	r3, [sp, #16]
 8006ace:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8006ad0:	f000 f998 	bl	8006e04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8006ad4:	200f      	movs	r0, #15
 8006ad6:	f000 f9c5 	bl	8006e64 <HAL_NVIC_EnableIRQ>
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006ada:	f44f 7382 	mov.w	r3, #260	@ 0x104
  hspi2.Instance = SPI2;
 8006ade:	4810      	ldr	r0, [pc, #64]	@ (8006b20 <main+0x108>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006ae0:	4a10      	ldr	r2, [pc, #64]	@ (8006b24 <main+0x10c>)
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006ae2:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006ae6:	e9c0 2300 	strd	r2, r3, [r0]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006aea:	f44f 7300 	mov.w	r3, #512	@ 0x200
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006aee:	e9c0 3406 	strd	r3, r4, [r0, #24]
  hspi2.Init.CRCPolynomial = 10;
 8006af2:	230a      	movs	r3, #10
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006af4:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006af8:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006afc:	6284      	str	r4, [r0, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8006afe:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006b00:	f000 fe8e 	bl	8007820 <HAL_SPI_Init>
 8006b04:	b108      	cbz	r0, 8006b0a <main+0xf2>
 8006b06:	b672      	cpsid	i
  while (1)
 8006b08:	e7fe      	b.n	8006b08 <main+0xf0>
  astraCoreInit();
 8006b0a:	f7fa fe99 	bl	8001840 <astraCoreInit>
  astraCoreStart();
 8006b0e:	f7fb f857 	bl	8001bc0 <astraCoreStart>
  while (1)
 8006b12:	e7fe      	b.n	8006b12 <main+0xfa>
 8006b14:	40021000 	.word	0x40021000
 8006b18:	40010800 	.word	0x40010800
 8006b1c:	40010c00 	.word	0x40010c00
 8006b20:	20003ef4 	.word	0x20003ef4
 8006b24:	40003800 	.word	0x40003800

08006b28 <Error_Handler>:
 8006b28:	b672      	cpsid	i
  while (1)
 8006b2a:	e7fe      	b.n	8006b2a <Error_Handler+0x2>

08006b2c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8006b2c:	4b0e      	ldr	r3, [pc, #56]	@ (8006b68 <HAL_MspInit+0x3c>)
{
 8006b2e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8006b30:	699a      	ldr	r2, [r3, #24]
 8006b32:	f042 0201 	orr.w	r2, r2, #1
 8006b36:	619a      	str	r2, [r3, #24]
 8006b38:	699a      	ldr	r2, [r3, #24]
 8006b3a:	f002 0201 	and.w	r2, r2, #1
 8006b3e:	9200      	str	r2, [sp, #0]
 8006b40:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006b42:	69da      	ldr	r2, [r3, #28]
 8006b44:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8006b48:	61da      	str	r2, [r3, #28]
 8006b4a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006b4c:	4a07      	ldr	r2, [pc, #28]	@ (8006b6c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8006b4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b52:	9301      	str	r3, [sp, #4]
 8006b54:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006b56:	6853      	ldr	r3, [r2, #4]
 8006b58:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8006b5c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006b60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006b62:	b002      	add	sp, #8
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	40021000 	.word	0x40021000
 8006b6c:	40010000 	.word	0x40010000

08006b70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006b70:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b72:	2710      	movs	r7, #16
{
 8006b74:	4606      	mov	r6, r0
 8006b76:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b78:	463a      	mov	r2, r7
 8006b7a:	2100      	movs	r1, #0
 8006b7c:	a802      	add	r0, sp, #8
 8006b7e:	f001 ffbe 	bl	8008afe <memset>
  if(hspi->Instance==SPI2)
 8006b82:	6832      	ldr	r2, [r6, #0]
 8006b84:	4b20      	ldr	r3, [pc, #128]	@ (8006c08 <HAL_SPI_MspInit+0x98>)
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d13b      	bne.n	8006c02 <HAL_SPI_MspInit+0x92>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006b8a:	f503 33ec 	add.w	r3, r3, #120832	@ 0x1d800
 8006b8e:	69da      	ldr	r2, [r3, #28]
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = OLED_SCK_Pin|OLED_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b90:	481e      	ldr	r0, [pc, #120]	@ (8006c0c <HAL_SPI_MspInit+0x9c>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006b92:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b96:	61da      	str	r2, [r3, #28]
 8006b98:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b9a:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006b9c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8006ba0:	9200      	str	r2, [sp, #0]
 8006ba2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ba4:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ba6:	2500      	movs	r5, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ba8:	f042 0208 	orr.w	r2, r2, #8
 8006bac:	619a      	str	r2, [r3, #24]
 8006bae:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bb0:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006bb4:	f003 0308 	and.w	r3, r3, #8
 8006bb8:	9301      	str	r3, [sp, #4]
 8006bba:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bbc:	2302      	movs	r3, #2
 8006bbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bc6:	f000 fa71 	bl	80070ac <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006bca:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bce:	480f      	ldr	r0, [pc, #60]	@ (8006c0c <HAL_SPI_MspInit+0x9c>)
 8006bd0:	a902      	add	r1, sp, #8

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8006bd2:	4c0f      	ldr	r4, [pc, #60]	@ (8006c10 <HAL_SPI_MspInit+0xa0>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006bd4:	e9cd 3502 	strd	r3, r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bd8:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bda:	f000 fa67 	bl	80070ac <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8006bde:	4b0d      	ldr	r3, [pc, #52]	@ (8006c14 <HAL_SPI_MspInit+0xa4>)
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8006be0:	4620      	mov	r0, r4
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006be2:	e9c4 3700 	strd	r3, r7, [r4]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006be6:	2380      	movs	r3, #128	@ 0x80
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8006be8:	e9c4 5505 	strd	r5, r5, [r4, #20]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006bec:	e9c4 3503 	strd	r3, r5, [r4, #12]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006bf0:	60a5      	str	r5, [r4, #8]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006bf2:	61e5      	str	r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8006bf4:	f000 f958 	bl	8006ea8 <HAL_DMA_Init>
 8006bf8:	b108      	cbz	r0, 8006bfe <HAL_SPI_MspInit+0x8e>
    {
      Error_Handler();
 8006bfa:	f7ff ff95 	bl	8006b28 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8006bfe:	64b4      	str	r4, [r6, #72]	@ 0x48
 8006c00:	6266      	str	r6, [r4, #36]	@ 0x24

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8006c02:	b007      	add	sp, #28
 8006c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c06:	bf00      	nop
 8006c08:	40003800 	.word	0x40003800
 8006c0c:	40010c00 	.word	0x40010c00
 8006c10:	20003f4c 	.word	0x20003f4c
 8006c14:	40020058 	.word	0x40020058

08006c18 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006c18:	e7fe      	b.n	8006c18 <NMI_Handler>

08006c1a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006c1a:	e7fe      	b.n	8006c1a <HardFault_Handler>

08006c1c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006c1c:	e7fe      	b.n	8006c1c <MemManage_Handler>

08006c1e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006c1e:	e7fe      	b.n	8006c1e <BusFault_Handler>

08006c20 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006c20:	e7fe      	b.n	8006c20 <UsageFault_Handler>

08006c22 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006c22:	4770      	bx	lr

08006c24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8006c24:	4770      	bx	lr

08006c26 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8006c26:	4770      	bx	lr

08006c28 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006c28:	f000 b8b6 	b.w	8006d98 <HAL_IncTick>

08006c2c <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8006c2c:	4801      	ldr	r0, [pc, #4]	@ (8006c34 <DMA1_Channel5_IRQHandler+0x8>)
 8006c2e:	f000 b9a9 	b.w	8006f84 <HAL_DMA_IRQHandler>
 8006c32:	bf00      	nop
 8006c34:	20003f4c 	.word	0x20003f4c

08006c38 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8006c38:	2001      	movs	r0, #1
 8006c3a:	4770      	bx	lr

08006c3c <_kill>:

int _kill(int pid, int sig)
{
 8006c3c:	b508      	push	{r3, lr}
	errno = EINVAL;
 8006c3e:	f001 fff1 	bl	8008c24 <__errno>
 8006c42:	2316      	movs	r3, #22
 8006c44:	6003      	str	r3, [r0, #0]
	return -1;
}
 8006c46:	f04f 30ff 	mov.w	r0, #4294967295
 8006c4a:	bd08      	pop	{r3, pc}

08006c4c <_exit>:

void _exit (int status)
{
 8006c4c:	b508      	push	{r3, lr}
	errno = EINVAL;
 8006c4e:	f001 ffe9 	bl	8008c24 <__errno>
 8006c52:	2316      	movs	r3, #22
 8006c54:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8006c56:	e7fe      	b.n	8006c56 <_exit+0xa>

08006c58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006c58:	b570      	push	{r4, r5, r6, lr}
 8006c5a:	460d      	mov	r5, r1
 8006c5c:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006c5e:	460e      	mov	r6, r1
 8006c60:	1b73      	subs	r3, r6, r5
 8006c62:	429c      	cmp	r4, r3
 8006c64:	dc01      	bgt.n	8006c6a <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8006c66:	4620      	mov	r0, r4
 8006c68:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8006c6a:	f3af 8000 	nop.w
 8006c6e:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006c72:	e7f5      	b.n	8006c60 <_read+0x8>

08006c74 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006c74:	b570      	push	{r4, r5, r6, lr}
 8006c76:	460d      	mov	r5, r1
 8006c78:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006c7a:	460e      	mov	r6, r1
 8006c7c:	1b73      	subs	r3, r6, r5
 8006c7e:	429c      	cmp	r4, r3
 8006c80:	dc01      	bgt.n	8006c86 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8006c82:	4620      	mov	r0, r4
 8006c84:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8006c86:	f816 0b01 	ldrb.w	r0, [r6], #1
 8006c8a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006c8e:	e7f5      	b.n	8006c7c <_write+0x8>

08006c90 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006c90:	4a0a      	ldr	r2, [pc, #40]	@ (8006cbc <_sbrk+0x2c>)
{
 8006c92:	b508      	push	{r3, lr}
	if (heap_end == 0)
 8006c94:	6811      	ldr	r1, [r2, #0]
{
 8006c96:	4603      	mov	r3, r0
	if (heap_end == 0)
 8006c98:	b909      	cbnz	r1, 8006c9e <_sbrk+0xe>
		heap_end = &end;
 8006c9a:	4909      	ldr	r1, [pc, #36]	@ (8006cc0 <_sbrk+0x30>)
 8006c9c:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8006c9e:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8006ca0:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8006ca2:	4403      	add	r3, r0
 8006ca4:	428b      	cmp	r3, r1
 8006ca6:	d906      	bls.n	8006cb6 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8006ca8:	f001 ffbc 	bl	8008c24 <__errno>
 8006cac:	230c      	movs	r3, #12
 8006cae:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8006cb0:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8006cb4:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8006cb6:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8006cb8:	e7fc      	b.n	8006cb4 <_sbrk+0x24>
 8006cba:	bf00      	nop
 8006cbc:	20003d14 	.word	0x20003d14
 8006cc0:	20003f98 	.word	0x20003f98

08006cc4 <_close>:

int _close(int file)
{
	return -1;
}
 8006cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc8:	4770      	bx	lr

08006cca <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8006cca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 8006cce:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8006cd0:	604b      	str	r3, [r1, #4]
}
 8006cd2:	4770      	bx	lr

08006cd4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8006cd4:	2001      	movs	r0, #1
 8006cd6:	4770      	bx	lr

08006cd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8006cd8:	2000      	movs	r0, #0
 8006cda:	4770      	bx	lr

08006cdc <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006cdc:	4770      	bx	lr
	...

08006ce0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006ce0:	f7ff fffc 	bl	8006cdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006ce4:	480b      	ldr	r0, [pc, #44]	@ (8006d14 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8006ce6:	490c      	ldr	r1, [pc, #48]	@ (8006d18 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8006ce8:	4a0c      	ldr	r2, [pc, #48]	@ (8006d1c <LoopFillZerobss+0x16>)
  movs r3, #0
 8006cea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006cec:	e002      	b.n	8006cf4 <LoopCopyDataInit>

08006cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006cf2:	3304      	adds	r3, #4

08006cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006cf8:	d3f9      	bcc.n	8006cee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006cfa:	4a09      	ldr	r2, [pc, #36]	@ (8006d20 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8006cfc:	4c09      	ldr	r4, [pc, #36]	@ (8006d24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006d00:	e001      	b.n	8006d06 <LoopFillZerobss>

08006d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006d04:	3204      	adds	r2, #4

08006d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006d08:	d3fb      	bcc.n	8006d02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006d0a:	f001 ff91 	bl	8008c30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006d0e:	f7ff fe83 	bl	8006a18 <main>
  bx lr
 8006d12:	4770      	bx	lr
  ldr r0, =_sdata
 8006d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006d18:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8006d1c:	0800b684 	.word	0x0800b684
  ldr r2, =_sbss
 8006d20:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8006d24:	20003f94 	.word	0x20003f94

08006d28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006d28:	e7fe      	b.n	8006d28 <ADC1_2_IRQHandler>
	...

08006d2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006d2c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8006d68 <HAL_InitTick+0x3c>)
{
 8006d30:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006d32:	781a      	ldrb	r2, [r3, #0]
 8006d34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006d38:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d3c:	4a0b      	ldr	r2, [pc, #44]	@ (8006d6c <HAL_InitTick+0x40>)
 8006d3e:	6810      	ldr	r0, [r2, #0]
 8006d40:	fbb0 f0f3 	udiv	r0, r0, r3
 8006d44:	f000 f89c 	bl	8006e80 <HAL_SYSTICK_Config>
 8006d48:	4604      	mov	r4, r0
 8006d4a:	b958      	cbnz	r0, 8006d64 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006d4c:	2d0f      	cmp	r5, #15
 8006d4e:	d809      	bhi.n	8006d64 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006d50:	4602      	mov	r2, r0
 8006d52:	4629      	mov	r1, r5
 8006d54:	f04f 30ff 	mov.w	r0, #4294967295
 8006d58:	f000 f854 	bl	8006e04 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	4b04      	ldr	r3, [pc, #16]	@ (8006d70 <HAL_InitTick+0x44>)
 8006d60:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8006d62:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006d64:	2001      	movs	r0, #1
 8006d66:	e7fc      	b.n	8006d62 <HAL_InitTick+0x36>
 8006d68:	2000001c 	.word	0x2000001c
 8006d6c:	20000018 	.word	0x20000018
 8006d70:	20000020 	.word	0x20000020

08006d74 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006d74:	4a07      	ldr	r2, [pc, #28]	@ (8006d94 <HAL_Init+0x20>)
{
 8006d76:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006d78:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006d7a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006d7c:	f043 0310 	orr.w	r3, r3, #16
 8006d80:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006d82:	f000 f82d 	bl	8006de0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8006d86:	200f      	movs	r0, #15
 8006d88:	f7ff ffd0 	bl	8006d2c <HAL_InitTick>
  HAL_MspInit();
 8006d8c:	f7ff fece 	bl	8006b2c <HAL_MspInit>
}
 8006d90:	2000      	movs	r0, #0
 8006d92:	bd08      	pop	{r3, pc}
 8006d94:	40022000 	.word	0x40022000

08006d98 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8006d98:	4a03      	ldr	r2, [pc, #12]	@ (8006da8 <HAL_IncTick+0x10>)
 8006d9a:	4b04      	ldr	r3, [pc, #16]	@ (8006dac <HAL_IncTick+0x14>)
 8006d9c:	6811      	ldr	r1, [r2, #0]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	440b      	add	r3, r1
 8006da2:	6013      	str	r3, [r2, #0]
}
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	20003f90 	.word	0x20003f90
 8006dac:	2000001c 	.word	0x2000001c

08006db0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006db0:	4b01      	ldr	r3, [pc, #4]	@ (8006db8 <HAL_GetTick+0x8>)
 8006db2:	6818      	ldr	r0, [r3, #0]
}
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	20003f90 	.word	0x20003f90

08006dbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006dbc:	b538      	push	{r3, r4, r5, lr}
 8006dbe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006dc0:	f7ff fff6 	bl	8006db0 <HAL_GetTick>
 8006dc4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006dc6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8006dc8:	bf1e      	ittt	ne
 8006dca:	4b04      	ldrne	r3, [pc, #16]	@ (8006ddc <HAL_Delay+0x20>)
 8006dcc:	781b      	ldrbne	r3, [r3, #0]
 8006dce:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006dd0:	f7ff ffee 	bl	8006db0 <HAL_GetTick>
 8006dd4:	1b43      	subs	r3, r0, r5
 8006dd6:	42a3      	cmp	r3, r4
 8006dd8:	d3fa      	bcc.n	8006dd0 <HAL_Delay+0x14>
  {
  }
}
 8006dda:	bd38      	pop	{r3, r4, r5, pc}
 8006ddc:	2000001c 	.word	0x2000001c

08006de0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006de0:	4907      	ldr	r1, [pc, #28]	@ (8006e00 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006de2:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006de4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006de6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006dea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006dee:	0412      	lsls	r2, r2, #16
 8006df0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006df4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006df8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8006dfc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006dfe:	4770      	bx	lr
 8006e00:	e000ed00 	.word	0xe000ed00

08006e04 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e04:	4b15      	ldr	r3, [pc, #84]	@ (8006e5c <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006e06:	b530      	push	{r4, r5, lr}
 8006e08:	68dc      	ldr	r4, [r3, #12]
 8006e0a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e0e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e12:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e14:	2b04      	cmp	r3, #4
 8006e16:	bf28      	it	cs
 8006e18:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e1a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e1c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e20:	bf94      	ite	ls
 8006e22:	2400      	movls	r4, #0
 8006e24:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e26:	fa05 f303 	lsl.w	r3, r5, r3
 8006e2a:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006e2e:	40a5      	lsls	r5, r4
 8006e30:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e34:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8006e36:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e38:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e3c:	bfac      	ite	ge
 8006e3e:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e42:	4a07      	ldrlt	r2, [pc, #28]	@ (8006e60 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e44:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	bfab      	itete	ge
 8006e4c:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e50:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e54:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e58:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006e5a:	bd30      	pop	{r4, r5, pc}
 8006e5c:	e000ed00 	.word	0xe000ed00
 8006e60:	e000ed14 	.word	0xe000ed14

08006e64 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006e64:	2800      	cmp	r0, #0
 8006e66:	db07      	blt.n	8006e78 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e68:	2301      	movs	r3, #1
 8006e6a:	0941      	lsrs	r1, r0, #5
 8006e6c:	4a03      	ldr	r2, [pc, #12]	@ (8006e7c <HAL_NVIC_EnableIRQ+0x18>)
 8006e6e:	f000 001f 	and.w	r0, r0, #31
 8006e72:	4083      	lsls	r3, r0
 8006e74:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	e000e100 	.word	0xe000e100

08006e80 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006e80:	3801      	subs	r0, #1
 8006e82:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8006e86:	d20b      	bcs.n	8006ea0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006e88:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e8c:	21f0      	movs	r1, #240	@ 0xf0
 8006e8e:	4a05      	ldr	r2, [pc, #20]	@ (8006ea4 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006e90:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e92:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006e96:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006e98:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006e9a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006e9c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006e9e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8006ea0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8006ea2:	4770      	bx	lr
 8006ea4:	e000ed00 	.word	0xe000ed00

08006ea8 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006ea8:	4603      	mov	r3, r0
{
 8006eaa:	b510      	push	{r4, lr}
  if(hdma == NULL)
 8006eac:	b340      	cbz	r0, 8006f00 <HAL_DMA_Init+0x58>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006eae:	2114      	movs	r1, #20
 8006eb0:	6800      	ldr	r0, [r0, #0]
 8006eb2:	4a14      	ldr	r2, [pc, #80]	@ (8006f04 <HAL_DMA_Init+0x5c>)
 8006eb4:	4402      	add	r2, r0
 8006eb6:	fbb2 f2f1 	udiv	r2, r2, r1
 8006eba:	0092      	lsls	r2, r2, #2
 8006ebc:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8006ebe:	4a12      	ldr	r2, [pc, #72]	@ (8006f08 <HAL_DMA_Init+0x60>)
 8006ec0:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006ec8:	e9d3 2401 	ldrd	r2, r4, [r3, #4]
 8006ecc:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ece:	68dc      	ldr	r4, [r3, #12]
  tmp = hdma->Instance->CCR;
 8006ed0:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ed2:	4322      	orrs	r2, r4
 8006ed4:	691c      	ldr	r4, [r3, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006ed6:	f421 517f 	bic.w	r1, r1, #16320	@ 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006eda:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006edc:	695c      	ldr	r4, [r3, #20]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006ede:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ee2:	4322      	orrs	r2, r4
 8006ee4:	699c      	ldr	r4, [r3, #24]
 8006ee6:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8006ee8:	69dc      	ldr	r4, [r3, #28]
 8006eea:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 8006eec:	430a      	orrs	r2, r1

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006eee:	6002      	str	r2, [r0, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ef0:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006ef2:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ef4:	6398      	str	r0, [r3, #56]	@ 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006ef6:	f883 0020 	strb.w	r0, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8006efa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  return HAL_OK;
}
 8006efe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006f00:	2001      	movs	r0, #1
 8006f02:	e7fc      	b.n	8006efe <HAL_DMA_Init+0x56>
 8006f04:	bffdfff8 	.word	0xbffdfff8
 8006f08:	40020000 	.word	0x40020000

08006f0c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f0c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006f0e:	f890 4020 	ldrb.w	r4, [r0, #32]
 8006f12:	2c01      	cmp	r4, #1
 8006f14:	d034      	beq.n	8006f80 <HAL_DMA_Start_IT+0x74>
 8006f16:	2401      	movs	r4, #1
 8006f18:	f880 4020 	strb.w	r4, [r0, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006f1c:	f890 4021 	ldrb.w	r4, [r0, #33]	@ 0x21
 8006f20:	2c01      	cmp	r4, #1
 8006f22:	b2e5      	uxtb	r5, r4
 8006f24:	f04f 0400 	mov.w	r4, #0
 8006f28:	d128      	bne.n	8006f7c <HAL_DMA_Start_IT+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006f2a:	2602      	movs	r6, #2
 8006f2c:	f880 6021 	strb.w	r6, [r0, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f30:	6384      	str	r4, [r0, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006f32:	6804      	ldr	r4, [r0, #0]
 8006f34:	6826      	ldr	r6, [r4, #0]
 8006f36:	f026 0601 	bic.w	r6, r6, #1
 8006f3a:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006f3c:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	@ 0x3c
 8006f40:	40bd      	lsls	r5, r7
 8006f42:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006f44:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f46:	6843      	ldr	r3, [r0, #4]
 8006f48:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8006f4a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006f4c:	bf0b      	itete	eq
 8006f4e:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8006f50:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8006f52:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8006f54:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8006f56:	b14b      	cbz	r3, 8006f6c <HAL_DMA_Start_IT+0x60>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f58:	6823      	ldr	r3, [r4, #0]
 8006f5a:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 8006f5e:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006f60:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8006f62:	6823      	ldr	r3, [r4, #0]
 8006f64:	f043 0301 	orr.w	r3, r3, #1
 8006f68:	6023      	str	r3, [r4, #0]
}
 8006f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006f6c:	6823      	ldr	r3, [r4, #0]
 8006f6e:	f023 0304 	bic.w	r3, r3, #4
 8006f72:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006f74:	6823      	ldr	r3, [r4, #0]
 8006f76:	f043 030a 	orr.w	r3, r3, #10
 8006f7a:	e7f0      	b.n	8006f5e <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 8006f7c:	f880 4020 	strb.w	r4, [r0, #32]
  __HAL_LOCK(hdma);
 8006f80:	2002      	movs	r0, #2
 8006f82:	e7f2      	b.n	8006f6a <HAL_DMA_Start_IT+0x5e>

08006f84 <HAL_DMA_IRQHandler>:
{
 8006f84:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006f86:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006f88:	6bc6      	ldr	r6, [r0, #60]	@ 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006f8a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006f8c:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8006f8e:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006f90:	4095      	lsls	r5, r2
 8006f92:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8006f94:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006f96:	d032      	beq.n	8006ffe <HAL_DMA_IRQHandler+0x7a>
 8006f98:	074d      	lsls	r5, r1, #29
 8006f9a:	d530      	bpl.n	8006ffe <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006fa0:	bf5e      	ittt	pl
 8006fa2:	681a      	ldrpl	r2, [r3, #0]
 8006fa4:	f022 0204 	bicpl.w	r2, r2, #4
 8006fa8:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006faa:	4a3e      	ldr	r2, [pc, #248]	@ (80070a4 <HAL_DMA_IRQHandler+0x120>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d019      	beq.n	8006fe4 <HAL_DMA_IRQHandler+0x60>
 8006fb0:	3214      	adds	r2, #20
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d018      	beq.n	8006fe8 <HAL_DMA_IRQHandler+0x64>
 8006fb6:	3214      	adds	r2, #20
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d017      	beq.n	8006fec <HAL_DMA_IRQHandler+0x68>
 8006fbc:	3214      	adds	r2, #20
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d017      	beq.n	8006ff2 <HAL_DMA_IRQHandler+0x6e>
 8006fc2:	3214      	adds	r2, #20
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d017      	beq.n	8006ff8 <HAL_DMA_IRQHandler+0x74>
 8006fc8:	3214      	adds	r2, #20
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	bf14      	ite	ne
 8006fce:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
 8006fd2:	f44f 0380 	moveq.w	r3, #4194304	@ 0x400000
 8006fd6:	4a34      	ldr	r2, [pc, #208]	@ (80070a8 <HAL_DMA_IRQHandler+0x124>)
 8006fd8:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8006fda:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    if (hdma->XferErrorCallback != NULL)
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d05e      	beq.n	800709e <HAL_DMA_IRQHandler+0x11a>
}
 8006fe0:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8006fe2:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006fe4:	2304      	movs	r3, #4
 8006fe6:	e7f6      	b.n	8006fd6 <HAL_DMA_IRQHandler+0x52>
 8006fe8:	2340      	movs	r3, #64	@ 0x40
 8006fea:	e7f4      	b.n	8006fd6 <HAL_DMA_IRQHandler+0x52>
 8006fec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006ff0:	e7f1      	b.n	8006fd6 <HAL_DMA_IRQHandler+0x52>
 8006ff2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006ff6:	e7ee      	b.n	8006fd6 <HAL_DMA_IRQHandler+0x52>
 8006ff8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8006ffc:	e7eb      	b.n	8006fd6 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8006ffe:	2502      	movs	r5, #2
 8007000:	4095      	lsls	r5, r2
 8007002:	4225      	tst	r5, r4
 8007004:	d035      	beq.n	8007072 <HAL_DMA_IRQHandler+0xee>
 8007006:	078d      	lsls	r5, r1, #30
 8007008:	d533      	bpl.n	8007072 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	0694      	lsls	r4, r2, #26
 800700e:	d406      	bmi.n	800701e <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	f022 020a 	bic.w	r2, r2, #10
 8007016:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8007018:	2201      	movs	r2, #1
 800701a:	f880 2021 	strb.w	r2, [r0, #33]	@ 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800701e:	4a21      	ldr	r2, [pc, #132]	@ (80070a4 <HAL_DMA_IRQHandler+0x120>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d019      	beq.n	8007058 <HAL_DMA_IRQHandler+0xd4>
 8007024:	3214      	adds	r2, #20
 8007026:	4293      	cmp	r3, r2
 8007028:	d018      	beq.n	800705c <HAL_DMA_IRQHandler+0xd8>
 800702a:	3214      	adds	r2, #20
 800702c:	4293      	cmp	r3, r2
 800702e:	d017      	beq.n	8007060 <HAL_DMA_IRQHandler+0xdc>
 8007030:	3214      	adds	r2, #20
 8007032:	4293      	cmp	r3, r2
 8007034:	d017      	beq.n	8007066 <HAL_DMA_IRQHandler+0xe2>
 8007036:	3214      	adds	r2, #20
 8007038:	4293      	cmp	r3, r2
 800703a:	d017      	beq.n	800706c <HAL_DMA_IRQHandler+0xe8>
 800703c:	3214      	adds	r2, #20
 800703e:	4293      	cmp	r3, r2
 8007040:	bf14      	ite	ne
 8007042:	f04f 7300 	movne.w	r3, #33554432	@ 0x2000000
 8007046:	f44f 1300 	moveq.w	r3, #2097152	@ 0x200000
 800704a:	4a17      	ldr	r2, [pc, #92]	@ (80070a8 <HAL_DMA_IRQHandler+0x124>)
 800704c:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 800704e:	2300      	movs	r3, #0
 8007050:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8007054:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007056:	e7c1      	b.n	8006fdc <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007058:	2302      	movs	r3, #2
 800705a:	e7f6      	b.n	800704a <HAL_DMA_IRQHandler+0xc6>
 800705c:	2320      	movs	r3, #32
 800705e:	e7f4      	b.n	800704a <HAL_DMA_IRQHandler+0xc6>
 8007060:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007064:	e7f1      	b.n	800704a <HAL_DMA_IRQHandler+0xc6>
 8007066:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800706a:	e7ee      	b.n	800704a <HAL_DMA_IRQHandler+0xc6>
 800706c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007070:	e7eb      	b.n	800704a <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8007072:	2508      	movs	r5, #8
 8007074:	4095      	lsls	r5, r2
 8007076:	4225      	tst	r5, r4
 8007078:	d011      	beq.n	800709e <HAL_DMA_IRQHandler+0x11a>
 800707a:	0709      	lsls	r1, r1, #28
 800707c:	d50f      	bpl.n	800709e <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800707e:	6819      	ldr	r1, [r3, #0]
 8007080:	f021 010e 	bic.w	r1, r1, #14
 8007084:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007086:	2301      	movs	r3, #1
 8007088:	fa03 f202 	lsl.w	r2, r3, r2
 800708c:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800708e:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8007090:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8007094:	2300      	movs	r3, #0
 8007096:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 800709a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800709c:	e79e      	b.n	8006fdc <HAL_DMA_IRQHandler+0x58>
}
 800709e:	bc70      	pop	{r4, r5, r6}
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	40020008 	.word	0x40020008
 80070a8:	40020000 	.word	0x40020000

080070ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80070ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80070b0:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80070b2:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80070b4:	f8df c188 	ldr.w	ip, [pc, #392]	@ 8007240 <HAL_GPIO_Init+0x194>
 80070b8:	4b62      	ldr	r3, [pc, #392]	@ (8007244 <HAL_GPIO_Init+0x198>)
      switch (GPIO_Init->Mode)
 80070ba:	f8df e18c 	ldr.w	lr, [pc, #396]	@ 8007248 <HAL_GPIO_Init+0x19c>
 80070be:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 800724c <HAL_GPIO_Init+0x1a0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80070c2:	680a      	ldr	r2, [r1, #0]
 80070c4:	fa32 f506 	lsrs.w	r5, r2, r6
 80070c8:	d102      	bne.n	80070d0 <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 80070ca:	b003      	add	sp, #12
 80070cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80070d0:	2701      	movs	r7, #1
 80070d2:	40b7      	lsls	r7, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80070d4:	ea02 0507 	and.w	r5, r2, r7
    if (iocurrent == ioposition)
 80070d8:	ea37 0202 	bics.w	r2, r7, r2
 80070dc:	d17a      	bne.n	80071d4 <HAL_GPIO_Init+0x128>
      switch (GPIO_Init->Mode)
 80070de:	684a      	ldr	r2, [r1, #4]
 80070e0:	2a03      	cmp	r2, #3
 80070e2:	d807      	bhi.n	80070f4 <HAL_GPIO_Init+0x48>
 80070e4:	3a01      	subs	r2, #1
 80070e6:	2a02      	cmp	r2, #2
 80070e8:	f200 8083 	bhi.w	80071f2 <HAL_GPIO_Init+0x146>
 80070ec:	e8df f002 	tbb	[pc, r2]
 80070f0:	9792      	.short	0x9792
 80070f2:	9d          	.byte	0x9d
 80070f3:	00          	.byte	0x00
 80070f4:	2a12      	cmp	r2, #18
 80070f6:	f000 8095 	beq.w	8007224 <HAL_GPIO_Init+0x178>
 80070fa:	d86d      	bhi.n	80071d8 <HAL_GPIO_Init+0x12c>
 80070fc:	2a11      	cmp	r2, #17
 80070fe:	f000 808b 	beq.w	8007218 <HAL_GPIO_Init+0x16c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007102:	2dff      	cmp	r5, #255	@ 0xff
 8007104:	bf98      	it	ls
 8007106:	4681      	movls	r9, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007108:	f04f 0b0f 	mov.w	fp, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800710c:	bf88      	it	hi
 800710e:	f100 0904 	addhi.w	r9, r0, #4
 8007112:	ea4f 0286 	mov.w	r2, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007116:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800711a:	bf88      	it	hi
 800711c:	3a20      	subhi	r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800711e:	fa0b fa02 	lsl.w	sl, fp, r2
 8007122:	ea27 070a 	bic.w	r7, r7, sl
 8007126:	fa04 f202 	lsl.w	r2, r4, r2
 800712a:	4317      	orrs	r7, r2
 800712c:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007130:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8007134:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 8007138:	d04c      	beq.n	80071d4 <HAL_GPIO_Init+0x128>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800713a:	f8dc 2018 	ldr.w	r2, [ip, #24]
 800713e:	f026 0703 	bic.w	r7, r6, #3
 8007142:	f042 0201 	orr.w	r2, r2, #1
 8007146:	f8cc 2018 	str.w	r2, [ip, #24]
 800714a:	f8dc 2018 	ldr.w	r2, [ip, #24]
 800714e:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8007152:	f002 0201 	and.w	r2, r2, #1
 8007156:	9201      	str	r2, [sp, #4]
 8007158:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800715c:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007160:	9a01      	ldr	r2, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007162:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8007166:	68ba      	ldr	r2, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007168:	fa0b fb0a 	lsl.w	fp, fp, sl
 800716c:	ea22 0b0b 	bic.w	fp, r2, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007170:	4a37      	ldr	r2, [pc, #220]	@ (8007250 <HAL_GPIO_Init+0x1a4>)
 8007172:	4290      	cmp	r0, r2
 8007174:	d05d      	beq.n	8007232 <HAL_GPIO_Init+0x186>
 8007176:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800717a:	4290      	cmp	r0, r2
 800717c:	d05b      	beq.n	8007236 <HAL_GPIO_Init+0x18a>
 800717e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007182:	4290      	cmp	r0, r2
 8007184:	d059      	beq.n	800723a <HAL_GPIO_Init+0x18e>
 8007186:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800718a:	4290      	cmp	r0, r2
 800718c:	bf14      	ite	ne
 800718e:	2204      	movne	r2, #4
 8007190:	2203      	moveq	r2, #3
 8007192:	fa02 f20a 	lsl.w	r2, r2, sl
 8007196:	ea42 020b 	orr.w	r2, r2, fp
        AFIO->EXTICR[position >> 2u] = temp;
 800719a:	60ba      	str	r2, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 800719c:	689a      	ldr	r2, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800719e:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80071a2:	bf14      	ite	ne
 80071a4:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80071a6:	43aa      	biceq	r2, r5
 80071a8:	609a      	str	r2, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80071aa:	68da      	ldr	r2, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80071ac:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80071b0:	bf14      	ite	ne
 80071b2:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80071b4:	43aa      	biceq	r2, r5
 80071b6:	60da      	str	r2, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 80071b8:	685a      	ldr	r2, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80071ba:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80071be:	bf14      	ite	ne
 80071c0:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80071c2:	43aa      	biceq	r2, r5
 80071c4:	605a      	str	r2, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 80071c6:	681a      	ldr	r2, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80071c8:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80071cc:	bf14      	ite	ne
 80071ce:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80071d0:	43aa      	biceq	r2, r5
 80071d2:	601a      	str	r2, [r3, #0]
	position++;
 80071d4:	3601      	adds	r6, #1
 80071d6:	e774      	b.n	80070c2 <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 80071d8:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 8007254 <HAL_GPIO_Init+0x1a8>
 80071dc:	454a      	cmp	r2, r9
 80071de:	d008      	beq.n	80071f2 <HAL_GPIO_Init+0x146>
 80071e0:	d810      	bhi.n	8007204 <HAL_GPIO_Init+0x158>
 80071e2:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 80071e6:	454a      	cmp	r2, r9
 80071e8:	d003      	beq.n	80071f2 <HAL_GPIO_Init+0x146>
 80071ea:	4572      	cmp	r2, lr
 80071ec:	d001      	beq.n	80071f2 <HAL_GPIO_Init+0x146>
 80071ee:	4542      	cmp	r2, r8
 80071f0:	d187      	bne.n	8007102 <HAL_GPIO_Init+0x56>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80071f2:	688a      	ldr	r2, [r1, #8]
 80071f4:	b1da      	cbz	r2, 800722e <HAL_GPIO_Init+0x182>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80071f6:	2a01      	cmp	r2, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80071f8:	f04f 0408 	mov.w	r4, #8
            GPIOx->BSRR = ioposition;
 80071fc:	bf0c      	ite	eq
 80071fe:	6107      	streq	r7, [r0, #16]
            GPIOx->BRR = ioposition;
 8007200:	6147      	strne	r7, [r0, #20]
 8007202:	e77e      	b.n	8007102 <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8007204:	f8df 9050 	ldr.w	r9, [pc, #80]	@ 8007258 <HAL_GPIO_Init+0x1ac>
 8007208:	454a      	cmp	r2, r9
 800720a:	d0f2      	beq.n	80071f2 <HAL_GPIO_Init+0x146>
 800720c:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 8007210:	454a      	cmp	r2, r9
 8007212:	e7ed      	b.n	80071f0 <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007214:	68cc      	ldr	r4, [r1, #12]
          break;
 8007216:	e774      	b.n	8007102 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007218:	68cc      	ldr	r4, [r1, #12]
 800721a:	3404      	adds	r4, #4
          break;
 800721c:	e771      	b.n	8007102 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800721e:	68cc      	ldr	r4, [r1, #12]
 8007220:	3408      	adds	r4, #8
          break;
 8007222:	e76e      	b.n	8007102 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007224:	68cc      	ldr	r4, [r1, #12]
 8007226:	340c      	adds	r4, #12
          break;
 8007228:	e76b      	b.n	8007102 <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 800722a:	2400      	movs	r4, #0
 800722c:	e769      	b.n	8007102 <HAL_GPIO_Init+0x56>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800722e:	2404      	movs	r4, #4
 8007230:	e767      	b.n	8007102 <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007232:	2200      	movs	r2, #0
 8007234:	e7ad      	b.n	8007192 <HAL_GPIO_Init+0xe6>
 8007236:	2201      	movs	r2, #1
 8007238:	e7ab      	b.n	8007192 <HAL_GPIO_Init+0xe6>
 800723a:	2202      	movs	r2, #2
 800723c:	e7a9      	b.n	8007192 <HAL_GPIO_Init+0xe6>
 800723e:	bf00      	nop
 8007240:	40021000 	.word	0x40021000
 8007244:	40010400 	.word	0x40010400
 8007248:	10210000 	.word	0x10210000
 800724c:	10110000 	.word	0x10110000
 8007250:	40010800 	.word	0x40010800
 8007254:	10220000 	.word	0x10220000
 8007258:	10310000 	.word	0x10310000

0800725c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800725c:	6883      	ldr	r3, [r0, #8]
 800725e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8007260:	bf14      	ite	ne
 8007262:	2001      	movne	r0, #1
 8007264:	2000      	moveq	r0, #0
 8007266:	4770      	bx	lr

08007268 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007268:	b10a      	cbz	r2, 800726e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800726a:	6101      	str	r1, [r0, #16]
  }
}
 800726c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800726e:	0409      	lsls	r1, r1, #16
 8007270:	e7fb      	b.n	800726a <HAL_GPIO_WritePin+0x2>
	...

08007274 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007274:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007278:	4605      	mov	r5, r0
 800727a:	b338      	cbz	r0, 80072cc <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800727c:	6803      	ldr	r3, [r0, #0]
 800727e:	07db      	lsls	r3, r3, #31
 8007280:	d410      	bmi.n	80072a4 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007282:	682b      	ldr	r3, [r5, #0]
 8007284:	079f      	lsls	r7, r3, #30
 8007286:	d45e      	bmi.n	8007346 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007288:	682b      	ldr	r3, [r5, #0]
 800728a:	0719      	lsls	r1, r3, #28
 800728c:	f100 8095 	bmi.w	80073ba <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007290:	682b      	ldr	r3, [r5, #0]
 8007292:	075a      	lsls	r2, r3, #29
 8007294:	f100 80c1 	bmi.w	800741a <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007298:	69eb      	ldr	r3, [r5, #28]
 800729a:	2b00      	cmp	r3, #0
 800729c:	f040 812c 	bne.w	80074f8 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 80072a0:	2000      	movs	r0, #0
 80072a2:	e029      	b.n	80072f8 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80072a4:	4c90      	ldr	r4, [pc, #576]	@ (80074e8 <HAL_RCC_OscConfig+0x274>)
 80072a6:	6863      	ldr	r3, [r4, #4]
 80072a8:	f003 030c 	and.w	r3, r3, #12
 80072ac:	2b04      	cmp	r3, #4
 80072ae:	d007      	beq.n	80072c0 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80072b0:	6863      	ldr	r3, [r4, #4]
 80072b2:	f003 030c 	and.w	r3, r3, #12
 80072b6:	2b08      	cmp	r3, #8
 80072b8:	d10a      	bne.n	80072d0 <HAL_RCC_OscConfig+0x5c>
 80072ba:	6863      	ldr	r3, [r4, #4]
 80072bc:	03de      	lsls	r6, r3, #15
 80072be:	d507      	bpl.n	80072d0 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072c0:	6823      	ldr	r3, [r4, #0]
 80072c2:	039c      	lsls	r4, r3, #14
 80072c4:	d5dd      	bpl.n	8007282 <HAL_RCC_OscConfig+0xe>
 80072c6:	686b      	ldr	r3, [r5, #4]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d1da      	bne.n	8007282 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 80072cc:	2001      	movs	r0, #1
 80072ce:	e013      	b.n	80072f8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072d0:	686b      	ldr	r3, [r5, #4]
 80072d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072d6:	d112      	bne.n	80072fe <HAL_RCC_OscConfig+0x8a>
 80072d8:	6823      	ldr	r3, [r4, #0]
 80072da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072de:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80072e0:	f7ff fd66 	bl	8006db0 <HAL_GetTick>
 80072e4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072e6:	6823      	ldr	r3, [r4, #0]
 80072e8:	0398      	lsls	r0, r3, #14
 80072ea:	d4ca      	bmi.n	8007282 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072ec:	f7ff fd60 	bl	8006db0 <HAL_GetTick>
 80072f0:	1b80      	subs	r0, r0, r6
 80072f2:	2864      	cmp	r0, #100	@ 0x64
 80072f4:	d9f7      	bls.n	80072e6 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 80072f6:	2003      	movs	r0, #3
}
 80072f8:	b002      	add	sp, #8
 80072fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072fe:	b99b      	cbnz	r3, 8007328 <HAL_RCC_OscConfig+0xb4>
 8007300:	6823      	ldr	r3, [r4, #0]
 8007302:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007306:	6023      	str	r3, [r4, #0]
 8007308:	6823      	ldr	r3, [r4, #0]
 800730a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800730e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8007310:	f7ff fd4e 	bl	8006db0 <HAL_GetTick>
 8007314:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007316:	6823      	ldr	r3, [r4, #0]
 8007318:	0399      	lsls	r1, r3, #14
 800731a:	d5b2      	bpl.n	8007282 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800731c:	f7ff fd48 	bl	8006db0 <HAL_GetTick>
 8007320:	1b80      	subs	r0, r0, r6
 8007322:	2864      	cmp	r0, #100	@ 0x64
 8007324:	d9f7      	bls.n	8007316 <HAL_RCC_OscConfig+0xa2>
 8007326:	e7e6      	b.n	80072f6 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007328:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800732c:	6823      	ldr	r3, [r4, #0]
 800732e:	d103      	bne.n	8007338 <HAL_RCC_OscConfig+0xc4>
 8007330:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007334:	6023      	str	r3, [r4, #0]
 8007336:	e7cf      	b.n	80072d8 <HAL_RCC_OscConfig+0x64>
 8007338:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800733c:	6023      	str	r3, [r4, #0]
 800733e:	6823      	ldr	r3, [r4, #0]
 8007340:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007344:	e7cb      	b.n	80072de <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007346:	4c68      	ldr	r4, [pc, #416]	@ (80074e8 <HAL_RCC_OscConfig+0x274>)
 8007348:	6863      	ldr	r3, [r4, #4]
 800734a:	f013 0f0c 	tst.w	r3, #12
 800734e:	d007      	beq.n	8007360 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007350:	6863      	ldr	r3, [r4, #4]
 8007352:	f003 030c 	and.w	r3, r3, #12
 8007356:	2b08      	cmp	r3, #8
 8007358:	d110      	bne.n	800737c <HAL_RCC_OscConfig+0x108>
 800735a:	6863      	ldr	r3, [r4, #4]
 800735c:	03da      	lsls	r2, r3, #15
 800735e:	d40d      	bmi.n	800737c <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007360:	6823      	ldr	r3, [r4, #0]
 8007362:	079b      	lsls	r3, r3, #30
 8007364:	d502      	bpl.n	800736c <HAL_RCC_OscConfig+0xf8>
 8007366:	692b      	ldr	r3, [r5, #16]
 8007368:	2b01      	cmp	r3, #1
 800736a:	d1af      	bne.n	80072cc <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800736c:	6823      	ldr	r3, [r4, #0]
 800736e:	696a      	ldr	r2, [r5, #20]
 8007370:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007374:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8007378:	6023      	str	r3, [r4, #0]
 800737a:	e785      	b.n	8007288 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800737c:	692a      	ldr	r2, [r5, #16]
 800737e:	4b5b      	ldr	r3, [pc, #364]	@ (80074ec <HAL_RCC_OscConfig+0x278>)
 8007380:	b16a      	cbz	r2, 800739e <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8007382:	2201      	movs	r2, #1
 8007384:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007386:	f7ff fd13 	bl	8006db0 <HAL_GetTick>
 800738a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800738c:	6823      	ldr	r3, [r4, #0]
 800738e:	079f      	lsls	r7, r3, #30
 8007390:	d4ec      	bmi.n	800736c <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007392:	f7ff fd0d 	bl	8006db0 <HAL_GetTick>
 8007396:	1b80      	subs	r0, r0, r6
 8007398:	2802      	cmp	r0, #2
 800739a:	d9f7      	bls.n	800738c <HAL_RCC_OscConfig+0x118>
 800739c:	e7ab      	b.n	80072f6 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 800739e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80073a0:	f7ff fd06 	bl	8006db0 <HAL_GetTick>
 80073a4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073a6:	6823      	ldr	r3, [r4, #0]
 80073a8:	0798      	lsls	r0, r3, #30
 80073aa:	f57f af6d 	bpl.w	8007288 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80073ae:	f7ff fcff 	bl	8006db0 <HAL_GetTick>
 80073b2:	1b80      	subs	r0, r0, r6
 80073b4:	2802      	cmp	r0, #2
 80073b6:	d9f6      	bls.n	80073a6 <HAL_RCC_OscConfig+0x132>
 80073b8:	e79d      	b.n	80072f6 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80073ba:	69aa      	ldr	r2, [r5, #24]
 80073bc:	4e4a      	ldr	r6, [pc, #296]	@ (80074e8 <HAL_RCC_OscConfig+0x274>)
 80073be:	4b4b      	ldr	r3, [pc, #300]	@ (80074ec <HAL_RCC_OscConfig+0x278>)
 80073c0:	b1e2      	cbz	r2, 80073fc <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80073c2:	2201      	movs	r2, #1
 80073c4:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80073c8:	f7ff fcf2 	bl	8006db0 <HAL_GetTick>
 80073cc:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073ce:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80073d0:	079b      	lsls	r3, r3, #30
 80073d2:	d50d      	bpl.n	80073f0 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80073d4:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80073d8:	4b45      	ldr	r3, [pc, #276]	@ (80074f0 <HAL_RCC_OscConfig+0x27c>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80073e0:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80073e2:	bf00      	nop
  }
  while (Delay --);
 80073e4:	9b01      	ldr	r3, [sp, #4]
 80073e6:	1e5a      	subs	r2, r3, #1
 80073e8:	9201      	str	r2, [sp, #4]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d1f9      	bne.n	80073e2 <HAL_RCC_OscConfig+0x16e>
 80073ee:	e74f      	b.n	8007290 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073f0:	f7ff fcde 	bl	8006db0 <HAL_GetTick>
 80073f4:	1b00      	subs	r0, r0, r4
 80073f6:	2802      	cmp	r0, #2
 80073f8:	d9e9      	bls.n	80073ce <HAL_RCC_OscConfig+0x15a>
 80073fa:	e77c      	b.n	80072f6 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 80073fc:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8007400:	f7ff fcd6 	bl	8006db0 <HAL_GetTick>
 8007404:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007406:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8007408:	079f      	lsls	r7, r3, #30
 800740a:	f57f af41 	bpl.w	8007290 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800740e:	f7ff fccf 	bl	8006db0 <HAL_GetTick>
 8007412:	1b00      	subs	r0, r0, r4
 8007414:	2802      	cmp	r0, #2
 8007416:	d9f6      	bls.n	8007406 <HAL_RCC_OscConfig+0x192>
 8007418:	e76d      	b.n	80072f6 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800741a:	4c33      	ldr	r4, [pc, #204]	@ (80074e8 <HAL_RCC_OscConfig+0x274>)
 800741c:	69e3      	ldr	r3, [r4, #28]
 800741e:	00d8      	lsls	r0, r3, #3
 8007420:	d424      	bmi.n	800746c <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8007422:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8007424:	69e3      	ldr	r3, [r4, #28]
 8007426:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800742a:	61e3      	str	r3, [r4, #28]
 800742c:	69e3      	ldr	r3, [r4, #28]
 800742e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007432:	9300      	str	r3, [sp, #0]
 8007434:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007436:	4e2f      	ldr	r6, [pc, #188]	@ (80074f4 <HAL_RCC_OscConfig+0x280>)
 8007438:	6833      	ldr	r3, [r6, #0]
 800743a:	05d9      	lsls	r1, r3, #23
 800743c:	d518      	bpl.n	8007470 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800743e:	68eb      	ldr	r3, [r5, #12]
 8007440:	2b01      	cmp	r3, #1
 8007442:	d126      	bne.n	8007492 <HAL_RCC_OscConfig+0x21e>
 8007444:	6a23      	ldr	r3, [r4, #32]
 8007446:	f043 0301 	orr.w	r3, r3, #1
 800744a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800744c:	f7ff fcb0 	bl	8006db0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007450:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8007454:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007456:	6a23      	ldr	r3, [r4, #32]
 8007458:	079b      	lsls	r3, r3, #30
 800745a:	d53f      	bpl.n	80074dc <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 800745c:	2f00      	cmp	r7, #0
 800745e:	f43f af1b 	beq.w	8007298 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007462:	69e3      	ldr	r3, [r4, #28]
 8007464:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007468:	61e3      	str	r3, [r4, #28]
 800746a:	e715      	b.n	8007298 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 800746c:	2700      	movs	r7, #0
 800746e:	e7e2      	b.n	8007436 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007470:	6833      	ldr	r3, [r6, #0]
 8007472:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007476:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8007478:	f7ff fc9a 	bl	8006db0 <HAL_GetTick>
 800747c:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800747e:	6833      	ldr	r3, [r6, #0]
 8007480:	05da      	lsls	r2, r3, #23
 8007482:	d4dc      	bmi.n	800743e <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007484:	f7ff fc94 	bl	8006db0 <HAL_GetTick>
 8007488:	eba0 0008 	sub.w	r0, r0, r8
 800748c:	2864      	cmp	r0, #100	@ 0x64
 800748e:	d9f6      	bls.n	800747e <HAL_RCC_OscConfig+0x20a>
 8007490:	e731      	b.n	80072f6 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007492:	b9ab      	cbnz	r3, 80074c0 <HAL_RCC_OscConfig+0x24c>
 8007494:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007496:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800749a:	f023 0301 	bic.w	r3, r3, #1
 800749e:	6223      	str	r3, [r4, #32]
 80074a0:	6a23      	ldr	r3, [r4, #32]
 80074a2:	f023 0304 	bic.w	r3, r3, #4
 80074a6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80074a8:	f7ff fc82 	bl	8006db0 <HAL_GetTick>
 80074ac:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074ae:	6a23      	ldr	r3, [r4, #32]
 80074b0:	0798      	lsls	r0, r3, #30
 80074b2:	d5d3      	bpl.n	800745c <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074b4:	f7ff fc7c 	bl	8006db0 <HAL_GetTick>
 80074b8:	1b80      	subs	r0, r0, r6
 80074ba:	4540      	cmp	r0, r8
 80074bc:	d9f7      	bls.n	80074ae <HAL_RCC_OscConfig+0x23a>
 80074be:	e71a      	b.n	80072f6 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074c0:	2b05      	cmp	r3, #5
 80074c2:	6a23      	ldr	r3, [r4, #32]
 80074c4:	d103      	bne.n	80074ce <HAL_RCC_OscConfig+0x25a>
 80074c6:	f043 0304 	orr.w	r3, r3, #4
 80074ca:	6223      	str	r3, [r4, #32]
 80074cc:	e7ba      	b.n	8007444 <HAL_RCC_OscConfig+0x1d0>
 80074ce:	f023 0301 	bic.w	r3, r3, #1
 80074d2:	6223      	str	r3, [r4, #32]
 80074d4:	6a23      	ldr	r3, [r4, #32]
 80074d6:	f023 0304 	bic.w	r3, r3, #4
 80074da:	e7b6      	b.n	800744a <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074dc:	f7ff fc68 	bl	8006db0 <HAL_GetTick>
 80074e0:	1b80      	subs	r0, r0, r6
 80074e2:	4540      	cmp	r0, r8
 80074e4:	d9b7      	bls.n	8007456 <HAL_RCC_OscConfig+0x1e2>
 80074e6:	e706      	b.n	80072f6 <HAL_RCC_OscConfig+0x82>
 80074e8:	40021000 	.word	0x40021000
 80074ec:	42420000 	.word	0x42420000
 80074f0:	20000018 	.word	0x20000018
 80074f4:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80074f8:	4c2a      	ldr	r4, [pc, #168]	@ (80075a4 <HAL_RCC_OscConfig+0x330>)
 80074fa:	6862      	ldr	r2, [r4, #4]
 80074fc:	f002 020c 	and.w	r2, r2, #12
 8007500:	2a08      	cmp	r2, #8
 8007502:	d03e      	beq.n	8007582 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007504:	2200      	movs	r2, #0
 8007506:	2b02      	cmp	r3, #2
 8007508:	4b27      	ldr	r3, [pc, #156]	@ (80075a8 <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 800750a:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800750c:	d12c      	bne.n	8007568 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800750e:	f7ff fc4f 	bl	8006db0 <HAL_GetTick>
 8007512:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007514:	6823      	ldr	r3, [r4, #0]
 8007516:	0199      	lsls	r1, r3, #6
 8007518:	d420      	bmi.n	800755c <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800751a:	6a2b      	ldr	r3, [r5, #32]
 800751c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007520:	d105      	bne.n	800752e <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007522:	6862      	ldr	r2, [r4, #4]
 8007524:	68a9      	ldr	r1, [r5, #8]
 8007526:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800752a:	430a      	orrs	r2, r1
 800752c:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800752e:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8007530:	6862      	ldr	r2, [r4, #4]
 8007532:	430b      	orrs	r3, r1
 8007534:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8007538:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 800753a:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800753c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800753e:	4b1a      	ldr	r3, [pc, #104]	@ (80075a8 <HAL_RCC_OscConfig+0x334>)
 8007540:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8007542:	f7ff fc35 	bl	8006db0 <HAL_GetTick>
 8007546:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007548:	6823      	ldr	r3, [r4, #0]
 800754a:	019a      	lsls	r2, r3, #6
 800754c:	f53f aea8 	bmi.w	80072a0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007550:	f7ff fc2e 	bl	8006db0 <HAL_GetTick>
 8007554:	1b40      	subs	r0, r0, r5
 8007556:	2802      	cmp	r0, #2
 8007558:	d9f6      	bls.n	8007548 <HAL_RCC_OscConfig+0x2d4>
 800755a:	e6cc      	b.n	80072f6 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800755c:	f7ff fc28 	bl	8006db0 <HAL_GetTick>
 8007560:	1b80      	subs	r0, r0, r6
 8007562:	2802      	cmp	r0, #2
 8007564:	d9d6      	bls.n	8007514 <HAL_RCC_OscConfig+0x2a0>
 8007566:	e6c6      	b.n	80072f6 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8007568:	f7ff fc22 	bl	8006db0 <HAL_GetTick>
 800756c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800756e:	6823      	ldr	r3, [r4, #0]
 8007570:	019b      	lsls	r3, r3, #6
 8007572:	f57f ae95 	bpl.w	80072a0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007576:	f7ff fc1b 	bl	8006db0 <HAL_GetTick>
 800757a:	1b40      	subs	r0, r0, r5
 800757c:	2802      	cmp	r0, #2
 800757e:	d9f6      	bls.n	800756e <HAL_RCC_OscConfig+0x2fa>
 8007580:	e6b9      	b.n	80072f6 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007582:	2b01      	cmp	r3, #1
 8007584:	f43f aea2 	beq.w	80072cc <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 8007588:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800758a:	6a2b      	ldr	r3, [r5, #32]
 800758c:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 8007590:	429a      	cmp	r2, r3
 8007592:	f47f ae9b 	bne.w	80072cc <HAL_RCC_OscConfig+0x58>
 8007596:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007598:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800759c:	1ac0      	subs	r0, r0, r3
 800759e:	bf18      	it	ne
 80075a0:	2001      	movne	r0, #1
 80075a2:	e6a9      	b.n	80072f8 <HAL_RCC_OscConfig+0x84>
 80075a4:	40021000 	.word	0x40021000
 80075a8:	42420000 	.word	0x42420000

080075ac <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80075ac:	4a0d      	ldr	r2, [pc, #52]	@ (80075e4 <HAL_RCC_GetSysClockFreq+0x38>)
 80075ae:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80075b0:	f003 010c 	and.w	r1, r3, #12
 80075b4:	2908      	cmp	r1, #8
 80075b6:	d112      	bne.n	80075de <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80075b8:	480b      	ldr	r0, [pc, #44]	@ (80075e8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80075ba:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80075be:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80075c0:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80075c2:	d509      	bpl.n	80075d8 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80075c4:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80075c6:	4a09      	ldr	r2, [pc, #36]	@ (80075ec <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80075c8:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80075cc:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80075ce:	4a08      	ldr	r2, [pc, #32]	@ (80075f0 <HAL_RCC_GetSysClockFreq+0x44>)
 80075d0:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80075d2:	fbb0 f0f3 	udiv	r0, r0, r3
 80075d6:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80075d8:	4b06      	ldr	r3, [pc, #24]	@ (80075f4 <HAL_RCC_GetSysClockFreq+0x48>)
 80075da:	4358      	muls	r0, r3
 80075dc:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80075de:	4803      	ldr	r0, [pc, #12]	@ (80075ec <HAL_RCC_GetSysClockFreq+0x40>)
}
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	40021000 	.word	0x40021000
 80075e8:	0800b432 	.word	0x0800b432
 80075ec:	007a1200 	.word	0x007a1200
 80075f0:	0800b430 	.word	0x0800b430
 80075f4:	003d0900 	.word	0x003d0900

080075f8 <HAL_RCC_ClockConfig>:
{
 80075f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075fc:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80075fe:	4604      	mov	r4, r0
 8007600:	b910      	cbnz	r0, 8007608 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8007602:	2001      	movs	r0, #1
}
 8007604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007608:	4a44      	ldr	r2, [pc, #272]	@ (800771c <HAL_RCC_ClockConfig+0x124>)
 800760a:	6813      	ldr	r3, [r2, #0]
 800760c:	f003 0307 	and.w	r3, r3, #7
 8007610:	428b      	cmp	r3, r1
 8007612:	d328      	bcc.n	8007666 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007614:	6821      	ldr	r1, [r4, #0]
 8007616:	078e      	lsls	r6, r1, #30
 8007618:	d430      	bmi.n	800767c <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800761a:	07ca      	lsls	r2, r1, #31
 800761c:	d443      	bmi.n	80076a6 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800761e:	4a3f      	ldr	r2, [pc, #252]	@ (800771c <HAL_RCC_ClockConfig+0x124>)
 8007620:	6813      	ldr	r3, [r2, #0]
 8007622:	f003 0307 	and.w	r3, r3, #7
 8007626:	42ab      	cmp	r3, r5
 8007628:	d865      	bhi.n	80076f6 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800762a:	6822      	ldr	r2, [r4, #0]
 800762c:	4d3c      	ldr	r5, [pc, #240]	@ (8007720 <HAL_RCC_ClockConfig+0x128>)
 800762e:	f012 0f04 	tst.w	r2, #4
 8007632:	d16c      	bne.n	800770e <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007634:	0713      	lsls	r3, r2, #28
 8007636:	d506      	bpl.n	8007646 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007638:	686b      	ldr	r3, [r5, #4]
 800763a:	6922      	ldr	r2, [r4, #16]
 800763c:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8007640:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8007644:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007646:	f7ff ffb1 	bl	80075ac <HAL_RCC_GetSysClockFreq>
 800764a:	686b      	ldr	r3, [r5, #4]
 800764c:	4a35      	ldr	r2, [pc, #212]	@ (8007724 <HAL_RCC_ClockConfig+0x12c>)
 800764e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007652:	5cd3      	ldrb	r3, [r2, r3]
 8007654:	40d8      	lsrs	r0, r3
 8007656:	4b34      	ldr	r3, [pc, #208]	@ (8007728 <HAL_RCC_ClockConfig+0x130>)
 8007658:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800765a:	4b34      	ldr	r3, [pc, #208]	@ (800772c <HAL_RCC_ClockConfig+0x134>)
 800765c:	6818      	ldr	r0, [r3, #0]
 800765e:	f7ff fb65 	bl	8006d2c <HAL_InitTick>
  return HAL_OK;
 8007662:	2000      	movs	r0, #0
 8007664:	e7ce      	b.n	8007604 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007666:	6813      	ldr	r3, [r2, #0]
 8007668:	f023 0307 	bic.w	r3, r3, #7
 800766c:	430b      	orrs	r3, r1
 800766e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007670:	6813      	ldr	r3, [r2, #0]
 8007672:	f003 0307 	and.w	r3, r3, #7
 8007676:	428b      	cmp	r3, r1
 8007678:	d1c3      	bne.n	8007602 <HAL_RCC_ClockConfig+0xa>
 800767a:	e7cb      	b.n	8007614 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800767c:	4b28      	ldr	r3, [pc, #160]	@ (8007720 <HAL_RCC_ClockConfig+0x128>)
 800767e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007682:	bf1e      	ittt	ne
 8007684:	685a      	ldrne	r2, [r3, #4]
 8007686:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 800768a:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800768c:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800768e:	bf42      	ittt	mi
 8007690:	685a      	ldrmi	r2, [r3, #4]
 8007692:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 8007696:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007698:	685a      	ldr	r2, [r3, #4]
 800769a:	68a0      	ldr	r0, [r4, #8]
 800769c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80076a0:	4302      	orrs	r2, r0
 80076a2:	605a      	str	r2, [r3, #4]
 80076a4:	e7b9      	b.n	800761a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076a6:	6862      	ldr	r2, [r4, #4]
 80076a8:	4e1d      	ldr	r6, [pc, #116]	@ (8007720 <HAL_RCC_ClockConfig+0x128>)
 80076aa:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076ac:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076ae:	d11a      	bne.n	80076e6 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076b0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076b4:	d0a5      	beq.n	8007602 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80076b6:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076b8:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80076bc:	f023 0303 	bic.w	r3, r3, #3
 80076c0:	4313      	orrs	r3, r2
 80076c2:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80076c4:	f7ff fb74 	bl	8006db0 <HAL_GetTick>
 80076c8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076ca:	6873      	ldr	r3, [r6, #4]
 80076cc:	6862      	ldr	r2, [r4, #4]
 80076ce:	f003 030c 	and.w	r3, r3, #12
 80076d2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80076d6:	d0a2      	beq.n	800761e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076d8:	f7ff fb6a 	bl	8006db0 <HAL_GetTick>
 80076dc:	1bc0      	subs	r0, r0, r7
 80076de:	4540      	cmp	r0, r8
 80076e0:	d9f3      	bls.n	80076ca <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 80076e2:	2003      	movs	r0, #3
 80076e4:	e78e      	b.n	8007604 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80076e6:	2a02      	cmp	r2, #2
 80076e8:	d102      	bne.n	80076f0 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076ea:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80076ee:	e7e1      	b.n	80076b4 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076f0:	f013 0f02 	tst.w	r3, #2
 80076f4:	e7de      	b.n	80076b4 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076f6:	6813      	ldr	r3, [r2, #0]
 80076f8:	f023 0307 	bic.w	r3, r3, #7
 80076fc:	432b      	orrs	r3, r5
 80076fe:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007700:	6813      	ldr	r3, [r2, #0]
 8007702:	f003 0307 	and.w	r3, r3, #7
 8007706:	42ab      	cmp	r3, r5
 8007708:	f47f af7b 	bne.w	8007602 <HAL_RCC_ClockConfig+0xa>
 800770c:	e78d      	b.n	800762a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800770e:	686b      	ldr	r3, [r5, #4]
 8007710:	68e1      	ldr	r1, [r4, #12]
 8007712:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8007716:	430b      	orrs	r3, r1
 8007718:	606b      	str	r3, [r5, #4]
 800771a:	e78b      	b.n	8007634 <HAL_RCC_ClockConfig+0x3c>
 800771c:	40022000 	.word	0x40022000
 8007720:	40021000 	.word	0x40021000
 8007724:	0800b420 	.word	0x0800b420
 8007728:	20000018 	.word	0x20000018
 800772c:	20000020 	.word	0x20000020

08007730 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007730:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8007734:	461f      	mov	r7, r3
 8007736:	4689      	mov	r9, r1
 8007738:	4690      	mov	r8, r2
 800773a:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800773c:	f7ff fb38 	bl	8006db0 <HAL_GetTick>
 8007740:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8007742:	443d      	add	r5, r7
 8007744:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8007746:	f7ff fb33 	bl	8006db0 <HAL_GetTick>
 800774a:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800774c:	4b25      	ldr	r3, [pc, #148]	@ (80077e4 <SPI_WaitFlagStateUntilTimeout+0xb4>)
 800774e:	681e      	ldr	r6, [r3, #0]
 8007750:	f3c6 36cb 	ubfx	r6, r6, #15, #12
 8007754:	436e      	muls	r6, r5
 8007756:	9601      	str	r6, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007758:	6822      	ldr	r2, [r4, #0]
 800775a:	6893      	ldr	r3, [r2, #8]
 800775c:	ea39 0303 	bics.w	r3, r9, r3
 8007760:	bf0c      	ite	eq
 8007762:	2301      	moveq	r3, #1
 8007764:	2300      	movne	r3, #0
 8007766:	4543      	cmp	r3, r8
 8007768:	d101      	bne.n	800776e <SPI_WaitFlagStateUntilTimeout+0x3e>
      }
      count--;
    }
  }

  return HAL_OK;
 800776a:	2000      	movs	r0, #0
 800776c:	e02e      	b.n	80077cc <SPI_WaitFlagStateUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 800776e:	1c7b      	adds	r3, r7, #1
 8007770:	d0f3      	beq.n	800775a <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007772:	f7ff fb1d 	bl	8006db0 <HAL_GetTick>
 8007776:	eba0 000a 	sub.w	r0, r0, sl
 800777a:	42a8      	cmp	r0, r5
 800777c:	d329      	bcc.n	80077d2 <SPI_WaitFlagStateUntilTimeout+0xa2>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800777e:	6823      	ldr	r3, [r4, #0]
 8007780:	685a      	ldr	r2, [r3, #4]
 8007782:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007786:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007788:	6862      	ldr	r2, [r4, #4]
 800778a:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 800778e:	d10a      	bne.n	80077a6 <SPI_WaitFlagStateUntilTimeout+0x76>
 8007790:	68a2      	ldr	r2, [r4, #8]
 8007792:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8007796:	d002      	beq.n	800779e <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007798:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800779c:	d103      	bne.n	80077a6 <SPI_WaitFlagStateUntilTimeout+0x76>
          __HAL_SPI_DISABLE(hspi);
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077a4:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80077a6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80077a8:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80077ac:	d107      	bne.n	80077be <SPI_WaitFlagStateUntilTimeout+0x8e>
          SPI_RESET_CRC(hspi);
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80077b4:	601a      	str	r2, [r3, #0]
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80077bc:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80077be:	2301      	movs	r3, #1
 80077c0:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80077c4:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 80077c6:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 80077c8:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 80077cc:	b002      	add	sp, #8
 80077ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (count == 0U)
 80077d2:	9a01      	ldr	r2, [sp, #4]
      count--;
 80077d4:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 80077d6:	2a00      	cmp	r2, #0
      count--;
 80077d8:	f103 33ff 	add.w	r3, r3, #4294967295
 80077dc:	bf08      	it	eq
 80077de:	4615      	moveq	r5, r2
 80077e0:	9301      	str	r3, [sp, #4]
 80077e2:	e7b9      	b.n	8007758 <SPI_WaitFlagStateUntilTimeout+0x28>
 80077e4:	20000018 	.word	0x20000018

080077e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80077e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80077ea:	460b      	mov	r3, r1
 80077ec:	9200      	str	r2, [sp, #0]
{
 80077ee:	460d      	mov	r5, r1
 80077f0:	4616      	mov	r6, r2
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80077f2:	2102      	movs	r1, #2
 80077f4:	2201      	movs	r2, #1
{
 80077f6:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80077f8:	f7ff ff9a 	bl	8007730 <SPI_WaitFlagStateUntilTimeout>
 80077fc:	4602      	mov	r2, r0
 80077fe:	b128      	cbz	r0, 800780c <SPI_EndRxTxTransaction+0x24>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007800:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007802:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007804:	f043 0320 	orr.w	r3, r3, #32
 8007808:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 800780a:	e007      	b.n	800781c <SPI_EndRxTxTransaction+0x34>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800780c:	462b      	mov	r3, r5
 800780e:	2180      	movs	r1, #128	@ 0x80
 8007810:	4620      	mov	r0, r4
 8007812:	9600      	str	r6, [sp, #0]
 8007814:	f7ff ff8c 	bl	8007730 <SPI_WaitFlagStateUntilTimeout>
 8007818:	2800      	cmp	r0, #0
 800781a:	d1f1      	bne.n	8007800 <SPI_EndRxTxTransaction+0x18>
  }
  return HAL_OK;
}
 800781c:	b002      	add	sp, #8
 800781e:	bd70      	pop	{r4, r5, r6, pc}

08007820 <HAL_SPI_Init>:
{
 8007820:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8007822:	4604      	mov	r4, r0
 8007824:	2800      	cmp	r0, #0
 8007826:	d051      	beq.n	80078cc <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007828:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800782a:	2b00      	cmp	r3, #0
 800782c:	d14a      	bne.n	80078c4 <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800782e:	6842      	ldr	r2, [r0, #4]
 8007830:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8007834:	d000      	beq.n	8007838 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007836:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007838:	2300      	movs	r3, #0
 800783a:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800783c:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8007840:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007844:	b923      	cbnz	r3, 8007850 <HAL_SPI_Init+0x30>
    HAL_SPI_MspInit(hspi);
 8007846:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8007848:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 800784c:	f7ff f990 	bl	8006b70 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8007850:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8007852:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8007854:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 8007858:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800785a:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 800785c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007860:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007862:	6863      	ldr	r3, [r4, #4]
 8007864:	f400 4004 	and.w	r0, r0, #33792	@ 0x8400
 8007868:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 800786c:	4303      	orrs	r3, r0
 800786e:	68e0      	ldr	r0, [r4, #12]
 8007870:	69a1      	ldr	r1, [r4, #24]
 8007872:	f400 6000 	and.w	r0, r0, #2048	@ 0x800
 8007876:	4303      	orrs	r3, r0
 8007878:	6920      	ldr	r0, [r4, #16]
 800787a:	f000 0002 	and.w	r0, r0, #2
 800787e:	4303      	orrs	r3, r0
 8007880:	6960      	ldr	r0, [r4, #20]
 8007882:	f000 0001 	and.w	r0, r0, #1
 8007886:	4303      	orrs	r3, r0
 8007888:	f401 7000 	and.w	r0, r1, #512	@ 0x200
 800788c:	4303      	orrs	r3, r0
 800788e:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007890:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007892:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 8007896:	4303      	orrs	r3, r0
 8007898:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800789a:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800789e:	f000 0080 	and.w	r0, r0, #128	@ 0x80
 80078a2:	4303      	orrs	r3, r0
 80078a4:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80078a6:	f400 5000 	and.w	r0, r0, #8192	@ 0x2000
 80078aa:	4303      	orrs	r3, r0
 80078ac:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80078ae:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80078b0:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80078b2:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80078b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80078b8:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80078ba:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80078bc:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80078be:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 80078c2:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80078c4:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80078c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078ca:	e7b5      	b.n	8007838 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 80078cc:	2001      	movs	r0, #1
 80078ce:	e7f8      	b.n	80078c2 <HAL_SPI_Init+0xa2>

080078d0 <HAL_SPI_TransmitReceive>:
{
 80078d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80078d4:	4604      	mov	r4, r0
 80078d6:	460d      	mov	r5, r1
 80078d8:	4691      	mov	r9, r2
 80078da:	461e      	mov	r6, r3
 80078dc:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  tickstart = HAL_GetTick();
 80078e0:	f7ff fa66 	bl	8006db0 <HAL_GetTick>
  tmp_state           = hspi->State;
 80078e4:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tickstart = HAL_GetTick();
 80078e8:	4607      	mov	r7, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80078ea:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 80078ec:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 80078ee:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80078f0:	d00a      	beq.n	8007908 <HAL_SPI_TransmitReceive+0x38>
 80078f2:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80078f6:	f040 80e5 	bne.w	8007ac4 <HAL_SPI_TransmitReceive+0x1f4>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80078fa:	68a3      	ldr	r3, [r4, #8]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f040 80e1 	bne.w	8007ac4 <HAL_SPI_TransmitReceive+0x1f4>
 8007902:	2904      	cmp	r1, #4
 8007904:	f040 80de 	bne.w	8007ac4 <HAL_SPI_TransmitReceive+0x1f4>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007908:	2d00      	cmp	r5, #0
 800790a:	d04b      	beq.n	80079a4 <HAL_SPI_TransmitReceive+0xd4>
 800790c:	f1b9 0f00 	cmp.w	r9, #0
 8007910:	d048      	beq.n	80079a4 <HAL_SPI_TransmitReceive+0xd4>
 8007912:	2e00      	cmp	r6, #0
 8007914:	d046      	beq.n	80079a4 <HAL_SPI_TransmitReceive+0xd4>
  __HAL_LOCK(hspi);
 8007916:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 800791a:	2b01      	cmp	r3, #1
 800791c:	f000 80d2 	beq.w	8007ac4 <HAL_SPI_TransmitReceive+0x1f4>
 8007920:	2301      	movs	r3, #1
 8007922:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007926:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800792a:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800792e:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007930:	bf1c      	itt	ne
 8007932:	2305      	movne	r3, #5
 8007934:	f884 3051 	strbne.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007938:	2300      	movs	r3, #0
 800793a:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->TxISR       = NULL;
 800793c:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007940:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8007942:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxXferCount = Size;
 8007944:	86e6      	strh	r6, [r4, #54]	@ 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007946:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 8007948:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800794a:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 800794c:	bf58      	it	pl
 800794e:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007950:	6325      	str	r5, [r4, #48]	@ 0x30
    __HAL_SPI_ENABLE(hspi);
 8007952:	bf58      	it	pl
 8007954:	f041 0140 	orrpl.w	r1, r1, #64	@ 0x40
  hspi->TxXferSize  = Size;
 8007958:	86a6      	strh	r6, [r4, #52]	@ 0x34
    __HAL_SPI_ENABLE(hspi);
 800795a:	bf58      	it	pl
 800795c:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800795e:	68e1      	ldr	r1, [r4, #12]
 8007960:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8007964:	d155      	bne.n	8007a12 <HAL_SPI_TransmitReceive+0x142>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007966:	b10a      	cbz	r2, 800796c <HAL_SPI_TransmitReceive+0x9c>
 8007968:	2e01      	cmp	r6, #1
 800796a:	d107      	bne.n	800797c <HAL_SPI_TransmitReceive+0xac>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800796c:	f835 2b02 	ldrh.w	r2, [r5], #2
 8007970:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8007972:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007974:	6325      	str	r5, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8007976:	3b01      	subs	r3, #1
 8007978:	b29b      	uxth	r3, r3
 800797a:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 800797c:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800797e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8007980:	b29b      	uxth	r3, r3
 8007982:	b98b      	cbnz	r3, 80079a8 <HAL_SPI_TransmitReceive+0xd8>
 8007984:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007986:	b29b      	uxth	r3, r3
 8007988:	b973      	cbnz	r3, 80079a8 <HAL_SPI_TransmitReceive+0xd8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800798a:	463a      	mov	r2, r7
 800798c:	4641      	mov	r1, r8
 800798e:	4620      	mov	r0, r4
 8007990:	f7ff ff2a 	bl	80077e8 <SPI_EndRxTxTransaction>
 8007994:	2800      	cmp	r0, #0
 8007996:	f000 8081 	beq.w	8007a9c <HAL_SPI_TransmitReceive+0x1cc>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800799a:	2320      	movs	r3, #32
 800799c:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800799e:	2300      	movs	r3, #0
 80079a0:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 80079a4:	2001      	movs	r0, #1
 80079a6:	e031      	b.n	8007a0c <HAL_SPI_TransmitReceive+0x13c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80079a8:	6821      	ldr	r1, [r4, #0]
 80079aa:	688b      	ldr	r3, [r1, #8]
 80079ac:	079a      	lsls	r2, r3, #30
 80079ae:	d50d      	bpl.n	80079cc <HAL_SPI_TransmitReceive+0xfc>
 80079b0:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	b153      	cbz	r3, 80079cc <HAL_SPI_TransmitReceive+0xfc>
 80079b6:	b145      	cbz	r5, 80079ca <HAL_SPI_TransmitReceive+0xfa>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80079b8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80079ba:	f833 2b02 	ldrh.w	r2, [r3], #2
 80079be:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079c0:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80079c2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80079c4:	3b01      	subs	r3, #1
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 80079ca:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80079cc:	688a      	ldr	r2, [r1, #8]
 80079ce:	f012 0201 	ands.w	r2, r2, #1
 80079d2:	d00c      	beq.n	80079ee <HAL_SPI_TransmitReceive+0x11e>
 80079d4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	b14b      	cbz	r3, 80079ee <HAL_SPI_TransmitReceive+0x11e>
        txallowed = 1U;
 80079da:	4615      	mov	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80079dc:	68c9      	ldr	r1, [r1, #12]
 80079de:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80079e0:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80079e4:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80079e6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80079e8:	3b01      	subs	r3, #1
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80079ee:	f7ff f9df 	bl	8006db0 <HAL_GetTick>
 80079f2:	1bc0      	subs	r0, r0, r7
 80079f4:	4540      	cmp	r0, r8
 80079f6:	d3c2      	bcc.n	800797e <HAL_SPI_TransmitReceive+0xae>
 80079f8:	f1b8 3fff 	cmp.w	r8, #4294967295
 80079fc:	d0bf      	beq.n	800797e <HAL_SPI_TransmitReceive+0xae>
        hspi->State = HAL_SPI_STATE_READY;
 80079fe:	2301      	movs	r3, #1
 8007a00:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007a04:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8007a06:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8007a08:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8007a0c:	b003      	add	sp, #12
 8007a0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a12:	b10a      	cbz	r2, 8007a18 <HAL_SPI_TransmitReceive+0x148>
 8007a14:	2e01      	cmp	r6, #1
 8007a16:	d108      	bne.n	8007a2a <HAL_SPI_TransmitReceive+0x15a>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007a18:	782a      	ldrb	r2, [r5, #0]
 8007a1a:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a1c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007a1e:	3301      	adds	r3, #1
 8007a20:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8007a22:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8007a24:	3b01      	subs	r3, #1
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8007a2a:	2501      	movs	r5, #1
 8007a2c:	e02d      	b.n	8007a8a <HAL_SPI_TransmitReceive+0x1ba>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a2e:	6822      	ldr	r2, [r4, #0]
 8007a30:	6893      	ldr	r3, [r2, #8]
 8007a32:	079b      	lsls	r3, r3, #30
 8007a34:	d50e      	bpl.n	8007a54 <HAL_SPI_TransmitReceive+0x184>
 8007a36:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	b15b      	cbz	r3, 8007a54 <HAL_SPI_TransmitReceive+0x184>
 8007a3c:	b14d      	cbz	r5, 8007a52 <HAL_SPI_TransmitReceive+0x182>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007a3e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8007a44:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007a46:	3301      	adds	r3, #1
 8007a48:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8007a4a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8007a52:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a54:	6822      	ldr	r2, [r4, #0]
 8007a56:	6891      	ldr	r1, [r2, #8]
 8007a58:	f011 0101 	ands.w	r1, r1, #1
 8007a5c:	d00d      	beq.n	8007a7a <HAL_SPI_TransmitReceive+0x1aa>
 8007a5e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	b153      	cbz	r3, 8007a7a <HAL_SPI_TransmitReceive+0x1aa>
        txallowed = 1U;
 8007a64:	460d      	mov	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007a66:	68d2      	ldr	r2, [r2, #12]
 8007a68:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007a6a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007a6c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007a6e:	3301      	adds	r3, #1
 8007a70:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8007a72:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007a74:	3b01      	subs	r3, #1
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007a7a:	f7ff f999 	bl	8006db0 <HAL_GetTick>
 8007a7e:	1bc0      	subs	r0, r0, r7
 8007a80:	4540      	cmp	r0, r8
 8007a82:	d302      	bcc.n	8007a8a <HAL_SPI_TransmitReceive+0x1ba>
 8007a84:	f1b8 3fff 	cmp.w	r8, #4294967295
 8007a88:	d1b9      	bne.n	80079fe <HAL_SPI_TransmitReceive+0x12e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a8a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d1cd      	bne.n	8007a2e <HAL_SPI_TransmitReceive+0x15e>
 8007a92:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1c9      	bne.n	8007a2e <HAL_SPI_TransmitReceive+0x15e>
 8007a9a:	e776      	b.n	800798a <HAL_SPI_TransmitReceive+0xba>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007a9c:	68a3      	ldr	r3, [r4, #8]
 8007a9e:	b933      	cbnz	r3, 8007aae <HAL_SPI_TransmitReceive+0x1de>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007aa0:	9301      	str	r3, [sp, #4]
 8007aa2:	6823      	ldr	r3, [r4, #0]
 8007aa4:	68da      	ldr	r2, [r3, #12]
 8007aa6:	9201      	str	r2, [sp, #4]
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	9301      	str	r3, [sp, #4]
 8007aac:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8007ab4:	2300      	movs	r3, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ab6:	6d60      	ldr	r0, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hspi);
 8007ab8:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007abc:	1ac0      	subs	r0, r0, r3
 8007abe:	bf18      	it	ne
 8007ac0:	2001      	movne	r0, #1
 8007ac2:	e7a3      	b.n	8007a0c <HAL_SPI_TransmitReceive+0x13c>
    return HAL_BUSY;
 8007ac4:	2002      	movs	r0, #2
 8007ac6:	e7a1      	b.n	8007a0c <HAL_SPI_TransmitReceive+0x13c>

08007ac8 <HAL_SPI_Transmit_DMA>:
{
 8007ac8:	b570      	push	{r4, r5, r6, lr}
  if (hspi->State != HAL_SPI_STATE_READY)
 8007aca:	f890 3051 	ldrb.w	r3, [r0, #81]	@ 0x51
{
 8007ace:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	b2dd      	uxtb	r5, r3
 8007ad4:	d14e      	bne.n	8007b74 <HAL_SPI_Transmit_DMA+0xac>
  if ((pData == NULL) || (Size == 0U))
 8007ad6:	2900      	cmp	r1, #0
 8007ad8:	d036      	beq.n	8007b48 <HAL_SPI_Transmit_DMA+0x80>
 8007ada:	2a00      	cmp	r2, #0
 8007adc:	d034      	beq.n	8007b48 <HAL_SPI_Transmit_DMA+0x80>
  __HAL_LOCK(hspi);
 8007ade:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d046      	beq.n	8007b74 <HAL_SPI_Transmit_DMA+0xac>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007aec:	2300      	movs	r3, #0
 8007aee:	6543      	str	r3, [r0, #84]	@ 0x54
  hspi->RxISR       = NULL;
 8007af0:	e9c0 3310 	strd	r3, r3, [r0, #64]	@ 0x40
  hspi->TxXferCount = Size;
 8007af4:	86c2      	strh	r2, [r0, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007af6:	6383      	str	r3, [r0, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007af8:	8783      	strh	r3, [r0, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007afa:	87c3      	strh	r3, [r0, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007afc:	6883      	ldr	r3, [r0, #8]
  hspi->TxXferSize  = Size;
 8007afe:	8682      	strh	r2, [r0, #52]	@ 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
    __HAL_SPI_DISABLE(hspi);
 8007b04:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hspi);
 8007b06:	f880 5050 	strb.w	r5, [r0, #80]	@ 0x50
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007b0a:	6301      	str	r1, [r0, #48]	@ 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b0c:	d107      	bne.n	8007b1e <HAL_SPI_Transmit_DMA+0x56>
    __HAL_SPI_DISABLE(hspi);
 8007b0e:	6813      	ldr	r3, [r2, #0]
 8007b10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b14:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8007b16:	6813      	ldr	r3, [r2, #0]
 8007b18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007b1c:	6013      	str	r3, [r2, #0]
  hspi->hdmatx->XferAbortCallback = NULL;
 8007b1e:	2600      	movs	r6, #0
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007b20:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8007b22:	4b15      	ldr	r3, [pc, #84]	@ (8007b78 <HAL_SPI_Transmit_DMA+0xb0>)
  hspi->hdmatx->XferAbortCallback = NULL;
 8007b24:	6346      	str	r6, [r0, #52]	@ 0x34
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007b26:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007b28:	4b14      	ldr	r3, [pc, #80]	@ (8007b7c <HAL_SPI_Transmit_DMA+0xb4>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007b2a:	320c      	adds	r2, #12
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007b2c:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007b2e:	4b14      	ldr	r3, [pc, #80]	@ (8007b80 <HAL_SPI_Transmit_DMA+0xb8>)
 8007b30:	6303      	str	r3, [r0, #48]	@ 0x30
                                 hspi->TxXferCount))
 8007b32:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	f7ff f9e9 	bl	8006f0c <HAL_DMA_Start_IT>
 8007b3a:	b138      	cbz	r0, 8007b4c <HAL_SPI_Transmit_DMA+0x84>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007b3c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007b3e:	f884 6050 	strb.w	r6, [r4, #80]	@ 0x50
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007b42:	f043 0310 	orr.w	r3, r3, #16
 8007b46:	6563      	str	r3, [r4, #84]	@ 0x54
}
 8007b48:	4628      	mov	r0, r5
 8007b4a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_UNLOCK(hspi);
 8007b4c:	2500      	movs	r5, #0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b4e:	6823      	ldr	r3, [r4, #0]
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8007b54:	bf5e      	ittt	pl
 8007b56:	681a      	ldrpl	r2, [r3, #0]
 8007b58:	f042 0240 	orrpl.w	r2, r2, #64	@ 0x40
 8007b5c:	601a      	strpl	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8007b5e:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007b62:	685a      	ldr	r2, [r3, #4]
 8007b64:	f042 0220 	orr.w	r2, r2, #32
 8007b68:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007b6a:	685a      	ldr	r2, [r3, #4]
 8007b6c:	f042 0202 	orr.w	r2, r2, #2
 8007b70:	605a      	str	r2, [r3, #4]
  return HAL_OK;
 8007b72:	e7e9      	b.n	8007b48 <HAL_SPI_Transmit_DMA+0x80>
    return HAL_BUSY;
 8007b74:	2502      	movs	r5, #2
 8007b76:	e7e7      	b.n	8007b48 <HAL_SPI_Transmit_DMA+0x80>
 8007b78:	08007b89 	.word	0x08007b89
 8007b7c:	08007bb7 	.word	0x08007bb7
 8007b80:	08007b95 	.word	0x08007b95

08007b84 <HAL_SPI_TxCpltCallback>:
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
 8007b84:	4770      	bx	lr

08007b86 <HAL_SPI_TxHalfCpltCallback>:
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
 8007b86:	4770      	bx	lr

08007b88 <SPI_DMAHalfTransmitCplt>:
{
 8007b88:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007b8a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8007b8c:	f7ff fffb 	bl	8007b86 <HAL_SPI_TxHalfCpltCallback>
}
 8007b90:	bd08      	pop	{r3, pc}

08007b92 <HAL_SPI_ErrorCallback>:
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
 8007b92:	4770      	bx	lr

08007b94 <SPI_DMAError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007b94:	6a40      	ldr	r0, [r0, #36]	@ 0x24
{
 8007b96:	b508      	push	{r3, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007b98:	6802      	ldr	r2, [r0, #0]
 8007b9a:	6853      	ldr	r3, [r2, #4]
 8007b9c:	f023 0303 	bic.w	r3, r3, #3
 8007ba0:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007ba2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8007ba4:	f043 0310 	orr.w	r3, r3, #16
 8007ba8:	6543      	str	r3, [r0, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007baa:	2301      	movs	r3, #1
 8007bac:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
  HAL_SPI_ErrorCallback(hspi);
 8007bb0:	f7ff ffef 	bl	8007b92 <HAL_SPI_ErrorCallback>
}
 8007bb4:	bd08      	pop	{r3, pc}

08007bb6 <SPI_DMATransmitCplt>:
{
 8007bb6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007bb8:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007bba:	6a44      	ldr	r4, [r0, #36]	@ 0x24
  tickstart = HAL_GetTick();
 8007bbc:	f7ff f8f8 	bl	8006db0 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007bc0:	682b      	ldr	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007bc2:	4602      	mov	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	069b      	lsls	r3, r3, #26
 8007bc8:	d426      	bmi.n	8007c18 <SPI_DMATransmitCplt+0x62>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007bca:	6823      	ldr	r3, [r4, #0]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007bcc:	4620      	mov	r0, r4
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007bce:	6859      	ldr	r1, [r3, #4]
 8007bd0:	f021 0120 	bic.w	r1, r1, #32
 8007bd4:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007bd6:	6859      	ldr	r1, [r3, #4]
 8007bd8:	f021 0102 	bic.w	r1, r1, #2
 8007bdc:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007bde:	2164      	movs	r1, #100	@ 0x64
 8007be0:	f7ff fe02 	bl	80077e8 <SPI_EndRxTxTransaction>
 8007be4:	b118      	cbz	r0, 8007bee <SPI_DMATransmitCplt+0x38>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007be6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007be8:	f043 0320 	orr.w	r3, r3, #32
 8007bec:	6563      	str	r3, [r4, #84]	@ 0x54
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007bee:	68a3      	ldr	r3, [r4, #8]
 8007bf0:	b933      	cbnz	r3, 8007c00 <SPI_DMATransmitCplt+0x4a>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007bf2:	9301      	str	r3, [sp, #4]
 8007bf4:	6823      	ldr	r3, [r4, #0]
 8007bf6:	68da      	ldr	r2, [r3, #12]
 8007bf8:	9201      	str	r2, [sp, #4]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	9301      	str	r3, [sp, #4]
 8007bfe:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 8007c00:	2300      	movs	r3, #0
 8007c02:	86e3      	strh	r3, [r4, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007c04:	2301      	movs	r3, #1
 8007c06:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c0a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007c0c:	b123      	cbz	r3, 8007c18 <SPI_DMATransmitCplt+0x62>
      HAL_SPI_ErrorCallback(hspi);
 8007c0e:	4620      	mov	r0, r4
 8007c10:	f7ff ffbf 	bl	8007b92 <HAL_SPI_ErrorCallback>
}
 8007c14:	b003      	add	sp, #12
 8007c16:	bd30      	pop	{r4, r5, pc}
  HAL_SPI_TxCpltCallback(hspi);
 8007c18:	4620      	mov	r0, r4
 8007c1a:	f7ff ffb3 	bl	8007b84 <HAL_SPI_TxCpltCallback>
 8007c1e:	e7f9      	b.n	8007c14 <SPI_DMATransmitCplt+0x5e>

08007c20 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8007c20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007c22:	2400      	movs	r4, #0
 8007c24:	2310      	movs	r3, #16
 8007c26:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007c2a:	6803      	ldr	r3, [r0, #0]
 8007c2c:	4615      	mov	r5, r2
 8007c2e:	699e      	ldr	r6, [r3, #24]
 8007c30:	e9cd 4400 	strd	r4, r4, [sp]
 8007c34:	466b      	mov	r3, sp
 8007c36:	6812      	ldr	r2, [r2, #0]
 8007c38:	47b0      	blx	r6
 8007c3a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007c3e:	f003 0306 	and.w	r3, r3, #6
 8007c42:	2b06      	cmp	r3, #6
 8007c44:	bf09      	itett	eq
 8007c46:	2001      	moveq	r0, #1
 8007c48:	4620      	movne	r0, r4
 8007c4a:	9b00      	ldreq	r3, [sp, #0]
 8007c4c:	602b      	streq	r3, [r5, #0]
 8007c4e:	b004      	add	sp, #16
 8007c50:	bd70      	pop	{r4, r5, r6, pc}

08007c52 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8007c52:	9800      	ldr	r0, [sp, #0]
 8007c54:	4290      	cmp	r0, r2
 8007c56:	bf0c      	ite	eq
 8007c58:	2006      	moveq	r0, #6
 8007c5a:	2001      	movne	r0, #1
 8007c5c:	4770      	bx	lr
	...

08007c60 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8007c60:	b510      	push	{r4, lr}
 8007c62:	4604      	mov	r4, r0
 8007c64:	4b02      	ldr	r3, [pc, #8]	@ (8007c70 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8007c66:	6003      	str	r3, [r0, #0]
 8007c68:	f000 f935 	bl	8007ed6 <_ZNSt9type_infoD1Ev>
 8007c6c:	4620      	mov	r0, r4
 8007c6e:	bd10      	pop	{r4, pc}
 8007c70:	0800b478 	.word	0x0800b478

08007c74 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8007c74:	b510      	push	{r4, lr}
 8007c76:	4604      	mov	r4, r0
 8007c78:	f7ff fff2 	bl	8007c60 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8007c7c:	4620      	mov	r0, r4
 8007c7e:	2108      	movs	r1, #8
 8007c80:	f000 f842 	bl	8007d08 <_ZdlPvj>
 8007c84:	4620      	mov	r0, r4
 8007c86:	bd10      	pop	{r4, pc}

08007c88 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8007c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c8c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8007c90:	461f      	mov	r7, r3
 8007c92:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8007c96:	4598      	cmp	r8, r3
 8007c98:	4606      	mov	r6, r0
 8007c9a:	4615      	mov	r5, r2
 8007c9c:	d107      	bne.n	8007cae <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8007c9e:	9907      	ldr	r1, [sp, #28]
 8007ca0:	f000 f91c 	bl	8007edc <_ZNKSt9type_info7__equalERKS_>
 8007ca4:	b118      	cbz	r0, 8007cae <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8007ca6:	7165      	strb	r5, [r4, #5]
 8007ca8:	2000      	movs	r0, #0
 8007caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cae:	4639      	mov	r1, r7
 8007cb0:	4630      	mov	r0, r6
 8007cb2:	f000 f913 	bl	8007edc <_ZNKSt9type_info7__equalERKS_>
 8007cb6:	2800      	cmp	r0, #0
 8007cb8:	d0f6      	beq.n	8007ca8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 8007cba:	2301      	movs	r3, #1
 8007cbc:	f8c4 8000 	str.w	r8, [r4]
 8007cc0:	7125      	strb	r5, [r4, #4]
 8007cc2:	71a3      	strb	r3, [r4, #6]
 8007cc4:	e7f0      	b.n	8007ca8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

08007cc6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8007cc6:	b538      	push	{r3, r4, r5, lr}
 8007cc8:	4615      	mov	r5, r2
 8007cca:	461c      	mov	r4, r3
 8007ccc:	f000 f906 	bl	8007edc <_ZNKSt9type_info7__equalERKS_>
 8007cd0:	b120      	cbz	r0, 8007cdc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8007cd2:	2308      	movs	r3, #8
 8007cd4:	60e3      	str	r3, [r4, #12]
 8007cd6:	2306      	movs	r3, #6
 8007cd8:	6025      	str	r5, [r4, #0]
 8007cda:	7123      	strb	r3, [r4, #4]
 8007cdc:	bd38      	pop	{r3, r4, r5, pc}

08007cde <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8007cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ce2:	4605      	mov	r5, r0
 8007ce4:	460c      	mov	r4, r1
 8007ce6:	4616      	mov	r6, r2
 8007ce8:	461f      	mov	r7, r3
 8007cea:	f000 f8f7 	bl	8007edc <_ZNKSt9type_info7__equalERKS_>
 8007cee:	b948      	cbnz	r0, 8007d04 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8007cf0:	2f03      	cmp	r7, #3
 8007cf2:	d807      	bhi.n	8007d04 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8007cf4:	6823      	ldr	r3, [r4, #0]
 8007cf6:	4632      	mov	r2, r6
 8007cf8:	4629      	mov	r1, r5
 8007cfa:	4620      	mov	r0, r4
 8007cfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d00:	695b      	ldr	r3, [r3, #20]
 8007d02:	4718      	bx	r3
 8007d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007d08 <_ZdlPvj>:
 8007d08:	f7fe be55 	b.w	80069b6 <_ZdlPv>

08007d0c <__dynamic_cast>:
 8007d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d10:	460f      	mov	r7, r1
 8007d12:	4616      	mov	r6, r2
 8007d14:	461d      	mov	r5, r3
 8007d16:	4604      	mov	r4, r0
 8007d18:	b088      	sub	sp, #32
 8007d1a:	b918      	cbnz	r0, 8007d24 <__dynamic_cast+0x18>
 8007d1c:	2000      	movs	r0, #0
 8007d1e:	b008      	add	sp, #32
 8007d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d24:	6802      	ldr	r2, [r0, #0]
 8007d26:	f852 3c08 	ldr.w	r3, [r2, #-8]
 8007d2a:	f852 cc04 	ldr.w	ip, [r2, #-4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	e9cd 2205 	strd	r2, r2, [sp, #20]
 8007d34:	2210      	movs	r2, #16
 8007d36:	18c1      	adds	r1, r0, r3
 8007d38:	58c3      	ldr	r3, [r0, r3]
 8007d3a:	9207      	str	r2, [sp, #28]
 8007d3c:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007d40:	4560      	cmp	r0, ip
 8007d42:	d1eb      	bne.n	8007d1c <__dynamic_cast+0x10>
 8007d44:	aa05      	add	r2, sp, #20
 8007d46:	6803      	ldr	r3, [r0, #0]
 8007d48:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8007d4c:	e9cd 1700 	strd	r1, r7, [sp]
 8007d50:	2206      	movs	r2, #6
 8007d52:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8007d56:	4629      	mov	r1, r5
 8007d58:	4633      	mov	r3, r6
 8007d5a:	47c0      	blx	r8
 8007d5c:	9805      	ldr	r0, [sp, #20]
 8007d5e:	2800      	cmp	r0, #0
 8007d60:	d0dc      	beq.n	8007d1c <__dynamic_cast+0x10>
 8007d62:	f89d 101a 	ldrb.w	r1, [sp, #26]
 8007d66:	f001 0306 	and.w	r3, r1, #6
 8007d6a:	2b06      	cmp	r3, #6
 8007d6c:	d0d7      	beq.n	8007d1e <__dynamic_cast+0x12>
 8007d6e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8007d72:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8007d76:	401a      	ands	r2, r3
 8007d78:	f002 0206 	and.w	r2, r2, #6
 8007d7c:	2a06      	cmp	r2, #6
 8007d7e:	d0ce      	beq.n	8007d1e <__dynamic_cast+0x12>
 8007d80:	f003 0305 	and.w	r3, r3, #5
 8007d84:	2b04      	cmp	r3, #4
 8007d86:	d0c9      	beq.n	8007d1c <__dynamic_cast+0x10>
 8007d88:	2900      	cmp	r1, #0
 8007d8a:	d1c7      	bne.n	8007d1c <__dynamic_cast+0x10>
 8007d8c:	2d00      	cmp	r5, #0
 8007d8e:	db04      	blt.n	8007d9a <__dynamic_cast+0x8e>
 8007d90:	4428      	add	r0, r5
 8007d92:	4284      	cmp	r4, r0
 8007d94:	d1c2      	bne.n	8007d1c <__dynamic_cast+0x10>
 8007d96:	9805      	ldr	r0, [sp, #20]
 8007d98:	e7c1      	b.n	8007d1e <__dynamic_cast+0x12>
 8007d9a:	1cab      	adds	r3, r5, #2
 8007d9c:	d0be      	beq.n	8007d1c <__dynamic_cast+0x10>
 8007d9e:	6833      	ldr	r3, [r6, #0]
 8007da0:	9400      	str	r4, [sp, #0]
 8007da2:	4602      	mov	r2, r0
 8007da4:	6a1c      	ldr	r4, [r3, #32]
 8007da6:	4629      	mov	r1, r5
 8007da8:	463b      	mov	r3, r7
 8007daa:	4630      	mov	r0, r6
 8007dac:	47a0      	blx	r4
 8007dae:	f000 0006 	and.w	r0, r0, #6
 8007db2:	2806      	cmp	r0, #6
 8007db4:	e7ee      	b.n	8007d94 <__dynamic_cast+0x88>

08007db6 <__cxa_guard_acquire>:
 8007db6:	6802      	ldr	r2, [r0, #0]
 8007db8:	4603      	mov	r3, r0
 8007dba:	07d2      	lsls	r2, r2, #31
 8007dbc:	d405      	bmi.n	8007dca <__cxa_guard_acquire+0x14>
 8007dbe:	7842      	ldrb	r2, [r0, #1]
 8007dc0:	b102      	cbz	r2, 8007dc4 <__cxa_guard_acquire+0xe>
 8007dc2:	deff      	udf	#255	@ 0xff
 8007dc4:	2001      	movs	r0, #1
 8007dc6:	7058      	strb	r0, [r3, #1]
 8007dc8:	4770      	bx	lr
 8007dca:	2000      	movs	r0, #0
 8007dcc:	4770      	bx	lr

08007dce <__cxa_guard_release>:
 8007dce:	2301      	movs	r3, #1
 8007dd0:	6003      	str	r3, [r0, #0]
 8007dd2:	4770      	bx	lr

08007dd4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8007dd4:	b510      	push	{r4, lr}
 8007dd6:	4604      	mov	r4, r0
 8007dd8:	4b02      	ldr	r3, [pc, #8]	@ (8007de4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8007dda:	6003      	str	r3, [r0, #0]
 8007ddc:	f7ff ff40 	bl	8007c60 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8007de0:	4620      	mov	r0, r4
 8007de2:	bd10      	pop	{r4, pc}
 8007de4:	0800b4d8 	.word	0x0800b4d8

08007de8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8007de8:	b510      	push	{r4, lr}
 8007dea:	4604      	mov	r4, r0
 8007dec:	f7ff fff2 	bl	8007dd4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8007df0:	4620      	mov	r0, r4
 8007df2:	210c      	movs	r1, #12
 8007df4:	f7ff ff88 	bl	8007d08 <_ZdlPvj>
 8007df8:	4620      	mov	r0, r4
 8007dfa:	bd10      	pop	{r4, pc}

08007dfc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8007dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e00:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8007e04:	4606      	mov	r6, r0
 8007e06:	4590      	cmp	r8, r2
 8007e08:	460f      	mov	r7, r1
 8007e0a:	4615      	mov	r5, r2
 8007e0c:	461c      	mov	r4, r3
 8007e0e:	d00b      	beq.n	8007e28 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 8007e10:	68b0      	ldr	r0, [r6, #8]
 8007e12:	462a      	mov	r2, r5
 8007e14:	6803      	ldr	r3, [r0, #0]
 8007e16:	f8cd 8018 	str.w	r8, [sp, #24]
 8007e1a:	6a1e      	ldr	r6, [r3, #32]
 8007e1c:	4639      	mov	r1, r7
 8007e1e:	4623      	mov	r3, r4
 8007e20:	46b4      	mov	ip, r6
 8007e22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e26:	4760      	bx	ip
 8007e28:	4619      	mov	r1, r3
 8007e2a:	f000 f857 	bl	8007edc <_ZNKSt9type_info7__equalERKS_>
 8007e2e:	2800      	cmp	r0, #0
 8007e30:	d0ee      	beq.n	8007e10 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 8007e32:	2006      	movs	r0, #6
 8007e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007e38 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8007e38:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e3c:	460d      	mov	r5, r1
 8007e3e:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	@ 0x28
 8007e42:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	@ 0x30
 8007e46:	4619      	mov	r1, r3
 8007e48:	4681      	mov	r9, r0
 8007e4a:	4617      	mov	r7, r2
 8007e4c:	4698      	mov	r8, r3
 8007e4e:	f000 f845 	bl	8007edc <_ZNKSt9type_info7__equalERKS_>
 8007e52:	b190      	cbz	r0, 8007e7a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8007e54:	2d00      	cmp	r5, #0
 8007e56:	6034      	str	r4, [r6, #0]
 8007e58:	7137      	strb	r7, [r6, #4]
 8007e5a:	db09      	blt.n	8007e70 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8007e5c:	442c      	add	r4, r5
 8007e5e:	45a2      	cmp	sl, r4
 8007e60:	bf14      	ite	ne
 8007e62:	2401      	movne	r4, #1
 8007e64:	2406      	moveq	r4, #6
 8007e66:	71b4      	strb	r4, [r6, #6]
 8007e68:	2000      	movs	r0, #0
 8007e6a:	b001      	add	sp, #4
 8007e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e70:	3502      	adds	r5, #2
 8007e72:	d1f9      	bne.n	8007e68 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8007e74:	2301      	movs	r3, #1
 8007e76:	71b3      	strb	r3, [r6, #6]
 8007e78:	e7f6      	b.n	8007e68 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8007e7a:	4554      	cmp	r4, sl
 8007e7c:	d106      	bne.n	8007e8c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8007e7e:	4659      	mov	r1, fp
 8007e80:	4648      	mov	r0, r9
 8007e82:	f000 f82b 	bl	8007edc <_ZNKSt9type_info7__equalERKS_>
 8007e86:	b108      	cbz	r0, 8007e8c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8007e88:	7177      	strb	r7, [r6, #5]
 8007e8a:	e7ed      	b.n	8007e68 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8007e8c:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8007e90:	463a      	mov	r2, r7
 8007e92:	6803      	ldr	r3, [r0, #0]
 8007e94:	e9cd a60c 	strd	sl, r6, [sp, #48]	@ 0x30
 8007e98:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	@ 0x28
 8007e9c:	69dc      	ldr	r4, [r3, #28]
 8007e9e:	4629      	mov	r1, r5
 8007ea0:	4643      	mov	r3, r8
 8007ea2:	46a4      	mov	ip, r4
 8007ea4:	b001      	add	sp, #4
 8007ea6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eaa:	4760      	bx	ip

08007eac <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8007eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eb0:	4607      	mov	r7, r0
 8007eb2:	460c      	mov	r4, r1
 8007eb4:	4615      	mov	r5, r2
 8007eb6:	461e      	mov	r6, r3
 8007eb8:	f7ff ff05 	bl	8007cc6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8007ebc:	b948      	cbnz	r0, 8007ed2 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8007ebe:	68b8      	ldr	r0, [r7, #8]
 8007ec0:	462a      	mov	r2, r5
 8007ec2:	6803      	ldr	r3, [r0, #0]
 8007ec4:	4621      	mov	r1, r4
 8007ec6:	699f      	ldr	r7, [r3, #24]
 8007ec8:	4633      	mov	r3, r6
 8007eca:	46bc      	mov	ip, r7
 8007ecc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ed0:	4760      	bx	ip
 8007ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007ed6 <_ZNSt9type_infoD1Ev>:
 8007ed6:	4770      	bx	lr

08007ed8 <_ZNKSt9type_info14__is_pointer_pEv>:
 8007ed8:	2000      	movs	r0, #0
 8007eda:	4770      	bx	lr

08007edc <_ZNKSt9type_info7__equalERKS_>:
 8007edc:	4281      	cmp	r1, r0
 8007ede:	b508      	push	{r3, lr}
 8007ee0:	d00e      	beq.n	8007f00 <_ZNKSt9type_info7__equalERKS_+0x24>
 8007ee2:	6840      	ldr	r0, [r0, #4]
 8007ee4:	7803      	ldrb	r3, [r0, #0]
 8007ee6:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ee8:	d00c      	beq.n	8007f04 <_ZNKSt9type_info7__equalERKS_+0x28>
 8007eea:	6849      	ldr	r1, [r1, #4]
 8007eec:	780b      	ldrb	r3, [r1, #0]
 8007eee:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ef0:	bf08      	it	eq
 8007ef2:	3101      	addeq	r1, #1
 8007ef4:	f7f8 f92c 	bl	8000150 <strcmp>
 8007ef8:	fab0 f080 	clz	r0, r0
 8007efc:	0940      	lsrs	r0, r0, #5
 8007efe:	bd08      	pop	{r3, pc}
 8007f00:	2001      	movs	r0, #1
 8007f02:	e7fc      	b.n	8007efe <_ZNKSt9type_info7__equalERKS_+0x22>
 8007f04:	2000      	movs	r0, #0
 8007f06:	e7fa      	b.n	8007efe <_ZNKSt9type_info7__equalERKS_+0x22>

08007f08 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
 8007f08:	b510      	push	{r4, lr}
 8007f0a:	4604      	mov	r4, r0
 8007f0c:	4b02      	ldr	r3, [pc, #8]	@ (8007f18 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev+0x10>)
 8007f0e:	6003      	str	r3, [r0, #0]
 8007f10:	f7ff fea6 	bl	8007c60 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8007f14:	4620      	mov	r0, r4
 8007f16:	bd10      	pop	{r4, pc}
 8007f18:	0800b550 	.word	0x0800b550

08007f1c <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
 8007f1c:	b510      	push	{r4, lr}
 8007f1e:	4604      	mov	r4, r0
 8007f20:	f7ff fff2 	bl	8007f08 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>
 8007f24:	4620      	mov	r0, r4
 8007f26:	2118      	movs	r1, #24
 8007f28:	f7ff feee 	bl	8007d08 <_ZdlPvj>
 8007f2c:	4620      	mov	r0, r4
 8007f2e:	bd10      	pop	{r4, pc}

08007f30 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8007f30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f34:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007f38:	4604      	mov	r4, r0
 8007f3a:	4552      	cmp	r2, sl
 8007f3c:	4688      	mov	r8, r1
 8007f3e:	4616      	mov	r6, r2
 8007f40:	4699      	mov	r9, r3
 8007f42:	d005      	beq.n	8007f50 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x20>
 8007f44:	68e7      	ldr	r7, [r4, #12]
 8007f46:	eb04 04c7 	add.w	r4, r4, r7, lsl #3
 8007f4a:	b947      	cbnz	r7, 8007f5e <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2e>
 8007f4c:	2001      	movs	r0, #1
 8007f4e:	e022      	b.n	8007f96 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x66>
 8007f50:	4619      	mov	r1, r3
 8007f52:	f7ff ffc3 	bl	8007edc <_ZNKSt9type_info7__equalERKS_>
 8007f56:	2800      	cmp	r0, #0
 8007f58:	d0f4      	beq.n	8007f44 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 8007f5a:	2006      	movs	r0, #6
 8007f5c:	e01b      	b.n	8007f96 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x66>
 8007f5e:	68e5      	ldr	r5, [r4, #12]
 8007f60:	07ab      	lsls	r3, r5, #30
 8007f62:	d51b      	bpl.n	8007f9c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 8007f64:	122a      	asrs	r2, r5, #8
 8007f66:	f015 0501 	ands.w	r5, r5, #1
 8007f6a:	d004      	beq.n	8007f76 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x46>
 8007f6c:	f118 0f03 	cmn.w	r8, #3
 8007f70:	d014      	beq.n	8007f9c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 8007f72:	6833      	ldr	r3, [r6, #0]
 8007f74:	589a      	ldr	r2, [r3, r2]
 8007f76:	68a0      	ldr	r0, [r4, #8]
 8007f78:	4641      	mov	r1, r8
 8007f7a:	6803      	ldr	r3, [r0, #0]
 8007f7c:	f8cd a000 	str.w	sl, [sp]
 8007f80:	f8d3 b020 	ldr.w	fp, [r3, #32]
 8007f84:	4432      	add	r2, r6
 8007f86:	464b      	mov	r3, r9
 8007f88:	47d8      	blx	fp
 8007f8a:	2803      	cmp	r0, #3
 8007f8c:	d906      	bls.n	8007f9c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 8007f8e:	b115      	cbz	r5, 8007f96 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x66>
 8007f90:	f040 0001 	orr.w	r0, r0, #1
 8007f94:	b2c0      	uxtb	r0, r0
 8007f96:	b003      	add	sp, #12
 8007f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f9c:	3f01      	subs	r7, #1
 8007f9e:	3c08      	subs	r4, #8
 8007fa0:	e7d3      	b.n	8007f4a <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1a>

08007fa2 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>:
 8007fa2:	b4f0      	push	{r4, r5, r6, r7}
 8007fa4:	1e0d      	subs	r5, r1, #0
 8007fa6:	4616      	mov	r6, r2
 8007fa8:	9c04      	ldr	r4, [sp, #16]
 8007faa:	db06      	blt.n	8007fba <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x18>
 8007fac:	442e      	add	r6, r5
 8007fae:	42b4      	cmp	r4, r6
 8007fb0:	bf14      	ite	ne
 8007fb2:	2001      	movne	r0, #1
 8007fb4:	2006      	moveq	r0, #6
 8007fb6:	bcf0      	pop	{r4, r5, r6, r7}
 8007fb8:	4770      	bx	lr
 8007fba:	3502      	adds	r5, #2
 8007fbc:	d005      	beq.n	8007fca <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x28>
 8007fbe:	6805      	ldr	r5, [r0, #0]
 8007fc0:	9404      	str	r4, [sp, #16]
 8007fc2:	6a2c      	ldr	r4, [r5, #32]
 8007fc4:	46a4      	mov	ip, r4
 8007fc6:	bcf0      	pop	{r4, r5, r6, r7}
 8007fc8:	4760      	bx	ip
 8007fca:	2001      	movs	r0, #1
 8007fcc:	e7f3      	b.n	8007fb6 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x14>

08007fce <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8007fce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd2:	b091      	sub	sp, #68	@ 0x44
 8007fd4:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
 8007fd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fda:	68a3      	ldr	r3, [r4, #8]
 8007fdc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007fde:	06db      	lsls	r3, r3, #27
 8007fe0:	bf48      	it	mi
 8007fe2:	6883      	ldrmi	r3, [r0, #8]
 8007fe4:	4681      	mov	r9, r0
 8007fe6:	bf48      	it	mi
 8007fe8:	60a3      	strmi	r3, [r4, #8]
 8007fea:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8007fec:	460f      	mov	r7, r1
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d108      	bne.n	8008004 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x36>
 8007ff2:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8007ff4:	f7ff ff72 	bl	8007edc <_ZNKSt9type_info7__equalERKS_>
 8007ff8:	b120      	cbz	r0, 8008004 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x36>
 8007ffa:	9b05      	ldr	r3, [sp, #20]
 8007ffc:	7163      	strb	r3, [r4, #5]
 8007ffe:	f04f 0800 	mov.w	r8, #0
 8008002:	e088      	b.n	8008116 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x148>
 8008004:	4648      	mov	r0, r9
 8008006:	9906      	ldr	r1, [sp, #24]
 8008008:	f7ff ff68 	bl	8007edc <_ZNKSt9type_info7__equalERKS_>
 800800c:	b198      	cbz	r0, 8008036 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x68>
 800800e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8008010:	2f00      	cmp	r7, #0
 8008012:	6023      	str	r3, [r4, #0]
 8008014:	9b05      	ldr	r3, [sp, #20]
 8008016:	7123      	strb	r3, [r4, #4]
 8008018:	db08      	blt.n	800802c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e>
 800801a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800801c:	441f      	add	r7, r3
 800801e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8008020:	42bb      	cmp	r3, r7
 8008022:	bf14      	ite	ne
 8008024:	2701      	movne	r7, #1
 8008026:	2706      	moveq	r7, #6
 8008028:	71a7      	strb	r7, [r4, #6]
 800802a:	e7e8      	b.n	8007ffe <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 800802c:	3702      	adds	r7, #2
 800802e:	d1e6      	bne.n	8007ffe <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8008030:	2301      	movs	r3, #1
 8008032:	71a3      	strb	r3, [r4, #6]
 8008034:	e7e3      	b.n	8007ffe <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8008036:	2f00      	cmp	r7, #0
 8008038:	bfa8      	it	ge
 800803a:	9b1c      	ldrge	r3, [sp, #112]	@ 0x70
 800803c:	f04f 0c02 	mov.w	ip, #2
 8008040:	bfa4      	itt	ge
 8008042:	1bdb      	subge	r3, r3, r7
 8008044:	9307      	strge	r3, [sp, #28]
 8008046:	f04f 0301 	mov.w	r3, #1
 800804a:	f04f 0800 	mov.w	r8, #0
 800804e:	e9cd c308 	strd	ip, r3, [sp, #32]
 8008052:	9b05      	ldr	r3, [sp, #20]
 8008054:	bfb8      	it	lt
 8008056:	9007      	strlt	r0, [sp, #28]
 8008058:	f043 0301 	orr.w	r3, r3, #1
 800805c:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8008060:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008062:	f8d9 a00c 	ldr.w	sl, [r9, #12]
 8008066:	eb09 0bca 	add.w	fp, r9, sl, lsl #3
 800806a:	f1ba 0f00 	cmp.w	sl, #0
 800806e:	d109      	bne.n	8008084 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb6>
 8008070:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008072:	2b00      	cmp	r3, #0
 8008074:	d04f      	beq.n	8008116 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x148>
 8008076:	9b08      	ldr	r3, [sp, #32]
 8008078:	2b01      	cmp	r3, #1
 800807a:	d04c      	beq.n	8008116 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x148>
 800807c:	2301      	movs	r3, #1
 800807e:	e9cd 3a08 	strd	r3, sl, [sp, #32]
 8008082:	e7ee      	b.n	8008062 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x94>
 8008084:	2300      	movs	r3, #0
 8008086:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
 800808a:	f8db 300c 	ldr.w	r3, [fp, #12]
 800808e:	68a5      	ldr	r5, [r4, #8]
 8008090:	07de      	lsls	r6, r3, #31
 8008092:	bf48      	it	mi
 8008094:	981a      	ldrmi	r0, [sp, #104]	@ 0x68
 8008096:	ea4f 2123 	mov.w	r1, r3, asr #8
 800809a:	bf48      	it	mi
 800809c:	6800      	ldrmi	r0, [r0, #0]
 800809e:	950f      	str	r5, [sp, #60]	@ 0x3c
 80080a0:	bf48      	it	mi
 80080a2:	5841      	ldrmi	r1, [r0, r1]
 80080a4:	981a      	ldr	r0, [sp, #104]	@ 0x68
 80080a6:	bf48      	it	mi
 80080a8:	9a0b      	ldrmi	r2, [sp, #44]	@ 0x2c
 80080aa:	4401      	add	r1, r0
 80080ac:	9807      	ldr	r0, [sp, #28]
 80080ae:	bf58      	it	pl
 80080b0:	9a05      	ldrpl	r2, [sp, #20]
 80080b2:	b138      	cbz	r0, 80080c4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xf6>
 80080b4:	4288      	cmp	r0, r1
 80080b6:	bf2c      	ite	cs
 80080b8:	2000      	movcs	r0, #0
 80080ba:	2001      	movcc	r0, #1
 80080bc:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80080be:	42b0      	cmp	r0, r6
 80080c0:	f000 80b3 	beq.w	800822a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x25c>
 80080c4:	0798      	lsls	r0, r3, #30
 80080c6:	d406      	bmi.n	80080d6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x108>
 80080c8:	1cbb      	adds	r3, r7, #2
 80080ca:	d102      	bne.n	80080d2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x104>
 80080cc:	07ae      	lsls	r6, r5, #30
 80080ce:	f000 80ae 	beq.w	800822e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x260>
 80080d2:	f002 02fd 	and.w	r2, r2, #253	@ 0xfd
 80080d6:	f8db 0008 	ldr.w	r0, [fp, #8]
 80080da:	ad0d      	add	r5, sp, #52	@ 0x34
 80080dc:	6803      	ldr	r3, [r0, #0]
 80080de:	9503      	str	r5, [sp, #12]
 80080e0:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 80080e2:	9502      	str	r5, [sp, #8]
 80080e4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80080e6:	e9cd 1500 	strd	r1, r5, [sp]
 80080ea:	4639      	mov	r1, r7
 80080ec:	69dd      	ldr	r5, [r3, #28]
 80080ee:	9b06      	ldr	r3, [sp, #24]
 80080f0:	47a8      	blx	r5
 80080f2:	7963      	ldrb	r3, [r4, #5]
 80080f4:	f89d 2039 	ldrb.w	r2, [sp, #57]	@ 0x39
 80080f8:	f89d 503a 	ldrb.w	r5, [sp, #58]	@ 0x3a
 80080fc:	4313      	orrs	r3, r2
 80080fe:	2d06      	cmp	r5, #6
 8008100:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008102:	7163      	strb	r3, [r4, #5]
 8008104:	d001      	beq.n	800810a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x13c>
 8008106:	2d02      	cmp	r5, #2
 8008108:	d109      	bne.n	800811e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x150>
 800810a:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
 800810e:	6021      	str	r1, [r4, #0]
 8008110:	7123      	strb	r3, [r4, #4]
 8008112:	71a5      	strb	r5, [r4, #6]
 8008114:	4680      	mov	r8, r0
 8008116:	4640      	mov	r0, r8
 8008118:	b011      	add	sp, #68	@ 0x44
 800811a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800811e:	6822      	ldr	r2, [r4, #0]
 8008120:	f1b8 0f00 	cmp.w	r8, #0
 8008124:	d113      	bne.n	800814e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x180>
 8008126:	b9a2      	cbnz	r2, 8008152 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x184>
 8008128:	f89d 2038 	ldrb.w	r2, [sp, #56]	@ 0x38
 800812c:	6021      	str	r1, [r4, #0]
 800812e:	7122      	strb	r2, [r4, #4]
 8008130:	b121      	cbz	r1, 800813c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x16e>
 8008132:	b11b      	cbz	r3, 800813c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x16e>
 8008134:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8008138:	07dd      	lsls	r5, r3, #31
 800813a:	d5eb      	bpl.n	8008114 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x146>
 800813c:	7963      	ldrb	r3, [r4, #5]
 800813e:	2b04      	cmp	r3, #4
 8008140:	d0e8      	beq.n	8008114 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x146>
 8008142:	4680      	mov	r8, r0
 8008144:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008148:	f1ab 0b08 	sub.w	fp, fp, #8
 800814c:	e78d      	b.n	800806a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x9c>
 800814e:	2a00      	cmp	r2, #0
 8008150:	d037      	beq.n	80081c2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f4>
 8008152:	428a      	cmp	r2, r1
 8008154:	d106      	bne.n	8008164 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x196>
 8008156:	7923      	ldrb	r3, [r4, #4]
 8008158:	f89d 2038 	ldrb.w	r2, [sp, #56]	@ 0x38
 800815c:	4313      	orrs	r3, r2
 800815e:	7123      	strb	r3, [r4, #4]
 8008160:	4640      	mov	r0, r8
 8008162:	e7eb      	b.n	800813c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x16e>
 8008164:	b909      	cbnz	r1, 800816a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x19c>
 8008166:	2800      	cmp	r0, #0
 8008168:	d0fa      	beq.n	8008160 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x192>
 800816a:	2b03      	cmp	r3, #3
 800816c:	79a6      	ldrb	r6, [r4, #6]
 800816e:	d904      	bls.n	800817a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1ac>
 8008170:	07d9      	lsls	r1, r3, #31
 8008172:	d529      	bpl.n	80081c8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fa>
 8008174:	68a3      	ldr	r3, [r4, #8]
 8008176:	079b      	lsls	r3, r3, #30
 8008178:	d526      	bpl.n	80081c8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fa>
 800817a:	b97e      	cbnz	r6, 800819c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1ce>
 800817c:	2d03      	cmp	r5, #3
 800817e:	d905      	bls.n	800818c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1be>
 8008180:	07ee      	lsls	r6, r5, #31
 8008182:	d541      	bpl.n	8008208 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x23a>
 8008184:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8008188:	0798      	lsls	r0, r3, #30
 800818a:	d53d      	bpl.n	8008208 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x23a>
 800818c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800818e:	4639      	mov	r1, r7
 8008190:	9300      	str	r3, [sp, #0]
 8008192:	9806      	ldr	r0, [sp, #24]
 8008194:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8008196:	f7ff ff04 	bl	8007fa2 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 800819a:	4606      	mov	r6, r0
 800819c:	b9e5      	cbnz	r5, 80081d8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x20a>
 800819e:	2e03      	cmp	r6, #3
 80081a0:	d905      	bls.n	80081ae <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1e0>
 80081a2:	07f1      	lsls	r1, r6, #31
 80081a4:	d532      	bpl.n	800820c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x23e>
 80081a6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80081aa:	079a      	lsls	r2, r3, #30
 80081ac:	d52e      	bpl.n	800820c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x23e>
 80081ae:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80081b0:	4639      	mov	r1, r7
 80081b2:	9300      	str	r3, [sp, #0]
 80081b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80081b6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80081b8:	9806      	ldr	r0, [sp, #24]
 80081ba:	f7ff fef2 	bl	8007fa2 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 80081be:	4605      	mov	r5, r0
 80081c0:	e00a      	b.n	80081d8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x20a>
 80081c2:	2900      	cmp	r1, #0
 80081c4:	d1d1      	bne.n	800816a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x19c>
 80081c6:	e7cb      	b.n	8008160 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x192>
 80081c8:	2e01      	cmp	r6, #1
 80081ca:	bf38      	it	cc
 80081cc:	2601      	movcc	r6, #1
 80081ce:	2d01      	cmp	r5, #1
 80081d0:	bf38      	it	cc
 80081d2:	2501      	movcc	r5, #1
 80081d4:	b2f6      	uxtb	r6, r6
 80081d6:	b2ed      	uxtb	r5, r5
 80081d8:	ea85 0306 	eor.w	r3, r5, r6
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	2b03      	cmp	r3, #3
 80081e0:	d916      	bls.n	8008210 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x242>
 80081e2:	2d03      	cmp	r5, #3
 80081e4:	bf81      	itttt	hi
 80081e6:	462e      	movhi	r6, r5
 80081e8:	9b0d      	ldrhi	r3, [sp, #52]	@ 0x34
 80081ea:	2000      	movhi	r0, #0
 80081ec:	6023      	strhi	r3, [r4, #0]
 80081ee:	bf8a      	itet	hi
 80081f0:	f89d 3038 	ldrbhi.w	r3, [sp, #56]	@ 0x38
 80081f4:	4640      	movls	r0, r8
 80081f6:	7123      	strbhi	r3, [r4, #4]
 80081f8:	07b3      	lsls	r3, r6, #30
 80081fa:	71a6      	strb	r6, [r4, #6]
 80081fc:	d402      	bmi.n	8008204 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x236>
 80081fe:	f016 0601 	ands.w	r6, r6, #1
 8008202:	d19b      	bne.n	800813c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x16e>
 8008204:	2000      	movs	r0, #0
 8008206:	e785      	b.n	8008114 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x146>
 8008208:	2601      	movs	r6, #1
 800820a:	e7e5      	b.n	80081d8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x20a>
 800820c:	2501      	movs	r5, #1
 800820e:	e7e3      	b.n	80081d8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x20a>
 8008210:	2300      	movs	r3, #0
 8008212:	4035      	ands	r5, r6
 8008214:	b2ed      	uxtb	r5, r5
 8008216:	2d03      	cmp	r5, #3
 8008218:	6023      	str	r3, [r4, #0]
 800821a:	d903      	bls.n	8008224 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x256>
 800821c:	2302      	movs	r3, #2
 800821e:	2001      	movs	r0, #1
 8008220:	71a3      	strb	r3, [r4, #6]
 8008222:	e777      	b.n	8008114 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x146>
 8008224:	2001      	movs	r0, #1
 8008226:	71a0      	strb	r0, [r4, #6]
 8008228:	e788      	b.n	800813c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x16e>
 800822a:	2301      	movs	r3, #1
 800822c:	930a      	str	r3, [sp, #40]	@ 0x28
 800822e:	4640      	mov	r0, r8
 8008230:	e787      	b.n	8008142 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x174>

08008232 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8008232:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008236:	b089      	sub	sp, #36	@ 0x24
 8008238:	4605      	mov	r5, r0
 800823a:	4616      	mov	r6, r2
 800823c:	461c      	mov	r4, r3
 800823e:	9102      	str	r1, [sp, #8]
 8008240:	f7ff fd41 	bl	8007cc6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8008244:	2800      	cmp	r0, #0
 8008246:	d160      	bne.n	800830a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd8>
 8008248:	f04f 0a00 	mov.w	sl, #0
 800824c:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8008250:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8008254:	f019 0f10 	tst.w	r9, #16
 8008258:	bf18      	it	ne
 800825a:	f8d5 9008 	ldrne.w	r9, [r5, #8]
 800825e:	eb05 07c8 	add.w	r7, r5, r8, lsl #3
 8008262:	f009 0301 	and.w	r3, r9, #1
 8008266:	9303      	str	r3, [sp, #12]
 8008268:	f10d 0b10 	add.w	fp, sp, #16
 800826c:	f1b8 0f00 	cmp.w	r8, #0
 8008270:	d104      	bne.n	800827c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x4a>
 8008272:	7920      	ldrb	r0, [r4, #4]
 8008274:	3800      	subs	r0, #0
 8008276:	bf18      	it	ne
 8008278:	2001      	movne	r0, #1
 800827a:	e047      	b.n	800830c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xda>
 800827c:	68fa      	ldr	r2, [r7, #12]
 800827e:	e9cd 9a06 	strd	r9, sl, [sp, #24]
 8008282:	f002 0301 	and.w	r3, r2, #1
 8008286:	9300      	str	r3, [sp, #0]
 8008288:	f002 0302 	and.w	r3, r2, #2
 800828c:	9301      	str	r3, [sp, #4]
 800828e:	9b03      	ldr	r3, [sp, #12]
 8008290:	f002 0102 	and.w	r1, r2, #2
 8008294:	430b      	orrs	r3, r1
 8008296:	f8cd a010 	str.w	sl, [sp, #16]
 800829a:	f88d a014 	strb.w	sl, [sp, #20]
 800829e:	d103      	bne.n	80082a8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x76>
 80082a0:	f108 38ff 	add.w	r8, r8, #4294967295
 80082a4:	3f08      	subs	r7, #8
 80082a6:	e7e1      	b.n	800826c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x3a>
 80082a8:	2e00      	cmp	r6, #0
 80082aa:	d032      	beq.n	8008312 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xe0>
 80082ac:	9b00      	ldr	r3, [sp, #0]
 80082ae:	1212      	asrs	r2, r2, #8
 80082b0:	b10b      	cbz	r3, 80082b6 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x84>
 80082b2:	6833      	ldr	r3, [r6, #0]
 80082b4:	589a      	ldr	r2, [r3, r2]
 80082b6:	4432      	add	r2, r6
 80082b8:	68b8      	ldr	r0, [r7, #8]
 80082ba:	9902      	ldr	r1, [sp, #8]
 80082bc:	6803      	ldr	r3, [r0, #0]
 80082be:	699b      	ldr	r3, [r3, #24]
 80082c0:	469c      	mov	ip, r3
 80082c2:	465b      	mov	r3, fp
 80082c4:	47e0      	blx	ip
 80082c6:	2800      	cmp	r0, #0
 80082c8:	d0ea      	beq.n	80082a0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x6e>
 80082ca:	9b07      	ldr	r3, [sp, #28]
 80082cc:	2b08      	cmp	r3, #8
 80082ce:	d103      	bne.n	80082d8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xa6>
 80082d0:	9b00      	ldr	r3, [sp, #0]
 80082d2:	b10b      	cbz	r3, 80082d8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xa6>
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	9307      	str	r3, [sp, #28]
 80082d8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80082dc:	2b03      	cmp	r3, #3
 80082de:	d905      	bls.n	80082ec <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xba>
 80082e0:	9a01      	ldr	r2, [sp, #4]
 80082e2:	b91a      	cbnz	r2, 80082ec <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xba>
 80082e4:	f023 0302 	bic.w	r3, r3, #2
 80082e8:	f88d 3014 	strb.w	r3, [sp, #20]
 80082ec:	68e1      	ldr	r1, [r4, #12]
 80082ee:	b9c1      	cbnz	r1, 8008322 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf0>
 80082f0:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 80082f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80082f8:	7923      	ldrb	r3, [r4, #4]
 80082fa:	2b03      	cmp	r3, #3
 80082fc:	d905      	bls.n	800830a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd8>
 80082fe:	079a      	lsls	r2, r3, #30
 8008300:	d509      	bpl.n	8008316 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xe4>
 8008302:	68ab      	ldr	r3, [r5, #8]
 8008304:	f013 0f01 	tst.w	r3, #1
 8008308:	d1ca      	bne.n	80082a0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x6e>
 800830a:	2001      	movs	r0, #1
 800830c:	b009      	add	sp, #36	@ 0x24
 800830e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008312:	4632      	mov	r2, r6
 8008314:	e7d0      	b.n	80082b8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x86>
 8008316:	07db      	lsls	r3, r3, #31
 8008318:	d5f7      	bpl.n	800830a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd8>
 800831a:	68ab      	ldr	r3, [r5, #8]
 800831c:	f013 0f02 	tst.w	r3, #2
 8008320:	e7f2      	b.n	8008308 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd6>
 8008322:	6823      	ldr	r3, [r4, #0]
 8008324:	9a04      	ldr	r2, [sp, #16]
 8008326:	4293      	cmp	r3, r2
 8008328:	d004      	beq.n	8008334 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x102>
 800832a:	2300      	movs	r3, #0
 800832c:	6023      	str	r3, [r4, #0]
 800832e:	2302      	movs	r3, #2
 8008330:	7123      	strb	r3, [r4, #4]
 8008332:	e7ea      	b.n	800830a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd8>
 8008334:	b12b      	cbz	r3, 8008342 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x110>
 8008336:	7923      	ldrb	r3, [r4, #4]
 8008338:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800833c:	4313      	orrs	r3, r2
 800833e:	7123      	strb	r3, [r4, #4]
 8008340:	e7ae      	b.n	80082a0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x6e>
 8008342:	9807      	ldr	r0, [sp, #28]
 8008344:	2808      	cmp	r0, #8
 8008346:	d0f2      	beq.n	800832e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xfc>
 8008348:	2908      	cmp	r1, #8
 800834a:	d0f0      	beq.n	800832e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xfc>
 800834c:	f7ff fdc6 	bl	8007edc <_ZNKSt9type_info7__equalERKS_>
 8008350:	2800      	cmp	r0, #0
 8008352:	d1f0      	bne.n	8008336 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x104>
 8008354:	e7eb      	b.n	800832e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xfc>

08008356 <_ZSt17__throw_bad_allocv>:
 8008356:	b508      	push	{r3, lr}
 8008358:	f000 fa28 	bl	80087ac <abort>

0800835c <_ZSt28__throw_bad_array_new_lengthv>:
 800835c:	b508      	push	{r3, lr}
 800835e:	f000 fa25 	bl	80087ac <abort>

08008362 <_ZSt19__throw_logic_errorPKc>:
 8008362:	b508      	push	{r3, lr}
 8008364:	f000 fa22 	bl	80087ac <abort>

08008368 <_ZSt20__throw_length_errorPKc>:
 8008368:	b508      	push	{r3, lr}
 800836a:	f000 fa1f 	bl	80087ac <abort>

0800836e <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800836e:	b10a      	cbz	r2, 8008374 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8008370:	f000 bc93 	b.w	8008c9a <memcpy>
 8008374:	4770      	bx	lr

08008376 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 8008376:	b10a      	cbz	r2, 800837c <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 8008378:	f000 bb97 	b.w	8008aaa <memcmp>
 800837c:	4610      	mov	r0, r2
 800837e:	4770      	bx	lr

08008380 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 8008380:	f850 3b08 	ldr.w	r3, [r0], #8
 8008384:	1a1b      	subs	r3, r3, r0
 8008386:	4258      	negs	r0, r3
 8008388:	4158      	adcs	r0, r3
 800838a:	4770      	bx	lr

0800838c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800838c:	b508      	push	{r3, lr}
 800838e:	680b      	ldr	r3, [r1, #0]
 8008390:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008394:	d302      	bcc.n	800839c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8008396:	480d      	ldr	r0, [pc, #52]	@ (80083cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8008398:	f7ff ffe6 	bl	8008368 <_ZSt20__throw_length_errorPKc>
 800839c:	4293      	cmp	r3, r2
 800839e:	d90b      	bls.n	80083b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80083a0:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80083a4:	ea4f 0042 	mov.w	r0, r2, lsl #1
 80083a8:	d206      	bcs.n	80083b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80083aa:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80083ae:	bf2a      	itet	cs
 80083b0:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 80083b4:	6008      	strcc	r0, [r1, #0]
 80083b6:	600b      	strcs	r3, [r1, #0]
 80083b8:	6808      	ldr	r0, [r1, #0]
 80083ba:	3001      	adds	r0, #1
 80083bc:	d501      	bpl.n	80083c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 80083be:	f7ff ffca 	bl	8008356 <_ZSt17__throw_bad_allocv>
 80083c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80083c6:	f7fe baf1 	b.w	80069ac <_Znwj>
 80083ca:	bf00      	nop
 80083cc:	0800b574 	.word	0x0800b574

080083d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80083d0:	b510      	push	{r4, lr}
 80083d2:	4604      	mov	r4, r0
 80083d4:	f7ff ffd4 	bl	8008380 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 80083d8:	b920      	cbnz	r0, 80083e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 80083da:	6820      	ldr	r0, [r4, #0]
 80083dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083e0:	f7fe bae9 	b.w	80069b6 <_ZdlPv>
 80083e4:	bd10      	pop	{r4, pc}

080083e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80083e6:	2a01      	cmp	r2, #1
 80083e8:	b410      	push	{r4}
 80083ea:	d103      	bne.n	80083f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xe>
 80083ec:	780a      	ldrb	r2, [r1, #0]
 80083ee:	bc10      	pop	{r4}
 80083f0:	7002      	strb	r2, [r0, #0]
 80083f2:	4770      	bx	lr
 80083f4:	bc10      	pop	{r4}
 80083f6:	f7ff bfba 	b.w	800836e <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

080083fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 80083fa:	460b      	mov	r3, r1
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	b410      	push	{r4}
 8008400:	4611      	mov	r1, r2
 8008402:	4604      	mov	r4, r0
 8008404:	d102      	bne.n	800840c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x12>
 8008406:	7022      	strb	r2, [r4, #0]
 8008408:	bc10      	pop	{r4}
 800840a:	4770      	bx	lr
 800840c:	2b00      	cmp	r3, #0
 800840e:	d0fb      	beq.n	8008408 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 8008410:	461a      	mov	r2, r3
 8008412:	bc10      	pop	{r4}
 8008414:	f000 bb73 	b.w	8008afe <memset>

08008418 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>:
 8008418:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800841a:	290f      	cmp	r1, #15
 800841c:	4604      	mov	r4, r0
 800841e:	4615      	mov	r5, r2
 8008420:	9101      	str	r1, [sp, #4]
 8008422:	d906      	bls.n	8008432 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x1a>
 8008424:	2200      	movs	r2, #0
 8008426:	a901      	add	r1, sp, #4
 8008428:	f7ff ffb0 	bl	800838c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800842c:	9b01      	ldr	r3, [sp, #4]
 800842e:	6020      	str	r0, [r4, #0]
 8008430:	60a3      	str	r3, [r4, #8]
 8008432:	9901      	ldr	r1, [sp, #4]
 8008434:	b119      	cbz	r1, 800843e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x26>
 8008436:	462a      	mov	r2, r5
 8008438:	6820      	ldr	r0, [r4, #0]
 800843a:	f7ff ffde 	bl	80083fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 800843e:	2100      	movs	r1, #0
 8008440:	9b01      	ldr	r3, [sp, #4]
 8008442:	6822      	ldr	r2, [r4, #0]
 8008444:	6063      	str	r3, [r4, #4]
 8008446:	54d1      	strb	r1, [r2, r3]
 8008448:	b003      	add	sp, #12
 800844a:	bd30      	pop	{r4, r5, pc}

0800844c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 800844c:	b508      	push	{r3, lr}
 800844e:	1a52      	subs	r2, r2, r1
 8008450:	f7ff ffc9 	bl	80083e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008454:	bd08      	pop	{r3, pc}

08008456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8008456:	b508      	push	{r3, lr}
 8008458:	1a52      	subs	r2, r2, r1
 800845a:	f7ff ffc4 	bl	80083e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800845e:	bd08      	pop	{r3, pc}

08008460 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 8008460:	b510      	push	{r4, lr}
 8008462:	4604      	mov	r4, r0
 8008464:	f7ff ff8c 	bl	8008380 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8008468:	b908      	cbnz	r0, 800846e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 800846a:	68a0      	ldr	r0, [r4, #8]
 800846c:	bd10      	pop	{r4, pc}
 800846e:	200f      	movs	r0, #15
 8008470:	e7fc      	b.n	800846c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

08008472 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 8008472:	4288      	cmp	r0, r1
 8008474:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008476:	4604      	mov	r4, r0
 8008478:	460e      	mov	r6, r1
 800847a:	d01d      	beq.n	80084b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x46>
 800847c:	684d      	ldr	r5, [r1, #4]
 800847e:	f7ff ffef 	bl	8008460 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8008482:	42a8      	cmp	r0, r5
 8008484:	4602      	mov	r2, r0
 8008486:	d211      	bcs.n	80084ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x3a>
 8008488:	a901      	add	r1, sp, #4
 800848a:	4620      	mov	r0, r4
 800848c:	9501      	str	r5, [sp, #4]
 800848e:	f7ff ff7d 	bl	800838c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8008492:	4607      	mov	r7, r0
 8008494:	4620      	mov	r0, r4
 8008496:	f7ff ff9b 	bl	80083d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800849a:	9b01      	ldr	r3, [sp, #4]
 800849c:	6027      	str	r7, [r4, #0]
 800849e:	60a3      	str	r3, [r4, #8]
 80084a0:	462a      	mov	r2, r5
 80084a2:	6831      	ldr	r1, [r6, #0]
 80084a4:	6820      	ldr	r0, [r4, #0]
 80084a6:	f7ff ff9e 	bl	80083e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80084aa:	e001      	b.n	80084b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x3e>
 80084ac:	2d00      	cmp	r5, #0
 80084ae:	d1f7      	bne.n	80084a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x2e>
 80084b0:	2200      	movs	r2, #0
 80084b2:	6823      	ldr	r3, [r4, #0]
 80084b4:	6065      	str	r5, [r4, #4]
 80084b6:	555a      	strb	r2, [r3, r5]
 80084b8:	b003      	add	sp, #12
 80084ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080084bc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
 80084bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084be:	6847      	ldr	r7, [r0, #4]
 80084c0:	4605      	mov	r5, r0
 80084c2:	4608      	mov	r0, r1
 80084c4:	460e      	mov	r6, r1
 80084c6:	f7f7 fe4d 	bl	8000164 <strlen>
 80084ca:	4287      	cmp	r7, r0
 80084cc:	4604      	mov	r4, r0
 80084ce:	463a      	mov	r2, r7
 80084d0:	4631      	mov	r1, r6
 80084d2:	bf28      	it	cs
 80084d4:	4602      	movcs	r2, r0
 80084d6:	6828      	ldr	r0, [r5, #0]
 80084d8:	f7ff ff4d 	bl	8008376 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 80084dc:	b900      	cbnz	r0, 80084e0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
 80084de:	1b38      	subs	r0, r7, r4
 80084e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084e2:	0000      	movs	r0, r0
 80084e4:	0000      	movs	r0, r0
	...

080084e8 <ceil>:
 80084e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084ec:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80084f0:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 80084f4:	2e13      	cmp	r6, #19
 80084f6:	4602      	mov	r2, r0
 80084f8:	460b      	mov	r3, r1
 80084fa:	460c      	mov	r4, r1
 80084fc:	4605      	mov	r5, r0
 80084fe:	4680      	mov	r8, r0
 8008500:	dc2f      	bgt.n	8008562 <ceil+0x7a>
 8008502:	2e00      	cmp	r6, #0
 8008504:	da11      	bge.n	800852a <ceil+0x42>
 8008506:	a332      	add	r3, pc, #200	@ (adr r3, 80085d0 <ceil+0xe8>)
 8008508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850c:	f7f7 ff62 	bl	80003d4 <__adddf3>
 8008510:	2200      	movs	r2, #0
 8008512:	2300      	movs	r3, #0
 8008514:	f7f8 f992 	bl	800083c <__aeabi_dcmpgt>
 8008518:	b120      	cbz	r0, 8008524 <ceil+0x3c>
 800851a:	2c00      	cmp	r4, #0
 800851c:	db51      	blt.n	80085c2 <ceil+0xda>
 800851e:	4325      	orrs	r5, r4
 8008520:	d153      	bne.n	80085ca <ceil+0xe2>
 8008522:	462c      	mov	r4, r5
 8008524:	4623      	mov	r3, r4
 8008526:	462a      	mov	r2, r5
 8008528:	e024      	b.n	8008574 <ceil+0x8c>
 800852a:	4f2b      	ldr	r7, [pc, #172]	@ (80085d8 <ceil+0xf0>)
 800852c:	4137      	asrs	r7, r6
 800852e:	ea01 0c07 	and.w	ip, r1, r7
 8008532:	ea5c 0c00 	orrs.w	ip, ip, r0
 8008536:	d01d      	beq.n	8008574 <ceil+0x8c>
 8008538:	a325      	add	r3, pc, #148	@ (adr r3, 80085d0 <ceil+0xe8>)
 800853a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800853e:	f7f7 ff49 	bl	80003d4 <__adddf3>
 8008542:	2200      	movs	r2, #0
 8008544:	2300      	movs	r3, #0
 8008546:	f7f8 f979 	bl	800083c <__aeabi_dcmpgt>
 800854a:	2800      	cmp	r0, #0
 800854c:	d0ea      	beq.n	8008524 <ceil+0x3c>
 800854e:	2c00      	cmp	r4, #0
 8008550:	bfc2      	ittt	gt
 8008552:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 8008556:	4133      	asrgt	r3, r6
 8008558:	18e4      	addgt	r4, r4, r3
 800855a:	2500      	movs	r5, #0
 800855c:	ea24 0407 	bic.w	r4, r4, r7
 8008560:	e7e0      	b.n	8008524 <ceil+0x3c>
 8008562:	2e33      	cmp	r6, #51	@ 0x33
 8008564:	dd0a      	ble.n	800857c <ceil+0x94>
 8008566:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800856a:	d103      	bne.n	8008574 <ceil+0x8c>
 800856c:	f7f7 ff32 	bl	80003d4 <__adddf3>
 8008570:	4602      	mov	r2, r0
 8008572:	460b      	mov	r3, r1
 8008574:	4610      	mov	r0, r2
 8008576:	4619      	mov	r1, r3
 8008578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800857c:	f04f 3cff 	mov.w	ip, #4294967295
 8008580:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8008584:	fa2c f707 	lsr.w	r7, ip, r7
 8008588:	4238      	tst	r0, r7
 800858a:	d0f3      	beq.n	8008574 <ceil+0x8c>
 800858c:	a310      	add	r3, pc, #64	@ (adr r3, 80085d0 <ceil+0xe8>)
 800858e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008592:	f7f7 ff1f 	bl	80003d4 <__adddf3>
 8008596:	2200      	movs	r2, #0
 8008598:	2300      	movs	r3, #0
 800859a:	f7f8 f94f 	bl	800083c <__aeabi_dcmpgt>
 800859e:	2800      	cmp	r0, #0
 80085a0:	d0c0      	beq.n	8008524 <ceil+0x3c>
 80085a2:	2c00      	cmp	r4, #0
 80085a4:	dd0a      	ble.n	80085bc <ceil+0xd4>
 80085a6:	2e14      	cmp	r6, #20
 80085a8:	d101      	bne.n	80085ae <ceil+0xc6>
 80085aa:	3401      	adds	r4, #1
 80085ac:	e006      	b.n	80085bc <ceil+0xd4>
 80085ae:	2301      	movs	r3, #1
 80085b0:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80085b4:	40b3      	lsls	r3, r6
 80085b6:	441d      	add	r5, r3
 80085b8:	45a8      	cmp	r8, r5
 80085ba:	d8f6      	bhi.n	80085aa <ceil+0xc2>
 80085bc:	ea25 0507 	bic.w	r5, r5, r7
 80085c0:	e7b0      	b.n	8008524 <ceil+0x3c>
 80085c2:	2500      	movs	r5, #0
 80085c4:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 80085c8:	e7ac      	b.n	8008524 <ceil+0x3c>
 80085ca:	2500      	movs	r5, #0
 80085cc:	4c03      	ldr	r4, [pc, #12]	@ (80085dc <ceil+0xf4>)
 80085ce:	e7a9      	b.n	8008524 <ceil+0x3c>
 80085d0:	8800759c 	.word	0x8800759c
 80085d4:	7e37e43c 	.word	0x7e37e43c
 80085d8:	000fffff 	.word	0x000fffff
 80085dc:	3ff00000 	.word	0x3ff00000

080085e0 <floor>:
 80085e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085e4:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80085e8:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 80085ec:	2e13      	cmp	r6, #19
 80085ee:	4602      	mov	r2, r0
 80085f0:	460b      	mov	r3, r1
 80085f2:	460c      	mov	r4, r1
 80085f4:	4605      	mov	r5, r0
 80085f6:	4680      	mov	r8, r0
 80085f8:	dc35      	bgt.n	8008666 <floor+0x86>
 80085fa:	2e00      	cmp	r6, #0
 80085fc:	da17      	bge.n	800862e <floor+0x4e>
 80085fe:	a334      	add	r3, pc, #208	@ (adr r3, 80086d0 <floor+0xf0>)
 8008600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008604:	f7f7 fee6 	bl	80003d4 <__adddf3>
 8008608:	2200      	movs	r2, #0
 800860a:	2300      	movs	r3, #0
 800860c:	f7f8 f916 	bl	800083c <__aeabi_dcmpgt>
 8008610:	b150      	cbz	r0, 8008628 <floor+0x48>
 8008612:	2c00      	cmp	r4, #0
 8008614:	da57      	bge.n	80086c6 <floor+0xe6>
 8008616:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800861a:	432c      	orrs	r4, r5
 800861c:	2500      	movs	r5, #0
 800861e:	42ac      	cmp	r4, r5
 8008620:	4c2d      	ldr	r4, [pc, #180]	@ (80086d8 <floor+0xf8>)
 8008622:	bf08      	it	eq
 8008624:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8008628:	4623      	mov	r3, r4
 800862a:	462a      	mov	r2, r5
 800862c:	e024      	b.n	8008678 <floor+0x98>
 800862e:	4f2b      	ldr	r7, [pc, #172]	@ (80086dc <floor+0xfc>)
 8008630:	4137      	asrs	r7, r6
 8008632:	ea01 0c07 	and.w	ip, r1, r7
 8008636:	ea5c 0c00 	orrs.w	ip, ip, r0
 800863a:	d01d      	beq.n	8008678 <floor+0x98>
 800863c:	a324      	add	r3, pc, #144	@ (adr r3, 80086d0 <floor+0xf0>)
 800863e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008642:	f7f7 fec7 	bl	80003d4 <__adddf3>
 8008646:	2200      	movs	r2, #0
 8008648:	2300      	movs	r3, #0
 800864a:	f7f8 f8f7 	bl	800083c <__aeabi_dcmpgt>
 800864e:	2800      	cmp	r0, #0
 8008650:	d0ea      	beq.n	8008628 <floor+0x48>
 8008652:	2c00      	cmp	r4, #0
 8008654:	bfbe      	ittt	lt
 8008656:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800865a:	4133      	asrlt	r3, r6
 800865c:	18e4      	addlt	r4, r4, r3
 800865e:	2500      	movs	r5, #0
 8008660:	ea24 0407 	bic.w	r4, r4, r7
 8008664:	e7e0      	b.n	8008628 <floor+0x48>
 8008666:	2e33      	cmp	r6, #51	@ 0x33
 8008668:	dd0a      	ble.n	8008680 <floor+0xa0>
 800866a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800866e:	d103      	bne.n	8008678 <floor+0x98>
 8008670:	f7f7 feb0 	bl	80003d4 <__adddf3>
 8008674:	4602      	mov	r2, r0
 8008676:	460b      	mov	r3, r1
 8008678:	4610      	mov	r0, r2
 800867a:	4619      	mov	r1, r3
 800867c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008680:	f04f 3cff 	mov.w	ip, #4294967295
 8008684:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8008688:	fa2c f707 	lsr.w	r7, ip, r7
 800868c:	4207      	tst	r7, r0
 800868e:	d0f3      	beq.n	8008678 <floor+0x98>
 8008690:	a30f      	add	r3, pc, #60	@ (adr r3, 80086d0 <floor+0xf0>)
 8008692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008696:	f7f7 fe9d 	bl	80003d4 <__adddf3>
 800869a:	2200      	movs	r2, #0
 800869c:	2300      	movs	r3, #0
 800869e:	f7f8 f8cd 	bl	800083c <__aeabi_dcmpgt>
 80086a2:	2800      	cmp	r0, #0
 80086a4:	d0c0      	beq.n	8008628 <floor+0x48>
 80086a6:	2c00      	cmp	r4, #0
 80086a8:	da0a      	bge.n	80086c0 <floor+0xe0>
 80086aa:	2e14      	cmp	r6, #20
 80086ac:	d101      	bne.n	80086b2 <floor+0xd2>
 80086ae:	3401      	adds	r4, #1
 80086b0:	e006      	b.n	80086c0 <floor+0xe0>
 80086b2:	2301      	movs	r3, #1
 80086b4:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80086b8:	40b3      	lsls	r3, r6
 80086ba:	441d      	add	r5, r3
 80086bc:	4545      	cmp	r5, r8
 80086be:	d3f6      	bcc.n	80086ae <floor+0xce>
 80086c0:	ea25 0507 	bic.w	r5, r5, r7
 80086c4:	e7b0      	b.n	8008628 <floor+0x48>
 80086c6:	2500      	movs	r5, #0
 80086c8:	462c      	mov	r4, r5
 80086ca:	e7ad      	b.n	8008628 <floor+0x48>
 80086cc:	f3af 8000 	nop.w
 80086d0:	8800759c 	.word	0x8800759c
 80086d4:	7e37e43c 	.word	0x7e37e43c
 80086d8:	bff00000 	.word	0xbff00000
 80086dc:	000fffff 	.word	0x000fffff

080086e0 <floorf>:
 80086e0:	b570      	push	{r4, r5, r6, lr}
 80086e2:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 80086e6:	3d7f      	subs	r5, #127	@ 0x7f
 80086e8:	2d16      	cmp	r5, #22
 80086ea:	4601      	mov	r1, r0
 80086ec:	4604      	mov	r4, r0
 80086ee:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 80086f2:	dc26      	bgt.n	8008742 <floorf+0x62>
 80086f4:	2d00      	cmp	r5, #0
 80086f6:	da0f      	bge.n	8008718 <floorf+0x38>
 80086f8:	4917      	ldr	r1, [pc, #92]	@ (8008758 <floorf+0x78>)
 80086fa:	f7f8 f91f 	bl	800093c <__addsf3>
 80086fe:	2100      	movs	r1, #0
 8008700:	f7f8 fbe0 	bl	8000ec4 <__aeabi_fcmpgt>
 8008704:	b130      	cbz	r0, 8008714 <floorf+0x34>
 8008706:	2c00      	cmp	r4, #0
 8008708:	da23      	bge.n	8008752 <floorf+0x72>
 800870a:	2e00      	cmp	r6, #0
 800870c:	4c13      	ldr	r4, [pc, #76]	@ (800875c <floorf+0x7c>)
 800870e:	bf08      	it	eq
 8008710:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8008714:	4621      	mov	r1, r4
 8008716:	e01a      	b.n	800874e <floorf+0x6e>
 8008718:	4e11      	ldr	r6, [pc, #68]	@ (8008760 <floorf+0x80>)
 800871a:	412e      	asrs	r6, r5
 800871c:	4230      	tst	r0, r6
 800871e:	d016      	beq.n	800874e <floorf+0x6e>
 8008720:	490d      	ldr	r1, [pc, #52]	@ (8008758 <floorf+0x78>)
 8008722:	f7f8 f90b 	bl	800093c <__addsf3>
 8008726:	2100      	movs	r1, #0
 8008728:	f7f8 fbcc 	bl	8000ec4 <__aeabi_fcmpgt>
 800872c:	2800      	cmp	r0, #0
 800872e:	d0f1      	beq.n	8008714 <floorf+0x34>
 8008730:	2c00      	cmp	r4, #0
 8008732:	bfbe      	ittt	lt
 8008734:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 8008738:	412b      	asrlt	r3, r5
 800873a:	18e4      	addlt	r4, r4, r3
 800873c:	ea24 0406 	bic.w	r4, r4, r6
 8008740:	e7e8      	b.n	8008714 <floorf+0x34>
 8008742:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 8008746:	d302      	bcc.n	800874e <floorf+0x6e>
 8008748:	f7f8 f8f8 	bl	800093c <__addsf3>
 800874c:	4601      	mov	r1, r0
 800874e:	4608      	mov	r0, r1
 8008750:	bd70      	pop	{r4, r5, r6, pc}
 8008752:	2400      	movs	r4, #0
 8008754:	e7de      	b.n	8008714 <floorf+0x34>
 8008756:	bf00      	nop
 8008758:	7149f2ca 	.word	0x7149f2ca
 800875c:	bf800000 	.word	0xbf800000
 8008760:	007fffff 	.word	0x007fffff

08008764 <roundf>:
 8008764:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8008768:	3b7f      	subs	r3, #127	@ 0x7f
 800876a:	2b16      	cmp	r3, #22
 800876c:	4601      	mov	r1, r0
 800876e:	b510      	push	{r4, lr}
 8008770:	dc14      	bgt.n	800879c <roundf+0x38>
 8008772:	2b00      	cmp	r3, #0
 8008774:	da07      	bge.n	8008786 <roundf+0x22>
 8008776:	3301      	adds	r3, #1
 8008778:	f000 4100 	and.w	r1, r0, #2147483648	@ 0x80000000
 800877c:	d101      	bne.n	8008782 <roundf+0x1e>
 800877e:	f041 517e 	orr.w	r1, r1, #1065353216	@ 0x3f800000
 8008782:	4608      	mov	r0, r1
 8008784:	bd10      	pop	{r4, pc}
 8008786:	4a08      	ldr	r2, [pc, #32]	@ (80087a8 <roundf+0x44>)
 8008788:	411a      	asrs	r2, r3
 800878a:	4202      	tst	r2, r0
 800878c:	d0f9      	beq.n	8008782 <roundf+0x1e>
 800878e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008792:	4119      	asrs	r1, r3
 8008794:	4401      	add	r1, r0
 8008796:	ea21 0102 	bic.w	r1, r1, r2
 800879a:	e7f2      	b.n	8008782 <roundf+0x1e>
 800879c:	2b80      	cmp	r3, #128	@ 0x80
 800879e:	d1f0      	bne.n	8008782 <roundf+0x1e>
 80087a0:	f7f8 f8cc 	bl	800093c <__addsf3>
 80087a4:	4601      	mov	r1, r0
 80087a6:	e7ec      	b.n	8008782 <roundf+0x1e>
 80087a8:	007fffff 	.word	0x007fffff

080087ac <abort>:
 80087ac:	2006      	movs	r0, #6
 80087ae:	b508      	push	{r3, lr}
 80087b0:	f000 f9d6 	bl	8008b60 <raise>
 80087b4:	2001      	movs	r0, #1
 80087b6:	f7fe fa49 	bl	8006c4c <_exit>

080087ba <atexit>:
 80087ba:	2300      	movs	r3, #0
 80087bc:	4601      	mov	r1, r0
 80087be:	461a      	mov	r2, r3
 80087c0:	4618      	mov	r0, r3
 80087c2:	f000 ba79 	b.w	8008cb8 <__register_exitproc>
	...

080087c8 <srand>:
 80087c8:	b538      	push	{r3, r4, r5, lr}
 80087ca:	4b10      	ldr	r3, [pc, #64]	@ (800880c <srand+0x44>)
 80087cc:	4604      	mov	r4, r0
 80087ce:	681d      	ldr	r5, [r3, #0]
 80087d0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80087d2:	b9b3      	cbnz	r3, 8008802 <srand+0x3a>
 80087d4:	2018      	movs	r0, #24
 80087d6:	f000 fb33 	bl	8008e40 <malloc>
 80087da:	4602      	mov	r2, r0
 80087dc:	6328      	str	r0, [r5, #48]	@ 0x30
 80087de:	b920      	cbnz	r0, 80087ea <srand+0x22>
 80087e0:	2146      	movs	r1, #70	@ 0x46
 80087e2:	4b0b      	ldr	r3, [pc, #44]	@ (8008810 <srand+0x48>)
 80087e4:	480b      	ldr	r0, [pc, #44]	@ (8008814 <srand+0x4c>)
 80087e6:	f000 fac5 	bl	8008d74 <__assert_func>
 80087ea:	490b      	ldr	r1, [pc, #44]	@ (8008818 <srand+0x50>)
 80087ec:	4b0b      	ldr	r3, [pc, #44]	@ (800881c <srand+0x54>)
 80087ee:	e9c0 1300 	strd	r1, r3, [r0]
 80087f2:	4b0b      	ldr	r3, [pc, #44]	@ (8008820 <srand+0x58>)
 80087f4:	2100      	movs	r1, #0
 80087f6:	6083      	str	r3, [r0, #8]
 80087f8:	230b      	movs	r3, #11
 80087fa:	8183      	strh	r3, [r0, #12]
 80087fc:	2001      	movs	r0, #1
 80087fe:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008802:	2200      	movs	r2, #0
 8008804:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8008806:	611c      	str	r4, [r3, #16]
 8008808:	615a      	str	r2, [r3, #20]
 800880a:	bd38      	pop	{r3, r4, r5, pc}
 800880c:	20000030 	.word	0x20000030
 8008810:	0800b58c 	.word	0x0800b58c
 8008814:	0800b5a3 	.word	0x0800b5a3
 8008818:	abcd330e 	.word	0xabcd330e
 800881c:	e66d1234 	.word	0xe66d1234
 8008820:	0005deec 	.word	0x0005deec

08008824 <rand>:
 8008824:	4b16      	ldr	r3, [pc, #88]	@ (8008880 <rand+0x5c>)
 8008826:	b510      	push	{r4, lr}
 8008828:	681c      	ldr	r4, [r3, #0]
 800882a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800882c:	b9b3      	cbnz	r3, 800885c <rand+0x38>
 800882e:	2018      	movs	r0, #24
 8008830:	f000 fb06 	bl	8008e40 <malloc>
 8008834:	4602      	mov	r2, r0
 8008836:	6320      	str	r0, [r4, #48]	@ 0x30
 8008838:	b920      	cbnz	r0, 8008844 <rand+0x20>
 800883a:	2152      	movs	r1, #82	@ 0x52
 800883c:	4b11      	ldr	r3, [pc, #68]	@ (8008884 <rand+0x60>)
 800883e:	4812      	ldr	r0, [pc, #72]	@ (8008888 <rand+0x64>)
 8008840:	f000 fa98 	bl	8008d74 <__assert_func>
 8008844:	4911      	ldr	r1, [pc, #68]	@ (800888c <rand+0x68>)
 8008846:	4b12      	ldr	r3, [pc, #72]	@ (8008890 <rand+0x6c>)
 8008848:	e9c0 1300 	strd	r1, r3, [r0]
 800884c:	4b11      	ldr	r3, [pc, #68]	@ (8008894 <rand+0x70>)
 800884e:	2100      	movs	r1, #0
 8008850:	6083      	str	r3, [r0, #8]
 8008852:	230b      	movs	r3, #11
 8008854:	8183      	strh	r3, [r0, #12]
 8008856:	2001      	movs	r0, #1
 8008858:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800885c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800885e:	480e      	ldr	r0, [pc, #56]	@ (8008898 <rand+0x74>)
 8008860:	690b      	ldr	r3, [r1, #16]
 8008862:	694c      	ldr	r4, [r1, #20]
 8008864:	4358      	muls	r0, r3
 8008866:	4a0d      	ldr	r2, [pc, #52]	@ (800889c <rand+0x78>)
 8008868:	fb02 0004 	mla	r0, r2, r4, r0
 800886c:	fba3 3202 	umull	r3, r2, r3, r2
 8008870:	3301      	adds	r3, #1
 8008872:	eb40 0002 	adc.w	r0, r0, r2
 8008876:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800887a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800887e:	bd10      	pop	{r4, pc}
 8008880:	20000030 	.word	0x20000030
 8008884:	0800b58c 	.word	0x0800b58c
 8008888:	0800b5a3 	.word	0x0800b5a3
 800888c:	abcd330e 	.word	0xabcd330e
 8008890:	e66d1234 	.word	0xe66d1234
 8008894:	0005deec 	.word	0x0005deec
 8008898:	5851f42d 	.word	0x5851f42d
 800889c:	4c957f2d 	.word	0x4c957f2d

080088a0 <std>:
 80088a0:	2300      	movs	r3, #0
 80088a2:	b510      	push	{r4, lr}
 80088a4:	4604      	mov	r4, r0
 80088a6:	e9c0 3300 	strd	r3, r3, [r0]
 80088aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80088ae:	6083      	str	r3, [r0, #8]
 80088b0:	8181      	strh	r1, [r0, #12]
 80088b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80088b4:	81c2      	strh	r2, [r0, #14]
 80088b6:	6183      	str	r3, [r0, #24]
 80088b8:	4619      	mov	r1, r3
 80088ba:	2208      	movs	r2, #8
 80088bc:	305c      	adds	r0, #92	@ 0x5c
 80088be:	f000 f91e 	bl	8008afe <memset>
 80088c2:	4b0d      	ldr	r3, [pc, #52]	@ (80088f8 <std+0x58>)
 80088c4:	6224      	str	r4, [r4, #32]
 80088c6:	6263      	str	r3, [r4, #36]	@ 0x24
 80088c8:	4b0c      	ldr	r3, [pc, #48]	@ (80088fc <std+0x5c>)
 80088ca:	62a3      	str	r3, [r4, #40]	@ 0x28
 80088cc:	4b0c      	ldr	r3, [pc, #48]	@ (8008900 <std+0x60>)
 80088ce:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80088d0:	4b0c      	ldr	r3, [pc, #48]	@ (8008904 <std+0x64>)
 80088d2:	6323      	str	r3, [r4, #48]	@ 0x30
 80088d4:	4b0c      	ldr	r3, [pc, #48]	@ (8008908 <std+0x68>)
 80088d6:	429c      	cmp	r4, r3
 80088d8:	d006      	beq.n	80088e8 <std+0x48>
 80088da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80088de:	4294      	cmp	r4, r2
 80088e0:	d002      	beq.n	80088e8 <std+0x48>
 80088e2:	33d0      	adds	r3, #208	@ 0xd0
 80088e4:	429c      	cmp	r4, r3
 80088e6:	d105      	bne.n	80088f4 <std+0x54>
 80088e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80088ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088f0:	f000 b9c2 	b.w	8008c78 <__retarget_lock_init_recursive>
 80088f4:	bd10      	pop	{r4, pc}
 80088f6:	bf00      	nop
 80088f8:	08008a25 	.word	0x08008a25
 80088fc:	08008a47 	.word	0x08008a47
 8008900:	08008a7f 	.word	0x08008a7f
 8008904:	08008aa3 	.word	0x08008aa3
 8008908:	20003d18 	.word	0x20003d18

0800890c <stdio_exit_handler>:
 800890c:	4a02      	ldr	r2, [pc, #8]	@ (8008918 <stdio_exit_handler+0xc>)
 800890e:	4903      	ldr	r1, [pc, #12]	@ (800891c <stdio_exit_handler+0x10>)
 8008910:	4803      	ldr	r0, [pc, #12]	@ (8008920 <stdio_exit_handler+0x14>)
 8008912:	f000 b869 	b.w	80089e8 <_fwalk_sglue>
 8008916:	bf00      	nop
 8008918:	20000024 	.word	0x20000024
 800891c:	080090ad 	.word	0x080090ad
 8008920:	20000034 	.word	0x20000034

08008924 <cleanup_stdio>:
 8008924:	6841      	ldr	r1, [r0, #4]
 8008926:	4b0c      	ldr	r3, [pc, #48]	@ (8008958 <cleanup_stdio+0x34>)
 8008928:	b510      	push	{r4, lr}
 800892a:	4299      	cmp	r1, r3
 800892c:	4604      	mov	r4, r0
 800892e:	d001      	beq.n	8008934 <cleanup_stdio+0x10>
 8008930:	f000 fbbc 	bl	80090ac <_fflush_r>
 8008934:	68a1      	ldr	r1, [r4, #8]
 8008936:	4b09      	ldr	r3, [pc, #36]	@ (800895c <cleanup_stdio+0x38>)
 8008938:	4299      	cmp	r1, r3
 800893a:	d002      	beq.n	8008942 <cleanup_stdio+0x1e>
 800893c:	4620      	mov	r0, r4
 800893e:	f000 fbb5 	bl	80090ac <_fflush_r>
 8008942:	68e1      	ldr	r1, [r4, #12]
 8008944:	4b06      	ldr	r3, [pc, #24]	@ (8008960 <cleanup_stdio+0x3c>)
 8008946:	4299      	cmp	r1, r3
 8008948:	d004      	beq.n	8008954 <cleanup_stdio+0x30>
 800894a:	4620      	mov	r0, r4
 800894c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008950:	f000 bbac 	b.w	80090ac <_fflush_r>
 8008954:	bd10      	pop	{r4, pc}
 8008956:	bf00      	nop
 8008958:	20003d18 	.word	0x20003d18
 800895c:	20003d80 	.word	0x20003d80
 8008960:	20003de8 	.word	0x20003de8

08008964 <global_stdio_init.part.0>:
 8008964:	b510      	push	{r4, lr}
 8008966:	4b0b      	ldr	r3, [pc, #44]	@ (8008994 <global_stdio_init.part.0+0x30>)
 8008968:	4c0b      	ldr	r4, [pc, #44]	@ (8008998 <global_stdio_init.part.0+0x34>)
 800896a:	4a0c      	ldr	r2, [pc, #48]	@ (800899c <global_stdio_init.part.0+0x38>)
 800896c:	4620      	mov	r0, r4
 800896e:	601a      	str	r2, [r3, #0]
 8008970:	2104      	movs	r1, #4
 8008972:	2200      	movs	r2, #0
 8008974:	f7ff ff94 	bl	80088a0 <std>
 8008978:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800897c:	2201      	movs	r2, #1
 800897e:	2109      	movs	r1, #9
 8008980:	f7ff ff8e 	bl	80088a0 <std>
 8008984:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008988:	2202      	movs	r2, #2
 800898a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800898e:	2112      	movs	r1, #18
 8008990:	f7ff bf86 	b.w	80088a0 <std>
 8008994:	20003e50 	.word	0x20003e50
 8008998:	20003d18 	.word	0x20003d18
 800899c:	0800890d 	.word	0x0800890d

080089a0 <__sfp_lock_acquire>:
 80089a0:	4801      	ldr	r0, [pc, #4]	@ (80089a8 <__sfp_lock_acquire+0x8>)
 80089a2:	f000 b96a 	b.w	8008c7a <__retarget_lock_acquire_recursive>
 80089a6:	bf00      	nop
 80089a8:	20003e5a 	.word	0x20003e5a

080089ac <__sfp_lock_release>:
 80089ac:	4801      	ldr	r0, [pc, #4]	@ (80089b4 <__sfp_lock_release+0x8>)
 80089ae:	f000 b965 	b.w	8008c7c <__retarget_lock_release_recursive>
 80089b2:	bf00      	nop
 80089b4:	20003e5a 	.word	0x20003e5a

080089b8 <__sinit>:
 80089b8:	b510      	push	{r4, lr}
 80089ba:	4604      	mov	r4, r0
 80089bc:	f7ff fff0 	bl	80089a0 <__sfp_lock_acquire>
 80089c0:	6a23      	ldr	r3, [r4, #32]
 80089c2:	b11b      	cbz	r3, 80089cc <__sinit+0x14>
 80089c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089c8:	f7ff bff0 	b.w	80089ac <__sfp_lock_release>
 80089cc:	4b04      	ldr	r3, [pc, #16]	@ (80089e0 <__sinit+0x28>)
 80089ce:	6223      	str	r3, [r4, #32]
 80089d0:	4b04      	ldr	r3, [pc, #16]	@ (80089e4 <__sinit+0x2c>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d1f5      	bne.n	80089c4 <__sinit+0xc>
 80089d8:	f7ff ffc4 	bl	8008964 <global_stdio_init.part.0>
 80089dc:	e7f2      	b.n	80089c4 <__sinit+0xc>
 80089de:	bf00      	nop
 80089e0:	08008925 	.word	0x08008925
 80089e4:	20003e50 	.word	0x20003e50

080089e8 <_fwalk_sglue>:
 80089e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089ec:	4607      	mov	r7, r0
 80089ee:	4688      	mov	r8, r1
 80089f0:	4614      	mov	r4, r2
 80089f2:	2600      	movs	r6, #0
 80089f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80089f8:	f1b9 0901 	subs.w	r9, r9, #1
 80089fc:	d505      	bpl.n	8008a0a <_fwalk_sglue+0x22>
 80089fe:	6824      	ldr	r4, [r4, #0]
 8008a00:	2c00      	cmp	r4, #0
 8008a02:	d1f7      	bne.n	80089f4 <_fwalk_sglue+0xc>
 8008a04:	4630      	mov	r0, r6
 8008a06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a0a:	89ab      	ldrh	r3, [r5, #12]
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d907      	bls.n	8008a20 <_fwalk_sglue+0x38>
 8008a10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a14:	3301      	adds	r3, #1
 8008a16:	d003      	beq.n	8008a20 <_fwalk_sglue+0x38>
 8008a18:	4629      	mov	r1, r5
 8008a1a:	4638      	mov	r0, r7
 8008a1c:	47c0      	blx	r8
 8008a1e:	4306      	orrs	r6, r0
 8008a20:	3568      	adds	r5, #104	@ 0x68
 8008a22:	e7e9      	b.n	80089f8 <_fwalk_sglue+0x10>

08008a24 <__sread>:
 8008a24:	b510      	push	{r4, lr}
 8008a26:	460c      	mov	r4, r1
 8008a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a2c:	f000 f8c2 	bl	8008bb4 <_read_r>
 8008a30:	2800      	cmp	r0, #0
 8008a32:	bfab      	itete	ge
 8008a34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008a36:	89a3      	ldrhlt	r3, [r4, #12]
 8008a38:	181b      	addge	r3, r3, r0
 8008a3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008a3e:	bfac      	ite	ge
 8008a40:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008a42:	81a3      	strhlt	r3, [r4, #12]
 8008a44:	bd10      	pop	{r4, pc}

08008a46 <__swrite>:
 8008a46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a4a:	461f      	mov	r7, r3
 8008a4c:	898b      	ldrh	r3, [r1, #12]
 8008a4e:	4605      	mov	r5, r0
 8008a50:	05db      	lsls	r3, r3, #23
 8008a52:	460c      	mov	r4, r1
 8008a54:	4616      	mov	r6, r2
 8008a56:	d505      	bpl.n	8008a64 <__swrite+0x1e>
 8008a58:	2302      	movs	r3, #2
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a60:	f000 f896 	bl	8008b90 <_lseek_r>
 8008a64:	89a3      	ldrh	r3, [r4, #12]
 8008a66:	4632      	mov	r2, r6
 8008a68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008a6c:	81a3      	strh	r3, [r4, #12]
 8008a6e:	4628      	mov	r0, r5
 8008a70:	463b      	mov	r3, r7
 8008a72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a7a:	f000 b8c1 	b.w	8008c00 <_write_r>

08008a7e <__sseek>:
 8008a7e:	b510      	push	{r4, lr}
 8008a80:	460c      	mov	r4, r1
 8008a82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a86:	f000 f883 	bl	8008b90 <_lseek_r>
 8008a8a:	1c43      	adds	r3, r0, #1
 8008a8c:	89a3      	ldrh	r3, [r4, #12]
 8008a8e:	bf15      	itete	ne
 8008a90:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008a92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008a96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008a9a:	81a3      	strheq	r3, [r4, #12]
 8008a9c:	bf18      	it	ne
 8008a9e:	81a3      	strhne	r3, [r4, #12]
 8008aa0:	bd10      	pop	{r4, pc}

08008aa2 <__sclose>:
 8008aa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aa6:	f000 b863 	b.w	8008b70 <_close_r>

08008aaa <memcmp>:
 8008aaa:	b510      	push	{r4, lr}
 8008aac:	3901      	subs	r1, #1
 8008aae:	4402      	add	r2, r0
 8008ab0:	4290      	cmp	r0, r2
 8008ab2:	d101      	bne.n	8008ab8 <memcmp+0xe>
 8008ab4:	2000      	movs	r0, #0
 8008ab6:	e005      	b.n	8008ac4 <memcmp+0x1a>
 8008ab8:	7803      	ldrb	r3, [r0, #0]
 8008aba:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008abe:	42a3      	cmp	r3, r4
 8008ac0:	d001      	beq.n	8008ac6 <memcmp+0x1c>
 8008ac2:	1b18      	subs	r0, r3, r4
 8008ac4:	bd10      	pop	{r4, pc}
 8008ac6:	3001      	adds	r0, #1
 8008ac8:	e7f2      	b.n	8008ab0 <memcmp+0x6>

08008aca <memmove>:
 8008aca:	4288      	cmp	r0, r1
 8008acc:	b510      	push	{r4, lr}
 8008ace:	eb01 0402 	add.w	r4, r1, r2
 8008ad2:	d902      	bls.n	8008ada <memmove+0x10>
 8008ad4:	4284      	cmp	r4, r0
 8008ad6:	4623      	mov	r3, r4
 8008ad8:	d807      	bhi.n	8008aea <memmove+0x20>
 8008ada:	1e43      	subs	r3, r0, #1
 8008adc:	42a1      	cmp	r1, r4
 8008ade:	d008      	beq.n	8008af2 <memmove+0x28>
 8008ae0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ae4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ae8:	e7f8      	b.n	8008adc <memmove+0x12>
 8008aea:	4601      	mov	r1, r0
 8008aec:	4402      	add	r2, r0
 8008aee:	428a      	cmp	r2, r1
 8008af0:	d100      	bne.n	8008af4 <memmove+0x2a>
 8008af2:	bd10      	pop	{r4, pc}
 8008af4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008af8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008afc:	e7f7      	b.n	8008aee <memmove+0x24>

08008afe <memset>:
 8008afe:	4603      	mov	r3, r0
 8008b00:	4402      	add	r2, r0
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d100      	bne.n	8008b08 <memset+0xa>
 8008b06:	4770      	bx	lr
 8008b08:	f803 1b01 	strb.w	r1, [r3], #1
 8008b0c:	e7f9      	b.n	8008b02 <memset+0x4>

08008b0e <_raise_r>:
 8008b0e:	291f      	cmp	r1, #31
 8008b10:	b538      	push	{r3, r4, r5, lr}
 8008b12:	4605      	mov	r5, r0
 8008b14:	460c      	mov	r4, r1
 8008b16:	d904      	bls.n	8008b22 <_raise_r+0x14>
 8008b18:	2316      	movs	r3, #22
 8008b1a:	6003      	str	r3, [r0, #0]
 8008b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b20:	bd38      	pop	{r3, r4, r5, pc}
 8008b22:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008b24:	b112      	cbz	r2, 8008b2c <_raise_r+0x1e>
 8008b26:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b2a:	b94b      	cbnz	r3, 8008b40 <_raise_r+0x32>
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	f000 f865 	bl	8008bfc <_getpid_r>
 8008b32:	4622      	mov	r2, r4
 8008b34:	4601      	mov	r1, r0
 8008b36:	4628      	mov	r0, r5
 8008b38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b3c:	f000 b84c 	b.w	8008bd8 <_kill_r>
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d00a      	beq.n	8008b5a <_raise_r+0x4c>
 8008b44:	1c59      	adds	r1, r3, #1
 8008b46:	d103      	bne.n	8008b50 <_raise_r+0x42>
 8008b48:	2316      	movs	r3, #22
 8008b4a:	6003      	str	r3, [r0, #0]
 8008b4c:	2001      	movs	r0, #1
 8008b4e:	e7e7      	b.n	8008b20 <_raise_r+0x12>
 8008b50:	2100      	movs	r1, #0
 8008b52:	4620      	mov	r0, r4
 8008b54:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008b58:	4798      	blx	r3
 8008b5a:	2000      	movs	r0, #0
 8008b5c:	e7e0      	b.n	8008b20 <_raise_r+0x12>
	...

08008b60 <raise>:
 8008b60:	4b02      	ldr	r3, [pc, #8]	@ (8008b6c <raise+0xc>)
 8008b62:	4601      	mov	r1, r0
 8008b64:	6818      	ldr	r0, [r3, #0]
 8008b66:	f7ff bfd2 	b.w	8008b0e <_raise_r>
 8008b6a:	bf00      	nop
 8008b6c:	20000030 	.word	0x20000030

08008b70 <_close_r>:
 8008b70:	b538      	push	{r3, r4, r5, lr}
 8008b72:	2300      	movs	r3, #0
 8008b74:	4d05      	ldr	r5, [pc, #20]	@ (8008b8c <_close_r+0x1c>)
 8008b76:	4604      	mov	r4, r0
 8008b78:	4608      	mov	r0, r1
 8008b7a:	602b      	str	r3, [r5, #0]
 8008b7c:	f7fe f8a2 	bl	8006cc4 <_close>
 8008b80:	1c43      	adds	r3, r0, #1
 8008b82:	d102      	bne.n	8008b8a <_close_r+0x1a>
 8008b84:	682b      	ldr	r3, [r5, #0]
 8008b86:	b103      	cbz	r3, 8008b8a <_close_r+0x1a>
 8008b88:	6023      	str	r3, [r4, #0]
 8008b8a:	bd38      	pop	{r3, r4, r5, pc}
 8008b8c:	20003e54 	.word	0x20003e54

08008b90 <_lseek_r>:
 8008b90:	b538      	push	{r3, r4, r5, lr}
 8008b92:	4604      	mov	r4, r0
 8008b94:	4608      	mov	r0, r1
 8008b96:	4611      	mov	r1, r2
 8008b98:	2200      	movs	r2, #0
 8008b9a:	4d05      	ldr	r5, [pc, #20]	@ (8008bb0 <_lseek_r+0x20>)
 8008b9c:	602a      	str	r2, [r5, #0]
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	f7fe f89a 	bl	8006cd8 <_lseek>
 8008ba4:	1c43      	adds	r3, r0, #1
 8008ba6:	d102      	bne.n	8008bae <_lseek_r+0x1e>
 8008ba8:	682b      	ldr	r3, [r5, #0]
 8008baa:	b103      	cbz	r3, 8008bae <_lseek_r+0x1e>
 8008bac:	6023      	str	r3, [r4, #0]
 8008bae:	bd38      	pop	{r3, r4, r5, pc}
 8008bb0:	20003e54 	.word	0x20003e54

08008bb4 <_read_r>:
 8008bb4:	b538      	push	{r3, r4, r5, lr}
 8008bb6:	4604      	mov	r4, r0
 8008bb8:	4608      	mov	r0, r1
 8008bba:	4611      	mov	r1, r2
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	4d05      	ldr	r5, [pc, #20]	@ (8008bd4 <_read_r+0x20>)
 8008bc0:	602a      	str	r2, [r5, #0]
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	f7fe f848 	bl	8006c58 <_read>
 8008bc8:	1c43      	adds	r3, r0, #1
 8008bca:	d102      	bne.n	8008bd2 <_read_r+0x1e>
 8008bcc:	682b      	ldr	r3, [r5, #0]
 8008bce:	b103      	cbz	r3, 8008bd2 <_read_r+0x1e>
 8008bd0:	6023      	str	r3, [r4, #0]
 8008bd2:	bd38      	pop	{r3, r4, r5, pc}
 8008bd4:	20003e54 	.word	0x20003e54

08008bd8 <_kill_r>:
 8008bd8:	b538      	push	{r3, r4, r5, lr}
 8008bda:	2300      	movs	r3, #0
 8008bdc:	4d06      	ldr	r5, [pc, #24]	@ (8008bf8 <_kill_r+0x20>)
 8008bde:	4604      	mov	r4, r0
 8008be0:	4608      	mov	r0, r1
 8008be2:	4611      	mov	r1, r2
 8008be4:	602b      	str	r3, [r5, #0]
 8008be6:	f7fe f829 	bl	8006c3c <_kill>
 8008bea:	1c43      	adds	r3, r0, #1
 8008bec:	d102      	bne.n	8008bf4 <_kill_r+0x1c>
 8008bee:	682b      	ldr	r3, [r5, #0]
 8008bf0:	b103      	cbz	r3, 8008bf4 <_kill_r+0x1c>
 8008bf2:	6023      	str	r3, [r4, #0]
 8008bf4:	bd38      	pop	{r3, r4, r5, pc}
 8008bf6:	bf00      	nop
 8008bf8:	20003e54 	.word	0x20003e54

08008bfc <_getpid_r>:
 8008bfc:	f7fe b81c 	b.w	8006c38 <_getpid>

08008c00 <_write_r>:
 8008c00:	b538      	push	{r3, r4, r5, lr}
 8008c02:	4604      	mov	r4, r0
 8008c04:	4608      	mov	r0, r1
 8008c06:	4611      	mov	r1, r2
 8008c08:	2200      	movs	r2, #0
 8008c0a:	4d05      	ldr	r5, [pc, #20]	@ (8008c20 <_write_r+0x20>)
 8008c0c:	602a      	str	r2, [r5, #0]
 8008c0e:	461a      	mov	r2, r3
 8008c10:	f7fe f830 	bl	8006c74 <_write>
 8008c14:	1c43      	adds	r3, r0, #1
 8008c16:	d102      	bne.n	8008c1e <_write_r+0x1e>
 8008c18:	682b      	ldr	r3, [r5, #0]
 8008c1a:	b103      	cbz	r3, 8008c1e <_write_r+0x1e>
 8008c1c:	6023      	str	r3, [r4, #0]
 8008c1e:	bd38      	pop	{r3, r4, r5, pc}
 8008c20:	20003e54 	.word	0x20003e54

08008c24 <__errno>:
 8008c24:	4b01      	ldr	r3, [pc, #4]	@ (8008c2c <__errno+0x8>)
 8008c26:	6818      	ldr	r0, [r3, #0]
 8008c28:	4770      	bx	lr
 8008c2a:	bf00      	nop
 8008c2c:	20000030 	.word	0x20000030

08008c30 <__libc_init_array>:
 8008c30:	b570      	push	{r4, r5, r6, lr}
 8008c32:	2600      	movs	r6, #0
 8008c34:	4d0c      	ldr	r5, [pc, #48]	@ (8008c68 <__libc_init_array+0x38>)
 8008c36:	4c0d      	ldr	r4, [pc, #52]	@ (8008c6c <__libc_init_array+0x3c>)
 8008c38:	1b64      	subs	r4, r4, r5
 8008c3a:	10a4      	asrs	r4, r4, #2
 8008c3c:	42a6      	cmp	r6, r4
 8008c3e:	d109      	bne.n	8008c54 <__libc_init_array+0x24>
 8008c40:	f000 fe68 	bl	8009914 <_init>
 8008c44:	2600      	movs	r6, #0
 8008c46:	4d0a      	ldr	r5, [pc, #40]	@ (8008c70 <__libc_init_array+0x40>)
 8008c48:	4c0a      	ldr	r4, [pc, #40]	@ (8008c74 <__libc_init_array+0x44>)
 8008c4a:	1b64      	subs	r4, r4, r5
 8008c4c:	10a4      	asrs	r4, r4, #2
 8008c4e:	42a6      	cmp	r6, r4
 8008c50:	d105      	bne.n	8008c5e <__libc_init_array+0x2e>
 8008c52:	bd70      	pop	{r4, r5, r6, pc}
 8008c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c58:	4798      	blx	r3
 8008c5a:	3601      	adds	r6, #1
 8008c5c:	e7ee      	b.n	8008c3c <__libc_init_array+0xc>
 8008c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c62:	4798      	blx	r3
 8008c64:	3601      	adds	r6, #1
 8008c66:	e7f2      	b.n	8008c4e <__libc_init_array+0x1e>
 8008c68:	0800b674 	.word	0x0800b674
 8008c6c:	0800b674 	.word	0x0800b674
 8008c70:	0800b674 	.word	0x0800b674
 8008c74:	0800b67c 	.word	0x0800b67c

08008c78 <__retarget_lock_init_recursive>:
 8008c78:	4770      	bx	lr

08008c7a <__retarget_lock_acquire_recursive>:
 8008c7a:	4770      	bx	lr

08008c7c <__retarget_lock_release_recursive>:
 8008c7c:	4770      	bx	lr

08008c7e <memchr>:
 8008c7e:	4603      	mov	r3, r0
 8008c80:	b510      	push	{r4, lr}
 8008c82:	b2c9      	uxtb	r1, r1
 8008c84:	4402      	add	r2, r0
 8008c86:	4293      	cmp	r3, r2
 8008c88:	4618      	mov	r0, r3
 8008c8a:	d101      	bne.n	8008c90 <memchr+0x12>
 8008c8c:	2000      	movs	r0, #0
 8008c8e:	e003      	b.n	8008c98 <memchr+0x1a>
 8008c90:	7804      	ldrb	r4, [r0, #0]
 8008c92:	3301      	adds	r3, #1
 8008c94:	428c      	cmp	r4, r1
 8008c96:	d1f6      	bne.n	8008c86 <memchr+0x8>
 8008c98:	bd10      	pop	{r4, pc}

08008c9a <memcpy>:
 8008c9a:	440a      	add	r2, r1
 8008c9c:	4291      	cmp	r1, r2
 8008c9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ca2:	d100      	bne.n	8008ca6 <memcpy+0xc>
 8008ca4:	4770      	bx	lr
 8008ca6:	b510      	push	{r4, lr}
 8008ca8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cac:	4291      	cmp	r1, r2
 8008cae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cb2:	d1f9      	bne.n	8008ca8 <memcpy+0xe>
 8008cb4:	bd10      	pop	{r4, pc}
	...

08008cb8 <__register_exitproc>:
 8008cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cbc:	4d28      	ldr	r5, [pc, #160]	@ (8008d60 <__register_exitproc+0xa8>)
 8008cbe:	4607      	mov	r7, r0
 8008cc0:	6828      	ldr	r0, [r5, #0]
 8008cc2:	4691      	mov	r9, r2
 8008cc4:	460e      	mov	r6, r1
 8008cc6:	4698      	mov	r8, r3
 8008cc8:	f7ff ffd7 	bl	8008c7a <__retarget_lock_acquire_recursive>
 8008ccc:	4a25      	ldr	r2, [pc, #148]	@ (8008d64 <__register_exitproc+0xac>)
 8008cce:	6814      	ldr	r4, [r2, #0]
 8008cd0:	b93c      	cbnz	r4, 8008ce2 <__register_exitproc+0x2a>
 8008cd2:	4b25      	ldr	r3, [pc, #148]	@ (8008d68 <__register_exitproc+0xb0>)
 8008cd4:	6013      	str	r3, [r2, #0]
 8008cd6:	4a25      	ldr	r2, [pc, #148]	@ (8008d6c <__register_exitproc+0xb4>)
 8008cd8:	b112      	cbz	r2, 8008ce0 <__register_exitproc+0x28>
 8008cda:	6812      	ldr	r2, [r2, #0]
 8008cdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8008ce0:	4c21      	ldr	r4, [pc, #132]	@ (8008d68 <__register_exitproc+0xb0>)
 8008ce2:	6863      	ldr	r3, [r4, #4]
 8008ce4:	2b1f      	cmp	r3, #31
 8008ce6:	dd06      	ble.n	8008cf6 <__register_exitproc+0x3e>
 8008ce8:	6828      	ldr	r0, [r5, #0]
 8008cea:	f7ff ffc7 	bl	8008c7c <__retarget_lock_release_recursive>
 8008cee:	f04f 30ff 	mov.w	r0, #4294967295
 8008cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cf6:	b33f      	cbz	r7, 8008d48 <__register_exitproc+0x90>
 8008cf8:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8008cfc:	b968      	cbnz	r0, 8008d1a <__register_exitproc+0x62>
 8008cfe:	4b1c      	ldr	r3, [pc, #112]	@ (8008d70 <__register_exitproc+0xb8>)
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d0f1      	beq.n	8008ce8 <__register_exitproc+0x30>
 8008d04:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8008d08:	f000 f89a 	bl	8008e40 <malloc>
 8008d0c:	2800      	cmp	r0, #0
 8008d0e:	d0eb      	beq.n	8008ce8 <__register_exitproc+0x30>
 8008d10:	2300      	movs	r3, #0
 8008d12:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 8008d16:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	6863      	ldr	r3, [r4, #4]
 8008d1e:	2f02      	cmp	r7, #2
 8008d20:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8008d24:	fa02 f203 	lsl.w	r2, r2, r3
 8008d28:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8008d2c:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8008d30:	ea43 0302 	orr.w	r3, r3, r2
 8008d34:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 8008d38:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 8008d3c:	bf02      	ittt	eq
 8008d3e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 8008d42:	4313      	orreq	r3, r2
 8008d44:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 8008d48:	6863      	ldr	r3, [r4, #4]
 8008d4a:	6828      	ldr	r0, [r5, #0]
 8008d4c:	1c5a      	adds	r2, r3, #1
 8008d4e:	3302      	adds	r3, #2
 8008d50:	6062      	str	r2, [r4, #4]
 8008d52:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8008d56:	f7ff ff91 	bl	8008c7c <__retarget_lock_release_recursive>
 8008d5a:	2000      	movs	r0, #0
 8008d5c:	e7c9      	b.n	8008cf2 <__register_exitproc+0x3a>
 8008d5e:	bf00      	nop
 8008d60:	20000080 	.word	0x20000080
 8008d64:	20003ee8 	.word	0x20003ee8
 8008d68:	20003e5c 	.word	0x20003e5c
 8008d6c:	00000000 	.word	0x00000000
 8008d70:	08008e41 	.word	0x08008e41

08008d74 <__assert_func>:
 8008d74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d76:	4614      	mov	r4, r2
 8008d78:	461a      	mov	r2, r3
 8008d7a:	4b09      	ldr	r3, [pc, #36]	@ (8008da0 <__assert_func+0x2c>)
 8008d7c:	4605      	mov	r5, r0
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	68d8      	ldr	r0, [r3, #12]
 8008d82:	b954      	cbnz	r4, 8008d9a <__assert_func+0x26>
 8008d84:	4b07      	ldr	r3, [pc, #28]	@ (8008da4 <__assert_func+0x30>)
 8008d86:	461c      	mov	r4, r3
 8008d88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d8c:	9100      	str	r1, [sp, #0]
 8008d8e:	462b      	mov	r3, r5
 8008d90:	4905      	ldr	r1, [pc, #20]	@ (8008da8 <__assert_func+0x34>)
 8008d92:	f000 f9b3 	bl	80090fc <fiprintf>
 8008d96:	f7ff fd09 	bl	80087ac <abort>
 8008d9a:	4b04      	ldr	r3, [pc, #16]	@ (8008dac <__assert_func+0x38>)
 8008d9c:	e7f4      	b.n	8008d88 <__assert_func+0x14>
 8008d9e:	bf00      	nop
 8008da0:	20000030 	.word	0x20000030
 8008da4:	0800b636 	.word	0x0800b636
 8008da8:	0800b608 	.word	0x0800b608
 8008dac:	0800b5fb 	.word	0x0800b5fb

08008db0 <_free_r>:
 8008db0:	b538      	push	{r3, r4, r5, lr}
 8008db2:	4605      	mov	r5, r0
 8008db4:	2900      	cmp	r1, #0
 8008db6:	d040      	beq.n	8008e3a <_free_r+0x8a>
 8008db8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dbc:	1f0c      	subs	r4, r1, #4
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	bfb8      	it	lt
 8008dc2:	18e4      	addlt	r4, r4, r3
 8008dc4:	f000 f8e6 	bl	8008f94 <__malloc_lock>
 8008dc8:	4a1c      	ldr	r2, [pc, #112]	@ (8008e3c <_free_r+0x8c>)
 8008dca:	6813      	ldr	r3, [r2, #0]
 8008dcc:	b933      	cbnz	r3, 8008ddc <_free_r+0x2c>
 8008dce:	6063      	str	r3, [r4, #4]
 8008dd0:	6014      	str	r4, [r2, #0]
 8008dd2:	4628      	mov	r0, r5
 8008dd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008dd8:	f000 b8e2 	b.w	8008fa0 <__malloc_unlock>
 8008ddc:	42a3      	cmp	r3, r4
 8008dde:	d908      	bls.n	8008df2 <_free_r+0x42>
 8008de0:	6820      	ldr	r0, [r4, #0]
 8008de2:	1821      	adds	r1, r4, r0
 8008de4:	428b      	cmp	r3, r1
 8008de6:	bf01      	itttt	eq
 8008de8:	6819      	ldreq	r1, [r3, #0]
 8008dea:	685b      	ldreq	r3, [r3, #4]
 8008dec:	1809      	addeq	r1, r1, r0
 8008dee:	6021      	streq	r1, [r4, #0]
 8008df0:	e7ed      	b.n	8008dce <_free_r+0x1e>
 8008df2:	461a      	mov	r2, r3
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	b10b      	cbz	r3, 8008dfc <_free_r+0x4c>
 8008df8:	42a3      	cmp	r3, r4
 8008dfa:	d9fa      	bls.n	8008df2 <_free_r+0x42>
 8008dfc:	6811      	ldr	r1, [r2, #0]
 8008dfe:	1850      	adds	r0, r2, r1
 8008e00:	42a0      	cmp	r0, r4
 8008e02:	d10b      	bne.n	8008e1c <_free_r+0x6c>
 8008e04:	6820      	ldr	r0, [r4, #0]
 8008e06:	4401      	add	r1, r0
 8008e08:	1850      	adds	r0, r2, r1
 8008e0a:	4283      	cmp	r3, r0
 8008e0c:	6011      	str	r1, [r2, #0]
 8008e0e:	d1e0      	bne.n	8008dd2 <_free_r+0x22>
 8008e10:	6818      	ldr	r0, [r3, #0]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	4408      	add	r0, r1
 8008e16:	6010      	str	r0, [r2, #0]
 8008e18:	6053      	str	r3, [r2, #4]
 8008e1a:	e7da      	b.n	8008dd2 <_free_r+0x22>
 8008e1c:	d902      	bls.n	8008e24 <_free_r+0x74>
 8008e1e:	230c      	movs	r3, #12
 8008e20:	602b      	str	r3, [r5, #0]
 8008e22:	e7d6      	b.n	8008dd2 <_free_r+0x22>
 8008e24:	6820      	ldr	r0, [r4, #0]
 8008e26:	1821      	adds	r1, r4, r0
 8008e28:	428b      	cmp	r3, r1
 8008e2a:	bf01      	itttt	eq
 8008e2c:	6819      	ldreq	r1, [r3, #0]
 8008e2e:	685b      	ldreq	r3, [r3, #4]
 8008e30:	1809      	addeq	r1, r1, r0
 8008e32:	6021      	streq	r1, [r4, #0]
 8008e34:	6063      	str	r3, [r4, #4]
 8008e36:	6054      	str	r4, [r2, #4]
 8008e38:	e7cb      	b.n	8008dd2 <_free_r+0x22>
 8008e3a:	bd38      	pop	{r3, r4, r5, pc}
 8008e3c:	20003ef0 	.word	0x20003ef0

08008e40 <malloc>:
 8008e40:	4b02      	ldr	r3, [pc, #8]	@ (8008e4c <malloc+0xc>)
 8008e42:	4601      	mov	r1, r0
 8008e44:	6818      	ldr	r0, [r3, #0]
 8008e46:	f000 b825 	b.w	8008e94 <_malloc_r>
 8008e4a:	bf00      	nop
 8008e4c:	20000030 	.word	0x20000030

08008e50 <sbrk_aligned>:
 8008e50:	b570      	push	{r4, r5, r6, lr}
 8008e52:	4e0f      	ldr	r6, [pc, #60]	@ (8008e90 <sbrk_aligned+0x40>)
 8008e54:	460c      	mov	r4, r1
 8008e56:	6831      	ldr	r1, [r6, #0]
 8008e58:	4605      	mov	r5, r0
 8008e5a:	b911      	cbnz	r1, 8008e62 <sbrk_aligned+0x12>
 8008e5c:	f000 f960 	bl	8009120 <_sbrk_r>
 8008e60:	6030      	str	r0, [r6, #0]
 8008e62:	4621      	mov	r1, r4
 8008e64:	4628      	mov	r0, r5
 8008e66:	f000 f95b 	bl	8009120 <_sbrk_r>
 8008e6a:	1c43      	adds	r3, r0, #1
 8008e6c:	d103      	bne.n	8008e76 <sbrk_aligned+0x26>
 8008e6e:	f04f 34ff 	mov.w	r4, #4294967295
 8008e72:	4620      	mov	r0, r4
 8008e74:	bd70      	pop	{r4, r5, r6, pc}
 8008e76:	1cc4      	adds	r4, r0, #3
 8008e78:	f024 0403 	bic.w	r4, r4, #3
 8008e7c:	42a0      	cmp	r0, r4
 8008e7e:	d0f8      	beq.n	8008e72 <sbrk_aligned+0x22>
 8008e80:	1a21      	subs	r1, r4, r0
 8008e82:	4628      	mov	r0, r5
 8008e84:	f000 f94c 	bl	8009120 <_sbrk_r>
 8008e88:	3001      	adds	r0, #1
 8008e8a:	d1f2      	bne.n	8008e72 <sbrk_aligned+0x22>
 8008e8c:	e7ef      	b.n	8008e6e <sbrk_aligned+0x1e>
 8008e8e:	bf00      	nop
 8008e90:	20003eec 	.word	0x20003eec

08008e94 <_malloc_r>:
 8008e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e98:	1ccd      	adds	r5, r1, #3
 8008e9a:	f025 0503 	bic.w	r5, r5, #3
 8008e9e:	3508      	adds	r5, #8
 8008ea0:	2d0c      	cmp	r5, #12
 8008ea2:	bf38      	it	cc
 8008ea4:	250c      	movcc	r5, #12
 8008ea6:	2d00      	cmp	r5, #0
 8008ea8:	4606      	mov	r6, r0
 8008eaa:	db01      	blt.n	8008eb0 <_malloc_r+0x1c>
 8008eac:	42a9      	cmp	r1, r5
 8008eae:	d904      	bls.n	8008eba <_malloc_r+0x26>
 8008eb0:	230c      	movs	r3, #12
 8008eb2:	6033      	str	r3, [r6, #0]
 8008eb4:	2000      	movs	r0, #0
 8008eb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008eba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008f90 <_malloc_r+0xfc>
 8008ebe:	f000 f869 	bl	8008f94 <__malloc_lock>
 8008ec2:	f8d8 3000 	ldr.w	r3, [r8]
 8008ec6:	461c      	mov	r4, r3
 8008ec8:	bb44      	cbnz	r4, 8008f1c <_malloc_r+0x88>
 8008eca:	4629      	mov	r1, r5
 8008ecc:	4630      	mov	r0, r6
 8008ece:	f7ff ffbf 	bl	8008e50 <sbrk_aligned>
 8008ed2:	1c43      	adds	r3, r0, #1
 8008ed4:	4604      	mov	r4, r0
 8008ed6:	d158      	bne.n	8008f8a <_malloc_r+0xf6>
 8008ed8:	f8d8 4000 	ldr.w	r4, [r8]
 8008edc:	4627      	mov	r7, r4
 8008ede:	2f00      	cmp	r7, #0
 8008ee0:	d143      	bne.n	8008f6a <_malloc_r+0xd6>
 8008ee2:	2c00      	cmp	r4, #0
 8008ee4:	d04b      	beq.n	8008f7e <_malloc_r+0xea>
 8008ee6:	6823      	ldr	r3, [r4, #0]
 8008ee8:	4639      	mov	r1, r7
 8008eea:	4630      	mov	r0, r6
 8008eec:	eb04 0903 	add.w	r9, r4, r3
 8008ef0:	f000 f916 	bl	8009120 <_sbrk_r>
 8008ef4:	4581      	cmp	r9, r0
 8008ef6:	d142      	bne.n	8008f7e <_malloc_r+0xea>
 8008ef8:	6821      	ldr	r1, [r4, #0]
 8008efa:	4630      	mov	r0, r6
 8008efc:	1a6d      	subs	r5, r5, r1
 8008efe:	4629      	mov	r1, r5
 8008f00:	f7ff ffa6 	bl	8008e50 <sbrk_aligned>
 8008f04:	3001      	adds	r0, #1
 8008f06:	d03a      	beq.n	8008f7e <_malloc_r+0xea>
 8008f08:	6823      	ldr	r3, [r4, #0]
 8008f0a:	442b      	add	r3, r5
 8008f0c:	6023      	str	r3, [r4, #0]
 8008f0e:	f8d8 3000 	ldr.w	r3, [r8]
 8008f12:	685a      	ldr	r2, [r3, #4]
 8008f14:	bb62      	cbnz	r2, 8008f70 <_malloc_r+0xdc>
 8008f16:	f8c8 7000 	str.w	r7, [r8]
 8008f1a:	e00f      	b.n	8008f3c <_malloc_r+0xa8>
 8008f1c:	6822      	ldr	r2, [r4, #0]
 8008f1e:	1b52      	subs	r2, r2, r5
 8008f20:	d420      	bmi.n	8008f64 <_malloc_r+0xd0>
 8008f22:	2a0b      	cmp	r2, #11
 8008f24:	d917      	bls.n	8008f56 <_malloc_r+0xc2>
 8008f26:	1961      	adds	r1, r4, r5
 8008f28:	42a3      	cmp	r3, r4
 8008f2a:	6025      	str	r5, [r4, #0]
 8008f2c:	bf18      	it	ne
 8008f2e:	6059      	strne	r1, [r3, #4]
 8008f30:	6863      	ldr	r3, [r4, #4]
 8008f32:	bf08      	it	eq
 8008f34:	f8c8 1000 	streq.w	r1, [r8]
 8008f38:	5162      	str	r2, [r4, r5]
 8008f3a:	604b      	str	r3, [r1, #4]
 8008f3c:	4630      	mov	r0, r6
 8008f3e:	f000 f82f 	bl	8008fa0 <__malloc_unlock>
 8008f42:	f104 000b 	add.w	r0, r4, #11
 8008f46:	1d23      	adds	r3, r4, #4
 8008f48:	f020 0007 	bic.w	r0, r0, #7
 8008f4c:	1ac2      	subs	r2, r0, r3
 8008f4e:	bf1c      	itt	ne
 8008f50:	1a1b      	subne	r3, r3, r0
 8008f52:	50a3      	strne	r3, [r4, r2]
 8008f54:	e7af      	b.n	8008eb6 <_malloc_r+0x22>
 8008f56:	6862      	ldr	r2, [r4, #4]
 8008f58:	42a3      	cmp	r3, r4
 8008f5a:	bf0c      	ite	eq
 8008f5c:	f8c8 2000 	streq.w	r2, [r8]
 8008f60:	605a      	strne	r2, [r3, #4]
 8008f62:	e7eb      	b.n	8008f3c <_malloc_r+0xa8>
 8008f64:	4623      	mov	r3, r4
 8008f66:	6864      	ldr	r4, [r4, #4]
 8008f68:	e7ae      	b.n	8008ec8 <_malloc_r+0x34>
 8008f6a:	463c      	mov	r4, r7
 8008f6c:	687f      	ldr	r7, [r7, #4]
 8008f6e:	e7b6      	b.n	8008ede <_malloc_r+0x4a>
 8008f70:	461a      	mov	r2, r3
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	42a3      	cmp	r3, r4
 8008f76:	d1fb      	bne.n	8008f70 <_malloc_r+0xdc>
 8008f78:	2300      	movs	r3, #0
 8008f7a:	6053      	str	r3, [r2, #4]
 8008f7c:	e7de      	b.n	8008f3c <_malloc_r+0xa8>
 8008f7e:	230c      	movs	r3, #12
 8008f80:	4630      	mov	r0, r6
 8008f82:	6033      	str	r3, [r6, #0]
 8008f84:	f000 f80c 	bl	8008fa0 <__malloc_unlock>
 8008f88:	e794      	b.n	8008eb4 <_malloc_r+0x20>
 8008f8a:	6005      	str	r5, [r0, #0]
 8008f8c:	e7d6      	b.n	8008f3c <_malloc_r+0xa8>
 8008f8e:	bf00      	nop
 8008f90:	20003ef0 	.word	0x20003ef0

08008f94 <__malloc_lock>:
 8008f94:	4801      	ldr	r0, [pc, #4]	@ (8008f9c <__malloc_lock+0x8>)
 8008f96:	f7ff be70 	b.w	8008c7a <__retarget_lock_acquire_recursive>
 8008f9a:	bf00      	nop
 8008f9c:	20003e58 	.word	0x20003e58

08008fa0 <__malloc_unlock>:
 8008fa0:	4801      	ldr	r0, [pc, #4]	@ (8008fa8 <__malloc_unlock+0x8>)
 8008fa2:	f7ff be6b 	b.w	8008c7c <__retarget_lock_release_recursive>
 8008fa6:	bf00      	nop
 8008fa8:	20003e58 	.word	0x20003e58

08008fac <__sflush_r>:
 8008fac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fb2:	0716      	lsls	r6, r2, #28
 8008fb4:	4605      	mov	r5, r0
 8008fb6:	460c      	mov	r4, r1
 8008fb8:	d454      	bmi.n	8009064 <__sflush_r+0xb8>
 8008fba:	684b      	ldr	r3, [r1, #4]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	dc02      	bgt.n	8008fc6 <__sflush_r+0x1a>
 8008fc0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	dd48      	ble.n	8009058 <__sflush_r+0xac>
 8008fc6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008fc8:	2e00      	cmp	r6, #0
 8008fca:	d045      	beq.n	8009058 <__sflush_r+0xac>
 8008fcc:	2300      	movs	r3, #0
 8008fce:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008fd2:	682f      	ldr	r7, [r5, #0]
 8008fd4:	6a21      	ldr	r1, [r4, #32]
 8008fd6:	602b      	str	r3, [r5, #0]
 8008fd8:	d030      	beq.n	800903c <__sflush_r+0x90>
 8008fda:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008fdc:	89a3      	ldrh	r3, [r4, #12]
 8008fde:	0759      	lsls	r1, r3, #29
 8008fe0:	d505      	bpl.n	8008fee <__sflush_r+0x42>
 8008fe2:	6863      	ldr	r3, [r4, #4]
 8008fe4:	1ad2      	subs	r2, r2, r3
 8008fe6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008fe8:	b10b      	cbz	r3, 8008fee <__sflush_r+0x42>
 8008fea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008fec:	1ad2      	subs	r2, r2, r3
 8008fee:	2300      	movs	r3, #0
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008ff4:	6a21      	ldr	r1, [r4, #32]
 8008ff6:	47b0      	blx	r6
 8008ff8:	1c43      	adds	r3, r0, #1
 8008ffa:	89a3      	ldrh	r3, [r4, #12]
 8008ffc:	d106      	bne.n	800900c <__sflush_r+0x60>
 8008ffe:	6829      	ldr	r1, [r5, #0]
 8009000:	291d      	cmp	r1, #29
 8009002:	d82b      	bhi.n	800905c <__sflush_r+0xb0>
 8009004:	4a28      	ldr	r2, [pc, #160]	@ (80090a8 <__sflush_r+0xfc>)
 8009006:	410a      	asrs	r2, r1
 8009008:	07d6      	lsls	r6, r2, #31
 800900a:	d427      	bmi.n	800905c <__sflush_r+0xb0>
 800900c:	2200      	movs	r2, #0
 800900e:	6062      	str	r2, [r4, #4]
 8009010:	6922      	ldr	r2, [r4, #16]
 8009012:	04d9      	lsls	r1, r3, #19
 8009014:	6022      	str	r2, [r4, #0]
 8009016:	d504      	bpl.n	8009022 <__sflush_r+0x76>
 8009018:	1c42      	adds	r2, r0, #1
 800901a:	d101      	bne.n	8009020 <__sflush_r+0x74>
 800901c:	682b      	ldr	r3, [r5, #0]
 800901e:	b903      	cbnz	r3, 8009022 <__sflush_r+0x76>
 8009020:	6560      	str	r0, [r4, #84]	@ 0x54
 8009022:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009024:	602f      	str	r7, [r5, #0]
 8009026:	b1b9      	cbz	r1, 8009058 <__sflush_r+0xac>
 8009028:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800902c:	4299      	cmp	r1, r3
 800902e:	d002      	beq.n	8009036 <__sflush_r+0x8a>
 8009030:	4628      	mov	r0, r5
 8009032:	f7ff febd 	bl	8008db0 <_free_r>
 8009036:	2300      	movs	r3, #0
 8009038:	6363      	str	r3, [r4, #52]	@ 0x34
 800903a:	e00d      	b.n	8009058 <__sflush_r+0xac>
 800903c:	2301      	movs	r3, #1
 800903e:	4628      	mov	r0, r5
 8009040:	47b0      	blx	r6
 8009042:	4602      	mov	r2, r0
 8009044:	1c50      	adds	r0, r2, #1
 8009046:	d1c9      	bne.n	8008fdc <__sflush_r+0x30>
 8009048:	682b      	ldr	r3, [r5, #0]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d0c6      	beq.n	8008fdc <__sflush_r+0x30>
 800904e:	2b1d      	cmp	r3, #29
 8009050:	d001      	beq.n	8009056 <__sflush_r+0xaa>
 8009052:	2b16      	cmp	r3, #22
 8009054:	d11d      	bne.n	8009092 <__sflush_r+0xe6>
 8009056:	602f      	str	r7, [r5, #0]
 8009058:	2000      	movs	r0, #0
 800905a:	e021      	b.n	80090a0 <__sflush_r+0xf4>
 800905c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009060:	b21b      	sxth	r3, r3
 8009062:	e01a      	b.n	800909a <__sflush_r+0xee>
 8009064:	690f      	ldr	r7, [r1, #16]
 8009066:	2f00      	cmp	r7, #0
 8009068:	d0f6      	beq.n	8009058 <__sflush_r+0xac>
 800906a:	0793      	lsls	r3, r2, #30
 800906c:	bf18      	it	ne
 800906e:	2300      	movne	r3, #0
 8009070:	680e      	ldr	r6, [r1, #0]
 8009072:	bf08      	it	eq
 8009074:	694b      	ldreq	r3, [r1, #20]
 8009076:	1bf6      	subs	r6, r6, r7
 8009078:	600f      	str	r7, [r1, #0]
 800907a:	608b      	str	r3, [r1, #8]
 800907c:	2e00      	cmp	r6, #0
 800907e:	ddeb      	ble.n	8009058 <__sflush_r+0xac>
 8009080:	4633      	mov	r3, r6
 8009082:	463a      	mov	r2, r7
 8009084:	4628      	mov	r0, r5
 8009086:	6a21      	ldr	r1, [r4, #32]
 8009088:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800908c:	47e0      	blx	ip
 800908e:	2800      	cmp	r0, #0
 8009090:	dc07      	bgt.n	80090a2 <__sflush_r+0xf6>
 8009092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009096:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800909a:	f04f 30ff 	mov.w	r0, #4294967295
 800909e:	81a3      	strh	r3, [r4, #12]
 80090a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090a2:	4407      	add	r7, r0
 80090a4:	1a36      	subs	r6, r6, r0
 80090a6:	e7e9      	b.n	800907c <__sflush_r+0xd0>
 80090a8:	dfbffffe 	.word	0xdfbffffe

080090ac <_fflush_r>:
 80090ac:	b538      	push	{r3, r4, r5, lr}
 80090ae:	690b      	ldr	r3, [r1, #16]
 80090b0:	4605      	mov	r5, r0
 80090b2:	460c      	mov	r4, r1
 80090b4:	b913      	cbnz	r3, 80090bc <_fflush_r+0x10>
 80090b6:	2500      	movs	r5, #0
 80090b8:	4628      	mov	r0, r5
 80090ba:	bd38      	pop	{r3, r4, r5, pc}
 80090bc:	b118      	cbz	r0, 80090c6 <_fflush_r+0x1a>
 80090be:	6a03      	ldr	r3, [r0, #32]
 80090c0:	b90b      	cbnz	r3, 80090c6 <_fflush_r+0x1a>
 80090c2:	f7ff fc79 	bl	80089b8 <__sinit>
 80090c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d0f3      	beq.n	80090b6 <_fflush_r+0xa>
 80090ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80090d0:	07d0      	lsls	r0, r2, #31
 80090d2:	d404      	bmi.n	80090de <_fflush_r+0x32>
 80090d4:	0599      	lsls	r1, r3, #22
 80090d6:	d402      	bmi.n	80090de <_fflush_r+0x32>
 80090d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090da:	f7ff fdce 	bl	8008c7a <__retarget_lock_acquire_recursive>
 80090de:	4628      	mov	r0, r5
 80090e0:	4621      	mov	r1, r4
 80090e2:	f7ff ff63 	bl	8008fac <__sflush_r>
 80090e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80090e8:	4605      	mov	r5, r0
 80090ea:	07da      	lsls	r2, r3, #31
 80090ec:	d4e4      	bmi.n	80090b8 <_fflush_r+0xc>
 80090ee:	89a3      	ldrh	r3, [r4, #12]
 80090f0:	059b      	lsls	r3, r3, #22
 80090f2:	d4e1      	bmi.n	80090b8 <_fflush_r+0xc>
 80090f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090f6:	f7ff fdc1 	bl	8008c7c <__retarget_lock_release_recursive>
 80090fa:	e7dd      	b.n	80090b8 <_fflush_r+0xc>

080090fc <fiprintf>:
 80090fc:	b40e      	push	{r1, r2, r3}
 80090fe:	b503      	push	{r0, r1, lr}
 8009100:	4601      	mov	r1, r0
 8009102:	ab03      	add	r3, sp, #12
 8009104:	4805      	ldr	r0, [pc, #20]	@ (800911c <fiprintf+0x20>)
 8009106:	f853 2b04 	ldr.w	r2, [r3], #4
 800910a:	6800      	ldr	r0, [r0, #0]
 800910c:	9301      	str	r3, [sp, #4]
 800910e:	f000 f83f 	bl	8009190 <_vfiprintf_r>
 8009112:	b002      	add	sp, #8
 8009114:	f85d eb04 	ldr.w	lr, [sp], #4
 8009118:	b003      	add	sp, #12
 800911a:	4770      	bx	lr
 800911c:	20000030 	.word	0x20000030

08009120 <_sbrk_r>:
 8009120:	b538      	push	{r3, r4, r5, lr}
 8009122:	2300      	movs	r3, #0
 8009124:	4d05      	ldr	r5, [pc, #20]	@ (800913c <_sbrk_r+0x1c>)
 8009126:	4604      	mov	r4, r0
 8009128:	4608      	mov	r0, r1
 800912a:	602b      	str	r3, [r5, #0]
 800912c:	f7fd fdb0 	bl	8006c90 <_sbrk>
 8009130:	1c43      	adds	r3, r0, #1
 8009132:	d102      	bne.n	800913a <_sbrk_r+0x1a>
 8009134:	682b      	ldr	r3, [r5, #0]
 8009136:	b103      	cbz	r3, 800913a <_sbrk_r+0x1a>
 8009138:	6023      	str	r3, [r4, #0]
 800913a:	bd38      	pop	{r3, r4, r5, pc}
 800913c:	20003e54 	.word	0x20003e54

08009140 <__sfputc_r>:
 8009140:	6893      	ldr	r3, [r2, #8]
 8009142:	b410      	push	{r4}
 8009144:	3b01      	subs	r3, #1
 8009146:	2b00      	cmp	r3, #0
 8009148:	6093      	str	r3, [r2, #8]
 800914a:	da07      	bge.n	800915c <__sfputc_r+0x1c>
 800914c:	6994      	ldr	r4, [r2, #24]
 800914e:	42a3      	cmp	r3, r4
 8009150:	db01      	blt.n	8009156 <__sfputc_r+0x16>
 8009152:	290a      	cmp	r1, #10
 8009154:	d102      	bne.n	800915c <__sfputc_r+0x1c>
 8009156:	bc10      	pop	{r4}
 8009158:	f000 bac4 	b.w	80096e4 <__swbuf_r>
 800915c:	6813      	ldr	r3, [r2, #0]
 800915e:	1c58      	adds	r0, r3, #1
 8009160:	6010      	str	r0, [r2, #0]
 8009162:	7019      	strb	r1, [r3, #0]
 8009164:	4608      	mov	r0, r1
 8009166:	bc10      	pop	{r4}
 8009168:	4770      	bx	lr

0800916a <__sfputs_r>:
 800916a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800916c:	4606      	mov	r6, r0
 800916e:	460f      	mov	r7, r1
 8009170:	4614      	mov	r4, r2
 8009172:	18d5      	adds	r5, r2, r3
 8009174:	42ac      	cmp	r4, r5
 8009176:	d101      	bne.n	800917c <__sfputs_r+0x12>
 8009178:	2000      	movs	r0, #0
 800917a:	e007      	b.n	800918c <__sfputs_r+0x22>
 800917c:	463a      	mov	r2, r7
 800917e:	4630      	mov	r0, r6
 8009180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009184:	f7ff ffdc 	bl	8009140 <__sfputc_r>
 8009188:	1c43      	adds	r3, r0, #1
 800918a:	d1f3      	bne.n	8009174 <__sfputs_r+0xa>
 800918c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009190 <_vfiprintf_r>:
 8009190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009194:	460d      	mov	r5, r1
 8009196:	4614      	mov	r4, r2
 8009198:	4698      	mov	r8, r3
 800919a:	4606      	mov	r6, r0
 800919c:	b09d      	sub	sp, #116	@ 0x74
 800919e:	b118      	cbz	r0, 80091a8 <_vfiprintf_r+0x18>
 80091a0:	6a03      	ldr	r3, [r0, #32]
 80091a2:	b90b      	cbnz	r3, 80091a8 <_vfiprintf_r+0x18>
 80091a4:	f7ff fc08 	bl	80089b8 <__sinit>
 80091a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091aa:	07d9      	lsls	r1, r3, #31
 80091ac:	d405      	bmi.n	80091ba <_vfiprintf_r+0x2a>
 80091ae:	89ab      	ldrh	r3, [r5, #12]
 80091b0:	059a      	lsls	r2, r3, #22
 80091b2:	d402      	bmi.n	80091ba <_vfiprintf_r+0x2a>
 80091b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091b6:	f7ff fd60 	bl	8008c7a <__retarget_lock_acquire_recursive>
 80091ba:	89ab      	ldrh	r3, [r5, #12]
 80091bc:	071b      	lsls	r3, r3, #28
 80091be:	d501      	bpl.n	80091c4 <_vfiprintf_r+0x34>
 80091c0:	692b      	ldr	r3, [r5, #16]
 80091c2:	b99b      	cbnz	r3, 80091ec <_vfiprintf_r+0x5c>
 80091c4:	4629      	mov	r1, r5
 80091c6:	4630      	mov	r0, r6
 80091c8:	f000 faca 	bl	8009760 <__swsetup_r>
 80091cc:	b170      	cbz	r0, 80091ec <_vfiprintf_r+0x5c>
 80091ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091d0:	07dc      	lsls	r4, r3, #31
 80091d2:	d504      	bpl.n	80091de <_vfiprintf_r+0x4e>
 80091d4:	f04f 30ff 	mov.w	r0, #4294967295
 80091d8:	b01d      	add	sp, #116	@ 0x74
 80091da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091de:	89ab      	ldrh	r3, [r5, #12]
 80091e0:	0598      	lsls	r0, r3, #22
 80091e2:	d4f7      	bmi.n	80091d4 <_vfiprintf_r+0x44>
 80091e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091e6:	f7ff fd49 	bl	8008c7c <__retarget_lock_release_recursive>
 80091ea:	e7f3      	b.n	80091d4 <_vfiprintf_r+0x44>
 80091ec:	2300      	movs	r3, #0
 80091ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80091f0:	2320      	movs	r3, #32
 80091f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80091f6:	2330      	movs	r3, #48	@ 0x30
 80091f8:	f04f 0901 	mov.w	r9, #1
 80091fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009200:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80093ac <_vfiprintf_r+0x21c>
 8009204:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009208:	4623      	mov	r3, r4
 800920a:	469a      	mov	sl, r3
 800920c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009210:	b10a      	cbz	r2, 8009216 <_vfiprintf_r+0x86>
 8009212:	2a25      	cmp	r2, #37	@ 0x25
 8009214:	d1f9      	bne.n	800920a <_vfiprintf_r+0x7a>
 8009216:	ebba 0b04 	subs.w	fp, sl, r4
 800921a:	d00b      	beq.n	8009234 <_vfiprintf_r+0xa4>
 800921c:	465b      	mov	r3, fp
 800921e:	4622      	mov	r2, r4
 8009220:	4629      	mov	r1, r5
 8009222:	4630      	mov	r0, r6
 8009224:	f7ff ffa1 	bl	800916a <__sfputs_r>
 8009228:	3001      	adds	r0, #1
 800922a:	f000 80a7 	beq.w	800937c <_vfiprintf_r+0x1ec>
 800922e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009230:	445a      	add	r2, fp
 8009232:	9209      	str	r2, [sp, #36]	@ 0x24
 8009234:	f89a 3000 	ldrb.w	r3, [sl]
 8009238:	2b00      	cmp	r3, #0
 800923a:	f000 809f 	beq.w	800937c <_vfiprintf_r+0x1ec>
 800923e:	2300      	movs	r3, #0
 8009240:	f04f 32ff 	mov.w	r2, #4294967295
 8009244:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009248:	f10a 0a01 	add.w	sl, sl, #1
 800924c:	9304      	str	r3, [sp, #16]
 800924e:	9307      	str	r3, [sp, #28]
 8009250:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009254:	931a      	str	r3, [sp, #104]	@ 0x68
 8009256:	4654      	mov	r4, sl
 8009258:	2205      	movs	r2, #5
 800925a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800925e:	4853      	ldr	r0, [pc, #332]	@ (80093ac <_vfiprintf_r+0x21c>)
 8009260:	f7ff fd0d 	bl	8008c7e <memchr>
 8009264:	9a04      	ldr	r2, [sp, #16]
 8009266:	b9d8      	cbnz	r0, 80092a0 <_vfiprintf_r+0x110>
 8009268:	06d1      	lsls	r1, r2, #27
 800926a:	bf44      	itt	mi
 800926c:	2320      	movmi	r3, #32
 800926e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009272:	0713      	lsls	r3, r2, #28
 8009274:	bf44      	itt	mi
 8009276:	232b      	movmi	r3, #43	@ 0x2b
 8009278:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800927c:	f89a 3000 	ldrb.w	r3, [sl]
 8009280:	2b2a      	cmp	r3, #42	@ 0x2a
 8009282:	d015      	beq.n	80092b0 <_vfiprintf_r+0x120>
 8009284:	4654      	mov	r4, sl
 8009286:	2000      	movs	r0, #0
 8009288:	f04f 0c0a 	mov.w	ip, #10
 800928c:	9a07      	ldr	r2, [sp, #28]
 800928e:	4621      	mov	r1, r4
 8009290:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009294:	3b30      	subs	r3, #48	@ 0x30
 8009296:	2b09      	cmp	r3, #9
 8009298:	d94b      	bls.n	8009332 <_vfiprintf_r+0x1a2>
 800929a:	b1b0      	cbz	r0, 80092ca <_vfiprintf_r+0x13a>
 800929c:	9207      	str	r2, [sp, #28]
 800929e:	e014      	b.n	80092ca <_vfiprintf_r+0x13a>
 80092a0:	eba0 0308 	sub.w	r3, r0, r8
 80092a4:	fa09 f303 	lsl.w	r3, r9, r3
 80092a8:	4313      	orrs	r3, r2
 80092aa:	46a2      	mov	sl, r4
 80092ac:	9304      	str	r3, [sp, #16]
 80092ae:	e7d2      	b.n	8009256 <_vfiprintf_r+0xc6>
 80092b0:	9b03      	ldr	r3, [sp, #12]
 80092b2:	1d19      	adds	r1, r3, #4
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	9103      	str	r1, [sp, #12]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	bfbb      	ittet	lt
 80092bc:	425b      	neglt	r3, r3
 80092be:	f042 0202 	orrlt.w	r2, r2, #2
 80092c2:	9307      	strge	r3, [sp, #28]
 80092c4:	9307      	strlt	r3, [sp, #28]
 80092c6:	bfb8      	it	lt
 80092c8:	9204      	strlt	r2, [sp, #16]
 80092ca:	7823      	ldrb	r3, [r4, #0]
 80092cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80092ce:	d10a      	bne.n	80092e6 <_vfiprintf_r+0x156>
 80092d0:	7863      	ldrb	r3, [r4, #1]
 80092d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80092d4:	d132      	bne.n	800933c <_vfiprintf_r+0x1ac>
 80092d6:	9b03      	ldr	r3, [sp, #12]
 80092d8:	3402      	adds	r4, #2
 80092da:	1d1a      	adds	r2, r3, #4
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	9203      	str	r2, [sp, #12]
 80092e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80092e4:	9305      	str	r3, [sp, #20]
 80092e6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80093b0 <_vfiprintf_r+0x220>
 80092ea:	2203      	movs	r2, #3
 80092ec:	4650      	mov	r0, sl
 80092ee:	7821      	ldrb	r1, [r4, #0]
 80092f0:	f7ff fcc5 	bl	8008c7e <memchr>
 80092f4:	b138      	cbz	r0, 8009306 <_vfiprintf_r+0x176>
 80092f6:	2240      	movs	r2, #64	@ 0x40
 80092f8:	9b04      	ldr	r3, [sp, #16]
 80092fa:	eba0 000a 	sub.w	r0, r0, sl
 80092fe:	4082      	lsls	r2, r0
 8009300:	4313      	orrs	r3, r2
 8009302:	3401      	adds	r4, #1
 8009304:	9304      	str	r3, [sp, #16]
 8009306:	f814 1b01 	ldrb.w	r1, [r4], #1
 800930a:	2206      	movs	r2, #6
 800930c:	4829      	ldr	r0, [pc, #164]	@ (80093b4 <_vfiprintf_r+0x224>)
 800930e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009312:	f7ff fcb4 	bl	8008c7e <memchr>
 8009316:	2800      	cmp	r0, #0
 8009318:	d03f      	beq.n	800939a <_vfiprintf_r+0x20a>
 800931a:	4b27      	ldr	r3, [pc, #156]	@ (80093b8 <_vfiprintf_r+0x228>)
 800931c:	bb1b      	cbnz	r3, 8009366 <_vfiprintf_r+0x1d6>
 800931e:	9b03      	ldr	r3, [sp, #12]
 8009320:	3307      	adds	r3, #7
 8009322:	f023 0307 	bic.w	r3, r3, #7
 8009326:	3308      	adds	r3, #8
 8009328:	9303      	str	r3, [sp, #12]
 800932a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800932c:	443b      	add	r3, r7
 800932e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009330:	e76a      	b.n	8009208 <_vfiprintf_r+0x78>
 8009332:	460c      	mov	r4, r1
 8009334:	2001      	movs	r0, #1
 8009336:	fb0c 3202 	mla	r2, ip, r2, r3
 800933a:	e7a8      	b.n	800928e <_vfiprintf_r+0xfe>
 800933c:	2300      	movs	r3, #0
 800933e:	f04f 0c0a 	mov.w	ip, #10
 8009342:	4619      	mov	r1, r3
 8009344:	3401      	adds	r4, #1
 8009346:	9305      	str	r3, [sp, #20]
 8009348:	4620      	mov	r0, r4
 800934a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800934e:	3a30      	subs	r2, #48	@ 0x30
 8009350:	2a09      	cmp	r2, #9
 8009352:	d903      	bls.n	800935c <_vfiprintf_r+0x1cc>
 8009354:	2b00      	cmp	r3, #0
 8009356:	d0c6      	beq.n	80092e6 <_vfiprintf_r+0x156>
 8009358:	9105      	str	r1, [sp, #20]
 800935a:	e7c4      	b.n	80092e6 <_vfiprintf_r+0x156>
 800935c:	4604      	mov	r4, r0
 800935e:	2301      	movs	r3, #1
 8009360:	fb0c 2101 	mla	r1, ip, r1, r2
 8009364:	e7f0      	b.n	8009348 <_vfiprintf_r+0x1b8>
 8009366:	ab03      	add	r3, sp, #12
 8009368:	9300      	str	r3, [sp, #0]
 800936a:	462a      	mov	r2, r5
 800936c:	4630      	mov	r0, r6
 800936e:	4b13      	ldr	r3, [pc, #76]	@ (80093bc <_vfiprintf_r+0x22c>)
 8009370:	a904      	add	r1, sp, #16
 8009372:	f3af 8000 	nop.w
 8009376:	4607      	mov	r7, r0
 8009378:	1c78      	adds	r0, r7, #1
 800937a:	d1d6      	bne.n	800932a <_vfiprintf_r+0x19a>
 800937c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800937e:	07d9      	lsls	r1, r3, #31
 8009380:	d405      	bmi.n	800938e <_vfiprintf_r+0x1fe>
 8009382:	89ab      	ldrh	r3, [r5, #12]
 8009384:	059a      	lsls	r2, r3, #22
 8009386:	d402      	bmi.n	800938e <_vfiprintf_r+0x1fe>
 8009388:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800938a:	f7ff fc77 	bl	8008c7c <__retarget_lock_release_recursive>
 800938e:	89ab      	ldrh	r3, [r5, #12]
 8009390:	065b      	lsls	r3, r3, #25
 8009392:	f53f af1f 	bmi.w	80091d4 <_vfiprintf_r+0x44>
 8009396:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009398:	e71e      	b.n	80091d8 <_vfiprintf_r+0x48>
 800939a:	ab03      	add	r3, sp, #12
 800939c:	9300      	str	r3, [sp, #0]
 800939e:	462a      	mov	r2, r5
 80093a0:	4630      	mov	r0, r6
 80093a2:	4b06      	ldr	r3, [pc, #24]	@ (80093bc <_vfiprintf_r+0x22c>)
 80093a4:	a904      	add	r1, sp, #16
 80093a6:	f000 f87d 	bl	80094a4 <_printf_i>
 80093aa:	e7e4      	b.n	8009376 <_vfiprintf_r+0x1e6>
 80093ac:	0800b637 	.word	0x0800b637
 80093b0:	0800b63d 	.word	0x0800b63d
 80093b4:	0800b641 	.word	0x0800b641
 80093b8:	00000000 	.word	0x00000000
 80093bc:	0800916b 	.word	0x0800916b

080093c0 <_printf_common>:
 80093c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093c4:	4616      	mov	r6, r2
 80093c6:	4698      	mov	r8, r3
 80093c8:	688a      	ldr	r2, [r1, #8]
 80093ca:	690b      	ldr	r3, [r1, #16]
 80093cc:	4607      	mov	r7, r0
 80093ce:	4293      	cmp	r3, r2
 80093d0:	bfb8      	it	lt
 80093d2:	4613      	movlt	r3, r2
 80093d4:	6033      	str	r3, [r6, #0]
 80093d6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80093da:	460c      	mov	r4, r1
 80093dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80093e0:	b10a      	cbz	r2, 80093e6 <_printf_common+0x26>
 80093e2:	3301      	adds	r3, #1
 80093e4:	6033      	str	r3, [r6, #0]
 80093e6:	6823      	ldr	r3, [r4, #0]
 80093e8:	0699      	lsls	r1, r3, #26
 80093ea:	bf42      	ittt	mi
 80093ec:	6833      	ldrmi	r3, [r6, #0]
 80093ee:	3302      	addmi	r3, #2
 80093f0:	6033      	strmi	r3, [r6, #0]
 80093f2:	6825      	ldr	r5, [r4, #0]
 80093f4:	f015 0506 	ands.w	r5, r5, #6
 80093f8:	d106      	bne.n	8009408 <_printf_common+0x48>
 80093fa:	f104 0a19 	add.w	sl, r4, #25
 80093fe:	68e3      	ldr	r3, [r4, #12]
 8009400:	6832      	ldr	r2, [r6, #0]
 8009402:	1a9b      	subs	r3, r3, r2
 8009404:	42ab      	cmp	r3, r5
 8009406:	dc2b      	bgt.n	8009460 <_printf_common+0xa0>
 8009408:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800940c:	6822      	ldr	r2, [r4, #0]
 800940e:	3b00      	subs	r3, #0
 8009410:	bf18      	it	ne
 8009412:	2301      	movne	r3, #1
 8009414:	0692      	lsls	r2, r2, #26
 8009416:	d430      	bmi.n	800947a <_printf_common+0xba>
 8009418:	4641      	mov	r1, r8
 800941a:	4638      	mov	r0, r7
 800941c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009420:	47c8      	blx	r9
 8009422:	3001      	adds	r0, #1
 8009424:	d023      	beq.n	800946e <_printf_common+0xae>
 8009426:	6823      	ldr	r3, [r4, #0]
 8009428:	6922      	ldr	r2, [r4, #16]
 800942a:	f003 0306 	and.w	r3, r3, #6
 800942e:	2b04      	cmp	r3, #4
 8009430:	bf14      	ite	ne
 8009432:	2500      	movne	r5, #0
 8009434:	6833      	ldreq	r3, [r6, #0]
 8009436:	f04f 0600 	mov.w	r6, #0
 800943a:	bf08      	it	eq
 800943c:	68e5      	ldreq	r5, [r4, #12]
 800943e:	f104 041a 	add.w	r4, r4, #26
 8009442:	bf08      	it	eq
 8009444:	1aed      	subeq	r5, r5, r3
 8009446:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800944a:	bf08      	it	eq
 800944c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009450:	4293      	cmp	r3, r2
 8009452:	bfc4      	itt	gt
 8009454:	1a9b      	subgt	r3, r3, r2
 8009456:	18ed      	addgt	r5, r5, r3
 8009458:	42b5      	cmp	r5, r6
 800945a:	d11a      	bne.n	8009492 <_printf_common+0xd2>
 800945c:	2000      	movs	r0, #0
 800945e:	e008      	b.n	8009472 <_printf_common+0xb2>
 8009460:	2301      	movs	r3, #1
 8009462:	4652      	mov	r2, sl
 8009464:	4641      	mov	r1, r8
 8009466:	4638      	mov	r0, r7
 8009468:	47c8      	blx	r9
 800946a:	3001      	adds	r0, #1
 800946c:	d103      	bne.n	8009476 <_printf_common+0xb6>
 800946e:	f04f 30ff 	mov.w	r0, #4294967295
 8009472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009476:	3501      	adds	r5, #1
 8009478:	e7c1      	b.n	80093fe <_printf_common+0x3e>
 800947a:	2030      	movs	r0, #48	@ 0x30
 800947c:	18e1      	adds	r1, r4, r3
 800947e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009482:	1c5a      	adds	r2, r3, #1
 8009484:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009488:	4422      	add	r2, r4
 800948a:	3302      	adds	r3, #2
 800948c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009490:	e7c2      	b.n	8009418 <_printf_common+0x58>
 8009492:	2301      	movs	r3, #1
 8009494:	4622      	mov	r2, r4
 8009496:	4641      	mov	r1, r8
 8009498:	4638      	mov	r0, r7
 800949a:	47c8      	blx	r9
 800949c:	3001      	adds	r0, #1
 800949e:	d0e6      	beq.n	800946e <_printf_common+0xae>
 80094a0:	3601      	adds	r6, #1
 80094a2:	e7d9      	b.n	8009458 <_printf_common+0x98>

080094a4 <_printf_i>:
 80094a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094a8:	7e0f      	ldrb	r7, [r1, #24]
 80094aa:	4691      	mov	r9, r2
 80094ac:	2f78      	cmp	r7, #120	@ 0x78
 80094ae:	4680      	mov	r8, r0
 80094b0:	460c      	mov	r4, r1
 80094b2:	469a      	mov	sl, r3
 80094b4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80094b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80094ba:	d807      	bhi.n	80094cc <_printf_i+0x28>
 80094bc:	2f62      	cmp	r7, #98	@ 0x62
 80094be:	d80a      	bhi.n	80094d6 <_printf_i+0x32>
 80094c0:	2f00      	cmp	r7, #0
 80094c2:	f000 80d3 	beq.w	800966c <_printf_i+0x1c8>
 80094c6:	2f58      	cmp	r7, #88	@ 0x58
 80094c8:	f000 80ba 	beq.w	8009640 <_printf_i+0x19c>
 80094cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80094d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80094d4:	e03a      	b.n	800954c <_printf_i+0xa8>
 80094d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80094da:	2b15      	cmp	r3, #21
 80094dc:	d8f6      	bhi.n	80094cc <_printf_i+0x28>
 80094de:	a101      	add	r1, pc, #4	@ (adr r1, 80094e4 <_printf_i+0x40>)
 80094e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80094e4:	0800953d 	.word	0x0800953d
 80094e8:	08009551 	.word	0x08009551
 80094ec:	080094cd 	.word	0x080094cd
 80094f0:	080094cd 	.word	0x080094cd
 80094f4:	080094cd 	.word	0x080094cd
 80094f8:	080094cd 	.word	0x080094cd
 80094fc:	08009551 	.word	0x08009551
 8009500:	080094cd 	.word	0x080094cd
 8009504:	080094cd 	.word	0x080094cd
 8009508:	080094cd 	.word	0x080094cd
 800950c:	080094cd 	.word	0x080094cd
 8009510:	08009653 	.word	0x08009653
 8009514:	0800957b 	.word	0x0800957b
 8009518:	0800960d 	.word	0x0800960d
 800951c:	080094cd 	.word	0x080094cd
 8009520:	080094cd 	.word	0x080094cd
 8009524:	08009675 	.word	0x08009675
 8009528:	080094cd 	.word	0x080094cd
 800952c:	0800957b 	.word	0x0800957b
 8009530:	080094cd 	.word	0x080094cd
 8009534:	080094cd 	.word	0x080094cd
 8009538:	08009615 	.word	0x08009615
 800953c:	6833      	ldr	r3, [r6, #0]
 800953e:	1d1a      	adds	r2, r3, #4
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	6032      	str	r2, [r6, #0]
 8009544:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009548:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800954c:	2301      	movs	r3, #1
 800954e:	e09e      	b.n	800968e <_printf_i+0x1ea>
 8009550:	6833      	ldr	r3, [r6, #0]
 8009552:	6820      	ldr	r0, [r4, #0]
 8009554:	1d19      	adds	r1, r3, #4
 8009556:	6031      	str	r1, [r6, #0]
 8009558:	0606      	lsls	r6, r0, #24
 800955a:	d501      	bpl.n	8009560 <_printf_i+0xbc>
 800955c:	681d      	ldr	r5, [r3, #0]
 800955e:	e003      	b.n	8009568 <_printf_i+0xc4>
 8009560:	0645      	lsls	r5, r0, #25
 8009562:	d5fb      	bpl.n	800955c <_printf_i+0xb8>
 8009564:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009568:	2d00      	cmp	r5, #0
 800956a:	da03      	bge.n	8009574 <_printf_i+0xd0>
 800956c:	232d      	movs	r3, #45	@ 0x2d
 800956e:	426d      	negs	r5, r5
 8009570:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009574:	230a      	movs	r3, #10
 8009576:	4859      	ldr	r0, [pc, #356]	@ (80096dc <_printf_i+0x238>)
 8009578:	e011      	b.n	800959e <_printf_i+0xfa>
 800957a:	6821      	ldr	r1, [r4, #0]
 800957c:	6833      	ldr	r3, [r6, #0]
 800957e:	0608      	lsls	r0, r1, #24
 8009580:	f853 5b04 	ldr.w	r5, [r3], #4
 8009584:	d402      	bmi.n	800958c <_printf_i+0xe8>
 8009586:	0649      	lsls	r1, r1, #25
 8009588:	bf48      	it	mi
 800958a:	b2ad      	uxthmi	r5, r5
 800958c:	2f6f      	cmp	r7, #111	@ 0x6f
 800958e:	6033      	str	r3, [r6, #0]
 8009590:	bf14      	ite	ne
 8009592:	230a      	movne	r3, #10
 8009594:	2308      	moveq	r3, #8
 8009596:	4851      	ldr	r0, [pc, #324]	@ (80096dc <_printf_i+0x238>)
 8009598:	2100      	movs	r1, #0
 800959a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800959e:	6866      	ldr	r6, [r4, #4]
 80095a0:	2e00      	cmp	r6, #0
 80095a2:	bfa8      	it	ge
 80095a4:	6821      	ldrge	r1, [r4, #0]
 80095a6:	60a6      	str	r6, [r4, #8]
 80095a8:	bfa4      	itt	ge
 80095aa:	f021 0104 	bicge.w	r1, r1, #4
 80095ae:	6021      	strge	r1, [r4, #0]
 80095b0:	b90d      	cbnz	r5, 80095b6 <_printf_i+0x112>
 80095b2:	2e00      	cmp	r6, #0
 80095b4:	d04b      	beq.n	800964e <_printf_i+0x1aa>
 80095b6:	4616      	mov	r6, r2
 80095b8:	fbb5 f1f3 	udiv	r1, r5, r3
 80095bc:	fb03 5711 	mls	r7, r3, r1, r5
 80095c0:	5dc7      	ldrb	r7, [r0, r7]
 80095c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80095c6:	462f      	mov	r7, r5
 80095c8:	42bb      	cmp	r3, r7
 80095ca:	460d      	mov	r5, r1
 80095cc:	d9f4      	bls.n	80095b8 <_printf_i+0x114>
 80095ce:	2b08      	cmp	r3, #8
 80095d0:	d10b      	bne.n	80095ea <_printf_i+0x146>
 80095d2:	6823      	ldr	r3, [r4, #0]
 80095d4:	07df      	lsls	r7, r3, #31
 80095d6:	d508      	bpl.n	80095ea <_printf_i+0x146>
 80095d8:	6923      	ldr	r3, [r4, #16]
 80095da:	6861      	ldr	r1, [r4, #4]
 80095dc:	4299      	cmp	r1, r3
 80095de:	bfde      	ittt	le
 80095e0:	2330      	movle	r3, #48	@ 0x30
 80095e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80095e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80095ea:	1b92      	subs	r2, r2, r6
 80095ec:	6122      	str	r2, [r4, #16]
 80095ee:	464b      	mov	r3, r9
 80095f0:	4621      	mov	r1, r4
 80095f2:	4640      	mov	r0, r8
 80095f4:	f8cd a000 	str.w	sl, [sp]
 80095f8:	aa03      	add	r2, sp, #12
 80095fa:	f7ff fee1 	bl	80093c0 <_printf_common>
 80095fe:	3001      	adds	r0, #1
 8009600:	d14a      	bne.n	8009698 <_printf_i+0x1f4>
 8009602:	f04f 30ff 	mov.w	r0, #4294967295
 8009606:	b004      	add	sp, #16
 8009608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800960c:	6823      	ldr	r3, [r4, #0]
 800960e:	f043 0320 	orr.w	r3, r3, #32
 8009612:	6023      	str	r3, [r4, #0]
 8009614:	2778      	movs	r7, #120	@ 0x78
 8009616:	4832      	ldr	r0, [pc, #200]	@ (80096e0 <_printf_i+0x23c>)
 8009618:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800961c:	6823      	ldr	r3, [r4, #0]
 800961e:	6831      	ldr	r1, [r6, #0]
 8009620:	061f      	lsls	r7, r3, #24
 8009622:	f851 5b04 	ldr.w	r5, [r1], #4
 8009626:	d402      	bmi.n	800962e <_printf_i+0x18a>
 8009628:	065f      	lsls	r7, r3, #25
 800962a:	bf48      	it	mi
 800962c:	b2ad      	uxthmi	r5, r5
 800962e:	6031      	str	r1, [r6, #0]
 8009630:	07d9      	lsls	r1, r3, #31
 8009632:	bf44      	itt	mi
 8009634:	f043 0320 	orrmi.w	r3, r3, #32
 8009638:	6023      	strmi	r3, [r4, #0]
 800963a:	b11d      	cbz	r5, 8009644 <_printf_i+0x1a0>
 800963c:	2310      	movs	r3, #16
 800963e:	e7ab      	b.n	8009598 <_printf_i+0xf4>
 8009640:	4826      	ldr	r0, [pc, #152]	@ (80096dc <_printf_i+0x238>)
 8009642:	e7e9      	b.n	8009618 <_printf_i+0x174>
 8009644:	6823      	ldr	r3, [r4, #0]
 8009646:	f023 0320 	bic.w	r3, r3, #32
 800964a:	6023      	str	r3, [r4, #0]
 800964c:	e7f6      	b.n	800963c <_printf_i+0x198>
 800964e:	4616      	mov	r6, r2
 8009650:	e7bd      	b.n	80095ce <_printf_i+0x12a>
 8009652:	6833      	ldr	r3, [r6, #0]
 8009654:	6825      	ldr	r5, [r4, #0]
 8009656:	1d18      	adds	r0, r3, #4
 8009658:	6961      	ldr	r1, [r4, #20]
 800965a:	6030      	str	r0, [r6, #0]
 800965c:	062e      	lsls	r6, r5, #24
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	d501      	bpl.n	8009666 <_printf_i+0x1c2>
 8009662:	6019      	str	r1, [r3, #0]
 8009664:	e002      	b.n	800966c <_printf_i+0x1c8>
 8009666:	0668      	lsls	r0, r5, #25
 8009668:	d5fb      	bpl.n	8009662 <_printf_i+0x1be>
 800966a:	8019      	strh	r1, [r3, #0]
 800966c:	2300      	movs	r3, #0
 800966e:	4616      	mov	r6, r2
 8009670:	6123      	str	r3, [r4, #16]
 8009672:	e7bc      	b.n	80095ee <_printf_i+0x14a>
 8009674:	6833      	ldr	r3, [r6, #0]
 8009676:	2100      	movs	r1, #0
 8009678:	1d1a      	adds	r2, r3, #4
 800967a:	6032      	str	r2, [r6, #0]
 800967c:	681e      	ldr	r6, [r3, #0]
 800967e:	6862      	ldr	r2, [r4, #4]
 8009680:	4630      	mov	r0, r6
 8009682:	f7ff fafc 	bl	8008c7e <memchr>
 8009686:	b108      	cbz	r0, 800968c <_printf_i+0x1e8>
 8009688:	1b80      	subs	r0, r0, r6
 800968a:	6060      	str	r0, [r4, #4]
 800968c:	6863      	ldr	r3, [r4, #4]
 800968e:	6123      	str	r3, [r4, #16]
 8009690:	2300      	movs	r3, #0
 8009692:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009696:	e7aa      	b.n	80095ee <_printf_i+0x14a>
 8009698:	4632      	mov	r2, r6
 800969a:	4649      	mov	r1, r9
 800969c:	4640      	mov	r0, r8
 800969e:	6923      	ldr	r3, [r4, #16]
 80096a0:	47d0      	blx	sl
 80096a2:	3001      	adds	r0, #1
 80096a4:	d0ad      	beq.n	8009602 <_printf_i+0x15e>
 80096a6:	6823      	ldr	r3, [r4, #0]
 80096a8:	079b      	lsls	r3, r3, #30
 80096aa:	d413      	bmi.n	80096d4 <_printf_i+0x230>
 80096ac:	68e0      	ldr	r0, [r4, #12]
 80096ae:	9b03      	ldr	r3, [sp, #12]
 80096b0:	4298      	cmp	r0, r3
 80096b2:	bfb8      	it	lt
 80096b4:	4618      	movlt	r0, r3
 80096b6:	e7a6      	b.n	8009606 <_printf_i+0x162>
 80096b8:	2301      	movs	r3, #1
 80096ba:	4632      	mov	r2, r6
 80096bc:	4649      	mov	r1, r9
 80096be:	4640      	mov	r0, r8
 80096c0:	47d0      	blx	sl
 80096c2:	3001      	adds	r0, #1
 80096c4:	d09d      	beq.n	8009602 <_printf_i+0x15e>
 80096c6:	3501      	adds	r5, #1
 80096c8:	68e3      	ldr	r3, [r4, #12]
 80096ca:	9903      	ldr	r1, [sp, #12]
 80096cc:	1a5b      	subs	r3, r3, r1
 80096ce:	42ab      	cmp	r3, r5
 80096d0:	dcf2      	bgt.n	80096b8 <_printf_i+0x214>
 80096d2:	e7eb      	b.n	80096ac <_printf_i+0x208>
 80096d4:	2500      	movs	r5, #0
 80096d6:	f104 0619 	add.w	r6, r4, #25
 80096da:	e7f5      	b.n	80096c8 <_printf_i+0x224>
 80096dc:	0800b648 	.word	0x0800b648
 80096e0:	0800b659 	.word	0x0800b659

080096e4 <__swbuf_r>:
 80096e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096e6:	460e      	mov	r6, r1
 80096e8:	4614      	mov	r4, r2
 80096ea:	4605      	mov	r5, r0
 80096ec:	b118      	cbz	r0, 80096f6 <__swbuf_r+0x12>
 80096ee:	6a03      	ldr	r3, [r0, #32]
 80096f0:	b90b      	cbnz	r3, 80096f6 <__swbuf_r+0x12>
 80096f2:	f7ff f961 	bl	80089b8 <__sinit>
 80096f6:	69a3      	ldr	r3, [r4, #24]
 80096f8:	60a3      	str	r3, [r4, #8]
 80096fa:	89a3      	ldrh	r3, [r4, #12]
 80096fc:	071a      	lsls	r2, r3, #28
 80096fe:	d501      	bpl.n	8009704 <__swbuf_r+0x20>
 8009700:	6923      	ldr	r3, [r4, #16]
 8009702:	b943      	cbnz	r3, 8009716 <__swbuf_r+0x32>
 8009704:	4621      	mov	r1, r4
 8009706:	4628      	mov	r0, r5
 8009708:	f000 f82a 	bl	8009760 <__swsetup_r>
 800970c:	b118      	cbz	r0, 8009716 <__swbuf_r+0x32>
 800970e:	f04f 37ff 	mov.w	r7, #4294967295
 8009712:	4638      	mov	r0, r7
 8009714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009716:	6823      	ldr	r3, [r4, #0]
 8009718:	6922      	ldr	r2, [r4, #16]
 800971a:	b2f6      	uxtb	r6, r6
 800971c:	1a98      	subs	r0, r3, r2
 800971e:	6963      	ldr	r3, [r4, #20]
 8009720:	4637      	mov	r7, r6
 8009722:	4283      	cmp	r3, r0
 8009724:	dc05      	bgt.n	8009732 <__swbuf_r+0x4e>
 8009726:	4621      	mov	r1, r4
 8009728:	4628      	mov	r0, r5
 800972a:	f7ff fcbf 	bl	80090ac <_fflush_r>
 800972e:	2800      	cmp	r0, #0
 8009730:	d1ed      	bne.n	800970e <__swbuf_r+0x2a>
 8009732:	68a3      	ldr	r3, [r4, #8]
 8009734:	3b01      	subs	r3, #1
 8009736:	60a3      	str	r3, [r4, #8]
 8009738:	6823      	ldr	r3, [r4, #0]
 800973a:	1c5a      	adds	r2, r3, #1
 800973c:	6022      	str	r2, [r4, #0]
 800973e:	701e      	strb	r6, [r3, #0]
 8009740:	6962      	ldr	r2, [r4, #20]
 8009742:	1c43      	adds	r3, r0, #1
 8009744:	429a      	cmp	r2, r3
 8009746:	d004      	beq.n	8009752 <__swbuf_r+0x6e>
 8009748:	89a3      	ldrh	r3, [r4, #12]
 800974a:	07db      	lsls	r3, r3, #31
 800974c:	d5e1      	bpl.n	8009712 <__swbuf_r+0x2e>
 800974e:	2e0a      	cmp	r6, #10
 8009750:	d1df      	bne.n	8009712 <__swbuf_r+0x2e>
 8009752:	4621      	mov	r1, r4
 8009754:	4628      	mov	r0, r5
 8009756:	f7ff fca9 	bl	80090ac <_fflush_r>
 800975a:	2800      	cmp	r0, #0
 800975c:	d0d9      	beq.n	8009712 <__swbuf_r+0x2e>
 800975e:	e7d6      	b.n	800970e <__swbuf_r+0x2a>

08009760 <__swsetup_r>:
 8009760:	b538      	push	{r3, r4, r5, lr}
 8009762:	4b29      	ldr	r3, [pc, #164]	@ (8009808 <__swsetup_r+0xa8>)
 8009764:	4605      	mov	r5, r0
 8009766:	6818      	ldr	r0, [r3, #0]
 8009768:	460c      	mov	r4, r1
 800976a:	b118      	cbz	r0, 8009774 <__swsetup_r+0x14>
 800976c:	6a03      	ldr	r3, [r0, #32]
 800976e:	b90b      	cbnz	r3, 8009774 <__swsetup_r+0x14>
 8009770:	f7ff f922 	bl	80089b8 <__sinit>
 8009774:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009778:	0719      	lsls	r1, r3, #28
 800977a:	d422      	bmi.n	80097c2 <__swsetup_r+0x62>
 800977c:	06da      	lsls	r2, r3, #27
 800977e:	d407      	bmi.n	8009790 <__swsetup_r+0x30>
 8009780:	2209      	movs	r2, #9
 8009782:	602a      	str	r2, [r5, #0]
 8009784:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009788:	f04f 30ff 	mov.w	r0, #4294967295
 800978c:	81a3      	strh	r3, [r4, #12]
 800978e:	e033      	b.n	80097f8 <__swsetup_r+0x98>
 8009790:	0758      	lsls	r0, r3, #29
 8009792:	d512      	bpl.n	80097ba <__swsetup_r+0x5a>
 8009794:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009796:	b141      	cbz	r1, 80097aa <__swsetup_r+0x4a>
 8009798:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800979c:	4299      	cmp	r1, r3
 800979e:	d002      	beq.n	80097a6 <__swsetup_r+0x46>
 80097a0:	4628      	mov	r0, r5
 80097a2:	f7ff fb05 	bl	8008db0 <_free_r>
 80097a6:	2300      	movs	r3, #0
 80097a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80097aa:	89a3      	ldrh	r3, [r4, #12]
 80097ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80097b0:	81a3      	strh	r3, [r4, #12]
 80097b2:	2300      	movs	r3, #0
 80097b4:	6063      	str	r3, [r4, #4]
 80097b6:	6923      	ldr	r3, [r4, #16]
 80097b8:	6023      	str	r3, [r4, #0]
 80097ba:	89a3      	ldrh	r3, [r4, #12]
 80097bc:	f043 0308 	orr.w	r3, r3, #8
 80097c0:	81a3      	strh	r3, [r4, #12]
 80097c2:	6923      	ldr	r3, [r4, #16]
 80097c4:	b94b      	cbnz	r3, 80097da <__swsetup_r+0x7a>
 80097c6:	89a3      	ldrh	r3, [r4, #12]
 80097c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80097cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097d0:	d003      	beq.n	80097da <__swsetup_r+0x7a>
 80097d2:	4621      	mov	r1, r4
 80097d4:	4628      	mov	r0, r5
 80097d6:	f000 f83e 	bl	8009856 <__smakebuf_r>
 80097da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097de:	f013 0201 	ands.w	r2, r3, #1
 80097e2:	d00a      	beq.n	80097fa <__swsetup_r+0x9a>
 80097e4:	2200      	movs	r2, #0
 80097e6:	60a2      	str	r2, [r4, #8]
 80097e8:	6962      	ldr	r2, [r4, #20]
 80097ea:	4252      	negs	r2, r2
 80097ec:	61a2      	str	r2, [r4, #24]
 80097ee:	6922      	ldr	r2, [r4, #16]
 80097f0:	b942      	cbnz	r2, 8009804 <__swsetup_r+0xa4>
 80097f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80097f6:	d1c5      	bne.n	8009784 <__swsetup_r+0x24>
 80097f8:	bd38      	pop	{r3, r4, r5, pc}
 80097fa:	0799      	lsls	r1, r3, #30
 80097fc:	bf58      	it	pl
 80097fe:	6962      	ldrpl	r2, [r4, #20]
 8009800:	60a2      	str	r2, [r4, #8]
 8009802:	e7f4      	b.n	80097ee <__swsetup_r+0x8e>
 8009804:	2000      	movs	r0, #0
 8009806:	e7f7      	b.n	80097f8 <__swsetup_r+0x98>
 8009808:	20000030 	.word	0x20000030

0800980c <__swhatbuf_r>:
 800980c:	b570      	push	{r4, r5, r6, lr}
 800980e:	460c      	mov	r4, r1
 8009810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009814:	4615      	mov	r5, r2
 8009816:	2900      	cmp	r1, #0
 8009818:	461e      	mov	r6, r3
 800981a:	b096      	sub	sp, #88	@ 0x58
 800981c:	da0c      	bge.n	8009838 <__swhatbuf_r+0x2c>
 800981e:	89a3      	ldrh	r3, [r4, #12]
 8009820:	2100      	movs	r1, #0
 8009822:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009826:	bf14      	ite	ne
 8009828:	2340      	movne	r3, #64	@ 0x40
 800982a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800982e:	2000      	movs	r0, #0
 8009830:	6031      	str	r1, [r6, #0]
 8009832:	602b      	str	r3, [r5, #0]
 8009834:	b016      	add	sp, #88	@ 0x58
 8009836:	bd70      	pop	{r4, r5, r6, pc}
 8009838:	466a      	mov	r2, sp
 800983a:	f000 f849 	bl	80098d0 <_fstat_r>
 800983e:	2800      	cmp	r0, #0
 8009840:	dbed      	blt.n	800981e <__swhatbuf_r+0x12>
 8009842:	9901      	ldr	r1, [sp, #4]
 8009844:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009848:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800984c:	4259      	negs	r1, r3
 800984e:	4159      	adcs	r1, r3
 8009850:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009854:	e7eb      	b.n	800982e <__swhatbuf_r+0x22>

08009856 <__smakebuf_r>:
 8009856:	898b      	ldrh	r3, [r1, #12]
 8009858:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800985a:	079d      	lsls	r5, r3, #30
 800985c:	4606      	mov	r6, r0
 800985e:	460c      	mov	r4, r1
 8009860:	d507      	bpl.n	8009872 <__smakebuf_r+0x1c>
 8009862:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009866:	6023      	str	r3, [r4, #0]
 8009868:	6123      	str	r3, [r4, #16]
 800986a:	2301      	movs	r3, #1
 800986c:	6163      	str	r3, [r4, #20]
 800986e:	b003      	add	sp, #12
 8009870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009872:	466a      	mov	r2, sp
 8009874:	ab01      	add	r3, sp, #4
 8009876:	f7ff ffc9 	bl	800980c <__swhatbuf_r>
 800987a:	9f00      	ldr	r7, [sp, #0]
 800987c:	4605      	mov	r5, r0
 800987e:	4639      	mov	r1, r7
 8009880:	4630      	mov	r0, r6
 8009882:	f7ff fb07 	bl	8008e94 <_malloc_r>
 8009886:	b948      	cbnz	r0, 800989c <__smakebuf_r+0x46>
 8009888:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800988c:	059a      	lsls	r2, r3, #22
 800988e:	d4ee      	bmi.n	800986e <__smakebuf_r+0x18>
 8009890:	f023 0303 	bic.w	r3, r3, #3
 8009894:	f043 0302 	orr.w	r3, r3, #2
 8009898:	81a3      	strh	r3, [r4, #12]
 800989a:	e7e2      	b.n	8009862 <__smakebuf_r+0xc>
 800989c:	89a3      	ldrh	r3, [r4, #12]
 800989e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80098a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098a6:	81a3      	strh	r3, [r4, #12]
 80098a8:	9b01      	ldr	r3, [sp, #4]
 80098aa:	6020      	str	r0, [r4, #0]
 80098ac:	b15b      	cbz	r3, 80098c6 <__smakebuf_r+0x70>
 80098ae:	4630      	mov	r0, r6
 80098b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098b4:	f000 f81e 	bl	80098f4 <_isatty_r>
 80098b8:	b128      	cbz	r0, 80098c6 <__smakebuf_r+0x70>
 80098ba:	89a3      	ldrh	r3, [r4, #12]
 80098bc:	f023 0303 	bic.w	r3, r3, #3
 80098c0:	f043 0301 	orr.w	r3, r3, #1
 80098c4:	81a3      	strh	r3, [r4, #12]
 80098c6:	89a3      	ldrh	r3, [r4, #12]
 80098c8:	431d      	orrs	r5, r3
 80098ca:	81a5      	strh	r5, [r4, #12]
 80098cc:	e7cf      	b.n	800986e <__smakebuf_r+0x18>
	...

080098d0 <_fstat_r>:
 80098d0:	b538      	push	{r3, r4, r5, lr}
 80098d2:	2300      	movs	r3, #0
 80098d4:	4d06      	ldr	r5, [pc, #24]	@ (80098f0 <_fstat_r+0x20>)
 80098d6:	4604      	mov	r4, r0
 80098d8:	4608      	mov	r0, r1
 80098da:	4611      	mov	r1, r2
 80098dc:	602b      	str	r3, [r5, #0]
 80098de:	f7fd f9f4 	bl	8006cca <_fstat>
 80098e2:	1c43      	adds	r3, r0, #1
 80098e4:	d102      	bne.n	80098ec <_fstat_r+0x1c>
 80098e6:	682b      	ldr	r3, [r5, #0]
 80098e8:	b103      	cbz	r3, 80098ec <_fstat_r+0x1c>
 80098ea:	6023      	str	r3, [r4, #0]
 80098ec:	bd38      	pop	{r3, r4, r5, pc}
 80098ee:	bf00      	nop
 80098f0:	20003e54 	.word	0x20003e54

080098f4 <_isatty_r>:
 80098f4:	b538      	push	{r3, r4, r5, lr}
 80098f6:	2300      	movs	r3, #0
 80098f8:	4d05      	ldr	r5, [pc, #20]	@ (8009910 <_isatty_r+0x1c>)
 80098fa:	4604      	mov	r4, r0
 80098fc:	4608      	mov	r0, r1
 80098fe:	602b      	str	r3, [r5, #0]
 8009900:	f7fd f9e8 	bl	8006cd4 <_isatty>
 8009904:	1c43      	adds	r3, r0, #1
 8009906:	d102      	bne.n	800990e <_isatty_r+0x1a>
 8009908:	682b      	ldr	r3, [r5, #0]
 800990a:	b103      	cbz	r3, 800990e <_isatty_r+0x1a>
 800990c:	6023      	str	r3, [r4, #0]
 800990e:	bd38      	pop	{r3, r4, r5, pc}
 8009910:	20003e54 	.word	0x20003e54

08009914 <_init>:
 8009914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009916:	bf00      	nop
 8009918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800991a:	bc08      	pop	{r3}
 800991c:	469e      	mov	lr, r3
 800991e:	4770      	bx	lr

08009920 <_fini>:
 8009920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009922:	bf00      	nop
 8009924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009926:	bc08      	pop	{r3}
 8009928:	469e      	mov	lr, r3
 800992a:	4770      	bx	lr
